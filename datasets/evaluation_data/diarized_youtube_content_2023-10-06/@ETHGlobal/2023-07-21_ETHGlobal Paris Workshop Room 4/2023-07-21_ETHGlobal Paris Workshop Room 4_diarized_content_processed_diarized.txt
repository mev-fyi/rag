00:22:34.250 - 00:22:56.466, Speaker A: Thanks. Thanks everyone for coming in. Let me know if you can see my screen. I think you can, right? Awesome. All right, so I'm Harsh, founder and project lead of Push Protocol. What does push protocol do? That's what we are going to find out in this workshop. And then we are going to dive right into coding.
00:22:56.466 - 00:23:44.094, Speaker A: So let's get started. So what is push protocol? Well, Push Protocol is your decentralized communication middleware using which any smart contract, any protocol, any wrap, any backend can send notifications, gaslessly and that are directly tied to a Wallet address. Why so? Because when you are interacting or when Web Three user is interacting with the protocol, they are interacting with a Web Three wallet address. And therefore notifications or messaging directly to Wallet address makes so much sense than any other sort of alerts. And that's what Push did. We started notification for Web Three back in 2020 from ETH Global. So we are ETH Global alumni.
00:23:44.094 - 00:24:25.220, Speaker A: Hackers. All right, so just to elaborate a little bit more, why so Dows? They are not able to talk whenever governance proposal happens, whenever anything happens around voting. There's no way that you can notify those voters or wallet addresses. And that's where Push helps DeFi loan, liquidates farming epochs. All of these things can be eliminated if you're using Push notification to Wallet addresses. And it gets interesting, like if you are even building an L2 to L One bridge, if you are even targeting NFDS, anything and everything that we do happens from notification. And that's what we want you to use in Web Three as well.
00:24:25.220 - 00:24:44.374, Speaker A: Yeah, I already spoke about the solution, but a little bit about it. The solution is blockchain. Agnostic. Platform. Agnostic. It's open yet secure and it works with DApps, it works with Back End, it works with Smart contract, whatever you are using. All right? Right.
00:24:44.374 - 00:24:51.510, Speaker A: After that we realize that once you do notifications, you have something that we use on daily basis, which is WhatsApp? And telegram.
00:24:51.590 - 00:24:52.074, Speaker B: Right?
00:24:52.192 - 00:25:30.754, Speaker A: And that is messaging. So notification usually happens from a protocol to user perspective or a one way communication. And messaging is what drives the social nature of our everyday life. So think about it when we are talking on WhatsApp we are talking by a messaging and we are utilizing notification for the engagement and that is the idea of Push chat as well. You can basically use Pushchat to create support chats. You can even token gate and create a very unique Web Three native Dow chat or you can use it in your Web Three social. And of course Push chat is available right now to build or chat.
00:25:30.754 - 00:26:13.970, Speaker A: The SDKs are out. And as I said, the group chat enables public or private token gating, transaction gating and so much more. So yeah, just by using these two tools, we actually are proud to say that we transformed or terraformed a Web Three communication era. We have from 2020, Eat Global to now, we have sent over 45 million notifications. We have over 95,000 subscribers and over 650 plus integration, some of which are on your screen. We power notifications and messaging for a lot of partners. Uniswap or socially gitcoin, polygon are some of our favorites.
00:26:13.970 - 00:26:52.400, Speaker A: All right, so what's next before we dive into the workshop? What we have made a culture is to announce products around Eat Global, because we started from Eat Global, right? So we launched push notifications at Eat Global 2020. We launched push notifications or push chat at eat. Bogota 2022. Next came Push Video, which is like a FaceTime level video that we launched at Tokyo 2023. And we have a very special video which we are sharing with all of you guys about what's coming next.
00:27:05.210 - 00:27:24.286, Speaker C: Creative.
00:27:24.418 - 00:28:14.220, Speaker A: So yeah, we are launching push pieces right from Eat Global Paris 2023. What is push pieces? Well, it's just like Twitter spaces, but for Web three. Peer to peer supports any identity, including wallets, including polygon, crypto profile, any NFT profile even. And it can be access controlled, which means that these spaces can be token gated, NFT gated, even when someone is listening or someone is. So very cool things that you can do with this. And yeah, just to announce our messaging and Twitter space launch partners, they are revised Socially Xenon Lynch Lensplay. These are playing around Web Three socials, and we would love you guys to check them out.
00:28:14.220 - 00:28:49.030, Speaker A: All right, time for the demo. The demo video is not accessible, but that's cool. Thankfully, I basically did a rework on my technical talk, so we can get started directly from the workshop. All right, how to do notifications, right? And before that, I'll just put this slide out. So there's a live workshop and live discord link in case you guys want to join that. I will show it out to you guys again. So you don't have to really scan it right now.
00:28:49.030 - 00:29:27.250, Speaker A: But yeah, to get started, let's talk about notification first. So, notification sending notifications is extremely easy. All you have to do first is you have to activate your protocol on our protocol, and the best way to do it is from the tap. When you do that, we call you as a channel. And I'll come to why channels are important. But as you see, when I go to staging push and I'm signed in with a wallet address, I see all these channels. And channels are important because we don't want user to be spammed, right? We want users to be opted in to notifications, just like how Web Two does it.
00:29:27.250 - 00:29:48.138, Speaker A: So over here, when I go to channels, I can see all the channels. Let's say I want to opt into Ryan's channel. It's looking interesting, so I just click on opt in. This is, again, a protocol level event. I'm just gaslessly signing everything. You don't even have to come to the tab to do it. You can do it from your front end as well.
00:29:48.138 - 00:30:31.506, Speaker A: But yeah, once I'm opted in, I'm all ready to receive notification from Ryan's channel. When you have to send notification, you have to create a channel. I've already created one, but if you go over here, you'll see create a channel instead of the channel name and you can just walk down the steps to create the channel. It's very easy, just five steps, making sure that you own the protocol Wallet address. That's all what Push wants to know. Okay, once you have the channel, you can send notification from anywhere. Over here, we are going to send it out from the DAP itself first and then we are going to go deeper and deeper.
00:30:31.506 - 00:31:20.038, Speaker A: So let's do he global hackers and notification doesn't have to be just text, you can do so much more with it. You can basically also attach a YouTube link or an image link or encrypted transaction, whatever you want to do. So over here I want to attach a cat meme because cats so perfect. So I'm just going to paste this as a media URL. It will show me the preview. I'm selecting broadcast. Broadcast means that I'm going to send this notification to all the users who opted into my channel.
00:31:20.038 - 00:32:11.650, Speaker A: But there's targeted which is directly to a single Wallet address and there's subset as well, which is I'm going to send a notification to a part of the Wallet addresses that have subscribed. But yeah, let's do cast, hit send notification, just sign it gaslessly and you have the notification delivered as well. Because I have opted into my own channel. So you can see it over here. But not only that, you can see notifications everywhere where they are integrated, so you can see notifications on the extension. And very excited to announce that you will be seeing these notifications and chat on Unstoppable domain website and mobile app as well. We recently announced enabling messaging and notification for 4 million of their Wallet addresses.
00:32:11.650 - 00:33:18.090, Speaker A: So it's totally interoperable, it's totally web3. So yeah, just try it out. So yeah, coming back, this is one way to send notification, but this is basically a manual way how to do it via programmatically. So the first thing you need to do or your best bet is going to Docs push and once you are there, you can go to developer Docs and you have everything over here on how to get started with the channel push notification, web3. And you can even see how to send notification from so many other things, like from a smart contract from Push SDK, from Push DAP, even using Showrunners which is basically a scaffold framework that we have to get you going in an instant. And using Subgraph as well because Subgraph and Graph and Push, they work together. So let's see how to send notification from Push SDK.
00:33:18.090 - 00:34:13.440, Speaker A: So I've prepared some of the things, but one thing like only couple of things you have to keep in mind. First you need to make sure that you're going to our GitHub and you're cloning push SDK. Push SDK has all the examples about everything. So it really, really helps to clone it out. That's what I've done. And the other thing I've done is I've just created a boilerplate NPM repo just in advance to show you how we can do cool things with notifications and with chat. All right, so over here I've just opened the push SDK and what I'm going to do is I am going to go to packages, I'm going to go to examples back end node, but there are examples of front end as well.
00:34:13.440 - 00:35:01.380, Speaker A: And I am going to try hitting notifications. And over here I have the example of all the things that the notification can enable and how to use them. The scroll is not working. Hold on, let me just restart Vs code. All right. Okay, as I said, notification index and yeah, cool. So we can see all the ways by which we can send notifications.
00:35:03.260 - 00:35:03.912, Speaker D: Get.
00:35:04.046 - 00:35:59.176, Speaker A: Channel, get subscription, opt in, opt out, all of these things are here. But for this example, let's try to first get my notifications internally. The function has been named as get feeds. But all I have to do is I'll just copy this function out and this is a boilerplate I have created. So I've just imported the APIs of push protocol import. We use something called a keep ten format because push is web3 agnostic, which means that it can deliver notification not only to ethereum but to finance, to solana, whatever. And that's why Caped in because Cape Ten defines exact blockchain address, not exact ethereum address.
00:35:59.176 - 00:36:18.136, Speaker A: So EIP one five, five is EVM, five is guru and then you have the address and yeah, that's about it. This is just one line of code. And once I do ayan start over.
00:36:18.178 - 00:36:18.770, Speaker E: Here.
00:36:22.140 - 00:36:43.950, Speaker A: Yeah, I can see all the notifications that have been sent. So that's retrieving notifications. Let's look at one more example from notification site, which is sending notifications out. I think my Vs code is.
00:36:46.590 - 00:36:46.906, Speaker E: A.
00:36:46.928 - 00:37:11.700, Speaker A: Little buggy, but yeah, what do we want to do? We want to send a direct payload to a single recipient. So let's see that. So, yeah, again, extremely easy to do just one line of code, a couple of lines of code just because we want to do console log as well.
00:37:12.390 - 00:37:13.090, Speaker E: Cool.
00:37:13.240 - 00:37:56.926, Speaker A: So I'm using the push API to send notifications. Who's the signer? My channel is the signer. If we want, we can also have delegate signers, which basically means if we go back to our channel, not only we can send notification from our channel wallet, we can add delegates as well and that delegates can be different wallet that can send notification on behalf of our channel. Just in case you are using back end and you don't want the private key to be in the back end as well. You can use this to add an additional form of security layer. But for now we have already doxed my private key. So signer will be the signer channel.
00:37:56.926 - 00:38:26.986, Speaker A: Type three is targeted notification. Again, if you go to documentation, you will see all the notification standards and how to use them. So over here you can see notification standards advanced and basic. They will tell you what are the types and how to use it. You can even actually go ahead and define your content to have bold italics or whatever. But yeah, check that out. Coming back.
00:38:26.986 - 00:39:32.094, Speaker A: Type three is targeted. We want to send a direct payload to the notification wallet. Push basically supports any storage protocol and that basically means that you can send notification from smart contract, from IPFS, from a direct payload or anything else. That basically is what identity type is because we are sending it not from a smart contract but directly as a JSON. We basically say that then we have Notification title and body. We will say E global cats and hackers notification title and body and payload, title and body, they can be different, but in most of the time, people usually choose to have the same thing. So notification is something that you see on screen and the payload is something that you see when you go inside.
00:39:32.094 - 00:40:30.154, Speaker A: Any app that is supporting Push, sometimes it's different because it can be a video call, right? So notification will be someone is calling you, but when you go inside, that might be the face of the person or the real life feed. So that's why recipient, I want to send this to the recipient, which is my channel address only. So I'll just do you know what, let me have the recipient. Yeah, so recipient in this case because I'm just sending notification to me, that's why it's the signer channel address. But it can be any address and environment should be staging. So I'll just do this and that is it. If I run and give it a few seconds, silent is something that I haven't defined.
00:40:30.154 - 00:41:32.558, Speaker A: So I'll just take this out, run it again and yeah, if I go to the Dab, it's already here. So that's how easy it is to send any sort of notification from any platform, any protocol, any smart contract. Now let's talk about chat, which is also very interesting because you can do support chats, you can even do AI chat, something that we have done and you can do so, so much more. So for chats, I mean, I'm just going to chat over here and I'm going to chat with another person over here. Chats are again user and spam controlled or has anti spam mechanism, which means that when you send a chat to someone the first time they have to accept the chat request. Only then the notification are enabled and only then they can see it in the chats. But yeah, you have the request app that basically acts like an anti spam mechanism.
00:41:32.558 - 00:42:11.276, Speaker A: Same for notifications. Like if I send a notification to a wallet address that has not opted in it lands on the inbox. But yeah, over here, let me find this guy. I mean I can find this guy which is seven nine two. So yeah, take my click. Yeah cool. So sending chat again, very easy to do.
00:42:11.276 - 00:42:46.104, Speaker A: I am going to go back to Vs code example. I'm going to go to chat and we have chat which is wallet to wallet chat. We also have NFT chat which means that you can have your NFTs defined as a chat. So your board ape can also talk to one another if you want to. The only exception is that the NFT chat has a different standard. So instead of using EIP one five five you basically have the NFT address standard. Again it's mentioned in the docs so no worries around it.
00:42:46.104 - 00:43:28.700, Speaker A: Over here we are just going to go with a normal wallet to wallet chat. So I want to do a send chat example. So I'm just going to copy this example out and I'm going to explain it to you guys while we work this out together. So yeah, two cool things, paste it out. So first thing charts are very encrypted, charts are extremely encrypted. So the first thing that we need to do is we need to make sure that we are first getting the encrypted chat address. Then we are doing a staging env file.
00:43:28.700 - 00:44:18.230, Speaker A: Then once we have that encrypted chat PGP key which is what WhatsApp also uses that encrypted chat PGP key we put together a decrypted helper function and we pass that encrypted private key along with the address of the signer to decrypt it out. Once we have decrypted the PCP key we can send chats as a normal user. That's how we achieve end to end encryption. So that's why you have double way encryption and decryption. So yeah, once you have that all you have to do is again send your signer. Signer is the signer channel. In this example we also basically did a signer second account which is a random account that we have.
00:44:18.230 - 00:45:08.790, Speaker A: But what we can do is instead of random account, let me just do a copy on this account. So receiver address, it's going to be EIP one five five and the receiver wallet address notifications has the chain ID. But chat doesn't have the chain ID, just the blockchain which can be like chat because it's like EVM compatible. Right? So it's EIP one five five which means all em EVM and then the chat address. And over here we are just going to do staging and hopefully console log response. If everything looks good this should work.
00:45:13.480 - 00:45:14.192, Speaker E: Good.
00:45:14.346 - 00:46:17.208, Speaker A: So this is done. And if I go to chats, yeah I can see a chat delivered right now. So yeah it's that easy to do. Just go to the backend node and you can figure everything out. We also have something called NX Control which is a UI plugin which if you install and then you generate a front end interface or you serve a front end interface, it works pretty well. I think we are running out of time so I will not be able to explain that to you right now, but happy to do it on our booth. Again, the best way is go to docs push and lastly, if you go to NPM you have all the examples of everything that you need to do and how to do it right along with the patterns and the expected response.
00:46:17.208 - 00:46:48.544, Speaker A: We also have cheat sheets which the girl in pink is basically having. So yeah, just have that. And our Discord is 24 x seven. So is our booth. So just scan the link and ask your technical question either on discord or come to us and talk to us directly. The live workshop link basically takes you through all the examples that we have in the SDK. Thank you so much.
00:46:48.544 - 00:46:51.050, Speaker A: If you have any questions yeah.
00:46:52.780 - 00:47:00.210, Speaker E: Let'S say I would assume that doesn't have the router what happened in that case.
00:47:00.660 - 00:47:43.330, Speaker A: Got it. So of course those notifications are visible. It can be visible on your DAP as well. So there's a front end SDK functionality in which you can have those notification integrated on your DAP front end and because of that you can show it over there or you can have your DAP also have a pop up notification which you can achieve by delivery notes. But yeah, because it's interoperable all the DAPs that support Push as well as, like as I said, unstoppable DAP. And unstoppable wallet also supports push, right? So as long as the user is there, your notification will be there and that's why we recommend that you add it to your DAP as well.
00:47:46.500 - 00:47:58.180, Speaker E: Hi, I want to ask you something about this Push notification for broadcast. So as I see in the demo, everyone can send a notification. So is there any wireless option because it can be used as a malicious notification.
00:47:59.800 - 00:48:41.490, Speaker A: Got it. So not everybody can send a notification. Like, that's why you have your channel and only your channel can send a notification to all the users or a channel or a delegated person that you have delegated can send a notification on your behalf. So we are working like we are powering notification for Uniswap and Safe and so many more companies using this logic. And because of that it's only Uniswap wallet that can send notification to you. No one can spoof it. We also have like a blue verified tick mark which basically allows user to know that this is coming from a legit channel and not a spoof channel.
00:48:42.340 - 00:48:43.330, Speaker E: Thank you.
00:48:46.040 - 00:48:49.860, Speaker A: Awesome. Thanks everyone. Thanks for coming and happy hacking.
00:51:15.410 - 00:51:42.586, Speaker D: Ready? Oh sweet. Are we already on here? We are. Hey guys, my name is Jack. I am head of crypto at a payment company called unlimited. And today I'll be going over a little bit of the history of Onram since 2015 until now. And also I'll tell you a bit more about what we're doing in terms of building a gen three on and off ramp. The reason why I think not a lot of people are going to be here today is because we didn't get the Bouncy sponsored in time.
00:51:42.586 - 00:52:06.894, Speaker D: So usually people come to these things in order to learn more about the API. But we joined ETH Global late, but it's all good. I still think that we're a really good counterparty to work with. So I've been in the space myself for the past nine years. So come to talk to me afterwards if you guys need any help with payments or banking. But yeah, let me just go through this. So unlimited.
00:52:06.894 - 00:52:58.130, Speaker D: As I mentioned is an OG OG Payment company. We are a principal member of Visa Mastercard and JCB and Union pay and Amex and Discover. And also we have our own Swift code because we're principal member of Swift as well. You can think of payment companies as kind of like node providers into web two payment networks because just how like Infuro or Alchemy allows you to read and write into Ethereum or any EVMs a payment company that is a principal member of Visa or Master or being an acquirer and a processor, we basically have read and write access directly into VisaNet. You can think of the VisaNet mempool as a place where the acquirers gets to put in payment requests to the issuers and they'll just get more analytics while it's in this mempool. So that's what a payment company does. I mean, there's many different types of payment companies.
00:52:58.130 - 00:53:44.130, Speaker D: Point being that as an acquirer, we're directly at the source, right? It's like the difference between Infuria versus Gelato or right. One is a node infrastructure provider, the other is a higher order API for doing something on top. So we are more like an Infuria in that sense as like a web two node provider. And now we are launching an Onramp on top of our payment company, the payment stack that we already built up. So imagine if Stripe or Worldpay or checkout Launch like MoonPay or Transact or Ramp. That's what's happening. We have this next generation Fiat on and off Ram that we're building on top of our own payment stack.
00:53:44.130 - 00:54:33.918, Speaker D: There's a lot of efficiency gains when you do that because as an acquirer, you already get basically the Best Buy rates and the best bank FX rates, which are savings that we pass on to the users. So imagine if a user went from, let's say BRL to ETH, and you're using the merchant on record that is Transact or MoonPay that is based in Europe. Well, every time that MoonPay receives a merchant settlement, they'll receive it from BRL to Euro first before they convert the Euro to ETH, right? So it's not about the transaction fee of like 2.9% plus $0.30. It's about the fact that there's a hidden FX cost in the fiat to fiat and then fiat to crypto conversion that then is put into the spread that is passed on to the user.
00:54:34.014 - 00:54:34.274, Speaker E: Right?
00:54:34.312 - 00:55:18.414, Speaker D: So here we don't have that because we're an acquirer. We basically get bank rates like five bips, ten Bips, as opposed to 300 bips for our cross border FX settlements. These are all savings that we then pass on to the user in the form of better fees. And as I mentioned at first, as an acquirer, you get to read and write directly into Visa, which means you have better analytics for controlling conversion rates. So you have good conversion rates along with lower fees and just wider coverage. Anyways, that was a little bit about myself and the company and the parent company. But let's go through today a history of onramps, as I mentioned, right, where you have Gen One, Gen Two and Gen Three, and what the current kind of typology looks like.
00:55:18.414 - 00:56:12.538, Speaker D: So at gen one, we have simplex Back in the days, there was only Simplex and then Gen Two around, like when DFI was born in 2018, we had Wire, MoonPay, Transact, Ramp, and some other local ones. And then over the past couple of years, things have been changing really quickly. Unfortunately, instead of having, like, a fiat dow with a standard API that allows every onram to adhere to this API standard, everyone kind of started competing and therefore fighting for the same market share within the space as opposed to having a standard API that allows people, every developer to then just it's like saying if you're using alchemy or inferior, you're still using the same RPC API. Just change providers. You don't have that in on Ram space. So I'll go through a little bit about what's going on in the Gen Three or the current landscape for what should happen next. So here's a form, long form from Simplex.
00:56:12.538 - 00:56:51.580, Speaker D: This is actually from 2023, and that just tells you kind of how much things haven't improved. You see, this very long form UX is kind of clunky, right? I was trying to find a screenshot from 2015 through like, Exodus wallet and BRD wallet, but they don't have it anymore. They turned it off. Or BRD wallet got bought by Coinbase, and I can't find like a 2015 version of this. But imagine like a longer form that is basically not embeddable and it's completely off chain because you have to copy paste your own address. There's no wallet sign in, there's no wallet connect. But at the time, it was literally the only option.
00:56:51.580 - 00:57:42.400, Speaker D: So let's give them some credit for being the pioneers here in terms of a company that enabled on ramping in 2015, even pre Ethereum, but there was just a lot of problems, obviously, at that time with high fees, super low conversions, huge problems throughout. At the end of the day, they had to bow out of the race because they could not compete with newer onramps at the Gen two level. So they sold to another company called Nuve, which is like a Canadian payment company that bought Simplex. And yeah, so that's kind of gen one. I would say probably 2014 to 2017 the only option available. There were some other regional ones like BTC Direct that's been around. But in terms of the B two B to C model, I would say that Simplex was kind of the pioneer there in what we define as on ramps today.
00:57:42.400 - 00:58:16.550, Speaker D: And then around 2018, you had wire come in. They raised like a series A. I was first employee at wire, and we were doing a lot of other stuff before this. We were doing like, OTC trading and cross border payments using crypto as a rail. But when DeFi was born, we realized that, hey, why don't we take our licenses that we have in the US. With money services business or money transmission license, and let's offer that into the DeFi ecosystem with non custodial wallets and DApps to allow users to on and off ramp. So we kind of like repackaged what we did.
00:58:16.550 - 00:58:57.478, Speaker D: Because if you think of what cross border payments using crypto or rail is, it's just like USD to USDC and the USDC to local currency. That's like an on ram and off ramp together, right? So if you separate it and you say, okay, well, instead of doing an end to end flow of USD to BTC and BTC to BRL, let's just offer both as, like, one is an on ram and one is an off ram. So we kind of repackaged and restructured the company to become an on and off ramp for DFI. It was very exciting time. At that time, we did have an embeddable widget. We were the first to work with maker. This was like literally August 2018 when the USD to die rails were turned on.
00:58:57.478 - 00:59:36.974, Speaker D: Imagine that, right? We're talking about the first year of DFI. And this was like pre uniswap days in 2018, and we already had USD to die, which was phenomenal, I think. And we had Apple pay, if you guys ever use Rainbow Wallets. And Rainbow wallet has like, an Apple pay checkout feature where it's not like an embeddable widget at all. It's completely white label, and it's like literally two clicks and you're done. I still think that that's the best flow, even though for some compliance issues, you can't actually do that. But we were breaking things at the time in 2019, still, there was some problems, once again, due to compliance.
00:59:36.974 - 01:00:05.820, Speaker D: We didn't know if we can do DFI, like, for example, fiat to like, a meta transaction so that you can stake into compound. At the time, we didn't think we can. Do that. It's like a us money services, you know, simplex is dead, wire is dead. And you kind of move on to Transact. Transact, I have a lot of respect for what they do. It's a developer first company that just has really good tooling and they're all devs before they're payment people.
01:00:05.820 - 01:00:55.334, Speaker D: And they did build out all the metatransaction stuff. So you can go from Fiat to anything. Literally, user pays in fiat it goes to Transact hot wallets and then there's like an approve and allowed with a function that basically interacts with any other contract through like a forwarding address that decouples the sender's address from the user's address. So you can it's almost like a Paymaster that allows you to pay on behalf of a user with the ETH that transact purchases with the user's fiat to then forward it over to the user's wallet. In terms of a staking like LP token, it was ahead of his days. I think in terms of this being done, there's easier ways to do this if we can adopt account abstraction, obviously. But this is all pre account abstraction.
01:00:55.334 - 01:01:34.342, Speaker D: So the Meta transaction stuff was really cool. They were able to add more payment methods as well, working with local payment companies to add more payment methods. But still, I think there was huge issues there because at the end of the day, so far, every single onramp has very similar issues in that they are a crypto startup that got into the space. Very awesome people, every single one of them. But they're not a payment company. So they had to pay higher fees. They weren't in control of conversions because they received back some read access from the payment company, but they don't really know why.
01:01:34.342 - 01:01:50.780, Speaker D: They have no way of analyzing that data beyond they couldn't really fight it. Right. So there's ways to fight fraud on the client side, but if you don't have control over the server side because you don't read and write directly into Visa, then you're kind of fighting with one arm behind your back.
01:01:52.850 - 01:01:53.166, Speaker E: Yeah.
01:01:53.188 - 01:02:44.030, Speaker D: So moving on from the second generation to kind of where we are today, there's a lot of cool stuff. This is MoonPay right here, right? So MoonPay also iterated a bit more they got a lot of money from the VCs, which arguably kind of screwed the industry because you kind of give them $500 million and they are now trying to become the only one. But that's not how Web Three works, right? Like Web Two is like, oh yeah, let's back the winter. Winter takes all. Like Web Three is like, no, we all should collaborate. We should create like a Fiat Dow that has local on ramps all across the world as distributed nodes that can make sure they take care of those countries very well. So I have my beef, I guess, with these Web Two VCs that gives money to Web Three companies and that influence how they think now they kind of steal every noncustodial Wallace users by launching their own direct facing app.
01:02:44.030 - 01:03:26.780, Speaker D: Right. User facing application. So retail application. And yeah, I'm not sure if that's good for the space to do that, but yeah, for what it's worth, they executed very well. Well deserved, round, and also part of this kind of gen two on ramps between 2018 to 2021, introducing new elements like NFT checkouts, super well funded, obviously pretty strong counterparty in that sense. They're not going to die, I don't think. It's not like Zampool or Wire or even Transact arguably only raised 20 mil when they should have raised 50, at least.
01:03:26.780 - 01:04:08.886, Speaker D: Not as strong of a counterparty when you think relying on a partner and provider for the long run. Right. Prime Trust died as well. Yeah. So I think MoonPay, for what it's worth, is a strong counterparty, but they do steal your users and they force exclusivity and at least from what I hear, the support is not very good. And then these other kind of like niche on ramps that are like NFT only, but are super tech first, once again, almost like Transact in 2019, but on the NFT side and just offering a really awesome UX and easy developer experience. And I think this was very monumental.
01:04:08.886 - 01:04:26.986, Speaker D: This happened like two days ago where Third Web bought paper. Right. I think that's super good for the space. You can say that. Oh, from my own perspective as another onramp, why would I say that's good? Because aren't they competing against me? It's like, no, they're not. This is good for the space period. We're not competing.
01:04:26.986 - 01:05:09.526, Speaker D: We're trying to go after other users in the world. Right. If you're only fighting after the current block of users, where there's so much rehypothecation happening, founders making money and stop gigabraining themselves into building new stuff, it's super incestuous and it's a super small fringe space. Do you really want crypto to stay fringe where everyone is just fighting over the same users? Or are you here to change the world and make an impact and actually onboard new users from the world outside of this fringe, like 5% of users, that is us. Right. I think there's only 500,000 wallets right now that are actually active in spite of MetaMask claiming 30 million wallets. That's like maybe the amount of wallets that's generated.
01:05:09.526 - 01:05:13.854, Speaker D: But in terms of actual users, there's probably only 500,000 or less of us.
01:05:13.972 - 01:05:14.302, Speaker E: Right.
01:05:14.356 - 01:06:16.302, Speaker D: So how do you actually onboard new users? Well, I think Third Web is doing God's work in that they made it super easy. From a developer standpoint, everything is now end to end, from standardized smart contracts, to the deployment of It, to the whole checkout process, to the social login wallets. So, yeah, I have a lot of respect for Third Web buying paper. My marketing team made this a little bit wrong. What I wanted to show here was kind of like the aggregators on one side and then the exchanges and acquirers on top and then the middlemen first movers in the middle and the local ramps and dish ramps in the bottom right? And what that is trying to show is to say that the current landscape of Onramps is such that it is so fragmented and we can think of it as like top, middle, bottom in the sense that you have. A bunch of super big companies such as Coinbase, Pay and Binance Connect that are launching their own ramps or PayPal and Stripe. And unlimited is not big but it's still an acquirer.
01:06:16.302 - 01:06:59.210, Speaker D: It's like the difference between Infuria and Chainstack. Like Inferior does 10 billion API calls a day, like Chainstack does like 1 billion. But Inferior has like ten network connectivities, chainstack has 25. So as an acquirer we have a lot of network connectivity but we're not obviously as big as like Stripe or PayPal. But point being that you have a bunch of payment companies coming into the space that is launching an on ramp such as Stripe, on ramp such as Simplex, with nuvay such as Unlimited crypto, and then you have exchanges that's diversifying their portfolio of businesses. They might have an exchange account, but they also have prime and custody. They now have an on ramp where you can log into your Coinbase account in order to on ramp.
01:06:59.210 - 01:07:37.686, Speaker D: So it's the same kind of B, two B to C SDK that's at the top now. So super well capitalized teams that are exchanges and acquirers on top and then you have your middlemen first movers that got into the game four or five years ago, such as MoonPay, Transact and Ramp that I would say Ramp executed the best. MoonPay closed second best, but played the VC game very well to raise a lot of money. Transact, I have a lot of respect, but once again they should have probably raised more. So those are the middlemen. I don't think they have any more advantage going forward. I think they're all going to get squeezed out in theory because once again, they're not an inquirer.
01:07:37.686 - 01:08:23.930, Speaker D: So they don't read and write directly into Visa Master. They're not super well capitalized. Like MoonPay is burning money again and their position is not about the money, it's not about how much they raise, it's about their positioning, right? They're as middlemen. They're not a bank, they're not an acquirer, and they really only have a good tech stack that allow them to integrate with a lot of other DApps initially, because they got into it initially, but their positioning, I think, will become weaker and weaker over time. Relatively even weaker than the local Rams. Because if you think of what a local RM does, they only serve that country, right? Like Lupipay, they're just in Brazil, they only do picks. They may only have like a team of like 15.
01:08:23.930 - 01:08:59.074, Speaker D: Uniswap only has a team of 30. So you only stay a small team of 30. You don't try to scale to like a team of 550. You don't increase your burn rate. You just operate a team of 15 to 30 and all you do is just that regional on ramp. In that one country, it could be Alchemy pay in APAC, it could be Loopy pay in Brazil, it could be whatever regional on ramp. I'm advising a couple of African on ramps to help them to think through that on how to become like a strong node, right? You can think of this as like social layer nodes because it's physical jurisdiction, because they have to follow regulation locally.
01:08:59.074 - 01:09:44.302, Speaker D: So it's almost like a distributed social layer node for maintaining these on and off ramps locally. And I actually think that that's the best foot forward. There's so many applications there know for FX, for example, if the FX has all these different stablecoin issuers locally that use on and off ramps locally, then you can technically replace a trillion dollar industry with how cross border payments work and how much I think it's like $20 trillion per year. It's move across borders. And that's always been the dream, but it's never happened. Whether with like Ripple or Stellar or what wire tried to do in the early days with cross border payments using bitcoin as a rail. And what people are trying to do today with USDC, combining USDC with on ramps and off ramps locally, it just hasn't worked for a lot of different reasons.
01:09:44.302 - 01:10:56.746, Speaker D: Mainly because there's a double transaction fee and a double FX, right? So if you're paying like 2.9% to on ramp and 2.9% to off Ram and you're paying some bips for the USDC to USD to USDC and the USDC back to BRL, why would you pay double FX with double transaction fee when you can actually go to a bank like TransferWise or Wise and use less than 1% fees there? Because you can get buy rates at once, again, one to five basis points, right? But if you do have stablecoin issuers working with local on and off rams and they're able to both together bring the cost down, basically converting stable coins at one to one and having very low transaction fees, then it does make sense to build such an international venmo soon. So I'm personally more bullish on local rams doing this. And the niche ramps too. I think from a developer first standpoint, as long as they stay small and more lean in terms of being a developer first and not undertake all of this regulated payment infrastructure, then great. You're more like a hard hat and a truffle as opposed to like a coinbase and binance, right? So there's space for that too.
01:10:56.746 - 01:11:18.354, Speaker D: And then the aggregators, right? So it's like Exchange acquire, middleman and then local ramp and niche ramps, right? Three layers. And then the aggregator that can take care of all of that. There's value in that. There's new teams. I didn't put Poco app on here. Poco is like a team out of YC that recently launched an aggregator. They're really good too.
01:11:18.354 - 01:11:40.490, Speaker D: On ramper is the OG Meld raced last year. Pretty good team, I think. They're like from Square Cash and some other web. Two payment companies. They understand aggregation very well, but Poco is really cool too. That's kind of where the landscape is today. I'm happy to be disagreed with.
01:11:40.490 - 01:12:25.766, Speaker D: Definitely come afterward to tell me I'm wrong. Always love to learn, but yeah, so that's kind of where we are today as far as landscape. I just want to go over a little bit about us again in the context of what we want to build next. Right. We're building a next generation Fiat onramp. I'm taking all my failures at Wire and trying to apply it here at, you know, as a principal member of Visa Master, we definitely have a really good position to do this. Right? So some of the things I want to do has more to do with avoiding double sign in, avoiding double KYC because when you have because if you think of what happens with every onram, it's like they all have.
01:12:25.766 - 01:12:44.858, Speaker D: This email sign in. And then they all make you do like a KYC. And then they all put you through this form where you have to fetch the quote and put in the source amount, desk amount. Right. A lot of that is redundant because if I'm already signed into Web Three Auth or like Magic Link or any other social login, why do I have to sign into the Onramp?
01:12:44.874 - 01:12:45.294, Speaker E: Again?
01:12:45.412 - 01:13:08.178, Speaker D: That's literally not needed. Or if I'm already signed into my wallet, why can't I already signed it with Ethereum, basically? Why do I have to authenticate into this other app? It's almost like an app once again. But it shouldn't be an app. It should be embedded, it should be abstracted. That's one module I want to work on in this near future. As head of crypto here, I want to avoid double sign in. Another thing is like, double KYC.
01:13:08.178 - 01:13:45.818, Speaker D: A lot of apps have KYC already. They're using with Persona, they're using with Sumsup. Right? Sumsup has an API for reshare KYC. Banksub did this. It was very awesome build. If I'm able to basically say, let's have like a multi KYC provider architecture where I can intake like, ten different KYC providers, but the schema still falls under my own compliance regime to make sure that I hold the PII of the end user and it still satisfies my compliance requirements, then great. Then I'm happy to use my partner's KYC vendor as my own KYC vendor.
01:13:45.818 - 01:14:19.770, Speaker D: Right. And now you can think about the UI, which like, okay, cool. There's no more sign in page, there's no more, you know, and you're abstracting away these pages more and more for a better UX. You do like a fetch quote API instead of like a fetch quote UI and everything's now gone and all you land on is like a stripe, like payment form. That's kind of the goal. It's like the fine line between a fully white labelable API versus like an abstractable widget. And that's the line that I'm trying to find for or trying to define for onomic cryptos on an off ramp.
01:14:19.770 - 01:14:49.478, Speaker D: I have a quick demo to give of where things are right now, but I think I'm out of time, right? Or maybe 2 minutes and we can take some questions, I guess. But if you just take a look at this, this is what I mean. Authentication right now is just email four six digit code. It's BS. I hate it. We're going to replace that with like a multi sign in process, like web3 author magic link so that you can avoid double sign in. Payment methods are already in there.
01:14:49.478 - 01:15:44.934, Speaker D: This is what I mean. I got to slow this down. Once the authentication page is done, if we're able to save the card token and the user can sign into their payment method, then this is all it should be, is you should just land on the payment form because the KYC is done in the backend, right? This is abstracted away. You didn't see this because it's not there. You went from Auth directly into the payment form, which is literally the easiest flow that you can do because here what happened was the KYC is abstracted because we received it from the partner who sent a KYC token from the provider. From the KYC provider, right? So then now all you do is land on the confirmation page in a payment form and you're able to finish a purchase flow in 40 seconds, right? And that's what we want to do. We don't want to be in the mix, we just want to get in and get out.
01:15:44.934 - 01:16:16.500, Speaker D: Right? Like user generates wallet, we help them to fund the wallets. We do the performance, the fraud checks and all that. Three DS two or any other fraud checks that we do on our own back end and you're done. You can finish the whole flow in like literally 40 seconds, right? That's the goal at least. And I think I am done. So happy to take some questions. Yeah, go ahead.
01:16:16.500 - 01:16:54.446, Speaker D: Hi. How would you relate to this new Gnosis Pay solution? Yeah, for sure. I love gnosis pay. What Gnosis Pay did was they basically took their account abstraction stuff that they have along with a partner called Monarium, which has like a stable coin called Euroe. And then you can basically convert anything into the multi signal approvals and you can convert anything to euro e. And then that euro e becomes euro. And then now you can use that euro on the card.
01:16:54.446 - 01:17:19.990, Speaker D: You can think of that as almost like an off ramp, right? Because you're going from crypto to Fiat, but you're not off ramping to any bank account. Around the world. You're not off ramping to any e wallet or even cash. You're off ramping to a very specific branded card that can only be issued to residents of Europe. It's still valuable. I still think it's a great product. I think the fact that they are offering it as a service in terms of letting other teams use it is really great.
01:17:19.990 - 01:17:49.454, Speaker D: Right. Once again, this is the difference between using Alchemy and Infira versus Gelato and Morales. Because if you wanted to, you can go to someone like us who is a pure play Web Two payment company that is an e money institution in Europe, and you can say, hey, Alchemy of Web Two, can I get this card issuance that we have a banking and service API. We're able to give you that Fiat only system raw. Right. Or if you say, hey, I want to just use Gelato, I don't care about that. I don't want to deal with Fiat systems at all.
01:17:49.454 - 01:17:59.010, Speaker D: I just want to only have this developer tooling then. Yeah, you would go to Gnosis Pay and just use them to issue any branded cards.
01:18:06.500 - 01:18:09.910, Speaker B: Well, first of all, thank you for the very informative talk.
01:18:10.760 - 01:18:12.516, Speaker E: I just wanted to ask, how do.
01:18:12.538 - 01:18:17.236, Speaker B: You see the path towards off ramp as well as, like the asymmetric step here?
01:18:17.258 - 01:18:22.280, Speaker E: Because it is a little bit more complicated and sometimes it involves more hurdles.
01:18:22.700 - 01:19:16.948, Speaker D: Yeah, I think first and foremost, you need people on the ground in every one of these countries who can work with the local regulators and local partners to just get that Web Two node set up first. And that's part of the reason why I'm here. I've been in the crypto native space for the past nine years. I decided to come across the chasm into Web Two because in order to win this war, there's two ways to fight this war, right? You fight on the crypto anarchy side, stay in the crypto native space, or you can choke your horse in and become like a general and just make sure that the war is going the other side's way. So I'm putting that on camera, but whatever, I'm not suicidal. But point being that I think those kind of partnerships are important, right? You have to have local payment service providers and banks sponsored banks working with you. First and foremost.
01:19:16.948 - 01:20:02.144, Speaker D: Once you have that and you know that you can scale to let's say, like $100 million per day in volume and you won't get flagged, that means that that node will run with like five, nines. It won't go down. That's the first thing. I think all the on chain stuff is actually fairly simple. There's actually so much enterprise level tooling now to use like a one inch API to swap to anything. You can use Leafy and Bridge, anything. Everything comes back to a stablecoin and then use local stablecoin issuers, whether it's Circle, whether it's straight FX, go to DFX finance and just talk to those guys and they can help with a lot of that, right? But yeah, I mean the off ramping piece is first and foremost anything back to stablecoin and then stablecoin to that local currency.
01:20:02.272 - 01:20:02.564, Speaker E: Right?
01:20:02.602 - 01:20:27.264, Speaker D: And so I think the on chain modules and the on chain tooling is already there. What's not there are people, I guess, like me, that's crossing the chasm to make sure that we can take care of teams from top down so that those rails are stable, those notes, those web two nodes are live for years to come. Instead of falling one by one. Like prime trust, like wire. Right?
01:20:27.382 - 01:20:27.904, Speaker A: Yeah.
01:20:28.022 - 01:20:29.600, Speaker E: Thank you very much. Yep.
01:20:30.820 - 01:20:31.810, Speaker D: Thanks guys.
01:22:21.960 - 01:22:50.300, Speaker F: Hello. Does it work? All right, perfect. Thanks for coming. Welcome to Schlopped. Mastering that of schlopping yummy data. If it doesn't make sense to you, don't worry, we'll proceed to explain what this is. So one query, one query is all you need is the claim that I'm giving in this talk where if for you front end developers, I'm claiming that you can extract all the data you need for your front end application in one query.
01:22:50.300 - 01:23:06.290, Speaker F: So a little bit about myself. I'm a Devreau at Mantle XYZ. We're a layer two that just launched last week. Feel free to check us out. Mantle XYZ. And those are my socials. So the number one thing for every DAP is the front end.
01:23:06.290 - 01:23:34.132, Speaker F: I mean that's what your users interact with, that's what your users see. No one really cares about the backend. It doesn't really matter how it organizes logic. As long as the user is aesthetic to the user, the user will come back. If it loads quicker, the user might come back more often. So Albert Einstein, the React JS founder, famously said that frontend is just a well of bugs. Reason being because frontend requires a lot of state management.
01:23:34.132 - 01:24:12.052, Speaker F: You want to query data A, data A, and then you use data A to query data B and use data B to query data Cde. So there's a lot of state management involved. So I'm here telling you that by querying all your data in one query, you can avoid auto state management and reduce the number of bugs we'll go through like a simple uniswap case study. And everyone here I assume, is familiar with the uniswap model. You put in some tokens and you get out some tokens. So in this example we're swapping maybe say ten e to USDC. On the surface it sounds very trivial, but behind the scenes there's actually a lot going on.
01:24:12.052 - 01:25:19.324, Speaker F: So the front end is kind of anticipating how many ETH you want to swap, what asset you want to swap. In this case it's e how much of the asset you want to swap. In this case it's ten how much of the asset you want sorry, which asset you want, which is USDC. In this case how much are you going to get out from the swap? How much are the fees on the network in USD as opposed to ETH? And what is the price impact? Do you have enough ETH to complete this swap? So and so on. There's a lot of complexity going on behind the scenes and a very simple example of how one might approach this data extrapolation is with this example whereby you get the EF address and from the EF address you get the user's balance. When you get the user's balance, you can get the user's die balance and then sorry if balance or die balance and then you can get the amount of die that the user will get swap out. Given this data, this is terrible one, mainly because this is blocking to get the die balance you first have to get the ETH balance and so on and so on.
01:25:19.324 - 01:26:08.860, Speaker F: So this is incredibly bad because it's blocking. A naive approach to do this is parallelizing all these queries into a promise. So you might call, await promise and query all the promises. This is still good, this is good, this is better. But you're still doing three parallel queries and I'm here telling you that you can do any amount of data you want in one query. So yeah, we can do all of this in one query and so we can do that with multicore three. For those of you who don't know what multicore three is, it's a smart contract that is deployed on, I think, 106 chains, all using the create to upcode, so it's on a deterministic address and so you can use the same address for all 106 chains.
01:26:08.860 - 01:26:45.540, Speaker F: Traditionally without multicolored three. How your DAP would interact with the blockchain is by issuing a separate query for each data extraction. For example, Dai balance off, uniswap swap amount out and the balance of E. With multicall three, it's actually a smart contract that lives on the blockchain. So when you call multicall aggregate, you actually call one query to the smart contract. The smart contract then queries all the other relevant information needed from the other contracts. So that way instead of using three queries, you can use one query.
01:26:45.540 - 01:27:50.056, Speaker F: The problem with multicore three is that it is quite verbose by default if you're using ETIs, which is the canonical library these days, to encode, and you have to actually encode and decode your function into a very specific format. So it's not very user friendly, it adds a lot of complexity on the front end, but it allows you to achieve querying parallel multiple queries in one query. Luckily, Vium, I'm not sure if I'm pronouncing this correctly via from Paradigm XYZ, a new JavaScript library supports multi quarterly encoding and decoding out of the box. If you guys would like to check it out. I think on the developer docs page you can see that there's a specific provider for the multicol three provider, provided that it's deployed on your chain. So that's cool. Multicolored is good, but it's not good enough because it does not support dependent data.
01:27:50.056 - 01:28:49.260, Speaker F: And what I mean by dependent data is that it does not support the cases where the inputs to the previous query, to the current query is obtained from the previous query. In this case, we have a vault address obtained from a yield optimizer. We would like to then query that address to get the bounds of our vault address, which is simply not possible with multicore three because it is stateless. Yeah, so we can't do that in multicore three. However, if we combine two little known hacks on E call and Solidity, we can actually achieve and we can actually achieve arbitrary code and arbitrary business logic in a read only fashion. And let me explain a little bit more. So, for those of you who are not familiar with Eve Call EC call is an JSON RPC method that is used behind the scenes every time you use a readonly function.
01:28:49.260 - 01:29:32.920, Speaker F: For example, if on the front end I do die bounce off user address, what's actually happening behind the scenes is that I'm calling the JSON RPC provider ETH Call, and it's providing it with a transaction object, for example, an address, the two address the data blob, and then it will return me the data. So that's what's going on behind the scenes. A little known fact is that you can actually use Ethcore to query data from mutable functions. An example of this would be the uniswap quota. So traditionally the uniswap quota is a write function. It's a mutable function. For example, the function quote exact input is external.
01:29:32.920 - 01:30:00.260, Speaker F: It's not external view and it's not external pure. What that means is that if you're using it based on the Abi loan, each query will cost you gas, but you can actually do it in a view only mode and achieve the amounts out without sending a transaction. So you can actually query traditionally read functions, write functions in a read only manner.
01:30:01.160 - 01:30:02.230, Speaker G: So cool.
01:30:02.600 - 01:30:56.020, Speaker F: That's cool. We can read on write functions. So what? Okay, hear me out. So what if we hijacked Solidity and made it return data in the constructor and write the data extraction logic in the constructor? Then we use if call to perform a read only contract deployment to extract out the data we want. Does anyone get that? That means, what if we can write arbitrary code because traditionally Solidity does not return any values when you create a contract. So what if we hijack a constructor to force it to return some data and while deploying that contract, we get back some values? Okay, again, let's recap again what the dog said. One, we force the Solidity constructor to return values.
01:30:56.020 - 01:31:27.168, Speaker F: Two, we write out our business logic in the constructor aka writing out arbitrary code. Three, we use E call to, quote unquote deploy the contract, and upon deploying the contract, our constructor. Will execute the business logic and return us the data because we've hijacked it to do so. So this is how you force the constructor to return values. We need to go into assembly mode. Now, we have some kind of arbitrary data that we want to return. Return data.
01:31:27.168 - 01:32:15.724, Speaker F: We perform our data extraction logic, or business logic, aka. Arbitrary code. In the middle section, we abi encode it, and then we write some assembly to force it to return some data. And that is how you force a constructor to return values. Next, once we've written a contract to pass our custom business logic, we can use EF call to deploy the contract. And by deploying the contract with provider Call, which uses ETH underscore Call behind the scenes, we're able to deploy a contract with custom business logic in a read only manner and extract out our data. The only thing left for us to do now is to format the data into its relevant data types.
01:32:15.724 - 01:33:13.200, Speaker F: For example, U into 56 strings or bytes, depending on how you packed it. And that is how you can query all the state you need for your front end application in one query. Some parting remarks is that Eve Call actually is actually really powerful. It has a lot of undocumented, not well known features behind the scenes, such as the state overwrite set, where you can actually overwrite the code or the storage slots behind the scenes. You can also overwrite the balances or nonsense of things. It's very, very useful when testing things. GEF, the most popular ethereum execution layer, has a GraphQL server behind the scenes, so you can also extract a lot of data through GraphQL instead of the traditional RPC methods.
01:33:13.200 - 01:33:38.530, Speaker F: Yeah, I have a proof of concept on my GitHub. It's GitHub.com slash libmallabuser. There's a proof of concept there if you guys like to check it out. Yeah, thanks for listening. Any questions? Yes, I realized I went a bit quick here.
01:33:39.140 - 01:33:43.572, Speaker E: Have you done any benchmarking to see what the actual performance improvements have been?
01:33:43.706 - 01:34:19.360, Speaker F: I mean, this is more like it's the same. I mean, it's all on latency. You're offloading the computation to the ethereum node, so you're not actually on speed wise, it's the same because you're not actually doing any additional the amount of data isn't that significant. Yeah, it's kilobytes. Unless you're on, like, I guess, two G or three G, it might make some issues, but I think on most apps, it shouldn't matter. Yeah, because there's a contract size limit of, I think, a few kilobytes.
01:34:20.820 - 01:34:23.856, Speaker E: Are there any protocols using this in production right now?
01:34:23.958 - 01:34:26.530, Speaker F: I'm using it, yeah.
01:34:28.420 - 01:34:28.880, Speaker E: Awesome.
01:34:28.950 - 01:34:29.328, Speaker F: Thanks.
01:34:29.414 - 01:34:30.210, Speaker E: Thank you.
01:50:24.710 - 01:50:53.450, Speaker H: Are we on? Yes. Hello, everyone. Welcome to the workshop to building on ZK Singhira by using Paymasters. Let's start. Today we'll talk about Paymaster use cases to build NZK syncira. And the general agenda would be all around use cases. Right? As we are here at Youth Global and will attend the hackathon.
01:50:53.450 - 01:52:39.994, Speaker H: We are trying to build something that is meaningful and the meaningful part would come to the end user. How we can onboard end users to Blockchain or Web Three and how can we make their lives easier, how can we lower the barriers for them to get started? So the agenda includes us talking about what is Paymasters and why is Paymasters so important for us at ZKsync and also for our mission, the features that Paymasters enables and how is that directly connected to the ZKsync mission. We'll go through the examination of a Paymaster, how we can build using Paymasters feature. How does that look like on smart contract developer perspective? And then on the front end perspective, what are those key components that connect things together? And then we will brainstorm. We'll go through each of you guys to ask you questions such as what do you want to see? What do you want to see in the next three months if you're here and attending another hackathon, if you are like a hacker or a sponsor or a partner, that's not important. What do you want to see being built? What do you want to see for your users to kind of experience when they get on Web Three before diving in? I am AlbionA Hoti and I am Developer Advocacy Person at Zig Sync under Devrel team, mainly focusing on hackathons and workshops and things like that. But to give you an insight for the team, we are growing our devrel team with engineering members.
01:52:39.994 - 01:53:53.538, Speaker H: So we are very much looking forward for the next three months to provide tools and use cases for you to use on the way while you develop on ZKsync. And yes, we had some other conferences that we introduced a lot of things and one of them was the in memory node. So we do have an engineer down at the booth if you want to go and learn what is that and how you can use it, go and search for Nick because he'll walk you through that. Yes. So Paymasters and how is that connected to our mission at ZK Sync is that ZKsync is a layer two protocol trying to lower the barriers and increasing not only the throughput for transactions, but we really want to build on the foundational values and those are the self sovereignty, freedom and decentralization. But not just that. We want to have it not just for a small group of people, right? We don't want to go through the world, attend hackathon, attend crypto conferences and be free and meet those people once in three months.
01:53:53.538 - 01:54:52.920, Speaker H: We want all of the world to experience that. Yes, that is connected to the freedom that we want to achieve from a human perspective. And then paymasters. What can Paymasters do from user perspective or developer one when they start to build things is that you have the opportunity to remove the gas fees in different use cases. It depends on what you want to build. It depends on the creativity and the perspective and what exposure you were having earlier on in your careers when you were building tools or applications. But it's very connected to the application layer of like how do we want to bring those users and use web3? This is one of the ways and we really are relying on this big feature at DK Sync and we want to make it big as it is because I feel like no one is knowing because there's a lot of noise going around.
01:54:52.920 - 01:56:34.134, Speaker H: Some Paymaster features are you can pay with any token that you want and then yes, those are very basic right, get those NFTs, allowing them to get access to something that is very exclusive or not exclusive or whatever. But we were thinking for some use cases that can be like as a developer, for the developer experience, walk through it's like how can we make developers not suffering to going to each of the possible faucets to get some goalie ease or whatever, how can we make their lives easier? And we want to build a tool that can just remove the gas for people who are deploying through the tutorials that we have. So that is one of the templates that we want to do on our docs for the next three months with our team and I'm very happy to share that and yeah, we are on the way. So, yes, basically imagine all of the innovative ideas you would want to build on Ethereum and then getting those users to use your idea without the need for them to pay something with their money. So it is based on incentives and it's a very big one. And on the code level, like what will you see when you go through the big example that we have? The Hello World example that you will see to get started with Paymasters is that those free sessions are very important. Paymasters is a smart contract, that's it.
01:56:34.134 - 01:58:08.758, Speaker H: And you can implement any logic that you want to implement to remove the gas fees. And then those two functions which are the validate and pay for Paymaster transaction and post transaction are important. The first one is the most important where the logic goes in and then we have the built in flows that are the ZK Sync era that provides two flows approval based ERC 20 tokens and then the general for the others. Here's a very Hello World example on the side that shows you about yeah, when you go through all the custom Paymasters tutorial on the Docs, it's very long but don't get distracted and don't get lost because there is light at the end of the tunnel and it's not that hard. And then on the front end integration side you will deploy and fund your Paymasters via your front end or application perspective and then based on your logic of who will get the incentive part to remove the transactions for the users. Then you will add that logic there and then you will just fund your Paymaster contract via front end to the back end that interacts with the contract. There is a params encoding which is like Paymaster payload using get Paymaster params from ZKsync Three library and then you have the overrides to send the encoded paymaster parameters as transaction overrides inside custom data, whatever.
01:58:08.758 - 01:59:19.098, Speaker H: These are some specific information that you would want to check. Checkpoints that you can kind of go and search on the doc when you go through the tutorial. The good thing is that we did created a repo that has four examples, real life examples. They are not live for Paymasters and you can go and play around with the front end connected to those four examples. We have a QR code by the end so you will get to see it, but I also will go through it on the repo so that you're aware but just search paymaster examples that you can actually use to build on top your hackathon ideas or use cases. Those four examples are these the gasless paymaster seamless covers fees for any account allow less Paymasters which you can read it yourself now and then ERC 20 fixed Paymaster and then ERC 721 gated Paymasters handle fees for accounts that possess a particular NFT. Those are like built up there.
01:59:19.098 - 02:00:30.980, Speaker H: So you don't have to just have some small examples on the docs, they are already there and then you can just fork it and go on the way we do have the bounty tracks for this hackathon and I don't know how we can kind of expose that. Users actually can build full stack applications. They don't have to focus on web3 something related, right? It's like do an application to one demo that I am building right now is, you know, the monkey type thing that you write very fast and that is like how fast you type basically. And they have an open API for a leaderboard. So I just want to give some kind of free NFT to people who achieve some type of level. So I have to do the full stack app, build it up with that API and then just connect it with the results of the incentivizing site. That okay, if you did this, you're a nerd, then go use this application on web3 and you don't have to pay for gas because I have $100 that I can spend for you.
02:00:30.980 - 02:01:45.514, Speaker H: But yes, we are focusing on those type of applications generally based on around social media interaction with users. Whatever it takes when it comes to interacting with users, keeping them or building traction. Whatever you want to build on with your audience that you have on your socials, you want to interact in a way or another, then you are like, okay, let me build an email subscription model with Paymasters that I can onboard my users slowly to Web three and we can test things out in different perspectives, right? I feel like there is a huge perspective that we never went to think around because we are very focused into very infrastructure level development. But yes, you have a huge document on our tracks and there are more descriptions on those examples that we provide. Another thing that we really want to see being built at East Global is developer tooling. As I mentioned earlier, our devrel team and protocol built an in memory node for testing. It's awesome.
02:01:45.514 - 02:02:30.330, Speaker H: I can share on YouTube. We have the YouTube from Era dev Day that we organized. We got a feedback of like it's better than the tooling at Ethereum. So it's a very good thing to share and for you to go and test it around. But yes, any type of dashboards that can interact with ZK sync, paymasters or account abstraction workflow that you can put alerts and let the developer know what's happening on the way. It would be great to be added on a developer tooling perspective. And yes, how Zigacyn Erad developer experience, how it is for you to get on board it.
02:02:30.330 - 02:03:42.318, Speaker H: We do have smart contracts that you can write on Solidity and Viper. And then we have our compiler. It's different from what you are used to for the EVM It's, the ZK Sulk and the ZK Viper for both languages. And then we have our SDKs, the JavaScript one, which is the most famous one, and also the hardhead tooling like plugins over there for deployment. When it comes to the deploying ZKsync like smart contracts, the reason why there is another deployment plugin is that the bytecode is different when it communicates to our Zkavm. But yes, for more technical diving deeper into the technical aspect, let's meet after the workshop and I will push it to Nick and our other engineers who build it up. We do have a CLI that you can deposit funds to ZKsync Era, which is one of the most important things, withdraw funds to layer one and scaffold a Hearthat project that makes your life easier so you don't have to go through all of the libraries to install.
02:03:42.318 - 02:04:21.934, Speaker H: We do have hard Hat plugins as I mentioned, the compiler and the deployment, the proxy contract, the verification unit, tests to write tests, do not forget to write tests. And also the the deployment that I mentioned. And on the SDKs perspective, we do have JavaScript SDK with the ZK saying web3. Library go python JavaScript. We do have a lot of challenges on the way, but whatever you go through, you give feedback. We iterate. That's why we are here in a way.
02:04:21.934 - 02:05:12.190, Speaker H: We are also in a hackathon from an organizer perspective and partners. And yes, here are some numbers when it comes to our position right now, this is a little old from another hackathon, but yes, ZK Singh, there's a lot of volume there's a lot of users. But yes, for me, the most important part is the developers. So, yes, these are some links which you will get access from our QR codes here. The first one that is in black is Developer Relations Team and all of the activations that we had here as Deborahs at ECC. And the second one is my personal one. In one of them you will have the paymaster examples that I showed earlier.
02:05:12.190 - 02:06:28.850, Speaker H: And yes, feel free to go through that. And if you do have any questions, let me know. But I wanted to integrate the audience in this case and to ask questions such as what would you want to see being built in the next two or three months on a user or developer experience? Like, what are your challenges that you're having that you really want to see being fixed from your perspective that you would contribute to being fixed? Or from some other team's perspective if someone wants to volunteer to share some idea. No, everything like vestri related that you're here in this room. I feel like you are around layer two world. So, yes, I would like to know more about the audience and get to know from where you're coming from in a building aspect in layer two world or even an introduction about yourselves. And how do you feel about today at It Global? Do we want to start?
02:06:35.580 - 02:06:38.144, Speaker C: Hi, everyone. I'm Claire from blocko.
02:06:38.212 - 02:06:40.504, Speaker H: So basically I'm building Smart contract Wallet.
02:06:40.552 - 02:06:43.004, Speaker C: Compatible with four three seven and very.
02:06:43.042 - 02:06:45.150, Speaker H: Happy to hear actually, it's my first.
02:06:47.540 - 02:06:53.730, Speaker C: Global hackathon, so yeah, listening. Sorry.
02:06:55.540 - 02:06:59.444, Speaker H: Yeah, I'm with my team together, but, yeah, we are also trying to build.
02:06:59.482 - 02:07:01.110, Speaker C: Another project this year.
02:07:01.480 - 02:07:02.790, Speaker H: Thank you so much.
02:07:08.340 - 02:07:10.144, Speaker E: Hello. Hi.
02:07:10.182 - 02:07:35.050, Speaker G: My name is Liam, also my first hackathon. I'm a hacker and I'm building a multi lender platform for farmers and, yeah, we're also looking into account abstraction. We need to use it for holding four different types of tokens and paying for gas's fees. So keen to explore what's out there and see if we can integrate ZK Sync as well.
02:07:35.740 - 02:07:42.890, Speaker H: You're more than welcome to go through the Docs and reach out to us. We have a huge team here ready to help on site also.
02:07:44.400 - 02:07:45.052, Speaker E: That's awesome.
02:07:45.106 - 02:07:50.216, Speaker G: Yeah, I'll reach out to you guys when I'm free and yeah, keen to take a look.
02:07:50.338 - 02:07:52.130, Speaker H: Great. Can you pass by?
02:07:53.700 - 02:07:54.736, Speaker E: Hi, thanks.
02:07:54.918 - 02:07:55.920, Speaker A: I'm Sven.
02:07:56.420 - 02:08:17.736, Speaker E: I'm a researcher, and I'm researching IoT payments through probably CK sync. Maybe. And yeah, I'm still searching for a team or for other people that are interested. So if you're here and interested in IoT payments using second layer protocols, just reach out.
02:08:17.918 - 02:08:18.650, Speaker H: Great.
02:08:29.120 - 02:08:58.068, Speaker E: Hi, I'm Lucas. I will be building something maybe related to AI, but I wanted to ask you how account abstraction in CK Sync relates to account abstraction in the new ERC that is coming for Ethereum. Whether you're going to, I don't know, adapt to the new standard or how we would have to deal with that.
02:08:58.154 - 02:09:47.610, Speaker H: Yeah, so our account abstraction is natively implemented and the big difference is the transaction flow. In Ethereum with EIP 4337 it goes out of the main transaction flow and it does something over there. Not that technical to answer that, but for us it's natively supported and we do have the library ready to be used when you go through the docs. I don't know, something to also share is like just part of our transaction flow and not outside of it. Well, thank you very much for coming.
02:22:06.300 - 02:22:31.782, Speaker E: Hi guys. Oh, cool acoustic. Hi guys. Take a place, we are going to start. Don't worry, I'm not bite you. Hi guys. Welcome to workshop of Gnosis chain.
02:22:31.782 - 02:23:04.526, Speaker E: So today we will have two parts. First is more technical about how to build on Gnosis. What's the difference and benefits compared with other EVM chains. And the second part more focused on the business and convert result of your hackathon an MVP which you have on the end to convert to real work business in unicorn? I hope. So, let's start from the technical side. Sorry, it's not updated. Okay, so my name is Arseni.
02:23:04.526 - 02:23:56.930, Speaker E: I develop relations in Gnosis chain. It's a list of my useless achievement. I previously was founder of startups, alumni of Alchemist accelerator and part of developer Dao Crypto nomad clubs. So when I tell you why noises make sense to work first of all, it's not just EVM chain, it's established sister chain to Ethereum with rich history. We working already approximately more than eight years. We're one of the most closest EVM chain to Ethereum. We have the same structure, we have backend chain with our native token for voting it's a GNO but in execution layer we have Xdai as a token in which you pay for transaction fee.
02:23:56.930 - 02:24:53.506, Speaker E: Xdai is just Bridget original stablecoin dai from Ethereum. So it's one of the reasons why transaction cost in our chain very cheap. And in consensus layer we have a geno. As I said, we also have SDK bridge, we call it Hashi. If you check our bounty platform, they have a few ideas what you can build on Hashi to be eligible for this bounty. And it gives us opportunity to use agnosis chain as a data availability layer or as layer two to other chains and based on this technology also work in agnosis pay if you was on the Ethereum CC. So, as I said, the main idea of Hashi and other interbaltative protocols allows you to convert a UVM ecosystem with separate chain LR two to something like Cosmos.
02:24:53.506 - 02:25:45.090, Speaker E: If you're familiar with this system, because of pretty old chain, we have a lot of projects which we can participate or can integrate to not implement the same functionalities. We already existing and it already shows that we have users and TVL on our chain and some useful docs because we UVM chain. You don't need to learn something new. You can just use ordinary Ethereum tutorials to work. And some gnosis specific we have in separate documentation. So useful links. By the way, could you lift your arm if you're a developer with previous experience with Ethereum? Sorry, I not expect that you're not experienced.
02:25:45.090 - 02:26:43.474, Speaker E: Sorry for this. In any case, so for using cow chain for rapidly developing we provide you a file set and file set you can have tokens not only for testnet also for my net. The price of transaction is so extremely cheap, so one dollars will be enough on my net to deploy maybe ten contracts. We also of course have explorer of course free RPC in chain list we have already button which you add our testnet and my net to MetaMask and my contact if you need any technical support or advices. So if we want to talk about how to work with Gnosis if you already have experience with Azivam chain so you just add this configuration to your hard heart config and start working. Nothing special. The same with interaction from smart contracts.
02:26:43.474 - 02:27:22.930, Speaker E: You can just work with our chain, like with ordinary ethereum or polygon and other chains. It's not as important about the criteria which we expect from the project is first of all it's deploy smart contracts on glass chain. It could be testnet, it could be Minnet. It's a choice only for you. Provide some interaction with front end if you have front end to interact with. Smart contract which deployed on gnosis chain and have a few confirming transactions as a proof that the smart contract is working, not just deployed. And be ideal if you have working demo point bonuses.
02:27:22.930 - 02:28:44.154, Speaker E: We are not limiting you to make public goods or tooling but if you can show you that your project allows you to earn money, it will be really cool if you can show you how you're going to make it also will be cool if you make a competitor. Analysis will show that you are ready to continue work on your project in future and we will support you in any case. And perfect if you also can make a customer research during the hackathon as a few technical ideas which you can realize first of all is Faucet monitoring service because a lot of chains have a problem that the file set is empty and nobody can look after this RPC node monitoring service and load balancer like cloudflare but for nodes tool for migrate the app from one UVM chain to Gnosis chain UVM. Of course you can make it from gnosis chain to other chain or any one um chain to other UVM chain and some node improvement. As example you can extend if get balance RPC called and add support of returning balances or receipt fetched tokens as a balance. If you're talking about our native bridge which we call Hashi it's pretty new and we have lack of tooling. So you can take the tooling of the bridges and connect it to Hashi.
02:28:44.154 - 02:29:27.982, Speaker E: So it could be off chain actor or just explore or proof of block header or SDK or query message. As a bonus, I share with you my hackathon guide which I use during the works. It's pretty short. It provides you heated tricks, how to effectively use a hackathon and key points is start from the problem, not from the code. Make less features but that will be work. Use the sponsor as participant as the first users. It will give you correct feedback and advantages compared with your competitor on hackathon and biggest value.
02:29:27.982 - 02:29:51.204, Speaker E: It's not a price, it's a connection and letter of intents with potential your customers and of course have a fun because you spend your time you need to get something from this, your time. So that's all what I want to say from the technical side and I want to hello.
02:29:51.242 - 02:30:44.236, Speaker G: Hello everyone. So now that we got a bit of a technical overview, I'm going to go a bit into what kind of DApps you can build on Gnosischain, specifically one that I developed with my co founders, we're called Filoverse. It's basically a non financial DAP. We really wanted to show that, okay, it's time for the new generation of crypto projects that are not necessarily financial, that are not based on speculations or other. So ideally this is a DAP that you'll show your grandmother and tell her hey, blockchain can be useful. So this is the QR code just to Twitter. Because you're all builders, I thought that I would just start with a bit of journey, just tell you a little bit first about myself and then why we started this and how.
02:30:44.236 - 02:31:46.172, Speaker G: So, for myself, I'm a second time founder in crypto. In 2018, I created an AI Crypto app called Alithia. It was quite successful and now I'm fully focused on Falverse and on the side I'm doing my PhD on AI and cybersecurity at Oxford. Don't hold it against me. Now, when we started Filvers, it was a year and a half ago and what we really wanted to do is just start with a problem. There was one clear problem in our minds and it was one of the remaining points of centralization in our space. You go today to talk to any project, any dao, any company, individual in crypto, even hardcore decentralization fans, and you'll find that even Gitcoin Dao or the Ethereum Foundation itself are using Notion, are using Google Workspace, are using Microsoft Office, which amazing UX.
02:31:46.172 - 02:32:18.196, Speaker G: But there are a lot of problems with those apps now. What problem? I don't see a problem. A lot of people would say that immediately. So let me tell you a little bit about those problems. So online collaboration today is extremely predatory and centralized. You have no privacy, you have no right to exit, which is one of the requirements of the GDPR and you have no modularity. So specifically for web, three natives you can see that everyday online activities.
02:32:18.196 - 02:33:12.248, Speaker G: So not like swapping on Dex, which is you do that maybe three, four, five times, depending on how Djen you are. There needs to be an experience in crypto where every day you log in or you go on an app and you do stuff that are useful. So today most people are locked in in those centralized services. There is very little widespread utility for people that are just exploring for the first time web3. And one of the worst things is that web3 content is stored in centralized services somewhere in California. And on top of that, your first experience with the crypto world is high risk transactions, bad UX, and high barriers to entry for most people. So because you're all builders, let me tell you a little bit about our journey.
02:33:12.248 - 02:33:52.904, Speaker G: We had this problem, we wanted to solve it. We went on Gitcoin, presented our idea, and people loved it. So within the first round, we became one of the most successful grants on Gitcoin. And so for the next three Gitcoin rounds and the purpose of going on Gitcoin was one, bootstrap get donations, and the second was get validation. We don't want to just have an idea, start raising and try to convince people that our scam is worth it. You want to get validation, you want to see that people are interested in this and you want to have users. So this is how we started.
02:33:52.904 - 02:34:58.648, Speaker G: And probably my best advice is ship, ship, ship, ship, ship. So we started on Gitcoin, people were like, okay, here's our money. And at the end of Gitcoin round, we shipped a basic version that looks like we transfer you upload the file IPFS and to an encrypted, share the file with anyone you want. Eight months later this year, actually, in February, we launched Favos portal, which I'm going to demo in a second, and it was a resounding success. So we took what our users and our beta users were kind of giving us as feedback and the comments that they were giving us with the first version of the app, we integrated all that in a new version, which we call portal, and it was quite successful. Just in three days of launching the general access, almost every block produced on Gnosis chain had an average of fiverrs transactions in them. Over 3600 portals.
02:34:58.648 - 02:35:40.940, Speaker G: Smart contracts were deployed within two days. For those that did use our website instead of the IPFS gateway, we logged over 110 countries using the DAP, which is significant for a simple reason, which is financial. DApps in crypto are really hard to access for 90% of the world. You don't want to go on coinbase, have to buy assets in order to interact with the web3 world. We want to give people a clear access without needing tokens and getting the benefits of our values, meaning privacy, decentralization, and zero central points of failure. So. After that we were pretty happy.
02:35:40.940 - 02:36:05.928, Speaker G: We went into whitelisting mode and we're concentrating on 4000 user accounts and getting their feedback, testing stuff with them, et cetera. So, just a bit of an overview and then I'm going to demo and finish. The DAP is modular. We call it trustless. Collaboration. DAP. And you can basically think of it as a safe multi SIG.
02:36:05.928 - 02:36:34.216, Speaker G: So trustlessly manage assets as a group or alone. But instead of just assets, add files, add data, add data rooms, add contracts, add branding, which is essential for any Dow project, et cetera. So it's modular. You can also think of it as a browser. You can customize your browser with extensions. Now you can do that also with your workspace or collaboration space. You add a plugin.
02:36:34.216 - 02:37:00.128, Speaker G: I'm a reddit Meme lord, this guy might be a lawyer. We have different visions of what our ideal workspace will look like. So you can customize it with Plugins ecosystem. We've been doing organizing hackathons since 2016. This is something we're good at. We organized Shebuildz Tech a few months ago. It's the biggest gender focused hackathon in India.
02:37:00.128 - 02:37:29.692, Speaker G: Over 60% of non male contribution, which is significant in crypto. And it's on chain. So this is the link to the portal if you want to try it. It's unique, it's whitelisting at the moment, so you won't get another chance. Or you come see me after. And you can get a cool floppy disk that is for aesthetics and also with an access to the private link. Although I don't have that many.
02:37:29.692 - 02:37:47.064, Speaker G: So do scan that stuff. I'm going to wait one more second. Two more seconds. Cool. So before I conclude, let me show you Favos portal. This is the setup phase. It's a super straightforward process, like a safe multi SIG.
02:37:47.064 - 02:38:32.770, Speaker G: I hope the Wi Fi is going to be friendly. Like you can see already from the start on the URL here you have IPFS. You don't have to hit our servers if you don't want to. We're not here to log where your IP or anything like that. You can go directly from any IPFS gateway, access our static website and use our DAP like you would if you went through our service. So yeah, we have this mental model in our team, which is if we all die tomorrow, can our users continue using the DAP? And the answer is basically yes. Now, so I pick my chain, I'll pick Gnosis because it's highly decentralized and throughput is amazing.
02:38:32.770 - 02:38:55.480, Speaker G: Gnosis. I click on create the portal. It gives me a transaction, I sign it. And now you're deploying smart contracts on Gnosis. You can do it on Ethereum as well. And it will take a few seconds. Usually if you have a really good WiFi, it will take literally two to 3 seconds.
02:38:55.480 - 02:39:24.050, Speaker G: In the meantime, we are entertaining you with some blah blah. Okay, perfect. The next step is it's signless, it's gasless it's signless you don't need to sign stuff whenever you want to interact with a smart contract or update it. And it's at the setup phase. It's pretty clear I'm not going to do the whole thing here, I opened another portal just next to it. Okay, yeah. Thank you.
02:39:24.050 - 02:39:58.604, Speaker G: And this is what it looks like once you've set up the signless process, which literally takes a few seconds. So this is your portal. It's still in beta, but here you can drag and drop files, whatever you want. Let's take this. You can make it private or public private, anyone with a link, anyone that follows me, anyone that has my token or NFT, or a crypto punk or whatever you want. Or my collaborators, meaning people I've manually added to my smart contract. Or you make it public.
02:39:58.604 - 02:40:35.064, Speaker G: If I click on public, no signature, you're uploading right now by default on IPFS, but you can do it with local storage, you can do it with Rweave, you can do it with whatever you want soon. Also for those who prefer even centralized services, but I don't recommend it. Now you copy the link, you can share it with anyone you want. You have the QR code and you have an IPFS hash if you want. Here I can upload another or I can go into my productivity tools. So Google Workspace doesn't have this. But let's say I want to do something cool like that.
02:40:35.064 - 02:41:10.032, Speaker G: I want to put that here. Here I'm going to write demo. I can zoom out. I can zoom out and I can literally do anything I want on this page, on this whiteboard. And the coolest part is that you can invite 1015, 100 people on here. They'll all remain anonymous, they'll be represented by the ENS or their address, and they'll be interacting with you through peer to peer tech. So here I'm putting a title.
02:41:10.032 - 02:41:52.748, Speaker G: I don't even need to publish it on IPFS or whatever storage option you decided I can just leave. And if I go in my files, I'll find it in my draft. The way that the draft works is with piece of tech peer to peer storage network called Gun. Gundb is something used by a lot of political activists, so it's quite resistant, resilient, and quite effective. Your files are here. Your folders are here. Here you can add manually or with a CVS as many addresses you want on your vitalik TTH.
02:41:52.748 - 02:42:39.650, Speaker G: You can add them manually or with a CVS onto your smart contract, which will give them access to create also files on that same portal or other. You have some analytics as well. You have settings to customize your portal and I'll finish just with that. You also have a public view of portal. So this is me with private access to my portal, and this is a public one. I want to share that link with someone because I'm a writer, I'm a dow that wants a community wiki, anything like that you can have your files here, you can put any types of documents, you can token gate them, you can make them super private, you can make them public. Here's your profile, you can fill in stuff about yourself.
02:42:39.650 - 02:43:43.236, Speaker G: And I'll show you one last cool thing, which is any of the files here are public. I'm going to click on this one. It was probably one of the biggest requests from our early community members on Dropbox, on Google Drive, on Microsoft Office, you cannot load render 3D files. And we have a lot of 3D artists and graphic designers that were complaining a lot about that and they said hey, can you fix that? So we did again, peer to peer tech, you can navigate any 3D file that an artist or whoever or your NFTs without needing to go on openc and you can navigate and you can even chat with whoever shared that file with you. Hello, I'm represented by my address, it's end to end encrypted. There are some analytics about the file, I can upload a new version, I can edit it a little bit, et cetera, and I can download of course, the file. So I'll stop here.
02:43:43.236 - 02:44:07.576, Speaker G: I hope you liked it, I hope you'll shill it. Please talk about us on Twitter because yeah, I think that next bull run it will be very important to have non financial DApps DAPs that show that the space is not only about speculation and it's about reinventing the web. Two world with better values, privacy, no central points of failures, et cetera.
02:44:07.768 - 02:44:29.510, Speaker E: Thank you. You sorry. How you convert idea?
02:44:30.840 - 02:45:25.904, Speaker G: Okay, so like I said, you start on Gitcoin. Best place to start building the InOpen. We were open source, we were free, we still are and apply to grants. And the most important advice I can give you as builders is get validation, get traction and validation. Show people that users come to your DAP, they're seeing the same problem you're seeing and the same solution you're proposing. So that's the best way to bootstrap and make sure your idea is not just a great idea in your head, but a great idea for everyone else. And once you've done that, so we've been doing that for a year and a half, then you can start testing stuff, you can start monetizing with some users dows who might have communities of 1000 people and might want to customize the smart contracts, et cetera.
02:45:25.904 - 02:45:35.530, Speaker G: Or you fundraise and if you fundraise, maybe go more towards angels and protocols. Not necessarily. Yeah.
02:45:36.060 - 02:45:38.570, Speaker E: How do you reach potential customers.
02:45:41.100 - 02:46:19.124, Speaker G: In crypto? I would say it's gitcoin. Gitcoin twitter be good meme lords, spam Twitter with anime, stuff like that. Try to feel the vibe of crypto and respond to it. And if you want to expand beyond there's product hunt, there is reddit, there is places where you can also go and try to fetch non web3 users and introduce them to the web3 world. I'm putting the link here one last time in case anyone has missed it.
02:46:19.242 - 02:46:19.910, Speaker E: Cool.
02:46:20.920 - 02:46:42.030, Speaker G: And also, yeah, floppy disks. The DAP is on the back, QR code and URL, a bit of a description. And inside, some of them have some Easter eggs. You might have doom compressed on it. You might have a private key, you might have a vulnerability. No, I'm kidding. But yeah, that's it.
02:46:42.030 - 02:46:46.748, Speaker G: If there are no more questions, I'll stop here.
02:46:46.914 - 02:46:47.630, Speaker E: Yeah.
02:46:50.080 - 02:46:50.830, Speaker G: Super.
02:50:42.240 - 02:51:39.910, Speaker B: Good. All right, well, hello, everyone. I'm Penrin. I lead developer relations at WorldCoin, and I'm here to talk about global proof of personhood with World ID, the protocol developed by WorldCoin and tools for humanity supporting the WorldCoin ecosystem. So in this workshop, I'll go over what World ID is, why WorldCoin created it, what you can do with World ID, and most important part, how to integrate World ID. So World ID answers this question of, like, how do you know who or what is a real and unique person? WorldCoin started out as a project that wanted to give everyone in the world a little bit of cryptocurrency to introduce them to this digital economy. But in order to do that effectively and fairly and not get a bunch of money taken by bots, you basically have to solve the civil resistance problem.
02:51:39.910 - 02:52:42.376, Speaker B: So we did, right? That's why we built World ID, which also, fun fact, as of yesterday, is now publicly available. So for those of you who have hacked on World ID before and remember having to scan a QR code, get access to the Dev portal, that's done. All of you can build on World ID now, which is great. So we need World ID to be private, inclusive, and robust. We want this proof of personhood system to not unnecessarily disclose any information about who you are and keep that privacy and anonymity wherever possible. We want it to be inclusive, right? This needs to be something that as many people in the world can use, especially when our mission is introduce the entire world to this new digital economy. And we also need it to be robust, right? We need to make sure that every real person can only get one account, right? So as many real humans as possible, but each one only gets one.
02:52:42.376 - 02:53:43.612, Speaker B: And we also don't want to know which real human you are, just that you are a real human who's unique. So when we look at ways that we can go about sort of building this system, we looked at, like, verifying emails or phones, which is nice and simple. It's super accessible. It's also not robust in any way. I myself have multiple emails and multiple phone numbers, and that just breaks one of the three core pillars of what World ID needs to be. We looked at doing KYC on official government IDs, but the problem with that is that less than half of the global population has a digitally verifiable government ID, it's just not inclusive enough for us. We looked at Web of Trust systems, but the issue with Web of Trust systems is that when you start with a Core Verified Set, right, of 100 or 1000, to scale that to all of humanity, you have to get a lot of hops of verification away.
02:53:43.612 - 02:54:47.788, Speaker B: We're like person A, verifies person B, person B, verifies person C. Eventually you're like 20 hops away from that initial Verified Set, and every single hop is less trust that you can have that that Web of Trust actually is working effectively. So with that, we settled on Biometrics, which initially sounds scary, and skepticism about it is a good thing, but we do manage to do it in a privacy preserving way when it comes to the biometrics that we use. We looked at fingerprints and face scans and palm scans, but the issue with those is that there simply isn't enough information to distinguish people on the scale of humanity. Touch ID and Face ID on your iPhone can distinguish about one in 30 million people, which works just fine when you're trying to prove that the person in front of the phone right now is the same person who was in front of the phone months ago when they set it up. Right. The odds that the person who steals my phone in the United States is one of ten people in the country who would also be able to unlock my phone, I'm happy with those ODS.
02:54:47.788 - 02:55:12.216, Speaker B: But when we're trying to prove that you're different from everyone else who's in the global population, one in 30 million doesn't cut it for us. We also looked at DNA. Problem is that it's highly invasive in every way. It's impossible to do that in a way that doesn't tell you a lot about that person. So that one got cast aside pretty quickly. And we settled on the iris. Right.
02:55:12.216 - 02:55:41.228, Speaker B: The iris has far more entropy than fingerprints, palm prints, face scans. It's well studied. And additionally, it's really, really hard to do it without someone consenting to it. Right. If someone is trying to scan your iris, you can close your eyes. Right. And it's the kind of thing where, at the level of detail that we use with the orb, it's not something that you can do passively, it requires your attention.
02:55:41.228 - 02:56:14.952, Speaker B: So that consent is sort of built into the system as well, which is important when dealing with biometrics. So then, now that we've settled on iris verification, how do we actually want to implement that? Phone sensors sound great. A bunch of people have them. Problem is that the quality isn't super great, and it's also not a trusted hardware solution. You can't be sure that someone isn't just piping in a bunch of fake data to the camera module. Right. For off the shelf hardware.
02:56:14.952 - 02:56:42.016, Speaker B: Similar situation. It can be a more trusted environment, but it still is not fully trusted. And again, we ran into issues with the quality of the photos of the Iris it was able to take. So we settled on building custom hardware, which taking the leap from we want to give everyone in the world a little bit of cryptocurrency to we're a hardware company. It's a really big leap. And I always just think it's really funny how that's what ended up happening. But this is the custom hardware.
02:56:42.016 - 02:57:18.640, Speaker B: We built the orb. We have four of them down at our booth as well. So what the Orb does, or sorry, the Orb has been in development for quite a few years now. It started development right before the Pandemic hit back in 2020. It's gone through a lot of evolutions in order to make it more secure, be able to scan people more quickly, things like that. There's an incredible amount of engineering that's gone into this device. So the Orb makes sure that you're a real human, right? It can tell if you try to put a cat or a dog in front of the Orb.
02:57:18.640 - 02:58:12.672, Speaker B: It takes photos of your Irises and on device, without ever needing to store those photos anywhere. Calculates an Iris code, a digital representation of the entropy of your Iris. And then once it's verified that Iris code is unique to all the other Iris codes that have been signed up, your World ID is then verified. So your World ID is a self custodial identity stored on your mobile phone. And when we verify that, we actually take the public key of that identity, put it into a merkel tree on chain, so that you can then generate zero knowledge proofs in the world app attesting that you are one. Of the identities in that set without revealing which one. So that you can maintain that privacy and anonymity that we want to help you maintain while simultaneously proving that you are a unique human and being able to prove that you're only taking a specific action once.
02:58:12.672 - 02:58:54.040, Speaker B: So when it comes to civil resistance and knowing that someone isn't a bot, it's an incredibly powerful solution to do that when you don't even have to tell WorldCoin your name, right? So yeah world. ID is like this. It is a global digital identity protocol, somewhat like an Internet passport. These credentials are like stamps in that passport. So Orb verification is the strongest credential right now. We also offer phone verification, which is a much, much weaker credential where you've verified that you control a phone number in the app. It's useful in some situations, but for a lot of other situations, you'd want the really strong proof that Orb verification provides.
02:58:54.040 - 02:59:28.820, Speaker B: Which is why that you can configure which one you want to use when you're using World ID. And I can explain more about that later. Right? Okay, I went over these credentials already. So, World ID is built to be privacy first. It's decentralizing, right? And it's open source. So decentralization is a gradual thing for us. If we had started out fully decentralized immediately as a Dow, then we would end up a lot shorter than we've gotten today, right? Building things is tough, especially when there's hardware involved.
02:59:28.820 - 03:00:21.752, Speaker B: But we want to decentralize as much as possible. That's why we have the WorldCoin Foundation that stewards the protocol, whereas Tools for Humanity is the corporation, like building the orbs and things like that. And it's open source. So the Smart Contracts, our front end widget, all of that is available on GitHub. There's a lot of different use cases for this proof of personhood system, right? Voting is one that makes a lot of sense. You want to let someone vote, know that they're only voting once, and also de anonymize themselves between their different votes or sorry, anonymize themselves amongst their different votes, right? So that you can't just look at someone's voting history for customer incentives. This is one of my favorite use cases where say someone's orb verified, you know, really strongly that they're only going to be able to claim that sign up discount once.
03:00:21.752 - 03:00:55.268, Speaker B: Maybe you give them 50% off their first order. Whereas if they're phone verified it's a much weaker credential. You still want to give them something maybe 5% off their first order. And you do that because with the phone credential, there's a higher chance that they're going to be able to create another account verify again, right? Like I know I have gotten months of free Netflix out of spinning up new emails to get that two week free trial. And we built World ID also to be super easy to integrate. You can use it on web, on mobile, and on chain. And there's two main ways to integrate World ID.
03:00:55.268 - 03:01:29.872, Speaker B: You have sign in with WorldCoin and Anonymous actions. So Sign in with WorldCoin essentially wraps World ID in an OpenID connect provider. So if you've ever implemented like sign in with Google in an app, it's extremely similar. Anonymous actions are a little bit more flexible. That's where you can ensure a user is doing something only once. For the civil resistance and anonymous actions, you can do both just on the web as well as on chain. So let's start with talking about signing with WorldCoin and let's see how it works.
03:01:29.872 - 03:02:03.700, Speaker B: So I will actually demonstrate this for us right now by signing into our developer portal. We can see my phone right here. So for me to sign in with WorldCoin, which we have to use for our developer portal, I click Login, pops up this QR code for me to scan. I tap the button in the top left in the app, scan the QR code. Oh come on, don't fail me now. Let's try this again. Refresh the page.
03:02:03.700 - 03:02:47.580, Speaker B: It's wallet connect underneath. Oh, interesting. Let's try it this time and see if it works. Here we go. So I hit verify with World ID and that zero knowledge proof is generated on my device and now I'm signed into our developer portal yay and I'll walk us through that a little bit more later. So there's a bunch of different ways that you can integrate sign in with WorldCoin. We have an integration with Auth Zero now, so in about 5 minutes if your app already uses auth zero for sign in, you can add sign in with WorldCoin.
03:02:47.580 - 03:03:50.148, Speaker B: We have a Nextauth JS template. So if you are building on Next, you can implement sign in with WorldCoin super easily. That way if you're using some other authentication provider, you can use the OIDC well known file or you can custom build your OpenID connect flows or there's plenty of different ways you can do this, but I'll walk us through how we would integrate it with Next JS. This one configuration file is all you need to integrate sign in with WorldCoin. Using Nextaut JS you're just creating a single provider for Nextauth. You give it the well known file from an OpenID configuration which is part of the standard you have to pass it the client ID and client secret that you get from our developer portal and then we map the information returned from our OpenID connect provider to that user in your app. Right? So if I want to create a client ID and client secret first let's start with creating an app.
03:03:50.148 - 03:04:33.410, Speaker B: I click up here add new app. Let's just call this Paris test. So let's just say I want to go straight to production. If I want to use sign in with WorldCoin, I have to make it a cloud action create new app, I click sign in, I can get my client ID here which is also the same as the app ID. And then for client secret, I reset it there, I copy it, I put it in the configuration. Additionally I have to put in a redirect Uri. So if you use our template that's explained in the README, it's just the specific route that our sign in page knows to redirect your user to after they've completed the verification with World ID.
03:04:33.410 - 03:05:25.508, Speaker B: So once you've done all that, sign in with WorldCoin is already just implemented. It's that simple. And now let's dive a little bit into anonymous actions. So anonymous actions you're able to know that your user is a unique human doing something once with a specific signal, right? And that signal is a lot more useful for on chain use cases generally. So one example there is that if you're offering an AirDrop and you want to make sure that your users are real humans, they each just get to claim that AirDrop once. What you would use the signal for is the wallet address that they are claiming that AirDrop to. That signal gets used as a little bit of information included in the proof generated on the user's device that you can ensure hasn't been tampered with.
03:05:25.508 - 03:06:20.870, Speaker B: Right? So it would really suck if someone were to like man in the middle, attack your app, change that address, and then the user accidentally submits a transaction claiming their AirDrop to someone else's address. But using the signal prevents that because if that gets changed, the proof won't verify on chain, right? So let's see a quick demo of what using Anonymous Actions looks like. So I have My little world ID playground. This is based on our cloud template, which is freely available for all of you to build on top of as well, let me make sure my phone's unlocked. So I click Verify with World ID and this opens up Idkit, our front end widget, which is used for any situation involving anonymous actions. So I'll go ahead and scan this. Like the flow for your user is very, very similar.
03:06:20.870 - 03:06:52.044, Speaker B: Oh, this is a staging action. My bad. How about I use the simulator then? So when you're testing things, we have a simulator for that, especially if you're testing civil resistance. If you only have your one World ID on your phone to test with, kind of sucks. Simulator helps fix that. Where we have a bunch of identities here there's five, and you can always just add more. They say unverified that will change in a few seconds.
03:06:52.044 - 03:07:27.528, Speaker B: All of these identities in the simulator are already phone and orb verified. So if I want to go ahead and verify here at the simulator, I can actually click the QR code to copy the information there. Go over to the simulator. I click manual input. Since I'm on desktop, you can also use the simulator from your phone. I click Submit, and then here I can select which credentials I actually want to use as part of that proof. So if I wanted to test being only phone verified, I'd uncheck Biometrics only orb verified, uncheck phone both leave them both checked.
03:07:27.528 - 03:08:11.544, Speaker B: With our proof system, we actually just return the highest Credential. So phone and Biometrics both checked versus just Biometrics checked won't actually change anything. But I'll go ahead and click Verify with World ID if I go back here successfully verified, and it tells me about this nullifier hash. That nullifier hash is sort of the unique Identifier for a user in the context of an action, right? So if the same user tries to take the same action twice, they'll generate the same nullifier hash, which is how we can implement civil resistance. So let's go back to the slides. Everything using anonymous actions starts with Idkit. It's one react component.
03:08:11.544 - 03:08:53.320, Speaker B: You can also use it with vanilla JavaScript and you have to give it information about the action you're performing. So the name of the action your app ID for that app you've created in the developer portal, the Credential types you want to accept, it's an array of phone or orb. This is also TypeScript. If you're using non TypeScript JavaScript, then you would just have strings, orb and or phone. There's two callback functions on success is mandatory. Handle verify is optional. Handle verify is it shows the user a loading state while that's being called, and waiting for response on success is what gets called after the Idkit modal is closed.
03:08:53.320 - 03:09:30.736, Speaker B: There's plenty of other things that you can configure, and our docs go over all of those, but this is basically everything you'd need. You also have to pass it a child like button that opens the component when the user clicks on it. And then once the user has finished this flow with Idkit, this is the response that you get. You get a merkel root. So the root of the merkel tree against which you should verify these proofs. You get the nullifier hash, the unique Identifier for that user in the context of that specific action. You get a really long hexadecimal string.
03:09:30.736 - 03:10:11.404, Speaker B: That's the proof. And that one you don't really need to worry about too much. You just pass that either to our API or the smart contract on chain when you're verifying that proof. And you also get which Credential type that user's been verified with, but you have this response, you still have to verify it because that proof is sent directly to your front end from the user's device. We use Wallet Connect to create that connection between your front end and the World app so that the user can pass that proof to you. We do that because we can't monitor that. Again, we don't want to be able to associate actions back to the same user.
03:10:11.404 - 03:10:51.740, Speaker B: So when we have a direct connection between the user's proof generation on their device and the thing they're trying to verify with, it helps keep that anonymity and that privacy. And you can verify that proof either on chain or with our API. So if you want to do it with our API, you should first pass information returned from Idkit to your backend. Because if you try to verify that proof with our API directly from your front end, the user can still manipulate the response, right? Nothing in the front end is secure. The user can always modify that. So you should pass it to your back end and then call our API.
03:10:51.820 - 03:10:52.112, Speaker E: So.
03:10:52.166 - 03:11:29.032, Speaker B: Developer Worldcoin.org API V one, verifyyourappid. You pass it information about the app ID, the action, the signal, if you're using it, because the signal is optional. And then the merkel root, the proof, the nullifier hash, everything like that. Again, our template repositories already handle all of that for you to make sure that you can't do it wrong. And all of the required parameters for this API call are gone over in our documentation. So then, if you get a 200 response from our API, great.
03:11:29.032 - 03:12:11.514, Speaker B: You should go ahead and mark the user as verified in your database or whatever else it is you want to do after you know, they're a verified human, and then send a response to your front end to. Let them know everything is good for on chain verification, it's a little bit more complex. So in the constructor you'd set the address of the World ID smart contract that you want to verify against. If you're looking at our docs, you'll see contracts called the World ID router. Those are the contracts you should verify against. They are available on Ethereum, Optimism and polygon, both mainnets and testnets. So for testnets, it's ethereum.
03:12:11.514 - 03:13:03.440, Speaker B: Girly optimism. Girly polygon mumbai. That is a new change that some of you who've hacked with World ID in the past might be kind of surprised about. We just finished our migration to Optimism yesterday, so we're super happy that now you can use World ID on a much broader variety of chains than just polygon, and you can find the addresses for those contracts. Again, in our docs we have an address book that goes over everything there the app ID and action ID are generally things that you would set in the constructor as well so that those can't be tampered with, and it also keeps things more gas efficient. The external nullifier is basically just the Identifier that semaphore the zero knowledge proof system that we're built on uses to identify that action the user is taking. It's a combination of your app ID and action ID.
03:13:03.440 - 03:13:51.200, Speaker B: And then your verify and execute function will take in a few different parameters, like the signal, the root of the merkel tree, nullifier hash, and then that proof first it checks to make sure we haven't seen that nullifier hash before, because you have to implement the civil resistance yourself. In a smart contract we call the verify proof function. On the World ID smart contract, the group ID is zero for phone credentials, one for orb credentials. You can also set that in your constructor. If you only want to accept one or the other, you pass it the other information you've received from Idkit, and then if that doesn't revert, everything checks out. You add this nullifier hash to the list of nullifier hashes we've seen before so that you make sure that user can't do that same action again. Once that's all done, then you would mint them an NFT, let them claim an AirDrop, whatever that may be.
03:13:51.200 - 03:14:21.800, Speaker B: And in this hackathon we've got 20 grand of prizes. I don't need to read all of these to you. You can look at them on the website or just read them right now. If you have any questions about them, feel free to find me at our booth. And then we have a bunch of resources for hackers as well. So Worldcoin.org Paris 23 will take you to a notion page that goes over our bounties links to our template, repositories or documentation, everything you need in order to build on World ID.
03:14:21.800 - 03:14:43.130, Speaker B: I'll give everyone a little bit to scan that QR code. I mean, it's just my closing slide after this. I might as well just leave that up for everyone. Any questions? I think yeah, you there?
03:14:46.300 - 03:15:10.992, Speaker E: Yeah. Thank you so much for the talk. In the very beginning when we entered, you mentioned that when you generate the ID, like, based on the orb with iris of the human eye, you check that it is unique. Right. Two things have you mentioned the cases when it's not unique and what you do if you get the same. Thank you. Yeah.
03:15:11.046 - 03:16:11.810, Speaker B: So the way that we check that it's unique is that that iris code and the public key of your identity get uploaded to WorldCoin servers. And then our servers compare that iris code with all of the other iris codes that we've seen before. We don't actually check strict mathematical uniqueness, we use the Hamming distance. So how different are these two iris codes when comparing one to N? Because your iris code can change slightly over time, right? Your iris will just change a little bit as you get older, and then it's like, is it different enough from all the other iris codes? In the situation where we do have a user whose iris code is too similar to one that's already in the set, we simply just return like, hey, you've already signed up. Right. The orb will tell them that the verification is not successful, and then we don't insert the public key of that identity into the merkel tree. We just turn them down.
03:16:11.810 - 03:16:26.616, Speaker B: Because for us, our algorithms on the orb right now, we are extremely confident they can handle one in a billion today. So the odds of a true collision in that iris code is so unbelievably low.
03:16:26.798 - 03:16:32.116, Speaker E: What about Russ? Yeah. What about the identical twins?
03:16:32.308 - 03:16:32.920, Speaker B: I'm sorry?
03:16:32.990 - 03:16:35.080, Speaker E: What about identical twins? The twins.
03:16:35.160 - 03:16:37.016, Speaker B: Oh, twins have very different irises.
03:16:37.048 - 03:16:37.244, Speaker E: Okay.
03:16:37.282 - 03:16:37.864, Speaker B: Even identical.
03:16:37.912 - 03:16:46.050, Speaker E: I didn't know that. Okay, thank you so much. Hi.
03:16:46.740 - 03:16:50.512, Speaker G: Could I somehow take a full list of verified users?
03:16:50.656 - 03:17:27.032, Speaker B: No. On chain, I mean no, like, you can have the merkel tree of the public keys of the identities. Right? And one thing to note is that the key pair for your identity is completely separate from the key pair for your wallet. So that merkel tree is publicly available. But the public key of that identity is only ever revealed when you're getting verified@the.org, because anytime that you are using World ID to verify to some other app, you're just generating a zero knowledge proof that you're one of them in that tree. You don't tell them the public key of your identity.
03:17:27.032 - 03:17:36.560, Speaker B: So we do that again in order to preserve users privacy. So, no, you can't see just a list of all of the identities that have been verified.
03:17:37.460 - 03:17:42.340, Speaker G: Could they be able to get such list after the AirDrop?
03:17:43.640 - 03:17:45.252, Speaker E: Would they be able to take such.
03:17:45.306 - 03:17:47.776, Speaker G: List of all of the verified users after the airdrop?
03:17:47.808 - 03:17:50.800, Speaker A: I mean, the World coin, the exact coin.
03:17:50.880 - 03:18:05.870, Speaker B: Well, with WorldCoin, we do token grants over time, so the token is still not yet live, but users can claim beta grants of the token one per week. So yeah, there's not like one moment.
03:18:08.240 - 03:18:22.192, Speaker E: Hi, I have a great idea for the hackathon, which is decentralized science, getting responses from the real users, some behavioral economics. If you are looking for the team, please join me.
03:18:22.246 - 03:18:26.380, Speaker D: Decentralized science and tapping into unique users.
03:18:26.460 - 03:18:31.104, Speaker E: Running some social experiments. Behavioral economics.
03:18:31.232 - 03:18:33.110, Speaker D: Please join me. Thank you.
03:18:35.080 - 03:18:37.430, Speaker B: Okay, this guy's had his hand up the whole time.
03:18:37.960 - 03:18:58.124, Speaker E: Hello. Thanks for the presentation. So I have few questions. I mean, how much time you have? I don't know, but let's go with the first one. So what does with the data? What happens with the data in the orb? Scans my eye. And then what happens with that data?
03:18:58.242 - 03:19:33.960, Speaker B: So if you didn't opt into having the photos stored, they get deleted from the orb. If you did opt in, they are uploaded to our servers in Germany using sealed box encryption. You can choose to have them deleted at any point in the future. And then there are two things that we would use those photos for. One is that if we significantly upgrade our Iris code algorithm in the future, we would be able to just run that algorithm on the photos that are stored for users who opted in, whereas users who didn't opt in would have to go back to an orb to reverify. We can also use those images to help improve our algorithms and make them more secure.
03:19:34.620 - 03:19:39.240, Speaker E: Okay, and what gets stored on Chain?
03:19:39.740 - 03:19:46.280, Speaker B: What gets stored on Chain? The only thing that's stored on Chain is that merkel tree of the verified identities.
03:19:46.440 - 03:19:48.920, Speaker F: And what's inside the merkel tree?
03:19:49.080 - 03:19:59.008, Speaker B: Just the public. It's the identity commitment, right? Essentially the public key of these identities that never gets revealed in any other situation.
03:19:59.174 - 03:20:00.720, Speaker F: But it's like a hash.
03:20:01.380 - 03:20:05.040, Speaker B: It's the public Identifier of that identity.
03:20:06.100 - 03:20:06.850, Speaker G: Okay.
03:20:07.300 - 03:20:11.680, Speaker B: Just like you have the wallet address of your wallet, this is the public key of your identity.
03:20:11.760 - 03:20:12.630, Speaker E: Thank you very.
03:22:34.760 - 03:23:00.584, Speaker C: Hi, everyone. Welcome, welcome. Yeah. Good to see all of you. Welcome to the FalcoIn Talk FalcoIn FBM IPFS My name is Sarah. Let me just slide show this, right? My name is Sarah. I lead FBM developer experience, but I'm also representing FalcoIn, and we have various tools you can use for storage in our ecosystem.
03:23:00.584 - 03:23:26.084, Speaker C: So I'm going to kind of run you through what you can use in this two day hackathon. Also being super realistic, I know it's super stressful to finish a two day hackathon and produce something great. So I'm going to show you one easy demo and also give you options for more technical versions. If you choose that you don't want to sleep tonight, so it's really your choice here, right? I'm giving you all the options. I'm available on Twitter here. So if you have any questions, you can always DM me. And we have an FBM dev Twitter account.
03:23:26.084 - 03:23:59.856, Speaker C: We've been featuring really great devs that have been partnering with us in the ecosystem, like Zondex and other partners and early builders that have been helping us. Yeah, and if you want to tune in on a twitch, we have occasionally live coding sessions where you can kind of see us try stuff out. It breaks, we fail, and then we try to fix it and figure it out together. Cool. All right, so we're going to get started. All right, so I'm going to assume you're kind of designed your project. It's already been a few hours, and you're like, what do I do with my storage? Right, so some simple options for you.
03:23:59.856 - 03:24:27.464, Speaker C: We're going to run through them. So we're talking about leveling up, right? So I'm going to get from simple super easy to deploy to get a little bit more, well, not complex. It's still really easy. And then lastly, super complex, but you get more programmability and more logic and more customization together with it. So on level one, we have pinning on IPFS, which is web3 storage. I'm sure many of you know IPFS or are fans of it, usually show of hands. IPFS used.
03:24:27.464 - 03:24:48.256, Speaker C: See, there you go. There you. So, yeah, all of you are familiar with that. If you use WebView storage, they have a super easy SDK. I just did a demo at Encode hacker house, so I think I see some familiar faces here. So I will then focus on the level two, which is around Lighthouse. So Lighthouse storage is similar to web3 storage, but they have more functionality on the back end.
03:24:48.256 - 03:25:31.148, Speaker C: So Web three storage was really meant to be super, super simple to use pinning on IPFS, retrieving it, your data could disappear over time because it won't be pinned there forever. Lighthouse storage allows you to pin on IPFS. They also back it up onto FalcoIn by making a storage deal for you on the network. And very, very recently, like literally two days ago, up to the last minute, we have been fixing out our Verifiable proof for small pieces of data. So not only do you store your small image as part of a larger data deal on the filecoin network, but you can also verify that your small piece of data is stored within a larger deal and exactly where it sits. So rather than unsealing the entire data deal, you can just try to look up for that one small JPEG that you want and then retrieve that. So very cool functionality coming in there.
03:25:31.148 - 03:25:44.972, Speaker C: And then lastly, level three, we will be storing on FalcoIn. So you're storing it directly from a smart contract. This is enabled by the FalcoIn virtual machine. So anyone here has used the FalcoIn virtual machine? Yeah. Okay. The numbers are increasing. Hackathon and hackathon.
03:25:44.972 - 03:26:11.444, Speaker C: Okay, awesome. So, yeah, if you use Falcon virtual machine, because of that, we are fully Ethereum compatible. So for the first time, you will be able to interact with the FalcoIn protocol prior to that. For the past like seven years that we've been building our network, you couldn't really interact with it unless you are a storage provider and you want to run your own node, make the deal yourself. With the Falcon Virtual machine. We're now fully ethereum compatible. You could start a storage deal from a smart contract and from a solidity smart contract.
03:26:11.444 - 03:26:43.168, Speaker C: So perfect for East Global. It does take a little bit longer, about 24 hours for a deal to be made, but I have seen people submit projects where they show proof of concept of it working. The deal doesn't get made. And that's totally fine as judges because we know that it takes like 24 hours or so, right? But you can definitely include that in your project. And the cool part here is that you will be able to add whatever you want to your solidity contract. So you can write logic around native storage primitives. We have created a library called Filecoin Solidity that will allow you to use solidity calls to then interact with the filecoin storage primitives.
03:26:43.168 - 03:27:12.076, Speaker C: So you could do things like get deal status, how long is my deal being stored for, can I renew my deal? And so on. So, a lot of things there. If you head over to the booth later, I don't think I have it in my slide. This is the tutorial for our main contract that allows you to make a storage deal. And you can play around with that. But if you need more resources, I will be at the booth and I have a cheat sheet for you that will have all the FBM resources that you need. So this is how you go from level two to level one to level three.
03:27:12.076 - 03:27:35.716, Speaker C: And yeah, I've tried to simplify as much as possible so you can kind of see straight away what are your options for the hackathon. Cool. So I'm going to run through the architecture a little bit. Just a quick TLDR for anyone who's new to our ecosystem. I know that sometimes for me, I joined Filecoin and for like three months I thought IPFS and Filecoin were the same thing. They were not the same thing. So surprise to me.
03:27:35.716 - 03:28:02.620, Speaker C: And the difference here is that IPFS is a PDP network. So this is not actually running on the blockchain. What you'll be doing is pinning your data to nodes that are hosted by a community, or you host it yourself. So these clusters show three different options that you can use when you use IPFS to make sure that your data is perpetually stored somewhere. Well, technically it's not stored, it's pinned. Right? You could run your own notes. You could run notes of your community, or you could pay a pinning service like Pinata to do so for you.
03:28:02.620 - 03:28:55.376, Speaker C: However, with running your own notes and running with a community, it's hard for you to guarantee that your storage is going to sit there forever. Because if you break up your friends or you choose not to run your notes anymore, your data could just disappear, right? So that's why we've created the filecoin protocol. So TLDR for those who are new to this, the way that it works, if you look at the top over here, which is the dotted box here, you would make a deal with a client and a storage provider. You would then handshake make a storage deal and negotiate a deal, how long you want to store it for, how much you want to pay. Once the terms are agreed upon, the storage provider will then make the storage deal and publish it on chain. So on chain will show your deal's metadata, right? How long you want to store it for, how big is your file size, and so on. But the file transfer happens off chain, and that is represented by the network you see over here, which is all our storage providers here.
03:28:55.376 - 03:29:27.784, Speaker C: They would then represent themselves on chain by periodically posting proof of your storage deal to show that, hey, my data is getting stored every single, I think every 24 hours, they have to submit some kind of proof, proof of spacetime, and so it'll prove that your data is being stored continuously, right? But then they'll store all your data off chain. So it's really up to them how they want to store it. And you can choose what kind of storage provider you want to work with based on the profile that you know. So some might store it in hard drives, honestly, some might just print it out and store it in a box. But that's really your choice. It's a preference. So that's how the Farcoin protocol works.
03:29:27.784 - 03:30:21.944, Speaker C: So it's because it's incentivized as a storage marketplace, it will then guarantee that your data is stored perpetually or for as long as your deal lasts, right, the way that we usually use it now. So on a realistic note, when you store your data, you then want to retrieve it, right? If you're storing it on filecoin and you want to retrieve your data, it does take longer for you to unseal the data that has been sealed cryptographically by the storage providers. So if your deal takes 24 hours to make, it could then take multiple hours to then unseal and retrieve your data. So unless your storage provider has agreed to terms, which some storage providers do, to put an unsealed copy together with your sealed copy, so that means that they store double the amount of data. But that is their choice. And we have a really easy tool called Lassie that you can then retrieve your data from. So if you're using level three, which I showed you just now, the FalcoIn virtual machine client contract, if you clicked on that tutorial, you could then use Lassie as part of that.
03:30:21.944 - 03:30:49.750, Speaker C: It's within the tutorial, you can use Lassie to then retrieve your data pretty quickly. If it's unsealed and on the testnet, it is, but realistically, on the main net, it probably most of the time is not. So the way that you will normally store data, we do recommend that you use Filecoin together with IPFS. So if you're planning to build a project, that's something to keep in mind. So IPFS will allow you to pin a copy and then you store it and back it up onto filecoin. IPFS allows you to do quick retrievals. So that's how you can quickly get your data however you need it.
03:30:49.750 - 03:31:23.356, Speaker C: So far, I know it's like quite a lot. All good, everyone still with? Great, great, great. Okay, so this is an example of the metadata of your storage deal. I know you see a lot of words, but I'm going to walk you through it. So if you look at the backslashes, you'll see P size verified deals start epoch and epoch how long is being stored on chain, how long your deal is supposed to last for storage price per epoch, how much you're going to pay and offer your storage provider. And provider collateral is not for you. Client collateral is how much you want to put up for the deal to then make that deal proposal and so on.
03:31:23.356 - 03:31:55.800, Speaker C: So these are all the metadata within your storage deal. Once it is accepted, it gets posted on chain. Right. So why did I show you this? Because this is kind of important for the next point. So talking about Fem, so if any of you are new to the FalcoIn virtual machine, what it does is that it manipulates the storage deal metadata. So all this metadata that you saw over here, that is what the Falcon virtual machine will be able to manipulate. So when you write logic within your solidity contract and you're using our Falcon solidity library, you are manipulating all that metadata of how you want that file to move around.
03:31:55.800 - 03:32:25.116, Speaker C: So you're not actually manipulating the data that is thought within the deal, you're manipulating the metadata. So I just want to make that point really clear. Yeah, and I'll talk about price structure in a bit, but if you are looking for computing the actual data, FVM is also really useful together with Bakayao. So Bakayao is a decentralized compute framework that we have. If you want to know more, we are the booth. We have a mentor there from the Bakayao team. What Fem will do is allow you to send by manipulating like, hey, I want this storage deal to be sent as a job request to Bakayao.
03:32:25.116 - 03:32:54.908, Speaker C: So Bakayao will then do the decentralized computation off chain and then post the result back for you. So that's how you use Fem and that's what Fem really unlocks. There are a lot of use cases that you can unlock with Fem, and we're continuously improving the DAP ecosystem to make it even easier for you to build solutions on top of it. Early days. We just launched in March, so a lot of good integrations coming in. So do definitely look forward to that. So I just want to give you a little bit of so the green part, the green circle over there, that refers to how it's manipulating the metadata around the storage deal.
03:32:54.908 - 03:33:23.444, Speaker C: And then that enables you to then do whatever, all the magic that you want to do on the layer two on top of that. So all the solutions that you want to build, you can then build it with those options there. So that's how IPFS filecoin and FBM work. This, by the way, this took me like six months to digest and put into diagrams. So I'm trying to give you a really condensed version. But yeah, if you still need further clarifications, I'm at the booth. A hackathon is to learn.
03:33:23.444 - 03:33:57.172, Speaker C: So if you want to learn more and then build later on, that's totally cool. We actually have a really big hackathon coming up as well, end of August, so you can participate in the open data hack there and get in on all this cool data stuff. All right, so before we get into the demo, I don't know why I put this here. I should put this at the end. But for the prizes, we will give out grand prizes, three grand prizes, anyone that's using Filecoin, IPFS or FVM. So as I talk through the demo and some of the use cases do have a think about what it is that you want to build. Best project integrating FPM with Bakayao.
03:33:57.172 - 03:34:14.020, Speaker C: So I talked about Bakayao a little bit earlier on. That is the decentralized compute. We'll be giving two teams $2,500. That would be a special prize. So definitely do check that out. And runner ups. I think any project that impresses us and that is really cool will give up to six teams, part of the pool price, which will be really fun.
03:34:14.020 - 03:34:42.156, Speaker C: So have a think about these as I go into the demo. Okay, so I'm going to demonstrate I demonstrated earlier at Encode Hacker house around the Web three storage piece. I'm going to demonstrate the Lighthouse piece over here. Lighthouse itself is really cool. If you scan this QR code, it'll bring you to the documentation. I'm going to show you the page and kind of show you the options that you have and what it is that we will show today. Is this big enough? Yeah.
03:34:42.156 - 03:35:11.800, Speaker C: Okay, great, thanks. Okay, so if you head over to Lighthouse documentation, remember, do not use the CLI commands part that actually posts to mainnet, not to testnet. So you want to use the SDK over here. So if you are building your front end etherjs, you can actually easily click over here for code samples. And then I will be demoing for the node JS back end. So you have options. The cool thing about the difference between web Three storage is that web Three storage is a simple storage of any data.
03:35:11.800 - 03:35:28.748, Speaker C: If you want to have encryption access control, you can use Lighthouse Storage. They actually have it inbuilt within the SDK, so it's super easy for you to use as part of your project. And it should just be on top, a layer on top. So it should be easy to use and implement. So we are going to try this one out.
03:35:28.914 - 03:35:29.710, Speaker B: All right.
03:35:33.110 - 03:36:18.658, Speaker C: Sue. Okay. All right, so we're going to start with this. We're going to do a really easy one. We're going to create our NPM package, and then we're going to NPM install the Web Three storage file. Hold on. So all you have to go is over here.
03:36:18.658 - 03:36:45.794, Speaker C: And you can very easily just copy this. It's up to you. I usually use this method. This is the wrong one. No, hold on. Where did it go? Where did my Vs code go?
03:36:45.832 - 03:36:46.580, Speaker H: Hold on.
03:36:48.950 - 03:37:26.990, Speaker C: What? Okay, I found it. I found it. All right, awesome. Thank you. All right, so we're going to install this, and once you get that set up, at the same time, they also have instructions for creating a Lighthouse Storage wallet. So you can then run the storage deals that you want to run. So we're going to open up the folder, trust it, and we're going to pick it back up.
03:37:26.990 - 03:37:52.890, Speaker C: So over here just going to create upload JS, and you just have to hit into the code and copy it over here. So super simple. And I'm going to upload it from a file directly from my computer. So I've really created, like, a test file over here. Nice.
03:37:55.420 - 03:38:03.720, Speaker H: Oops, let me see. East Global.
03:38:05.840 - 03:38:28.950, Speaker C: Let me create a new I'll create a new text file over here. I guess I can say like, hello. Oh, sorry. We're in France. Bonjour. Okay, great. Save this ecobol test one.
03:38:28.950 - 03:39:07.504, Speaker C: Awesome. Okay, now we're going to get the path right. Okay, I'm just going to drop this in here for a second. And we're going to create the file from here. So I generated an API key earlier on. If you want, you can easily do this here. So I do use the CLI commands for creating the API key.
03:39:07.504 - 03:39:34.436, Speaker C: I just find it easier. You can just easily copy this in and generate your API key to use wait, let me just check first. Hold on. Okay, great. So I created a wallet earlier on. If you are new to this, you would then have to hit over here and create a new wallet. Sorry, I missed that step, but I've really created a wallet.
03:39:34.436 - 03:40:11.320, Speaker C: So you create a wallet first. Once you get your wallet set up, you can easily hit over here and then get your API key. So I have it over here, which is great. And let me just copy this and head back over here. Hold on. Let me key in my path first. Where is it.
03:40:11.320 - 03:40:41.990, Speaker C: This one, this one, this one. Okay. Over here. Great. Right? So, yeah, if you want to upload any small documents, this should be a super easy way to use it. And then what you want to do is add in your API key. Let me just check this first.
03:40:41.990 - 03:41:27.794, Speaker C: Save it. Where is my API key? Oh, I did generate one already. Okay, so I'm going to copy this again and I'm going to paste it back up here. Cool. And I'm going to save it and hope this works. No, this doesn't work, but because I will add in the type here. So, yeah, if you hit this error, definitely go in and hit this.
03:41:27.794 - 03:42:01.986, Speaker C: This often gets me going. And let's give it a shot. Module not found. Did I see it? Oh, and yeah. So once you have your file, you have generated your content ID. So for IPFS and filecoin, we ID our data not by location, but by the content itself. So this is how you'll generate your content ID.
03:42:01.986 - 03:42:25.258, Speaker C: And when you want to view it, it's super easy to just head over to an IPFS gateway. So I like using Brave because they have IPFS plugins in there already. So just key in here and you should be able to open up your file. So once you download it, let's try it out. Great. So that's a really just easy way to show you how to add storage to your project. Again, they have many, many different functions here that you can use.
03:42:25.258 - 03:42:47.426, Speaker C: There are different examples, especially, see, this used a lot for teams that want to use encryption. So that's a really cool feature. And that would be the Lighthouse Storage demo. So pretty similar. For Web three storage, you would have the tutorial link from the earlier QR code if you want to check it out. This is the QR code from Lighthouse storage. Some cool innovation coming.
03:42:47.426 - 03:43:17.514, Speaker C: I just want to kind of show you guys a preview of what's coming up. But we have this. Basically what you saw just now was your file being pinned to IPFS and you're retrieving it from an IPFS gateway. But what it'll do on the back end is it'll take like about five to 10 minutes on the testnet to generate the deal on the testnet network, but on the main net, it'll take an hour or so. But once your deal is generated, you could actually retrieve proof for the small pieces of data. Like I mentioned earlier on, this will be via API request. We literally got this running like two days ago.
03:43:17.514 - 03:43:44.498, Speaker C: So I haven't really put this into my demo yet, but to kind of give you guys a sense that you will be able to retrieve all your different pieces within a single deal, so you can actually check that out. And once we get it integrated with our Explorer, you can actually just key in like your sub PCID. So not just the. CID for your deal, but the sub PCID for your small image and you can actually view it and see where it's sitting within the deal itself. So, just a quick preview there not available for this hackathon, but by August 30. Okay. And then just a quick one.
03:43:44.498 - 03:44:11.774, Speaker C: If you're thinking of what else you can build, especially with FBM and Buckyal, a really good idea would be around data dows. So if you check out our documentation, you can get a better sense of what data dows do. Basically, a data dow is a dow formed around a very important data set that you want to contribute data to together as a team and then manage that data set. Right. So a quick example of your pet owners. You can contribute your corgi data into a data dow, into a huge, huge data set and how you're going to end up using Buckleyao. So let's say just an example here.
03:44:11.774 - 03:44:40.134, Speaker C: You're using ZK verification via your solidity contract. So if you head over to level three just now, you would see again, I have a Starter Kit for this using the level three version that you saw just now in the earlier slide. So do check that out. But you could then add ZK verification in to then verify that you are a legit contributor. And you can upload your data via the client contract into your data set. And once you do that, you can also add in another layer of contract to then generate tokens. And you can use your tokens to vote to then train an AI model, for example.
03:44:40.134 - 03:45:07.522, Speaker C: So if you look at a top example there, think about how you can connect FVM to Bakayao, connect your data to a decentralized computation framework, and you can get access to those two other prizes. Yeah, and there's also access control, but you can use Lighthouse for that. So, just an example, but yeah, this is the DATADO Starter Kit. So if you want to use it for this hackathon, super easy piece there. Sorry, I know it's a lot of information, but yeah, we have a lot of cool stuff for you to guys to play around with. Great. Yeah, that's more or less it.
03:45:07.522 - 03:45:21.860, Speaker C: I know we're almost at time, so yeah, thank you. Yeah. Any questions? Cool.
03:45:23.770 - 03:45:27.494, Speaker E: Hi, so did you say that Lighthouse is available right now or did you.
03:45:27.532 - 03:45:30.358, Speaker C: Say it's available right now?
03:45:30.444 - 03:45:31.080, Speaker B: Okay.
03:45:31.930 - 03:45:40.074, Speaker E: As far as I understand, you upload to IPFS and then I didn't understand what Lighthouse is doing on top of that.
03:45:40.192 - 03:46:00.082, Speaker C: Yeah, so Lighthouse is like an aggregator, kind of. So it will take your data, they provide a really easy SDK for you. You upload your data, they pin it to IPFS for you. And while you can access the IPFS pin data, it also takes your data and puts it into a storage deal and gets a storage deal made onto filecoin for you. So backs up your data. Yeah.
03:46:00.136 - 03:46:08.100, Speaker E: Okay. So it pins, it centralized by Lighthouse and then also makes a deal in filecoin which is decentralized, right? Yes.
03:46:08.870 - 03:46:29.530, Speaker C: Just FYI, we are also working. So Lighthouse is an example of a centralized aggregator. One thing that we're working on in the next few months is a decentralized aggregator. So we're writing specs right now for you to be able to build your own decentralized aggregator. Yeah, cool. Any other questions around storage?
03:46:32.430 - 03:46:33.322, Speaker E: Thank you very much.
03:46:33.376 - 03:46:34.860, Speaker C: Okay, cool. Thanks so much.
03:52:01.580 - 03:52:37.450, Speaker E: Hi everyone. One, one. Hi everyone, thank you for coming. We will do a presentation of Polygon ID and my name is Dima, I'm developer of Polygon ID of the core protocol. And this is Sasha, he's also developer and team lead of our protocol team. So Sasha will do the presentation and explanation of the core concept and after this I will do the presentation of the demo tooling and how you can build with Polygonid. Thank you.
03:52:37.450 - 03:53:44.492, Speaker E: So what's Polygonid? Polygonid is a self sovereign identity solution. It's built with zero knowledge proofs technology and based on Verifiable Credential standards and decentralized Identifiers. So in this concept of identity we have three main parties it's user identity holder. We have also Verifier, the one who receives data and consumes it and also issuer it's a source of trust who is issuing credentials to the user. So let's say we have issuer that is KYC provider. It could be like we know Jumio or on Fido. Let's say that have done KYC verification of your identity and then issues to you Credential that has for example your passport data, country of residence, date of birth and so on.
03:53:44.492 - 03:55:11.800, Speaker E: And then later you apply for a job and you need to prove that you are eligible. For example for this dow grant or whatever and you need to prove that you're from non sanctioned country and that you are over 18 and so on. So based on this, Verifier can ask you a question are you over 18? And so on. And you as a user can just prove that this is true, that you are eligible without revealing any of the data. It's just that yes, I have a Credential that states that satisfies the requirements that the Verifier have set. And for this to work, we have created a set of tools, a protocol and for each of these parties we have a number of tools to be used for the users and for the wallet providers. It's a mobile application and also SDKs to embed it into existing mobile wallets and also maybe web extensions and snaps.
03:55:11.800 - 03:56:48.760, Speaker E: Then for the issuers we have issuer node it's application that can be run on your server to issue Credential to the user and then user would be able to fetch it store on his own device and prove some statements. Also for the issuer we have schema builder because Verifiable credentials, they are built on top of the schemas and to facilitate this process to make it easier for the issuers to create credentials. We have built a schema builder. It's just a very simple interface and Dima will be showing it today how to create your own schema, upload it store and then import later into the issuer node and actually use it to issue Credential. This is also used, the schema is also used on the Verifier side. Verifier needs to ask questions based on this schema like do you have Credential of passport type? And then based on this Credential and this schema would be asking additional questions like I O, over 18 country of residence and so on. And for it to make this query easier, we have built another tool that is Query Builder.
03:56:48.760 - 03:58:06.930, Speaker E: Just because it's pretty simple, but still you need to know how to use it ziki query language. And also it's still in development but kind of available for early adopters and early testers. Just on a testnet we have on chain issuer, it's a decentralized issuer that could be trustless in the way that in usual models we have issuer that is working somehow off chain it does processing of data and then later issues Credential. But this process is not transparent to anyone. And on chain issuer is solving this in a way that all the rules, everything on how Credential is issued, what data was supplied, is it true or not, is done. Everything on chain. That's why it's fully transparent and auditable how it was created, to whom and so on.
03:58:06.930 - 03:58:38.972, Speaker E: And here's your code where you can get our tutorials, our documentation and read about everything. And now Dima will show how it works. Okay, show time. So we will start with a Schema Builder. So we will build our schema. Then we'll create a Credential, fetch it to our phone and perform verification with zero knowledge proof verification on the back end. Because we have limited time.
03:58:38.972 - 03:59:20.472, Speaker E: I will try to be like super fast. Okay, so this is our schema builder. So we can try to build a schema. Let's call this is global, teach global version zero one test. Yeah. Then we need to define the attributes that will be stored in our schema. I will call this maybe Score score and select the type.
03:59:20.472 - 03:59:54.044, Speaker E: So the data types, this is very important because this is types that you can then verify in zero knowledge proofs. So here right now, this is supported types that we have like integer, Boolean, numbers and strings. The most may be important. This is Integers because you can do some query operations inside zero knowledge with strings, but the rest is also possible. But Boolean, technically this is zero and one, which is obvious. But streams will be stored as a hash of your data inside the circuits. And you can do selective disclosure.
03:59:54.044 - 04:00:37.612, Speaker E: Maybe you will have a document and Verifier will ask you hey, can you disclose this value to me? Can you disclose this document for me? And you can show the whole document and prove that this document actually stored in your Credential. It's not maybe useful for all of the cases, but for some KYC and very specific verifications, that's very important case. So we will do something with integers. Call this score. Okay, I need to connect my MetaMask to publish this on IPFS. So what is the changes for our schemas? Right now we're publishing them for Schema builder on IPFS. So schemas can be stored on IPFS.
04:00:37.612 - 04:01:09.020, Speaker E: This is not necessary. You still can store them on GitHub on your Http server. But for our schema builder we decided that they will be stored on the IPFS. So up to you where you will store it. But if you will create this in our Schema builder, they will publish it to IPFS. But you can download, there is a button to download and you will have the bundle with the schemas. So I will do the publishing select some category.
04:01:09.020 - 04:01:51.556, Speaker E: Okay, so this is a schema right now we can create a Credential with this schema. So I will go to our UI. First thing that we need to do is just import the schemas that we created. Okay, I just import the schema I have. This is global and I can issue this to my wallet. So like a couple words about this Credential link and data directations. For directations you need to know in advance Identifier of your user.
04:01:51.556 - 04:02:27.584, Speaker E: For example, if you will build a platform or like some dao you will know because users will log in. So you will know the Identifier of the user. Then maybe you will pass some KYC, maybe like joining the groups and so on. And you can issue Credential and send push notification with this Credential. If you don't know the Identifier in advance and maybe want to just distribute these credentials to your group members, maybe through the telegram channel or just put the QR code somewhere on the ISGlobal. You can do this through Credential link. For example, I can put here like ten credentials.
04:02:27.584 - 04:03:02.524, Speaker E: This is maximum number of credentials that can be issued. So first ten people will have this Credential. Maybe this is you can do some campaign, maybe some game or like I don't know, some event based on this and can just engage ten. First people who can get this Credential can go to my website, to my D app and will be rewarded for this interaction. Okay, so I will put here a score. I know 100 looks like a good score. Okay, proof types.
04:03:02.524 - 04:03:17.808, Speaker E: We have a signature type. This is just proof types that issuer. Just sign your credential. He don't need to publish it in anywhere, just signature. That's it. For merkle tree proof types. This is Credential that is anchored on chain.
04:03:17.808 - 04:04:12.020, Speaker E: For this issuer, need to send transaction on chain and publish his state. So this will mean that your Credential was issued at some specific type like timestamp. So for some use cases it may be important or maybe for some on chain use cases can be important but it's up to you for signatures. This is just kind of free issuance, you don't need to spend like gas or anything. Okay, so expiration date you can embed in your not can but you have to embed the expiration date in your credentials because during the zero launch proof verification we're also checking the expiration date. So with this you can play with short living Credential. Maybe your Credential can leave for 1 second for 1 hour or like for a few years it depends on your business cases and business requirements.
04:04:12.020 - 04:05:32.410, Speaker E: So I'm creating this link and now I'll fetch a Credential to my phone. Let me just connect just a second, I'll try to share a screen. Okay so connect with my wallet. Maybe internet is not the best here so we need to wait a little bit. Yep. So the things that I have done right now, I just did authentication so right now okay I need to receive the Credential by push notifications but maybe because of the lack of the connection I just fetch it through this QR code. While I'm waiting I will show you the next step.
04:05:32.410 - 04:06:35.040, Speaker E: So right now your user has a Credential on his phone. Right now it's just a responsibility of the user to communicate with the Verifier. And for this Verifier need to build the request to the user. So as you have a schema and your Verifier can get this schema. Not so fast, I can build here just query builder I can build the query. So I put my URL, I select the type embedded in this schema and now I can just ask some specific questions. So this is a score and I can ask okay put a condition, it should be less than 200.
04:06:35.040 - 04:08:17.300, Speaker E: So you can copy and just pass in your JavaScript code. But I will show you on our demo application how to perform the verification. So here we just put the same URL, select the type from your selection, select a field score and ask that fields should be less than 200. So now I have a query from the Verifier and this must be embedded in your website and usually in majority of this verifications will be embedded in your platform or what you are building or this can be embedded in the smart contract. So smart contract also can ask you the same question is your score like less than 200? This will be questioned from the smart contract and you can generate a zero knowledge proof and send directly to the smart contract. So here I will scan this QR code and I'll share my screenplay right now on the screen you see this is request that was embedded in this query. So if I have the Credential of this type and the value is less than 200 so I just approve this request.
04:08:17.300 - 04:09:33.160, Speaker E: So right now zero knowledge proof is generated on my phone. So I'm not sharing the credential itself, I'm just sharing the proof that I have this credential and the requirement is fulfilled that field. Okay, something went wrong. Came one more time. Okay since I don't have internet connection on my phone sorry. So the zero launch proof should be generated but as usually demo fail and we will send zero launch proof to the user sorry, to the verifier back end. On the back end we're verifying the zero launch proof and that's it warriors we send it to the smart contract then smart contract perform the verification and just give you access to the website, to the dow or to your specific webcase.
04:09:33.160 - 04:10:47.412, Speaker E: So what you can potentially build you can build, like, decentralized dow, which will dow or like ICO, where you can ask user to fulfill some criteria that maybe you should be above 18 or you should be like from specific country or not from a specific country or you should have or be a part of the specific group. And this is just up to you, I would say. What use cases you will cover with this. Okay, I think that's it. Any questions? Comments? Okay, no. If you will build with a polygon ID, we will be here. This SDK is in Swift as well or is react native only? I'm sorry, the SDK is in swift or react native SDK right now on the flutter flutter kotlin and JavaScript we're working on the swift as well and on react native.
04:10:47.412 - 04:11:35.490, Speaker E: So I hope till the end of the year we will have mobile SDKs in all of the pro platforms. Also we have a JavaScript SDK so some companies just embed the JavaScript SDK in their mobile application. For example, you can generate approves we have approver for the mobile applications, we have approver for web browsers, of course for the desktops but this is up to you. I think the majority of the platforms you can build right now the same for verifications we have verification library is written in Go and JavaScript, which is like right now should be good enough at least for the beginning. Okay, thank you very much. Yes, thank you.
