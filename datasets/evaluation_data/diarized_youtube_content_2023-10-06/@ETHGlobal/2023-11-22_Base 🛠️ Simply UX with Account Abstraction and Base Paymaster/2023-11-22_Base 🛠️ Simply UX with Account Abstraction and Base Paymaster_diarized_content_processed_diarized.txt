00:00:07.370 - 00:00:22.640, Speaker A: Hey, guys, thanks for coming. I'll give you 1 second. So. Hey, my name is Carl Fluke. I work on the Base team as Devrel. Thank you all for coming. So the agenda today is this is going to be kind of a speed run because I have two different demos to show.
00:00:22.640 - 00:00:41.894, Speaker A: So first I want to give you the quick thesis of Base and why Coinbase wanted to make L Two. Just show of hands, who here has done account abstraction before? Four, three, seven. We got one. Okay, cool. So then I'll do a super quick overview. It's a little bit complicated, but I do have two quick starts to get you kind of going. So one with the front end.
00:00:41.894 - 00:01:27.254, Speaker A: So kind of like how does this make your end user have a better user experience? And then also as a developer, you can actually use smart contract wallets to deploy your contracts. And there's some benefits to that. So first I'll run through this quickly because I want to get into the code of why did we make Base? So Coinbase has like 100 and 2130 million retail users and it's like less than 5% of them are truly on chain. So we wanted to be able to truly bring those users on chain and show them that they can have a good user experience. So we've seen on chain users continue to grow. The more users we have, the more developers can build things for those users and have that user base. And then as we get more developers and users, then we have all these actual verticals that happen.
00:01:27.254 - 00:01:55.146, Speaker A: So Friend Tech is a super popular social app. If you're ever in New York, download Blackbird, they have a bunch of restaurant loyalty rewards gaming. So definitely like if you've heard of the Mud Framework, it works on Base so you can launch a fully on chain game. Base Paint is actually super fun if you haven't seen it. Base Paint XYZ, it's like a collaborative pixel art. Once a day once a day they vote on what they're going to make. And then lastly, our stand with crypto.
00:01:55.146 - 00:02:11.382, Speaker A: So US regulation is always fun. So we do purposefully have like a regulation arm that focuses on doing that advocacy. Okay, so the big thesis is that you see the blue line. It's been pretty straight. Ethereum has been at capacity for a while now. L two s are coming. They're here now.
00:02:11.382 - 00:02:37.360, Speaker A: They're continuing to grow. And more and more of those transactions are going to move to the L Two. That's that red line, it's at five X of L One right now. And we see that continuing to grow. So the crazy part of this is there's only 10 million people on chain across the world today. So we all have a lot to build to actually hit the full population. So some of the key blockers of normal retail people using it is cheap block space.
00:02:37.360 - 00:03:04.118, Speaker A: So that is going to be drastically improved with the Denkun Ethereum update, hopefully in February is what we're aiming for. The Base team and the optimism team have been getting the Op Stack ready for it for the past two or three months. Another big part is Wallet technology. So I know that as a developer, I've done Wallets, so I'm already super used to it. But for a normal user, they get confused by it. They don't understand that assets can be on different chains. It's confusing for them.
00:03:04.118 - 00:03:37.614, Speaker A: And then lastly is identity. Coinbase launched like CBID a year and a half ago or so. That was a starting point, but we can go a lot farther. We started to bring on chain Attestations to where you can on chain specifically on base, be able to say, hey, I am a KYC Coinbase user and yes, I do live in this jurisdiction and we're going to start doing more things like that to where we can have more identity directly on chain. So you can actually verify things in your smart contract. Yeah, we've been live since August. There's a ton of apps.
00:03:37.614 - 00:04:07.062, Speaker A: Just out of curiosity, who has used Base as a consumer? We got a few. Has anybody deployed on base yet? Okay, well, that's going to change. Here we go. All right, so lastly, what's new? We're a core contributor with optimism. So the last Canyon update, which we actually just launched on Tuesday on testnet, coinbase made half of it, brings it up to Shanghai and Capella. So you can use the newest solidity features on base now, which is great. We launched the Polia testnet.
00:04:07.062 - 00:04:30.686, Speaker A: Gorli is going away in January. So moving to that and then relevant to this talk is that we launched a paymaster in testnet so that it's just easier. We kind of want to move away from this world before you need a faucet. Instead, control things through a combination of Paymaster and Attestations. Okay, cool. That's the quick base part. And then let's get into actual account abstraction.
00:04:30.686 - 00:04:57.862, Speaker A: So this is 4337 based account abstraction. Stackup has like a fantastic quick start to this. So I'm using some of their diagrams, but I just want to cover some of these high level items so that you have an understanding for the demo. So first, the user does user operations instead of transactions. So just know that's important. Essentially, the gas fees are done a little bit differently and you want to encode the function data. I have code examples to show this, but just know it's a little different than doing transactions.
00:04:57.862 - 00:05:17.780, Speaker A: It's more or less the same. You still use the API? Next you have a bundler. So there's a bunch of these out there. Stackup has one, Alchemy has rundler. There's like five or six of them. For my code example, I did use Alchemy's, but I know there's other providers out here. And on the Base ecosystem there's like five or six.
00:05:17.780 - 00:05:45.094, Speaker A: Next you have the entry point. That's probably the thing that you will do the least unless you're making your own smart contract wallet. So honestly we can skip right past that. Next is your smart contract wallet. So that is kind of like if anybody's here for the safe presentation they were talking about how you can have your smart contract wallet and have modules and plugins. So base is kind of we don't make our own, we have the ecosystem partners make that. In my example I used Alchemy's Lite account wallet.
00:05:45.094 - 00:06:33.274, Speaker A: So you can choose to either directly build your own or the other big popular one is called zero dev and then lastly is the paymaster. So the paymaster makes it so you can take your user operations and you can estimate the gas and you can make the paymaster pay this. So for user experience that means I can actually get a user to have a smart contract wallet and do transactions without actually having to truly fund a wallet or know what a wallet is. So that's kind of the goal is that we want to make the onboarding and user experience very much more friendly and bring users on chain. So here's kind of the general flow is that user operations go into this mempool. The mempool bundles those operations into a transaction. It takes those transactions and it goes through each smart contract wallet's entry point.
00:06:33.274 - 00:07:10.694, Speaker A: The entry point is doing a validation loop so it's making sure that this user operation is actually doable. Once it's valid, then you can do the execution loop. So that's telling the smart contract wallet hey, from this wallet please go call my smart contract. So that could be mint NFT, it could be whatever smart contract call you want and that's kind of the loop. The part that is left out here is the paymaster. So the bundler the user operation can call the paymaster and get a signature and that'll make it so the paymaster pays the gas for the user. The big things that this helps is I said UX but multicol is the other big part.
00:07:10.694 - 00:07:42.526, Speaker A: So if you want to do like four user operations in the same transaction, you can do that. So if you're doing DeFi stuff and you need to approve token A, approve token B then swap it and then stake it, do that and all in one go. Like that's what the user wants. They don't want to hit go approve, go approve. And lastly gas. Okay, so code time. So here I made just a super let's make that better.
00:07:42.526 - 00:08:09.770, Speaker A: Made a super simple app because I didn't want to spend much time on styling. So I'm using Rainbow kit and that is too big. So it's just using the embedded wallet. So I'm using an EOA just for this example as the owner, just because I did not want to show like I didn't want to pick a preference. But specifically with Alchemy you have the choice of all these providers, and then they'll have like, sign in with Google, sign in with Apple, all that kind of stuff. But I wasn't sure. I didn't want to pick favorites.
00:08:09.770 - 00:08:47.510, Speaker A: So I'm just doing EOA. So connecting my coinbase wallet here, I was already connected. So by default, since smart contract wallets are deployed with crate two, I know that address already. So technically I can send funds to this address before I actually deploy that smart contract wallet. So that's one benefit. The next benefit is once the first let me go to a wallet that actually doesn't exist just to show that this address doesn't exist. So here's that address.
00:08:47.510 - 00:09:32.170, Speaker A: When I hit connect, it's now a new address. So this is my actual wallet. That is that new smart contract wallet. And when I go so there's nothing on the blockchain that has nothing deployed there, it treats it as an UA. So once I mint this NFT, if you're using a social provider, you don't need to sign anything. So this should not exist if you use, like, sign in with Google. Okay, so I am minting that NFT in the background, and here's my transaction hash.
00:09:32.170 - 00:10:00.654, Speaker A: And then if I refresh this, this is now a smart contract, and it has an NFT in it. So the user didn't pay gas. They connected, and they're good to go. Sorry. So that's kind of the user experience that we want is that I went to this, I have a smart contract wallet. I minted NFT. I didn't pay guests.
00:10:00.654 - 00:10:36.314, Speaker A: Like, I am onboarded with an NFT, and I didn't have to do anything. I did cheat a little bit with the OA just because I didn't want to set up, like, sign with Google or Apple, and I don't know which providers here are the favorite. All right, so I've ran through that super quick part two. Or I can run through the code. How's my size? Bigger, little too big. Okay, so this was made with rainbow kit and alchemy and wagme. So essentially I just specify what chains I want to configure.
00:10:36.314 - 00:10:53.502, Speaker A: So I have base gorli. I'm using alchemy provider just so I have a reliable RPC node. I'm saying I only want to support injected wallets. This would be where you switch it to any of those signing providers. Privy has been really popular on base. There's a few others. I set up wagme.
00:10:53.502 - 00:11:22.174, Speaker A: So that's just saying, hey, these are the wallets I want to connect to. And here's the public client. I do my providers for rainbow kit and wagme. And then I have one custom one here for smart contract. So that's kind of what does the actual smart contract setup for you. And so what this does is it's essentially using the alchemy smart contract SDK. We also have examples are Biconomy zero dev.
00:11:22.174 - 00:11:52.200, Speaker A: They're on the base ecosystem. But what this does is when it essentially has a wallet connected, it goes through and it sets up my Alchemy provider and it creates that smart contract. So that smart contract doesn't actually get deployed here. It's just doing the create to address. And then the first time any transaction is sent through this it'll check to see if that is actually deployed. If not, deploys it and then it does whatever user operation you specify. And then I just have middleware here.
00:11:52.200 - 00:12:24.142, Speaker A: I'll show this one. The middleware is essentially to use the base paymaster. So in the Alchemy SDK I can say hey, go talk to this specific URL to get my Paymaster signature. So that's ETH Paymaster and data for user operation you pass what the bundler said was the gas amounts. So this should look kind of like EIP 1559 except they add this pre verification gas and verification gas limit. I call that paymaster. It gives me a signature and I just append that to my user operation.
00:12:24.142 - 00:13:04.480, Speaker A: And now my user operation should be paid for. So I tie that middleware to it and then I'm just saving this into context so that I can use the address, the signer and the public client anywhere in my code. Next is good old the Mint, the NFT button. This should look very similar to what you do for normal front end is. I am just saying hey, smart contract address send a transaction from my address to that NFT contract. Here's my NFT abi. I want to do a safe Mint and I want to mint to this address.
00:13:04.480 - 00:13:42.410, Speaker A: So that's really like from a front end perspective. The only difference is you have to call encode function data so it should be fairly straightforward so that's account abstraction on the front end so you get the benefits of easier onboarding. You get gas payments and it's not that different from what you're used to. So the second demo I want to show is that we also can use this to deploy smart contracts. So who here has deployed something using hardad? We got a few. Okay, cool. That's a little too big.
00:13:42.410 - 00:14:09.918, Speaker A: There we go. So essentially this should feel very similar. I did use VM here. I've been starting to switch to VM on the hard hat side as well. They finally made a plugin like a month ago. So you set up hey, what networks do I want to connect to? What is my RPC URL? Do you want to use private key or Mnemonics? So that's just very typical setup then. A traditional way to do deployment of a smart contract is you just say hey, deploy this smart contract.
00:14:09.918 - 00:14:48.000, Speaker A: I didn't want to focus on the smart contract so I just took like the default storage one to get you started, right? Nothing crazy, not the point of this. So this is without 4337. So I specify I want to deploy that contract and then I can do things like I can write to it and I can read to it. So that's without account abstraction so account abstraction does have a little bit more. So here I'm pulling in those same smart contract libraries. I also pulled out the Paymaster into a separate file. Just make it a little easier to read because it's the same we saw on the front end.
00:14:48.000 - 00:15:29.660, Speaker A: The difference here is that I pull that local account signer just from my environment variable, the mnemonic I have saved. So my environment variables here, I have my RPC endpoints, I have my private key or twelve word mnemonic. And I have a deploy proxy address that was part of the Canyon upgrade. I do have one deployed on main net if anybody needs to use it. It just helps with create two. So exact same as the front end is I essentially set up that signer in that smart contract wallet. I add in that Paymaster middleware, I encode the function data, which in this case is deploy data.
00:15:29.660 - 00:15:55.246, Speaker A: I am using create two here. So purposefully I am using the nonce as part of the Salt so that I can know the smart contract address. I can explain that in further detail, but I'm going to run out of time. So let me run through this first. And then essentially it's the same as the send transaction. It's just the data is essentially the Salt and that construction data. So I can actually deploy a smart contract through this wallet.
00:15:55.246 - 00:16:33.370, Speaker A: And then similarly I can write to it and I can read from it. So here's an example of updating what value I'm storing into it to. One, two, three. And then I am retrieving what is that new storage value. So if I deploy to base Gorely, it's kind of small. Okay? So that is showing kind of like what's actually going on when you run this. So essentially you do a dummy Paymaster so that you can do kind of like a bundler gas estimate.
00:16:33.370 - 00:17:29.148, Speaker A: And this is just me reformatting it. And then I call the Paymaster again to get the real signature for the Paymaster, which is one more down, way down. Or I may have just did it when it wasn't defined, but either way so this is the new smart contract that was deployed and then it stored that new value. So if I go back to Gorely, this is that transaction. So this is why I use that create too is because it will show the transaction sent to the entry point. I am more interested in what the bundler transaction was. So if I look at go to the screen, where was that? I was purposely doing this to show up.
00:17:29.148 - 00:17:58.650, Speaker A: Jiffy Scan. So Jiffy Scan is made for 4337 and it kind of loops together that whole entry point transaction with also the bundler transaction. So you're not like having to combine them together. This does it for you. And the main things I wanted to highlight here is that you can have multiple user ops in this. So I only have one, but if I had multiple, they would show there. It can also show me what the gas fee was and that it verifies that my paymaster actually paid the gas for me.
00:17:58.650 - 00:18:43.744, Speaker A: And then I can see kind of like what it actually called and it has like a deeper trace. So the main benefit of that is that in the future Coinbase, we want to use a combination of our attestation of retail users to be able to subsidize some gas on main net. And that would be both as a developer and as a retail user. So think of something as like Coinbase could make it so that for 20,000 people, we could make their first three transactions on ave have no gas. So that's kind of the plan that we're going for. And these are kind of some of the tools that we have to put together to get to it. Okay, so those are those two code repos.
00:18:43.744 - 00:19:03.468, Speaker A: If you want to use them as reference. They are just using the Alchemy account abstraction. As I said, we support other layers of that. Right? Like, you saw the Safe Smart contract wallet earlier. There's Biconomy, there's Stackup, there's zero dev. There's a bunch of them, but these are just some examples. And that's it.
00:19:03.468 - 00:19:09.050, Speaker A: That is my social stuff. If you have any questions otherwise, thanks for your time. Cool.
