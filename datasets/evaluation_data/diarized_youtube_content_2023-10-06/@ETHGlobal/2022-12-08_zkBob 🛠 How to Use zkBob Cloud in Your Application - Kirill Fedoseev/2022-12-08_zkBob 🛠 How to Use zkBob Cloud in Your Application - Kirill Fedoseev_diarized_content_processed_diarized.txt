00:00:06.250 - 00:00:44.218, Speaker A: Hello hackers. My name is Kilfi Desefe. I work for Ziggybop project. So today we're going to talk about next generation stablecoin with optional privacy. So we'll start first by just brief introduction to our project, why privacy is important, what are we trying to build, what's on our roadmap? And then we'll talk out what task we prepared for the hackathon, what ideas you can use for hacking something together with us. And just in the end, we have a small live demo of the API we're trying to propose to you to use during the hackathon. So in the Kibop ecosystem project we have premier products.
00:00:44.218 - 00:01:43.690, Speaker A: So the Bob itself is a multi chain, multi collateral stable token with what we call optional privacy. Then the Zigibob UI itself is basically a DAP for private micropayments which could be done at the Ziggybob protocol. And then for simplified integrations with another projects and some easier hypothesis testing. We also developed the Ziggybop cloud solution which is basically some semi custodial wallet for integrating private transfer and making them sort of private transfers as a service. So in our use cases for Bob, we are currently exploring the main dominant use case is related to the payroll and invoicing. So there's a big problem with the privacy related things when it comes to making payrolls in stablecoins. So that's kind of a big hit for making it a private use case for making salary transfers within the privacy pool.
00:01:43.690 - 00:02:37.850, Speaker A: Then we're also exploring some other use cases like vendor purchase intonation tradefi use cases for example, like for crypto off ramp and on ramping from binding deposits or something like that, and minor remittances. So when we talk about for example, employee salaries management, so how it potentially work. So we have our employer which would like to distribute salary on, for example, a monthly basis. So he has some probably already stable coin allocated for salary payments. He can convert his USDC, for example, into Bob at a one to one ratio. Then he can deposit this Bob into the privacy pool. Ziki Bob, the employer can deposit his swap the bob into the privacy pool, then pay privately salaries within the pool to all of their employees for the ZK addresses they provided.
00:02:37.850 - 00:03:26.410, Speaker A: And then employees can withdraw the BOP and use it for their everyday expenses whenever they need it. So other use case includes vendor purchasing organizations. So basically here the idea is that you can organize easily some peer to peer payments within the privacy pool. You can buy some things, you can sell some things to other peer to peer participants for some small amounts with ease. So, so far we have acquired a few important partnerships with our protocol and we are working hard on expanding this list. So we are working on integrations with additional AMM protocols, lending markets and different invoicing providers and so on. So now a few words about the Ziggybop and how it works technically.
00:03:26.410 - 00:04:22.490, Speaker A: So as I said before, Ziggybop is a day app for private micropayments. So it accepts only Bob Stablecoins for deposits. Once the Stablecoins are deposited into the Zigibob application, they can be anonymously transferred between participants of the pool by using the Ziki addresses. And once you desire to withdraw from the Pool, you can withdraw it to any public address preserving anonymity, and you can withdraw any amount and no one will know the direct link with your deposits or private transfers you did before. So, in order to facilitate this kind of activity, zikibob uses as nerd knowledge proofs to authenticate transaction details without disclosing them publicly on chain like sender, receiving addresses, transaction amounts. So the Zikibob application is being the pool itself is being deployed on polygon. So that's the main network of the project.
00:04:22.490 - 00:05:43.500, Speaker A: And the simple UI allows you to abstract from the complexity of the ZK snarks and to easily access your ZK accounts and to use the ZK balance for everyday activities. So here it's how the UI looks in basic zero knowledge proof confirms the validity of each action. So the action might be either deposit transfer or withdrawal from the pool without revealing the particular details of the action on chain. And only the actual sender and the receiver of the particular operation is being able to actually decode and access the private fields and metadata of this particular so, and a few words about the Zikibob cloud so that's actually the API we want to propose you to use the hackathon. So basically it's a semicastodial API which is offering private payments as a service. So important point is that it shares the same underlying tech and infrastructure as the Zikibobd app and the UI itself. And the main intent here is that we want you to use it to smooth tender transition from web two to web three apps, to simplify potential integrations and speed up testing of new ideas, hypothesis and so on.
00:05:43.500 - 00:06:34.010, Speaker A: So, a few words about our roadmap. So, we plan to work hard in the future for hard development of new use cases. We'll expand salary use cases and explore new ones. We'll work hard on the different technical protocol improvements like migration to a new zkSNARK technologies, adding some new business features to the protocol. We'll plan to work on the decentralization of the protocol and each and every part in that, and also work around some innovations in the field of anti money laundering and KYC processes and see how it can seamlessly integrate with our protocol. So now let's jump into the hackathon. So, the task for the hackathon for you to be eligible for bounty application is simple.
00:06:34.010 - 00:07:32.002, Speaker A: We want you simply to make some solution which will help us to increase mass adoption of the Bob Stablecoin and the Zikibob Protocol, and to overall strengthen and broaden the ecosystem of the Zikibob project. We want you to do it by integrating Zikibob cloud API with basically any service, product or application of your choice. Either it already exists or you plan to develop your own. So, in order to be enabled to access to Zigibob Cloud API, feel free to reach out to us in our official Ziggybop Sponsor Discord Channel for getting access to the production keys for the Zikibob Cloud APIs. So you'll get some pre funded wallets for that. Feel free to just say your team name, include the list of members and we'll send out you the necessary keys. So, just a few ideas for what you can hack during the hackathon and where you can integrate this Cloud API.
00:07:32.002 - 00:08:28.510, Speaker A: So, it could be any donation of fundraising platforms, it could be something related to the Dao accounting problems, it could be also related to payment splitting between friends when paying for dinner, for example. It could be also some technical integrations within existing wallets, or the developments of new browser extensions or something like that. You can also work on integrating Zikibok Cloud different social media bot platforms like Telegram bots, Twitter bots, you can write your own browser extensions and so much more. So of course this list is not complete. Feel free to add any idea you want. So we don't want to limit you here. Basically any legit and viable use case for the Ziggybop Cloud will be highly appreciated in case it just actually have some potential to be used by real users.
00:08:28.510 - 00:09:04.090, Speaker A: So, a few words about requirements and prices. So, what we are offering is the five bounties of 2000 USD equivalent which will be paid in Bob. So also feel free to get or already have the swag for everyone who uses the Ziki. Bob successfully uses Zikibob API in their project. So in order to qualify, the only actual criteria is to just use the Zikibob API. You're free to use to any other tools and qualify for other sponsor submissions. Please indicate Zikibob project in your final submission as well.
00:09:04.090 - 00:10:01.280, Speaker A: And during the judging process we'll consider of course creativity, novelty, usefulness and the general implementation details of your solution. We'll see how integral is the usage of the Zikibob Cloud API within your project. We also will see how your project aligns with the overall vision of the bob ecosystem we have. So that's what we call general Bobbinus. And also just take a note that extra credits might apply in case you want to natively integrate with Zikibob SDK libraries which directly operate with Snark circuits and proof generation. So this might be more advanced topic, but in case you successfully did something like that, that would be definitely considered and rewarded with some extra credits for the grading. So yeah, now we'll try to see some live demonstration of the protocol and how it works.
00:10:01.280 - 00:10:45.600, Speaker A: So, we'll start from the UI. So once we log in at the UI application, we'll see that we have public and private account. On the public account we currently have ten bob, which is equivalent of ten USD. So what we can do here is we can just click Max and make a deposit into the privacy pool. So we'll sign some request into our MetaMask wallet. We'll wait until the UI and SDK library generates necessary proof for the SDK circuit evaluation. We'll wait until the proof is being sent to the relayer, until the relayer sends his transaction.
00:10:45.600 - 00:11:26.730, Speaker A: The pool itself, as I said, is deployed on polygon. So we'll wait until the transaction is mined. So hopefully it will take just a few more seconds here. So, yeah, here it is. And in a few seconds, we will see that our public balances actually decreased by ten bob and our private balance actually increased by the amount we deposited. And if we go into the history, we'll see that we just made 40 seconds ago, a deposit of 9.9 bops.
00:11:26.730 - 00:12:08.700, Speaker A: So that's how simple the deposit looks for UI. And now a few words about the cloud API we want to use. So all the methods I described in the docs we provide for the hackathon so you can explore it in a textual format. But for some practical testing, we also developed this insomnia collection of API requests, which is the simplest way, we thought it would be, for you to try to integrate and play around with the API we're providing. So in order to use that, you will need the API key. So I just prepared one of the API keys we could try to use. So it's already here.
00:12:08.700 - 00:12:59.480, Speaker A: Let me see if I can increase the font. Yeah, this one should be better. So the API key provides you access to one of the basically ZK accounts, which is being held in the custody of the API service we provide. So in that sense, these accounts are being managed by some semi custodial solution. So we have a few requests through which you can interact with your ZK account on the API service. So you can request basic information about your account, like balances and transaction history. Since the account is new, we see that we do not currently have any balance, we cannot transfer anything, and we don't have transaction history.
00:12:59.480 - 00:14:05.586, Speaker A: So in order to just get some funds into account, we'll go to the third request and generate the receiving address. We'll copy that and go back to the UI, to the transfer tab. And now we'll send from a UI account to the Zkbop cloud account, for example, six bobs. So we'll confirm the action, wait again until the proof is generated. The transaction has been submitted through the relayer and been processed by the polygon network validators. So it will again take a few seconds here. It all right.
00:14:05.586 - 00:14:58.820, Speaker A: So our transaction went through. If you go back to the history, we'll see that we just sent six bops to someone else to the ZK address. And if you go back to the Zkbop cloud collections collection of API requests and request, once again, the account information, we'll see that our cloud account just got his balance increased. We'll see that in the transaction history we now have this entry, which is telling us that we just got some incoming transfer in this transaction hash for this amount which happened on this timestamp, and we received it on this ZK account. So now the remaining part is basically how do we make the transfers outside of our cloud accounts. So here we have two basic scenarios. So we can either make some transfer to ourselves, which is called basically loop transfer, so we can do that.
00:14:58.820 - 00:15:41.916, Speaker A: So we'll just enter that we want to send, I don't know, two bobs. So here we use nine decimals of precision. So that's why we add nine zeros in the end. So we'll send the request to make a transfer for our own shielded address. So no funds actually get out of the account, but we'll just see how it looks in the history and how it's been represented by the API responses. So now we can request the status of the recently sent transaction. Recently sent request now tells us that the job is being relayed by the service.
00:15:41.916 - 00:16:42.208, Speaker A: So we'll wait a few seconds until it goes through. So it should take probably the same amount as it takes through the UI. So as the underlying infrastructure, the technology is the same. It's used the same pool, the same smart contracts, and just the same infrastructure. Okay, so now we see that the transaction went through successfully. We see the transaction hash, we can actually copy that transaction hash, go to polygon scan, enter it here and see that actually something happened, something was sent to the pool smart contract address. And if you now go back to the account info, we'll see that our balance only decreased by the amount of the small fee we paid for the transfer to ourselves.
00:16:42.208 - 00:17:34.196, Speaker A: And if we go back to the transaction history, we'll see that we got a new action which actually tells us that we just transferred money from ourselves to ourselves just to play around. And the second thing we might try is just to send money to some other account. So we'll need some external ZK address for that. So for that, we can go back to the UI, click on the ZK account tab, generate the receiving address for our UI account, and basically make a transfer here. So we'll again enter some amount of like four bob. For example, we'll enter the ZK address here, we'll submit the request and again wait until the request goes through. So we'll see that request is being now processed by the relayers.
00:17:34.196 - 00:18:56.614, Speaker A: So just another ten or 20 seconds and it will be marked as successful. And after the request goes through, we'll actually see that our funds came back to our UI account, where we initially send them out of. Okay, so the transaction is completed if we go back to the account balance we'll see that our balance actually decreased. If you go to the transaction history, we'll see that we now have the transfer amount event for some amount, some fee. We paid basically all the information we have for our transfer. And if you now go back to the UI, click this little refresh button, we'll see that. Now we got some okay, we accidentally said 0.4
00:18:56.614 - 00:19:40.446, Speaker A: bob, but no problem. So, yeah, we just got some incoming transfer for our UI account, which is outbound transfer for our Ziki Bob cloud account. So I guess that's it about the basic functionality of the Zikibob cloud API and the UI. So, yeah, now go back to the presentation. Just a few quick links for you to check it out and be prepared for the hackathon. So the first link is just the link tree of all the links related to the project, to the UI, to the docs. The second link is just the general resources for the hackathon, the description, the bounties, the suggestions for the ideas.
00:19:40.446 - 00:20:17.300, Speaker A: Yeah, feel free to reach us in the sponsor Zikibob channel discord for requesting API keys or any other questions or just came by our booth to ask for some questions in person in case they are there. And just in case you want to receive some small AirDrop for our team for your private, personal ZK account, just feel free to scan this QR code and we'll distribute some small present for all participants of this workshop in the next hour. Yeah, if you guys have any questions. Probably have time for one or two.
00:20:25.120 - 00:20:54.020, Speaker B: So I was wondering, so not that long ago, tornado Cash had some legal trouble in the United States, I believe. And I'm wondering if you're concerned or I'm wondering how is ZK Bob's situation different? Like, are you guys concerned about regulators not really being such a fan of privacy?
00:20:56.120 - 00:21:22.728, Speaker A: Yeah. So that's the question everyone asks. So we think that's important to not forget about the existence of regulators and to make such kind of protocols in a way that we want to cooperate with regulators and prohibit illicit activities. So there are a couple of heuristics. You can apply for that. So we started by setting very strict limits on the amounts you can process by the pool. So the deposit size is very limited.
00:21:22.728 - 00:22:00.344, Speaker A: So you cannot deposit a lot of money into the pool. You cannot withdraw a lot of money into the pool at once. The pool size itself is very limited by 1 million bob price now. So it's not very interested for hackers with big bags of stolen money to try to launder them through such kind of thing. We're also thinking in a way of how we can integrate some Zigkyc solutions like polygon ID or something like that. And we also continue our research into ML and KYC integrations and see how and what we can develop here. Or in case you guys can potentially suggest something throughout the hackathon.
00:22:00.344 - 00:22:06.350, Speaker A: This also would be highly appreciated and highly graded from our side.
00:22:08.800 - 00:22:18.240, Speaker C: Yeah, I wanted to know about the stablecoin, how is it backed and how do you maintain USDC to the bob?
00:22:18.820 - 00:22:49.710, Speaker A: Yeah, so stablecoin model is closer to the over collateralized one. So for now, we started with a simple approach of backing the stablecoin, just one to one with the existing stable coins like USDC or BUSD. But in the future, and we are already working on that, we'll add this collateralization mechanics where you can print and mint new tokens with the collateralization of other volatile assets like ether matic or some more complex derivatives like LP positions or something like that. Yeah.
00:22:50.240 - 00:23:01.288, Speaker C: And the relayer fee is always 0.1 bob or is it 0.1 ZK bob? The relayer fee between multiple parties, the transactions that happen.
00:23:01.474 - 00:23:05.520, Speaker A: Yeah. So the relayer fee is 0.1 bob.
00:23:06.660 - 00:23:26.324, Speaker C: And when you sent that amount back, like the 0.4 bob which was from the cloud wallet, the ZK cloud to the one which is noncustodial, would that be somehow tracked on chain or that is from something cannot be linked together that this was one you sent to and this is one you got back.
00:23:26.442 - 00:23:42.250, Speaker A: So yeah, the only thing that could be tracked on chain is that you paid the fee of 0.1 bob. But that's it. Nobody knows from which amount you paid it, so no one knows the actual amount transferred. And since everyone has the same fee, that actually doesn't leak anything.
00:23:42.700 - 00:24:01.468, Speaker C: And last question is, if I may, the API key, can that be some sort of like multi signature? Like can I get it to share with other and then sign it on behalf of them? Or how does that API key really work? I mean, is that going to be transitioning to any other model where we can have multiple signatures?
00:24:01.644 - 00:24:31.530, Speaker A: Yeah, sure. We do not have any solution for multiparty thing, kind of for now, but that's definitely a good idea. We'll work in the solution. So I have personally a couple of thoughts on that. So it's not ready yet, but definitely will be added in the future if we'll see the sufficient demand for these cloud like applications and from projects which are not willing to directly integrate with SDK, which can be complex for someone. So yeah, I think that makes sense. Yeah, thank.
