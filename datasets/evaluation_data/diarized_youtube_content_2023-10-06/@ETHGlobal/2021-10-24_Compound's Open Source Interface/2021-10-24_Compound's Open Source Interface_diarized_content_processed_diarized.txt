00:00:05.290 - 00:00:17.280, Speaker A: And with that, we are ready to move on to our next talk. So next up we have Tori who's going to talk about the open source interface for Compound. So whenever you're ready, feel free to get started and welcome.
00:00:18.450 - 00:00:53.200, Speaker B: Thank you for having me, Karnavik. So, my name is Tori. I'm going to be giving a talk today related to Compound open source interface. This is a repo that we recently made open source in the last, let's say, month and we kind of refer to it as Palisade. And so the purposes of this talk is to kind of just give a quick overview for the developers that are interested in actually making changes to the open source repo. This is the DAP that's deployed at App Compound Finance. So let me share my screen here.
00:00:53.200 - 00:01:40.394, Speaker B: Cool. And then to just give a little bit of a quick intro on myself. So I've been at Compound since the very beginning. I'm actually the first employee at the company and right now my current focus within Compound is sort of leading the application development. So this entails all the different Compound web front end properties, including the DAP, the Gateway front end, the application that lives at Compound Finance, as well as some of the new interesting product we're building around Compound Treasury. So like I said, the agenda for this one is to just give a high level overview of Palisade. So Palisade is the code name that we use for the application that's deployed at App Compound Finance.
00:01:40.394 - 00:02:26.046, Speaker B: It's been previously closed source and it's kind of one of the last remaining closed source code sources that we had for the application. So we're really excited that we've actually been able to get it into a state where we can open source it to the community and have people in the community be able to make code changes on top of it. And also just watch some of the changes that are being made from our team, specifically around new changes that are coming to the front end. And so with that, I'm going to switch to my screen share. I'm going to switch to my repo here. So the repo itself lives at Palisade. There's a link on my slide that shows you all.
00:02:26.046 - 00:03:30.158, Speaker B: The source code again for this project is actually what is deployed to App Compound Finance and to just give you a little quick overview of the code. So one of the things that developers need to figure out as they check out and clone the code base before they can run it is the code actually needs a little bit of configuration. So out of the box, trying to run the code won't actually work because we actually need to create a configuration file that tells the application. What are the different networks that are supported, what are the Compound APIs that provided for things like gathering interest rate in terms of data providers. We need to actually query web3 to gather all the information to display in the DAP, as well as kind of displaying information related to what sort of networks are available and supported by the DAP application. Now, one interesting thing about the configuration file is you can see all these are E specific networking configs. There's no reason why we actually can't configure the Web three front end to support other networks or Ethereum like networks like Polygon.
00:03:30.158 - 00:04:08.078, Speaker B: In fact, we at Compound ourselves actually have a version of the application running that supports the Mumbai testnet. So that's kind of an interesting little tidbit for developers that are interested in possibly trying to reuse parts of the Compound Palisade app to get something running on Polygon just for testing. So again, the application is going to require setup for some of the configuration. There's quick description of all the different keys that are required. And then I'm just going to jump into the get started to actually get the application running. Just do a little live demo here. So I have my terminal window here.
00:04:08.078 - 00:04:35.110, Speaker B: I'm not going to install the dependencies because that takes a while, but we kind of have three main scripts that required for the application to function correctly. And the way that I like to do this is open a terminal window, go to my repo directory, open up three additional windows in the terminal, and then just run each of these commands one at a time. So yarn. Watch. I 18. N this is the first one. Spell it correctly.
00:04:35.110 - 00:04:57.934, Speaker B: The next one is yarn. CSS, watch. CSS. And then the last one is Yarn Start. Right. And so I'll go back and quickly explain what each of these scripts are doing here in just a second. But we can see this is the application that we know and love.
00:04:57.934 - 00:05:35.082, Speaker B: This is actually the application that's deployed at App Compound Finance right now. This is running locally at localhost port 3000. But it should give you the exact same application experience as if you were running it or accessing it from IPFS or App Compound Finance. So that's basically how easy it is to get the application running. What I want to do now is do a quick explanation of the script calls. So the first one watching I 18 N. So the DAP Web Three front end supports different languages and the different languages are specified in different strings files in the source code.
00:05:35.082 - 00:06:16.338, Speaker B: So if I bring the source code window up here, I open the source directory. There's a strings directory and you can see inside the strings directory all the different strings that are actually configured in all the different languages. So this is how the Compound manages different strings for the various pages on the app. So for instance, if I wanted to come into the application, look up the borrow balance, maybe change that for the purposes of the demo, I can do a search for borrow balance here and then maybe because I'm feeling cheeky. Add in a little demo text string here. So the Watcher string actually continues watching all these files and automatically rebuilds the app. So you can see on this borrow balance string usage.
00:06:16.338 - 00:06:52.878, Speaker B: Hey, we kind of got a demo update. The next command that is being run is the Watch CSS. So the Palisade app uses CSS to define all the styles in the application. And there is a CSS directory SCSS directory here that has all the different styles that are being described. So if I wanted to come into the application and let's say, inspect this background, maybe I want to do a change of maybe this black background here. I can go into the content. I can find the HTML section tag that has class hero.
00:06:52.878 - 00:07:45.454, Speaker B: One of the ways that I can do this is search for the class hero on my SAS files. I found it here. Right now the color is dark variable that's configured, but there's no reason that I can come into the code base and kind of change it to maybe something that looks blue, right? And again, because Watch CSS script is running or sorry, this is green, we can actually see that this updates on the code base directly. So that's kind of cool. The next thing that I wanted to show you is this application is all built in a programming language called Elm. And we chose Elm because our team at Compound Labs is a big fan of functional programming languages and Elm is a functional pure programming language. We found that the language being able to force our own developers to handle all the different edge cases for any features that we build, is actually quite powerful.
00:07:45.454 - 00:08:48.300, Speaker B: Typically, we say internally that with a high confidence factor, when Elm compiles, it kind of just works. And that's kind of been really stellar for making sure a team can continue to move fast with just a couple of members on the team. So within Elm, I advise any developer that wants to fork your repo and look at it, go through the Elm documentation to kind of see how things work under the hood. I don't have a lot of time on this one, so what I want to show you next is sort of how we use the Elm code to call into a web3 call, which the web3 calls are written in JavaScript. So in my main class, I'm going to search for a method called new block command. And within the context of the Elm code base, this new block command basically is invoked whenever a new block happens on the ethereum chain. I think this is roughly every 13 seconds, and there's a lot of information here to go through in the code base.
00:08:48.300 - 00:09:16.734, Speaker B: Basically, high level is for every page that exists and every different component. Things like transactions, things like compound balances, things like oral prices. This function basically passes off information to these sub modules and the sub modules themselves actually figure out what are the necessary data pieces that we need. This module needs customer balances. It needs account limits. It has metadata. I can go to the definition of this account Limits.
00:09:16.734 - 00:09:59.930, Speaker B: And there's a port here. Again, on the Elm system. A port is a way to communicate from the Elm layer onto the Web Three layer. So if I do a search on my ports class here on the code base and do a search for this method, you can see on my JavaScript ports class, I have this function called subscribe with a data payload that exactly matches the one that I was showing you earlier in this Elm class. So they kind of match one to one in this particular call. We make a call to Account Limits, and this kind of should look a little bit similar to some of the developers that are already familiar with doing Web Three calls. Here is a specific call that calls in to a function on the compound lens contract called Account limits.
00:09:59.930 - 00:10:40.814, Speaker B: It queries for account limits with the function parameters, controller address and customer address. And then if I pull in the compound protocol, I can actually show you on the solidity layer the compound lens contract. Here's the function that's kind of being invoked here's, the struct that's been returned. And I can come back to Palisade and say, okay, as a result, here is the struct for this particular call that's being made. Now, if I want to make a change here, I could come in and say the comptroller contract also has or the lens contract also has a function for something like what? Let's see. Max assets. Here.
00:10:40.814 - 00:11:59.740, Speaker B: I'm going to do a controller with Max assets. So this is a call like if I wanted to add in an additional call to Web Three to track information, I can log this new variable and I can track it here. Max Assets should refresh my page again. And I'm going to go into the console and then we can see, oh, there's 20 max assets right now that are supported on ComCom. Now the last thing that I want to show you, I have this app that I have console log, a styling change. The DAP Palisade application also supports being able to deploy all of my changes to IPFS, which is kind of the default environment that we use to deploy any changes from ourselves that we make as well as gcloud. So the scripts in here, if you follow the instructions, allow you to send IPFS port a host, you can add in the necessarily API keys that you need, run the IPFS script and then get the version of this.
00:11:59.740 - 00:13:12.382, Speaker B: Application that I have locally with the green background, deploy it onto IPFS and then see how that kind of works out for your specific customers, either for demoing purposes or if you actually want to make a change fork and make a change to the compound protocol and actually push it live into production. That should work out just fine. I actually might be able to run this here. I have a tiny bit of time remaining. We'll build a CSS first. I'll do the build of the application, and the build basically is creating a directory of all these CSS files, all the JavaScript files, all the HTML contained in a nice package with the idea that you would kind of push this directly to any of your desired static page hosting websites. So this is building, and before I kind of finish out here, I just wanted to make a little shout out that my team at Compound do a lot of watching the different questions that the community has, and specifically for questions around the compound palisade repo, I would hit up the Compound discord chat.
00:13:12.382 - 00:13:56.796, Speaker B: That's kind of the best resource for developers. If they want to get questions, talk to some of us directly. Ask any questions that you have about how the repo is structured, and just generally get help for any ideas or projects and questions that you have that you want to work on. So I'm going to deploy this. It should be able to deploy here really quickly. So this actually deployed my local changes to IPFS. I'm going to grab one of these links, open it up in my browser, and if everything so hope I missed a number.
00:13:56.796 - 00:14:31.348, Speaker B: If everything worked out good, I should see a nice compound application with sort of a green background. Let's see if it the first time you deployed IPFS. It's a little slow, but there we go. We have a version that exists on Compound that contains the code changes that I just made, green background and all that's about all the time that I have to describe. Again, went through a lot of information really fast. So you have questions, please don't hesitate to reach out into the discord. But thank you all for letting me have this presentation with you this morning.
00:14:31.514 - 00:14:35.896, Speaker A: Thank you so much. Tori. I was worried about Morphe's Law kicking in, but then I realized you guys.
00:14:35.918 - 00:14:41.896, Speaker B: Use so there you go. When it compiles, it kind of just works. Awesome.
00:14:42.078 - 00:14:56.084, Speaker A: One question before we move on to our next talk. What is kind of the process around people wanting to contribute to this repo? Obviously, this is the production Compound app, so can anybody contribute? What are the prerequisites? How do you think about that and how do you welcome community edits?
00:14:56.232 - 00:15:50.924, Speaker B: Yeah, actually, yeah, it's a great question. So in the Compound repo, there is a specific README for the contributing. For developers that want to contribute, the easiest answer is to just fork the repo, get familiar with making changes to it. After you fork the repo, you can create a pull request back to the main palisade repo, and then our team will go through it and review it and make sure the changes seem to be okay and safe and valid, and then any PR request that is merged into the mainline repo that automatically gets deployed to IPFS. And then if that change kind of looks good on the IPFS side, our team at Compound Labs, at least for right now, can go ahead and make that accessible at App compound Finance. So, again, I would take a read into the contributing guide to go get all the steps to figure out how to create the pull request, how to create issues on the PR, and how to kind of get help and feedback on any changes that you want to make.
00:15:51.122 - 00:15:56.148, Speaker A: Awesome. Well, I hope that was helpful for everybody, too. This was an amazing demo. And thanks for talking about how everything.
00:15:56.194 - 00:15:57.490, Speaker B: Is architected thank you.
