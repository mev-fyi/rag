00:00:00.090 - 00:00:38.220, Speaker A: And next up we have our panel. And I'm super excited about this panel because we have three amazing people that are going to be talking about how Web Three and the world just gets to use Ethereum on the enterprise side. So we have three amazing people for this next talk, and that's Dan Shaw, Connor Spencenson, and Peter Robinson. And Dan will be the one moderating it. And I'll let Dan intro our panelists as part of this, and I'll kind of have him give him the rest of the context. So without further ado, I would like to welcome Dan and Connor and Peter to this chat and I'll let them kick off with our next panel. Welcome.
00:00:39.630 - 00:00:46.442, Speaker B: Awesome. Thanks, Kardik. Hello. Welcome.
00:00:46.576 - 00:01:19.458, Speaker C: All right, so today we're going to be talking to the creator of Web Three J and talk a little bit about Web Three, how that's evolving and how that kind of fits into a broader enterprise context. I'll be your host. I'm Dan Shaw. I'm advisor to the Ethereum Foundation on Enterprise community. And I'll let Connor and Peter introduce themselves. Connor, do you want to kick off the introductions?
00:01:19.634 - 00:01:31.670, Speaker D: Yeah, sure. Thanks, Dan. So Connor Spenson, the author of Web Three J and also the founder of Web three labs. Leave it at that and pass over to Peter.
00:01:32.750 - 00:01:43.098, Speaker E: Yeah. I'm a technical director. Applied cryptographer at Consensus Protocol Engineering R D. Back to you, Dan.
00:01:43.274 - 00:01:44.094, Speaker B: Awesome.
00:01:44.292 - 00:02:10.246, Speaker C: So I want to start with some basics, especially since know not just the total Ethereum community but also the enterprise community. Love to have kind of crisp definition of what we're talking about. So Peter, can you help us lay the groundwork and just remind folks what we're talking about when we're talking about Web Three?
00:02:10.428 - 00:02:11.110, Speaker F: Sure.
00:02:11.260 - 00:02:22.058, Speaker E: So the simplest way is let's talk about Web One Two, and then we'll get to three. So Web One, I've got a web server and I own the content. I write the content.
00:02:22.144 - 00:02:23.254, Speaker F: It's pretty static.
00:02:23.382 - 00:03:05.814, Speaker E: People surf the Internet come to my site, Web Two, I own a server, Facebook, Twitter, and people come to me and they create the content and I monetize their content, but I own their content. And web3. It's decentralized. And so people own their own content, people own their own business logic, and there's no central body that owns it. So you don't have centralized governance and you don't have centralized servers. So you might have a network of servers that the information is across. The other big thing about Web Three is it's the web of money.
00:03:05.814 - 00:03:16.220, Speaker E: So you can do value transfer as part of things. It's a native part of the whole system. So I don't know. Dan, is that a pretty good introduction to Web Three?
00:03:16.670 - 00:03:18.300, Speaker B: That's great conducts. Thanks.
00:03:19.710 - 00:03:31.360, Speaker C: So Connor, you created Web Three J once you sort of lit the groundwork there and tell us a little about why you created it and what it does.
00:03:31.810 - 00:04:02.710, Speaker D: Sure. So it all started for me back in 2016. Historically, I'd spent many, many years working in enterprise and then finally got out of that world, into the world of startups in 2015. Worked on my first venture. It didn't work out, but then kind of moved sideways and discovered Ethereum in 2016. So I wasn't one of the super early people on the scene, but I'd followed Bitcoin. But Bitcoin had never really captured my imagination.
00:04:02.710 - 00:04:56.042, Speaker D: Fundamentally, it was just the store of value. And what I always loved about Ethereum was just the whole concept of having this massively, decentralized world computer, basically, to paraphrase other people in their description. And what drew me to Ethereum was that looking at blockchain back then, it was the project that really stood out. It was the first of the Blockchain 2.0 projects, and the community around it reminded me a lot of Linux. I've been kind of big into Unix and Linux in the unfortunately for me, jumped on the wrong horse, got into open Solaris and this sort of stuff when the Linux community was exploding. And then when it came round to the blockchain and looking at the communities there, I was like, I'm going with the biggest community this time around.
00:04:56.042 - 00:05:36.706, Speaker D: I don't care about what I think, the technologies, I mean, don't get me wrong, it was an amazing jump, I think, with going to 2.0. But fundamentally, the community thing was what drew me into it, as well as just what it was all about. And even now, in 2020, I feel exactly the same way. We've had all these other projects emerge. Yeah, they're so called Ethereum Beaters or whatever you want to call them, but I don't think it's any different. We've still got an amazing community in the Ethereum ecosystem. But going back to 2016, I'd spent all these years in enterprise working on the JVM and being mainly a Java developer.
00:05:36.706 - 00:06:35.290, Speaker D: And when I started working with Ethereum, it kind of seemed like most of what was happening there was in the JavaScript world. And coming from that enterprise background, I thought, well, there's all these enterprises talking about the transformative potential of blockchain. Ethereum is the biggest blockchain platform, so surely there's a need there to ensure the JVM can plug in seamlessly to it. And that was the genesis of Web three j spent a bit of time researching to see if anyone else had an equivalent that just kind of hooked in at the API layer. There wasn't anything. I thought it'd be a simple project, but then got sucked into the rabbit hole, signing and generating smart contract wrappers and all this other stuff you have to do, and released the first version of it just in time for DevCon Two in Shanghai. So kind of from there it's just grown and grown and it's been a lot of fun just having this project and see it emerge over the years and get ever more sophisticated.
00:06:36.910 - 00:07:02.340, Speaker C: So you touched on a little bit. Maybe, Peter, you could kind of continue the thread. We've got the JVM and Java, and Java has been around forever. It's the old dinosaur, the old workhorse. Why should we care as we're sort of innovating and paving out this new universe, why should we care about.
00:07:04.710 - 00:07:05.074, Speaker D: I.
00:07:05.112 - 00:07:08.310, Speaker E: Mean, let's face mean, I've worked at.
00:07:08.380 - 00:07:11.314, Speaker F: A few companies and one of them was Oracle Labs.
00:07:11.362 - 00:07:17.346, Speaker E: And Oracle's got a product, I won't say which one it is, and it's.
00:07:17.378 - 00:08:05.506, Speaker F: Got 100 million lines of code and they're in Java. Now if someone said, oh, we want to put this new module in and we're going to bang it in in Golang or Rust or something, they're going to say, no, it's really simple. No, we've got 100 million lines of code and they're not the only company that has a massive code base of Java. So they've got all these devs who know the language, they've got capability. And so trying to have a new little piece that's in a different language makes supporting the overall product much harder. So that is a big reason. Another reason is a lot of companies like to outsource to places such as India, and you've got something like 10 million devs in India who know Java.
00:08:05.506 - 00:08:45.640, Speaker F: So that's another reason for why people use Java as well, is you can outsource to all over the world and there are just a lot of people who know Java. And so if you can use this tool, Web Three J, so you can think of the Ethereum network, you've got all these nodes. Web Three J is this library that you integrate into your app, into your Java application to talk to the network. That's why people use Java is because there are a lot of people who know it and it makes it. And if you've got an existing code base, then you just want to keep on going. Yeah.
00:08:47.370 - 00:08:51.094, Speaker C: So Connor, you've built this incredible community.
00:08:51.292 - 00:08:52.454, Speaker B: What are some of the ways that.
00:08:52.492 - 00:09:11.706, Speaker C: Folks are leveraging Web Three J? On the JVM we have emerging languages like Kotlin and the Android ecosystem. How is building the web3 functionality for the JVM?
00:09:11.818 - 00:09:13.600, Speaker B: What have you seen the community doing?
00:09:14.050 - 00:10:16.178, Speaker D: So I think just building off the back of what Peter was saying, so many companies started investing heavily in their Java infrastructure in the late ninety s. And so you've had basically 20 years of business platforms being built and these companies have exploded in terms of their size and their global footprint. And so what that's meant is that for people like them, it's about being able to create some nice integrations there. The classic thing, of course, is these enterprise integration patterns, which is a very well established thing in terms of how you connect disparate systems or you solve different messaging problems. And there's loads and loads of products and very large companies that are kind of operating that space. Obviously nowadays the Kafka message bus is one of the big ones. But then historically you had, well, Ibmq is still massive there and MuleSoft kind of made it their bread and butter, just kind of servicing that community.
00:10:16.178 - 00:11:13.614, Speaker D: And so what you see is like a number of different integrations there. That's a very natural place for it. So part of it is having adapters that can write to persistent data stores, but then also like say with the guy Bill Gin over at Red Hat who wrote the Web Three J adapter for Camel, there's kind of a classic example of how it just kind of plugs into it. What we certainly see is just that within the JVM world it tends to be quite different. The sort of applications and use cases that people have versus the JavaScript world. I mean, don't get me wrong, like the full stack development thing, it's amazing what you can do nowadays with Node on the front end and the back end. But where you have these enterprise services, you're thinking about backend services typically you're not going to create a UI and these sorts of things generally using the JVM.
00:11:13.614 - 00:12:28.390, Speaker D: You can though, and there are frameworks for that, but it's those sort of serious business apps that are doing a lot more. It's more about the data processing and doing transformations of messages and so on and so forth, which you don't have those sorts of problems when you're writing client side applications. It's more when you get into much sort of meteor scenarios. But the other point of course is, as you mentioned there, Dan, is the Android community and this is something which it's been great to see, the adoption of Web Three J in that space. Samsung used it in their Blockchain SDK, which they released last year for people building, wanting to integrate with Ethereum on Android phones and then also Opera kind of they were one of the early people to use it with their crypto wallet as well there. And so I think what's so powerful about the JVM is that it kind of serves these two massive communities. They're not the kind of ones that people will necessarily write a web app in, but if you want to write a phone app, then of course you've got things like React native, for instance, to Simplify.
00:12:28.390 - 00:13:03.830, Speaker D: But if you want to write it on the native platform, then Web Three J is what you use for that. And likewise as well on the JVM, Kotlin's got a lot of growth in the Android community just because of its backward compatibility. But I won't go into bore people with those details now. But yeah, it's very well embedded in those different communities and consistently you see the biggest programming languages. It kind of alternates depending on which survey it is, whether JavaScript, Python or Java, but very bright.
00:13:04.250 - 00:13:05.430, Speaker B: That's excellent.
00:13:07.950 - 00:13:48.390, Speaker C: We're at a point where Web Three is beginning to take off and we're heading towards a convergence of Web Two and Web Three. But there's still kind of the last bit of chasm, especially folks that are coming from the Web Two world and trying to digest what Web Three means to them. Peter, what do you see as some of the key things that folks need to either do or understand to cross that chasm?
00:13:52.730 - 00:14:55.926, Speaker E: I think understanding decentralization is if you want to do a good app in the Web Three world because there are a lot of people who've got an application and they said we want to blockchain it and so they just add a blockchain to it and there's all sorts of central points of failure. If you want to have a credible blockchain app, then there needs to not be these central points of failure. I think that's a big one. Thinking about the design of the application, also thinking about if you're going to be doing something on the blockchain, you really don't want to be having some massive heavyweight complex smart contract. The smart contract should be a minimalist thing with a lot of other business logic. So you got your core business logic on chain and have a lot of other things happening off chain. But then some people can dip into the Web Three world for micro payments and I've seen that a lot with say, games.
00:14:55.926 - 00:15:23.794, Speaker E: So this is actually a topic, you have to shut me up on this one because this is something where I could talk for hours, but it's a huge field. But I mean, a way that people often dip their toes in is to allow micro payments of their thing that they've got. So people paying, say, with an ERC 20 or just with Ether itself. And that's a way of people who've got a Web Two app integrating Web Three.
00:15:23.992 - 00:15:26.390, Speaker B: Nice. Awesome.
00:15:26.460 - 00:15:38.760, Speaker C: So Connor, how is Web Three J evolving to meet the needs and what does the future of Web 3G look like?
00:15:39.390 - 00:16:57.390, Speaker D: So we've got some really cool things that we're working on at the moment. And fortunately, as well, the Ethereum Foundation has just given us another grant. So we've got to give a big shout out and thank you to them for that as well, because it makes a big difference when you can have some funds to really focus on this as opposed to kind of working around other projects to do this stuff. What we have, and we've already got the core framework support for the specific features of the major Ethereum clients and also things like Hyperledge and also the enterprise focused ones like Basil and Quorum too. We have Maven and Gradle plugins, which are the two major build tools used on the Java and Android platforms. And those build plugins are sophisticated enough now to the point where if you have solidity code in your project, it will automatically generate the Java code to talk to them and then it can also generate unit tests as well for those. Something else though, that the guys have just got a release going out tonight is an open API generator.
00:16:57.390 - 00:18:12.170, Speaker D: So what's really awesome about this is that this is a build plugin that you basically say you add this build plugin to your project and some solidity code, and what that will do is it actually generates a fully runnable project which spins up open API APIs for every method on your smart contract, enabling you to deploy and manage and whatever else. So what that means you can basically just take a solidity contract and then you can just spin up an application that exposes it in an open API format. So it massively reduces the barriers because it's one of those things we've seen people do again and again. They create a smart contract, then they write a Java app to basically create a web service to talk to it. And so we've automated all of that now. But some of the other things though that we are going to be focusing on now, one of them is starting to think about the e two side of things with the beacon chain. It doesn't really change how people are going to be interacting with main net in the near term, but where we feel that there's still a bit of value is having a Web Three J library for talking to the beacon chain client API.
00:18:12.170 - 00:18:50.326, Speaker D: We're also starting to go deeper with our debugger as well. So we do have a stack based debugger that uses the hyperledger Basu EVM. So you've got a production grade EVM for running your unit tests against with Web Three J and we can easily specify docker files or an in memory EVM to do this. It makes integration testing really powerful against different clients. But we're going to be beefing up the debugger. We're looking at support for IntelliJ so you can actually have a proper debugging experience in IntelliJ. So going from Java code to solidity and back again.
00:18:50.326 - 00:19:56.342, Speaker D: And then the other thing is being able to actually pull down like a lot of projects like Open Zeppelin being the main, the one that people probably use the most, but they typically upload contract artifacts into NPN and so we're going to enable it in Web Three J. So if you put in an at annotation like you do in the JavaScript world for referencing a smart contract that lives on an NPM repository, those contracts will get pulled down into your Java project. So you don't have to copy and paste code to use certain interfaces and these sorts of things. And the other thing is a form of migrations and just refreshing the docs and these sorts of things too that we haven't spent as much time on. And to kind of go back to Peter's point there about the whole getting started experience, it's still so hard for people when they first come to the ethereum paradigm because not only have you got to get your head round a node. You've also got to get your head around a wallet and you've got to get your head around solidity. And it's like it's all these things before you even start writing any code.
00:19:56.342 - 00:20:01.870, Speaker D: So we're on a quest to kind of simplify that and also give people first class developer experiences.
00:20:02.290 - 00:20:03.230, Speaker B: Brilliant.
00:20:04.290 - 00:20:20.178, Speaker D: I was just going to say. And one other thing as well in the baseline too, that's the other area as well we're exploring because right now the baseline is using node infrastructure for the smart contracts. We want to add in support using web3 J for that too.
00:20:20.344 - 00:20:55.870, Speaker C: Nice. The enterprise folks that I've been talked to, baseline protocol is central to a lot of their considerations. You mentioned E Two. And as we look forward not just the implementation in web3 J, but web Three, maybe. Connor, Peter, sorry, you could kick us off in how does Web three look like in an E Two era?
00:20:56.610 - 00:21:00.814, Speaker F: Yes, so good question.
00:21:01.012 - 00:21:04.594, Speaker E: So I think E Two, for those.
00:21:04.632 - 00:21:12.146, Speaker F: People who've been following it over the years, is an ever changing beast. It has been morphing and changing and.
00:21:12.168 - 00:21:13.940, Speaker E: New ideas come and go.
00:21:16.890 - 00:21:36.662, Speaker F: There are definitely going to be shards of some sort and the latest thought is that they'll be using a technique called roll ups as a way of having massive scalability. But you might have execution shards and data availability shards.
00:21:36.726 - 00:21:38.394, Speaker E: I think the thing you can think.
00:21:38.432 - 00:22:02.066, Speaker F: About is though, that you'd be targeting your web3 J at one of the shards essentially for your execution environments. And then it's a matter of dealing with how do you do cross shard communications, because you can imagine you're going to have a contract on one shard and another contract on another shard and you want to do a cross contract call. So just working that through. So there are some complexities, but the.
00:22:02.088 - 00:22:03.458, Speaker E: Thing that I think we can all.
00:22:03.464 - 00:22:27.590, Speaker F: Be sure of is one way or another you're going to be able to write solidity code and it's going to work on the ethereum too. We're not going to throw the baby out with the bathwater. And somehow rather the main net, as it is at the moment, is going to be a shard in E two that's thought of as the transition repositories. You get that working as part with the beacon chain.
00:22:27.750 - 00:22:43.598, Speaker E: So I think that it's just a matter of being able to target multiple shards. I think that is going to be the big thing, but it's an evolving thing as exactly how the execution layer.
00:22:43.614 - 00:22:45.522, Speaker F: And data availability layer will work.
00:22:45.576 - 00:22:48.100, Speaker E: Beaconchain is due to be launched really soon.
00:22:50.790 - 00:22:52.580, Speaker C: Connor, anything you want to add?
00:22:56.410 - 00:24:35.220, Speaker D: So I have to say that earlier on this year, when it kind of sounded a bit more certain that we weren't going to be launching brand new execution environments on E Two right from the get go, it's a sigh of relief because it meant that the fundamental infrastructure was built up with web3 J around transaction signing, creating contract wrappers so you can natively interact from the JVM. With smart contracts, it just kind of still works as it always has. And it's something that's always a consideration with any technology that balance in terms of whether you decide to come up, rewrite everything and start from scratch with a kind of more superior approach or if you kind of stick with what you have because it's well understood and you kind of move across the other side somewhat, probably unintentionally going back to the early considerations with it. But Solidity has kind of become a global standard for smart contract. It's like you look outside of the Ethereum ecosystem, like projects that can support Solidity, say you can run Solidity contracts on our blockchain because they know how many people are familiar with that. And so it's nice anyway to hear that with these two anyway right now. Anyway, it should be going in that direction, which I think will make everyone's life a lot easier when it comes to the actual migration of it.
00:24:35.690 - 00:24:36.418, Speaker B: Excellent.
00:24:36.514 - 00:25:39.762, Speaker C: Well, Connor, Peter, it's been a great deep dive into this core part of infrastructure for building Web Three. One thing I want to call out to everybody, there's a survey that the Ethereum Foundation and the EA are doing on DevTools. So if you go to dev is the chunk part of it, love to get your feedback. And it's been great to support Web Three J project and make sure that everybody has the resources to build into the future. And by participating in the survey, you help us figure out where we'd spend our time and resources and supporting the community. So really appreciate you all taking the time and it's been a great discussion.
00:25:39.826 - 00:25:40.860, Speaker B: Thank you very much.
00:25:41.630 - 00:25:42.474, Speaker D: Thank you.
00:25:42.592 - 00:26:24.470, Speaker A: Thank you so much, dan, Peter, and Connor. And even though Dan kind of talked about the URL, we'll put that in the chat in a few seconds as well. So all of you watching can click on that link and fill out the survey. We are at time, but I do have a question for each of you and we can just end on that question. And the question is kind of as. Over the past few years, obviously you've interacted with a lot of enterprises trying to explore Web Three and integrating this into their day to day projects. What's kind of the most common thing that you hear that either hasn't still been addressed or, you know, that we as a community have to work on improving and kind of what can people do to address those problems that you hear commonly?
00:26:26.090 - 00:26:27.650, Speaker D: Shall I go first?
00:26:27.820 - 00:26:28.522, Speaker B: Go for it.
00:26:28.576 - 00:26:29.580, Speaker A: That'd be great.
00:26:30.990 - 00:27:40.414, Speaker D: Unfortunately, there's still a lot of misconceptions that if you run Ethereum, it's proof of work, which it's annoying right when you hear that because there's so many other options there. But that's certainly one area that enterprises kind of do struggle with. But the other side though, and this kind of is by design, really with the public Ethereum network. It's really about individuals in terms of a wallet is kind of key Identifier on it and it's an anonymous Identifier with enterprises, when they want to transact with one another, they absolutely want to have complete certainty on who they're transacting with and that sort of confidence there. So that's the key one. And it's not to say you can't kind of have abstractions to tie in with whatever, say, directory services that map to an Ethereum wallet, say to work around that. But with the platforms that were designed from the ground up for enterprise, it's like they kind of baked a sort of PKI type infrastructure into it.
00:27:40.414 - 00:27:52.820, Speaker D: So it was like that just familiar paradigm. And they're using the crypto curves that are kind of the really well known ones that there's lots of implementations of that those enterprise security guys are most comfortable with.
00:27:54.970 - 00:27:55.750, Speaker B: Peter?
00:27:57.850 - 00:28:42.580, Speaker E: Yeah, look, I think one of the big things that we have is that a lot of people don't know that you can run a consortium chain in know, you say Ethereum and they say mainnet or they don't say Mainnet. Ethereum is this, as Connor was saying, a proof of work. Public chain, no permissioning. And a lot of enterprises instantly think chaos, the world's come to an end. Of course there is baseline, which is now a way for businesses to use mainnet and feel happy about their data. But I think consortium chains are a big thing too. And yeah, people often miss the fact that Ethereum can do that.
00:28:42.580 - 00:28:44.354, Speaker E: That's me.
00:28:44.552 - 00:28:45.346, Speaker B: Nice.
00:28:45.528 - 00:30:05.850, Speaker C: Yeah. For me, I often get asked the question what's the killer app for Ethereum? Folks are poking at that the enterprise love to pick winners and in that they're looking for why invalidating? Why is Ethereum going to win? And ultimately, I think it's the distributed nature of the platform and for folks to get to from where they are today in their adoption to really the maturity and the need and the use cases where distributed collaboration really clicks in. One of the things that I've been directing folks to focus on is something like baseline protocol. It simplifies the surface area of the problem set for an enterprise that is asking the question what should I do now with Ethereum? So that simple. I love to guide folks with the enterprise lots of no's in one or two. Yeses. So as Peter was saying, sort in blockchain.
00:30:05.850 - 00:30:17.840, Speaker C: Fantastic. And baseline protocol so we can get that simple distributed point on the eventually main net.
00:30:18.530 - 00:30:22.970, Speaker A: That's wonderful. Dan, peter Connor, thanks again for this great panel.
