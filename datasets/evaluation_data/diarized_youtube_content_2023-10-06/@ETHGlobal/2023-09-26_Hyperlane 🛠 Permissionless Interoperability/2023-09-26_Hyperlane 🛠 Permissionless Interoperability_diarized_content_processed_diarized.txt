00:00:06.890 - 00:00:51.658, Speaker A: I'm going to be talking about Hyperlane today. I'm York. I'm one of the members of the founding team at Hyperlane. Hyperlane is an interoperability protocol. We're pioneering this approach called permissionless interoperability. The main idea is instead of having a kind of service oriented approach where need to come and do BD with Hyperlane to get your chain connected via some interoperability protocol that doesn't compromise on security, you can actually deploy our protocol yourself and you can bring your own security preferences. We've done a lot of work to modularize our protocol to allow people to extend it to new VMs, to new chain architectures.
00:00:51.658 - 00:01:27.880, Speaker A: And I'm going to be talking through the motivation of that. So first I'll start with some definitions. Permissionless I think a lot of people talk about. To me, permissionless means a protocol is accessible to everyone. There's no censorship, there's no ability for someone within the protocol or some operator to discriminate against some developer, some actor, some user. And interoperability to me is composability amongst DApps that exist on different infrastructure layers. I think this word also gets thrown around a lot.
00:01:27.880 - 00:02:22.566, Speaker A: It can mean a lot of things in software interoperability, but in a blockchain context, this is what it means to me. Why do we care about permissionless interoperability? So if you look at the kind of trajectory of the ecosystem for the past, I don't know, decade or so, you'll see that we're increasingly using divergent infrastructure as DAP developers. So we started with this Payments application. It was on bitcoin. It had this very simple kind of blockchain architecture. And then Ethereum came along and generalized this to any sort of computation that can be executed in the VM. Within the block we have Nier and Solana who kind of quickly followed suit.
00:02:22.566 - 00:03:59.474, Speaker A: There's some other smart contract chains that would put in this category and then folks decided, oh, actually I'd like to push that even further. I'd like to make some generalized chain SDK or framework that gives me the benefits, the developer experience benefits of something like Ethereum but makes optimizations kind of deep in the stack, whether it's at the consensus layer or kind of at the monetary policy layer which allow the application to have more sovereignty. So this is where we got things like Cosmos and Polkadot where application developers wanted to be able to control things lower in the stack and not be beholden to Ethereum, validators adopting their EIPS, that sort of thing. And then in the past couple years, we've been at least the Ethereum ecosystem has kind of been full steam ahead on this roll up centric roadmap. Vitalik's talked a lot about it. There's a lot of kind of scaling benefits to this approach and there's a lot of teams here that are building towards this vision. The Optimism team specifically has kind of tried to maybe create an experience similar to the Cosmos SDK for launching your own roll up so that's the Op stack more and more teams are kind of seeing the light and kind of rearchitecting their applications to take advantage of some of the properties of roll ups.
00:03:59.474 - 00:04:30.814, Speaker A: Mainly that you don't have to kind of bootstrap a security budget. You can inherit that from the L One. There's also a lot of people thinking about Plasma and Sharding. Depending on who you talk to, you might put different chains in this category. But yeah, this presents a problem. And the problem is that well, quickly, to highlight some of these applications who are adopting these new architectures, or DApps specifically, right, we have Zora. They launched an L two recently.
00:04:30.814 - 00:04:59.462, Speaker A: Obviously, coinbase has been, I guess, like base summer. Everyone's super excited about the coinbase. L two. And over time, what we're seeing actually is that both applications and users are migrating. And actually there's more activity on these Newark infrastructure layers than there is on the L One. So this is not just like something theoretical that only researchers are talking about. This is actually playing out in production.
00:04:59.462 - 00:06:20.962, Speaker A: People are migrating. And so the problem this presents is we have fragmentation, basically, that if you look at kind of the top few alternative networks besides Ethereum, L One, all of these different networks Arbitrum One, Op, Mainnet, Polygon, POS, CK, Sync, Ronin, Avalanche, Bridge every single one of these has a different interface for interoperability. And what that means is, as an application developer, you have to reintegrate every single one of these networks if you want to be composable across all these different networks. And in a market that's kind of increasingly shrinking or maybe not growing at a pace that we'd like it to be, it's really important that you can actually reach all of the users within the ecosystem. And a lot of users are opinionated about what network they hold their funds on or what wallets they use that support maybe like a small subset of networks. And so even if you want to kind of adopt one of these new infrastructure layers, you have to meet your users where they are. And this is kind of the central problem of interoperability and specifically kind of in the Ethereum ecosystem.
00:06:20.962 - 00:07:20.394, Speaker A: All these new roll ups popping up and just super explicitly, all of these three actions that I describe up here all have separate interfaces. I think you'd be hard pressed to find a developer either at this hackathon or in the world, who knows how all these interfaces work, what the kind of security guarantees are, what the semantics and capabilities are of them, what happens if your message between the chains fails, failure, modes, payments, all this stuff is really complicated. There's this crazy matrix that's ever expanding of all of the different networks you need to understand. And so at Hyperlane, we've been thinking hard about this problem, and we've been trying to figure out what's the right abstraction to allow DAP developers not to think about this, not to think about optimism has their own bridge interface. Arbitrum has their own bridge interface. ZkSync ronin polygon. Whatever.
00:07:20.394 - 00:08:23.866, Speaker A: They all have their own interfaces. And really you want a consistent application interface, right? I think we'd all like there to be some simple function that you can use, but the challenge becomes, okay, well, how do we maintain the security guarantees of these underlying bridges while having a consistent interface? And this is what the Hyperlane protocol does. So Hyperlane kind of implements this approach to interoperability. We're embracing modularity and we're separating the transport layer and the application layer. So at the application layer, you can have this consistent interface, which is quite simple. It's basically on chain smart contract API that allows you to pass a destination chain, a recipient address on that destination chain, and basically arbitrary bytes. And this is available to and from every chain that our smart contracts are implemented in, not exclusive to Ethereum.
00:08:23.866 - 00:09:11.950, Speaker A: We've actually recently expanded to a bunch of other VMs. We're on the Solana VM. We're about to ship the Cosmosm implementation, encouraging a lot of people to basically implement this protocol in their own VMs move coming soon, et cetera. But we want this interface to be everywhere, so there's kind of a consistent developer experience. And underneath the hood, our protocol will go and choose the transport layer, which makes the most sense and not only makes the most sense, but actually allows the message recipient to basically specify their own preferences for security. So a lot of people talk about the seven day withdrawal window from a lot of these roll ups and how it's like a really shitty user experience. Excuse my language.
00:09:11.950 - 00:10:25.698, Speaker A: And yeah, I think a lot of people users have started to go around these bridges instead of choosing to opt into this seven day withdrawal period, which maybe has the kind of best theoretical censorship guarantees. They're using things like stargate and hop and across and take your pick connect. They're using these things which have different security trade offs. So actually, users are already making these choices independent of the applications. And the applications have to basically support the pathways that users prefer. And ideally, applications are designed to basically encourage this behavior rather than kind of having this rigid forced pathway of like, in order to use my application, you have to go through all these hoops to bridge through the kind of canonical bridge and do all these weird API calls, et cetera. Basically, in Hyperlain, the message recipient can specify their own security.
00:10:25.698 - 00:11:26.950, Speaker A: We call these interchange Security modules. We have a bunch of off the shelf options, some of which basically wrap the native bridges of the roll ups that I was describing earlier. So we have this for kind of all of the major roll up transport layers. But the beauty of this is we want to allow someone, if they're sending from Ethereum to optimism to use the optimism bridge security. But if they're sending from optimism to Arbitrum, we can take some alternative trade off rather than forcing users to route through the L One take on this, like seven day latency. Obviously there's liquidity solutions, but again, these take different security trade offs that maybe developers might not be aware of. So yeah, this is the core idea of our protocol, just to kind of zoom in quickly.
00:11:26.950 - 00:12:50.864, Speaker A: The security preferences that the application developer can express are actually a function of message content. And so something I'm excited about personally is like this L2 to L2 interop use case without forcing users to go through the L One, have that fast, cheap, not have to worry about interfacing with the L One settlement period. And so we have a bunch of great designs for this that use economic security instead of going through the fraud proof system. As long as we have a pool of stake at risk on the L One, that's basically like providing kind of pre comps of all these roll ups that are participating in this system, you can get basically like, fast, cheap interop between these roll ups up to whatever amount of economic security we have. And people sometimes ask us, well, what happens when you exceed that economic security? And the point of this interface is that application developers can say, okay, beyond this amount of monetary value associated with my message, let's say this message is hitting my protocol, and I know the message is associated with $10 million. And that's super scary. I don't want to just trust some validator that's giving me a fast Precomp attestation on that.
00:12:50.864 - 00:13:33.068, Speaker A: I want to maybe force that to go through the slower, more secure pathway, kind of analogous to traditional finance wire limits. You can do that. You can express that as a function of message content. So you can say if the message exceeds this value, go and have some sort of manual review process or veto or whatever it is. Optimistic, we have all these off the shelf security modes that you can kind of pick and compose. And then the other thing I wanted to highlight is that actually we want people here to expand our protocol. We don't want to necessarily be the only operators of this thing.
00:13:33.068 - 00:14:17.264, Speaker A: The protocol itself is implemented in smart contracts. There's a few off chain actors that are totally permissionless. All this is configurable. And we've basically spent the last year or so kind of making this experience accessible to developers. So if you guys are spinning up your own roll up this weekend or you're experimenting with some new chain architecture, some new VM, maybe it's move. Maybe it's something. You can basically deploy our protocol to these new chains without ever talking to us, without doing some BD or sales cycle with our organization and get the benefits of all the other networks that are already connected in our protocol.
00:14:17.264 - 00:15:28.352, Speaker A: So there's kind of this nice network effect where you now only have to do a single hyperlink integration instead of what I was highlighting before, which is like ten plus integrations per application developer. So, yeah, this is really all about developer experience here. Yeah, I wanted to quickly highlight a few of the applications we've built on top of this primitive. So obviously token bridging people like moving tokens around. We have kind of like a template application and UI that's like a full stack solution for everything from interacting with our contracts on multiple VMs. So this actually supports Solana already, but there's basically, like, a template repo you guys can fork that allows you to hook up this UI and multivm wallet experience to any of the chains you like and spin up a token. There's kind of a few different flavors of token bridge you can choose from.
00:15:28.352 - 00:16:04.808, Speaker A: Can do, like, a classic lock and unlock bridge. If you guys already have some token you want to play around with. If you want to create a new token, we can do this kind of like native mint and burn style thing, kind of similar to Circle's CCTP protocol. You can also bridge the native asset of a chain as a token to an Ethereum network. And so we actually did this recently. We helped launch the first SVM roll up. And actually the native asset of the SVM roll up is just represented as an ERC 20 on Ethereum.
00:16:04.808 - 00:16:36.356, Speaker A: And that's kind of the onboarding mechanism, and they're using hyperlan underneath the hood. It's called Nautilus chain. If you guys want to check it out. We also have a few other kind of, like, nice developer primitives for people here. I have just a couple of minutes left, so I'm going to rush through this, but could have interchange accounts. Interchange queries basic premise here is, like, you can have a smart contract that holds assets on another chain, and that's called an interchange account. That smart contract basically has this proxy that exists on another chain.
00:16:36.356 - 00:17:30.632, Speaker A: We've abstracted that into a nice simple smart contract API. Similarly for Queries, if you want to do a view call against a remote network, we have a simple API for you to do that. And so, again, this is all to try and solve this problem of fragmentation, right? We want to simplify the developer experience across all these fragmented infrastructure layers. We'd love to see you guys try out some of these APIs. That's mostly it. I don't know if you guys are doing Q and A, maybe not, but I'm happy to talk after and chat with you guys about potential projects for the weekend. Yeah, can we take a question? Sorry, corse I'm actually not sure.
00:17:30.632 - 00:18:04.460, Speaker A: I don't think so. What VM is that? So that's the one that's by okay, no, we don't right now have that, but basically anything that compiled to that instruction set, we have the Cosmosm implementation, which is basically rust, so could probably hack together some just, like, compilation tool chain and deploy the Cosmosm contracts to maybe that VM. Cool. Thanks so much, guys. Bye.
