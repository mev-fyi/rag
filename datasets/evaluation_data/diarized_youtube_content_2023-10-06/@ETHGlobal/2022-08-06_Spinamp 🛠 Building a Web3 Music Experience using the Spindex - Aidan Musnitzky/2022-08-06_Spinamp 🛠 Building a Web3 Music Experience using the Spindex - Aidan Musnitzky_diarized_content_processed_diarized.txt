00:00:06.410 - 00:00:26.280, Speaker A: Cool. Thanks for joining us. We have Aiden here from Spinner, and the session today will be on building a webtree music experience using Spindex. Aiden, I'll let you take the stage, and if you have any questions in the meantime, feel free to pop them in the chat and we can answer them at the in. Thanks.
00:00:27.690 - 00:00:28.150, Speaker B: Cool.
00:00:28.220 - 00:00:33.686, Speaker C: Hey, everyone, I'm Aidan from Spin Amp, and today I'm going to be talking.
00:00:33.708 - 00:00:41.294, Speaker B: To you about Spin Amp and showing you some of the dev tools that we have available that you can potentially use during the hackathon. So if you're not familiar with Spinap.
00:00:41.442 - 00:00:44.074, Speaker C: Spin Amp is a way to help.
00:00:44.112 - 00:00:55.886, Speaker B: You explore, curate, share, and listen to the growing public library of web3 artists and media. And there's so much going on in web3 music that you've all seen. And so what we're trying to do is index and aggregate all of that.
00:00:55.988 - 00:00:58.462, Speaker C: And also give a way for people.
00:00:58.516 - 00:01:12.226, Speaker B: To really consume all of the content that's being produced. And so the main kind of product we're working on is an app for listening to music. We've got an iPhone app, a web app, and Android. Our website's, WW Spinet XYZ, if you.
00:01:12.248 - 00:01:13.380, Speaker C: Want to check out the app.
00:01:13.750 - 00:01:23.574, Speaker B: And so, yeah, it's on the App Store on iOS. This is kind of what it looks like on iOS for browsing music. Similarly, it's on android on the Google Play store.
00:01:23.692 - 00:01:26.200, Speaker C: And here's the web app.
00:01:27.130 - 00:02:16.994, Speaker B: You can use the app to browse through artists, see the different platforms, we index and listen to tracks. And it's really designed to be a music player that is really smooth and easy to use and like a frictionless way of listening to and discovering music. But what we released a few days ago is Dev Spinned XYZ. And so this is our collection of tools for helping people build new music experiences and tap into the web3 music industry and ecosystem. And so there's a whole bunch of tools that we've got available. I'll go through them and talk about them each one by one today and hopefully inspire some ideas for people to start building new web3 music experiences. Also, if you want to connect with us, feel free to reach out on Twitter or join our discord and ask questions and get involved.
00:02:16.994 - 00:02:18.778, Speaker B: And we'll definitely help you use any.
00:02:18.784 - 00:02:26.860, Speaker C: Of these tools or get onboarded to getting to build stuff.
00:02:28.430 - 00:02:30.810, Speaker B: Maybe I'll go through the tools one by one.
00:02:30.960 - 00:02:34.054, Speaker C: The first one is Burnt embed.
00:02:34.182 - 00:03:00.054, Speaker B: So this is an easy way that you can embed and customize a music play to put on your website. You can see here we've got this website you can go to to kind of configure it. And on the right is this Embedded Player for Chaos, which is a web3 music artist. And so if you want to use it, you go to Spin Amp, find any song, any artist, any playlist that you like so for example, here's a playlist that I've made. I can go and click the Share.
00:03:00.092 - 00:03:01.826, Speaker C: Button and then go to this embedded.
00:03:01.858 - 00:03:04.054, Speaker B: Site generator, paste in the URL, click.
00:03:04.092 - 00:03:09.798, Speaker C: Generate code, and now you've got an embedded player you can insert into any website.
00:03:09.884 - 00:03:22.174, Speaker B: So this is a player for a playlist that I made. And yeah, that's it. In time we're going to add more customization to this, like custom theming, custom layouts, custom content. And we've already got a few people that are interested in potentially using this.
00:03:22.292 - 00:03:26.910, Speaker C: One idea we've been thinking about is.
00:03:27.060 - 00:04:03.414, Speaker B: Taking these playlists and minting them NFTs. So you could embed the player and have a site to kind of browse players and add them and mint them as NFTs. Or primarily this is for artists that want to have play embedded into their website. They can use this to generate a playlist of their artists, discography from web3 and place that there. So that's spin up embed that'll be fleshed out and improving over time. And it kind of embeds our existing interface. But when you start to get into it, the more interesting tools are kind of our developer focused tools.
00:04:03.414 - 00:04:05.094, Speaker B: So the next one is spinopex.
00:04:05.142 - 00:04:05.930, Speaker C: SDK.
00:04:06.590 - 00:04:29.966, Speaker B: So this is SDK. It's a JavaScript client for our API and our indexer, which gives you an SDK, which gives you access to all of the data that we've indexed across web3. So that includes music and Ft. Mints transfers, sales and bids are coming soon. It includes artist data and profiles, track data, playlists. And the nice thing about our index.
00:04:29.998 - 00:04:32.558, Speaker C: And our aggregator is that it creates.
00:04:32.574 - 00:04:55.206, Speaker B: Like a cohesive cross platform profile for all artists and tracks. And it's really designed to build front end experiences that have high quality data, high quality content that run fast, and that give you good access to the actual content and metadata across all of these platforms. So installing it is straightforward.
00:04:55.398 - 00:04:57.706, Speaker C: You install it with yarno NPM and.
00:04:57.728 - 00:05:03.894, Speaker B: Then using it, we expose different APIs you can use. So the documentation is here and it's.
00:05:03.942 - 00:05:07.006, Speaker C: On our Getbook page over here as.
00:05:07.028 - 00:05:12.982, Speaker B: An example for usage. Here's one example. Fetching a track by a slug.
00:05:13.146 - 00:05:17.266, Speaker C: A slug is like a short piece.
00:05:17.288 - 00:05:21.650, Speaker B: Of text that refers to a track so that it can be shared in links quite easily.
00:05:22.310 - 00:05:25.646, Speaker C: And there's other for artists and tracks.
00:05:25.678 - 00:05:50.726, Speaker B: And NFTs and playlists. If you look through the API reference on the left, you can see the different types we use. It is kind of TypeScript based. And so throughout the SDK, you may come across types that you want to use for your different queries. And so you can refer to the different types here. Similarly, here is the API reference that we expose for the different records. Like for tracks, there's an API for fetching all the tracks.
00:05:50.726 - 00:06:34.230, Speaker B: Fetching tracks by ID for artists. You can fetch all the artists, fetch them by IDs, by slugs, which is like their name. Fetch specific tracks for a given artist. If you look at collections, this is for fetching collections from particular ethereum addresses. One thing to keep in mind is this is not fetching the collections in terms of NFTs, it's fetching them in terms of, like, tracks. And that's kind of one thing that our SDK has that you probably won't find in other APIs is it's quite easy to work with actual tracks and artists rather than just the underlying NFTs, because there's a lot of different experiments and things that artists are doing with NFTs. Some artists are minting one of one, some artists are minting, say, 100 NFTs.
00:06:34.230 - 00:07:17.640, Speaker B: Some artists are doing weirder things. And so what our kind of APIs give you much more cleanly and easily is, like the underlying traps and artists and how those are connected to NFTs. Similarly, you can see with our NFT APIs here, this one is for fetching all the NFTs that correspond to a specific track. So whether the track is, like, part of a one on one platform or a kind of multiprint with 25 NFTs or a generative project, in the future, when we add those, there'll be clean ways to kind of distinguish between the tracks and the NFTs. There's other kind of APIs for ownership and for exploring NFT owners. There's APIs for platforms. These are the current platforms that we kind of index at the moment.
00:07:17.640 - 00:07:26.042, Speaker B: And then, lastly, playlists. And so there's kind of two ways of interacting with the Playlist API. One is retrieving them.
00:07:26.176 - 00:07:29.530, Speaker C: So if you're not familiar with playlists.
00:07:30.130 - 00:07:33.402, Speaker B: Playlists are created within spinap through our interface.
00:07:33.546 - 00:07:37.102, Speaker C: And when you're using the app, people.
00:07:37.156 - 00:07:58.600, Speaker B: Will be able to kind of create their own playlist within the app. Playlists are stored offline in clients, and they're kind of just backed up onto our API for data availability, but everything's very much decentralized and client centric. And so you can fetch playlists by ID that people have created and.
00:08:00.490 - 00:08:00.950, Speaker C: Access.
00:08:01.020 - 00:08:18.678, Speaker B: Them through this API. If you're looking to create playlists, there's also an API for doing that. And for that, you need to submit a signer. One thing for our Playlists is they're all signed by individual users wallets. And so in order to create playlists.
00:08:18.694 - 00:08:21.706, Speaker C: You need to sign them and add.
00:08:21.728 - 00:08:40.926, Speaker B: The track IDs to a playlist. Yeah, reach out for more details if you want to play with those APIs. There's also one kind of utility that we've got available to get the resized artwork URL. We provide URLs for artwork, but when you're building a front end experience, you want to be fast. You probably want to resize the artwork to be specific sizes for faster loading.
00:08:40.958 - 00:08:43.940, Speaker C: And so the API provides that.
00:08:45.110 - 00:08:56.214, Speaker B: The next kind of tool we've got available is spin up hooks. So this is essentially a wrapper around all the SDK that I just showed you that puts them into react hooks to make them easy to use within a react application.
00:08:56.412 - 00:08:58.700, Speaker C: So as you can see.
00:09:00.430 - 00:09:28.994, Speaker B: Here is the repo. You install it with NPM ion. Here's an example of using the all tracks query. These hooks kind of are wrapped around react query and so that gives you nice things like loading and refreshing and error handling. And you can use that to pull the tracks into your react component and use them straight away without even needing to dig into a lower level SDK. Similarly, there's documentation for that.
00:09:29.112 - 00:09:32.226, Speaker C: And so here's the same kind of.
00:09:32.248 - 00:09:47.640, Speaker B: Documentation for Alsprenet, hooks, installation, usage, et cetera. And for the reference, it's got much of the same APIs that I just went through on the SDK are available as react books as well. And there's some docs in advanced usage if interested.
00:09:49.550 - 00:09:50.300, Speaker C: Cool.
00:09:51.150 - 00:09:56.586, Speaker B: So the next thing I'll talk about is our actual indexer and API. So our indexer is the kind of.
00:09:56.608 - 00:10:00.838, Speaker C: Underlying thing behind these repos and it's.
00:10:00.854 - 00:10:07.994, Speaker B: Kind of exposing an API through GraphQL. There is a GraphQL playground you can play with if you want to kind of dive into more of the technical details.
00:10:08.122 - 00:10:11.834, Speaker C: And this is the index API GraphQL.
00:10:11.882 - 00:10:29.718, Speaker B: Which is linked to from dev, spinach XYZ. And as part of the playground, you get this UI that you can use to explore and create a schema. So on the right you can see there's kind of docs that I'm an Explorer that I'm looking at, where you can see the different queries. These correspond to different records in the.
00:10:29.724 - 00:10:33.986, Speaker C: Database and the different types of queries.
00:10:34.018 - 00:10:50.714, Speaker B: And if you look at a little particular query, say here all artists, you can see it accepts arguments for filtering, sorting and those kinds of things. Similarly, when you're using the Explorer, you can easily construct queries on the left and play with the interface to find.
00:10:50.752 - 00:10:52.538, Speaker C: The query you want and then kind.
00:10:52.544 - 00:11:04.574, Speaker B: Of run a query. So here you can see I've constructed a query for getting all the tracks, getting the title, the audio, the art of the tracks, the artist, and actually the NFTs for that track as well.
00:11:04.692 - 00:11:06.740, Speaker C: In a nested query that gives you it all.
00:11:07.510 - 00:11:30.858, Speaker B: I'd still recommend like if you're building an experience to use the SDK rather than the underlying API, because the SDK provides a few nice things. Like I mentioned, it provides the artwork resizing. But also more importantly, the SDK kind of handles some things that may be harder to do from just the API. So for example, if we look at.
00:11:30.864 - 00:11:33.978, Speaker C: An example in the API here, you.
00:11:33.984 - 00:12:00.562, Speaker B: Can see our API has an IPFS hash for the audio as well as a URL for the audio. And this kind of is a little peek into how our indexer works, where kind of philosophically what we try to do is build an indexer with data that's decentralized by default, but nothing's perfect. As we all know with NFTs, sometimes people use bandaids here and there. And so for a lot of the platforms we index from.
00:12:00.616 - 00:12:08.382, Speaker C: Sometimes the audio may be stored both and on a centralized server.
00:12:08.446 - 00:12:24.140, Speaker B: Catalog is an example, which is nice because Catalog puts everything on IPFS in addition to their server. And so when you're using the SDK, we're automatically going to try and use the kind of more decentralized system. So when you're using the SDK, you'll be pulling URLs from IPFS, but they.
00:12:24.510 - 00:12:27.866, Speaker C: Don'T do that yet. And so it does fall back to.
00:12:28.048 - 00:13:01.794, Speaker B: Centralized URLs sometimes when needed. And over time I think we're going to improve our indexer to kind of push everything to be decentralized, even if the underlying platforms don't do that. So when you use an SDK, it gives you kind of the best of both where you'll get the most decentralized setup as possible and then over time, as things become more decentralized and more underlying music NFT, platforms work on improving how they create and mint their NFTs. It should converge to becoming more decentralized.
00:13:01.842 - 00:13:03.958, Speaker C: And kind of be aligned with the.
00:13:03.964 - 00:13:08.394, Speaker B: Ethos of progressive decentralization where we want to build stuff that people can actually.
00:13:08.432 - 00:13:13.100, Speaker C: Use and take advantage of, kind of.
00:13:13.550 - 00:13:16.746, Speaker B: Blockchains and decentralization and pass along that.
00:13:16.768 - 00:13:19.980, Speaker C: Spectrum over time as we can.
00:13:20.690 - 00:13:24.414, Speaker B: Similarly, that applies to our index itself. And so next I'll talk about that.
00:13:24.612 - 00:13:28.400, Speaker C: So let me just open that up.
00:13:30.530 - 00:13:37.262, Speaker B: Here is the git repo for our actual indexer. And so this is kind of decentralized.
00:13:37.326 - 00:13:40.834, Speaker C: Indexer for music NFTs that does the.
00:13:40.872 - 00:13:56.246, Speaker B: Aggregation that I've been talking about through our SDKs. This is kind of probably a more complicated repo. If you're a more experienced developer, then this may be something that you're interested in looking at. How it works is we index on chain music activity across multiple chains and.
00:13:56.268 - 00:13:58.506, Speaker C: We augment that data with both the.
00:13:58.528 - 00:14:00.026, Speaker B: On chain data that's on chain, but.
00:14:00.048 - 00:14:02.922, Speaker C: Also like off chain data from some.
00:14:02.976 - 00:14:50.566, Speaker B: Centralized sources, IPFS, Rweave. And then the index also transforms and connects that data into a comprehensive cohesive and standardized schema that builds stuff like comprehensive artist profiles across platforms. It also is designed to kind of store and maintain up to date real time data for front end experiences that are like real time and up to date. It's got a bunch of dependencies and setup that you can go through if you want to install it and run it, and some guidelines on operations. But maybe more interestingly I'll talk about is the design goals. So when building this kind of indexer, there's a bunch of design goals. Being fast, up to date and having low, latency and liveness are important, but there are kind of more things that become important when you're trying to build something decentralized.
00:14:50.566 - 00:14:59.478, Speaker B: So handling crashes and downtimes and errors of ourself. Our own index is important, but we also need to handle what happens with our dependencies.
00:14:59.574 - 00:15:03.046, Speaker C: And so the indexer, for example, indexes.
00:15:03.078 - 00:15:22.002, Speaker B: Some stuff from off chain APIs that may go down or go change over time and we want to ensure that the indexer continues gracefully, irrespective. So it's designed to be able to do that. It's also designed to be like parallelizable because we're adding new contracts and platforms slowly over time, we don't have to reprocess everything.
00:15:22.056 - 00:15:25.554, Speaker C: And so ways to add that are.
00:15:25.672 - 00:15:49.146, Speaker B: Built in extensions for adding new metadata and new data transformations are built in as well. And a key thing is decentralization and consensus without coordination. And so what that means is if someone else runs this repo and runs the indexer, they should get to the exact same database state as anyone else. Which means that even though we don't have a peer to peer network, we don't have consensus, if different people are.
00:15:49.168 - 00:15:50.618, Speaker C: Running the stack, they'll end up with.
00:15:50.624 - 00:16:14.930, Speaker B: The same data in the same database. And so essentially get to decentralization without requiring heavy consensus or coordination. And in order to kind of do that, there's some design choices we need to make within the data and the processing pipeline. An example of that, if you look through the architecture, if you want to get into more of the details, is using things like CRDTs as part of how we index.
00:16:15.830 - 00:16:17.538, Speaker C: So this is kind of some of.
00:16:17.544 - 00:16:18.854, Speaker B: Our goals and what we aim for.
00:16:18.972 - 00:16:22.326, Speaker C: Again, it's not perfect, but we make.
00:16:22.348 - 00:16:25.622, Speaker B: Sure we do this for the most important bits of data, like identifies for.
00:16:25.676 - 00:16:29.798, Speaker C: Records, and again, over time are going.
00:16:29.804 - 00:16:34.230, Speaker B: To flesh this out and improve it as it evolves. So that's our indexer.
00:16:35.610 - 00:16:37.706, Speaker C: And so, yes, to summarize overview of.
00:16:37.728 - 00:16:50.478, Speaker B: Our different tools, if you want to just embed our existing stuff into your website, you can use this spin up embed. If you want to build your own front end that taps into the API using the SDK or hooks or potentially the underlying API is good.
00:16:50.564 - 00:16:51.806, Speaker C: Or if you want to kind of.
00:16:51.828 - 00:17:00.498, Speaker B: Contribute to a growing open source project, the indexer is a good place to look to start. And again, if you want to keep in touch, you can follow us on.
00:17:00.504 - 00:17:04.914, Speaker C: Twitter and join our discord and keep.
00:17:04.952 - 00:17:13.298, Speaker B: In touch, especially over the course of the hackathon. I'll be available as well as one or two other devs on our team for help and support. We've also got kind of a bunch.
00:17:13.314 - 00:17:16.246, Speaker C: Of APIs that sorry, a bunch of.
00:17:16.268 - 00:17:24.918, Speaker B: Ideas that we suggested as part of the hackathon. But if you're looking for ideas, feel free to reach out and check the ETH Global Hackathon Prizes page where there's.
00:17:24.934 - 00:17:26.646, Speaker C: A bunch of other ideas that we've.
00:17:26.678 - 00:17:44.766, Speaker B: Listed as potential hackathon, ideas you can work on. So yeah, that's it. Maybe I'll pause there, check the chat. If anyone has any questions or thoughts, feel free to share them in the chat now. And we can kind of wait a few minutes to see if anything comes up. Otherwise, that's it.
00:17:44.868 - 00:17:50.400, Speaker A: Thanks, Aidan. We'll wait a few seconds just to see if any questions come up.
00:17:52.530 - 00:17:52.990, Speaker C: And.
00:17:53.060 - 00:18:19.120, Speaker A: Feel free to unmute yourself if you'd to ask questions. Okay, I think you've answered everything, but if any question comes up in the meantime, feel free to go to Discord and go to sponsor app and Aidan will be able to answer it there. Thanks again. Cool.
00:18:19.190 - 00:18:19.630, Speaker B: Thanks, everyone.
