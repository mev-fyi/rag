00:00:07.290 - 00:00:35.254, Speaker A: Alright. Hey everyone. My name is Nizan and I'm a developer at hurdle zero. We're glad to be one of the partners here at East Tokyo. In this Quick Workshop video, I'm going to be showing you all how you can supercharge your DAP with real time audio video experiences by using our development kit you. So before we get started, I just want to point out that audio video is the future. As you can see on the screen, users retain 95% of a message over video as compared to the 10% over text.
00:00:35.254 - 00:01:17.398, Speaker A: So it is kind of a no brainer that you would want to enrich your DAP with audio video capabilities. So what is header zero one? In a nutshell, we provide plug and play infrastructure to power crosschain real time audio video communication between users. And now jubuilders can use our SDKs to integrate this infra into your DApps. Talking about yiddle zero one. So not only is our infra reliable and efficient, we also provide crypto primitive features to complement your audio video experiences. These include wallet, logins, decentralized identities, token, gated meetings, decentralized storage, and also live streaming. Till date, we have had over 150 projects built on our tech.
00:01:17.398 - 00:01:42.950, Speaker A: These are some of the most standout ones. So that's it for the introduction, let's dive into our SDKs and quickly build out a sample app. So I'm here on our documentation website at docs. Huddle one. Over here you can see that our main SDK is divided into three modules. For the web, we have a vanilla JS SDK and a react JS SDK. And for one, we also have a react native SDK.
00:01:42.950 - 00:02:21.580, Speaker A: Besides these, we also have an iframe for ECD embedding harder zero one video meetings on your website and a CLI tool to help you spin up a starter app using our SDK. To top it all off, we have an API with a few endpoints to complement the SDK. We will get to all of this in a minute, so let's get started and take a tour of the documentation. I want to start with the iframe at CRI Tools first and then we'll dive into our main SDKs. So if I go to Quick integrations iframe you can see this is what it looks like. The iframe is the perfect solution to embed 101 video meetings into your website. So this is what it looks like in a real application.
00:02:21.580 - 00:03:16.726, Speaker A: You can also customize the iframe to match your website's branding and customize the theme colors and the size of the iframe. So iframe comes in two forms the vanilla JS iframe as a react iframe. So the vanilla JS iframe is essentially an HTML tag which takes in the following attributes and embeds a video call into your vanilla JS website. So the SRC attribute is the URL of the video call and after you've embedded the iframe, you can also call a few methods to programmatically interact with the embedded video meeting to use the methods listed. Over here, you need to get the Iframe element from your Dom and then call the post message function on it, passing in the method name and the type. So these are the available methods you can always call during the video call. So that was a Manila iframe.
00:03:16.726 - 00:04:10.890, Speaker A: We also have a React Iframe, which is essentially a react component that you can embed or do a React app. So it comes from the following package at huddle zero one react huddle iframe and you can install the package using NPM or Yarn. So after you've installed the package, you can import the Huddle iframe components from it and put it into your component tree. Just like this, it takes in a config prop and this is what the config object looks like. Again, we have a room URL over here, which is the URL of the video meeting, and you can also pass in height, width and other styling prompts. Once you've added the component, you can also call the instance methods that are provided by the package to interact with the video call programmatically. These are the following methods that are available very similar to the vanilla Iframe, and these allow you to interact with the video meeting programmatically.
00:04:10.890 - 00:04:47.890, Speaker A: So that was that for the Iframe. Up next we have the CLI tool. So a CLI tool lets you clone a sample application, which is basically a starter app that comes in with audio video capabilities out of the box. And it allows you to tailor the application to video requirements. To do this, you can open your terminal and enter the following command in PX create huddle zero one and it will give you the following options. So it will ask you for the name of your project, which you can enter over here. After that it will ask you to pick an SDK whether you want the iframe or the core SDK.
00:04:47.890 - 00:05:16.058, Speaker A: After that you have to choose whether you want JavaScript or TypeScript, and then also React or react native. And that's it. With just these four or five options, your project setup is complete and you have a starter application to start building. So that was the CNI tool and the Israme. Let's dive into our main SDKs. So if I click on Get started on the homepage. First up we have the core concepts.
00:05:16.058 - 00:05:44.700, Speaker A: So the hardware SDK is built around a few primitive concepts, including the concept of rooms, lobbies and peers. So we quickly walk through some of the definitions over here. So a room is a Huddle student meeting session. It contains all the participants and their media streams. After that we have a lobby. So the lobby is a pre room staging area. And over here, users can choose to enable or disable their media streams before joining a room.
00:05:44.700 - 00:06:16.818, Speaker A: After that we have a peer. So a peer is a participant inside of a room. You can think of it as an object containing all of the media streams of a participant. These media streams may include an audio stream which comes from the user's microphone and a video stream that comes from the user's webcam. Each peer is represented by a unique peer ID and is always associated with the rule. So I've been talking a lot about media streams. So what exactly is a media stream? So it represents a stream of media content and it consists of several tracks.
00:06:16.818 - 00:06:59.810, Speaker A: Now tracks can be either audio or video. After that we have two main concepts called produce and consume. So the producing is the act of sharing a participant's media stream with other peers inside a room. So say you are a user in a room and you have your camera enabled right now you want to share your camera stream to all the peers in the room. So this is when you produce your media stream. On the contrary we have Consuming, which is the act of receiving a peer shared media stream inside a room. So when one peer starts to produce their stream, all of the other peers will start to consume their stream and be able to watch the stream coming from the other peer.
00:06:59.810 - 00:07:38.030, Speaker A: So those were a few main definitions. Last but not least, I will talk about app states. So at the very foundation of the SDK, we have four major states that your app can be in at any given point. So the messages written from the SDK are divided into these app states and can be called only from one particular app state. So first we have the idle state. So in this state the client has not been initialized yet and the only method you can call over here is the initialized method. After that we have the initialized state where the client has been initialized and is ready for you to invoke the join lobby method.
00:07:38.030 - 00:08:28.974, Speaker A: So the only available method in this app state is the join lobby method and we'll get to these methods and hooks in a minute. So after that we have a lobby and a rule. So these are the four app states that your app can be in. So after this we have the vanilla JS SDK over here you can see how to install the SDK using the script tag and our CDF and also using NPM or yarn. So after you've initialized the vanilla JS SDK, you can call the available functions using Hadleclient dot and name of the function. So if you go to methods over here you'll be able to see all of the methods that we provide and each of these methods serves its own purpose and you can also read what it does over here. So the init method sets up the app state and it should be invoked first at all times.
00:08:28.974 - 00:09:30.958, Speaker A: Similarly, we have lobby methods which include join lobby, leave lobby and we have room methods which include join room and leave room for the audio module, we have enable mic, disable mic, produce mic, and stop producing mic. So all of these functions also have the definition of what they do over here. And for the video marginal, we have enable disable cam, produce cam, and stop producing cam. We also have few methods to start and stop recordings and live streaming on your web app. And we also have a few utility methods like changing the avatar inside of a call, sending text messages, raising your hand, adding reactions, and so on and so forth. So these are the methods provided on the Vanilla JS SDK and you can call them on your handle client to interact with the SDK. So one last thing I want to talk about before we wrap up the Vanilla JS SDK section are the events.
00:09:30.958 - 00:10:23.470, Speaker A: So we provide an event system that allows you to listen for specific events and execute callback functions based on them. So these are the following events that are available within the SDK and you can execute different callback functions based on when these events were triggered. For example, we have the Lobby joint event which is triggered when lobby successfully joined after calling the Join bubby method. Similarly, we have events for camera, mic, room and recording and live streaming events. So these are the events and that's it for the Vanilla JS SDK, it comprises of different methods and these events that you can listen for and interact with the SDK. After that we have the react JS and the react native SDK. Both of these are very similar and the way they have been architectured is instead of importing different methods, we have different hooks.
00:10:23.470 - 00:11:22.082, Speaker A: So these are the eight available hooks that are imported from the package. And each of these hooks provides different methods to interact with the SDK. So to install the react SDK, you need to install the package hadan one react using NPM yarn or pnpn, and after that you can initialize it by calling the Use huddle one hook which provides an initialize function which you can then call to initialize your client. So we get to all of this in a minute when we build out our sample application. But the gist of it is that we have different hooks and each of these hooks imports different methods which you can call to interact with the SDK. After these hooks, we also have the events similar to the Vanilla JS SDK over here. The way you would interact with these events is using the Use event listener hook which is inputted from the react package, and then you pass in the event name and then the callback function that you want to execute when the event has been triggered.
00:11:22.082 - 00:12:02.690, Speaker A: The events are similar to what we have from the Vanilla JS SDK and are constant throughout all of the different SDKs. So that's it. For the react JS and the react native SDK, we have different hooks and then the events that you can listen for. So after that, we have the Use Cases section. Over here, we demonstrate different use cases for our Fiddle Z One SDK and inspire you to think of the next big idea that you can build out using our SDKs. So that's it for the SDK section. Like I said, we'll build out a sample app using the ReactJS SDK in a minute.
00:12:02.690 - 00:12:41.882, Speaker A: But after that, we'll take a look at our API section. So we have three main API endpoints that we provide. And to get started with these APIs, you would need an API key, which you can get from here by connecting your wallet. And after you have an API key, you can call these three endpoints. So the first of these endpoints is the Create Room API, which allows you to create rooms for hosting your video meetings. It takes in the following parameters that are required the title of the room, and a Host Wallets array, which is a list of ethereum addresses that you want to set as hosts of the video call. You also need to pass in your API key inside of the headers.
00:12:41.882 - 00:13:23.886, Speaker A: And as the API call was successful, it would return a room ID that you can use to join the call. Besides the two required parameters, you can also pass in some optional parameters that are listed over here. These are for additional config of the video call. After that, we have the Token Gated API, which is very similar to the Create Room API, but it provides the ability to create rooms that are token gated. So to join these rooms, a participant must have the token in their wallet. It is similar to the Creator API, but it takes in the following three additional required parameters the token type, the chain on which it is mentored, and the contact address of the token. Again, in the response, you will get the Room ID which you can use to join the call.
00:13:23.886 - 00:13:56.630, Speaker A: The last endpoint is the Meeting Details API, which allows you to fetch the details of a video meeting. It's pretty straightforward. You pass in the Room ID and returns all the relevant details that are listed over here. So these are the three API endpoints that we provide, and these complement our SDK offerings. So that's it. For the documentation, we have covered the Iframe, the CLI tool, our main SDKs, and also the API reference. Now let's build out a sample application using our SDK.
00:13:56.630 - 00:14:36.310, Speaker A: All right, so that was a lot of information at this point. Feel free to explore the documentation at your own pace. And if you're comfortable, let's dive into building a sample application. In the following section, we're going to be building a very basic video conferencing React app we will be using NextJS, along with the 101 React SDK. Let's go. So for this tutorial, I'm going to be following the Walkthrough section in the React SDK docs, which will allow us to go step by step in building a video conferencing app. Over here, I have a Sample NextJS app already created for me, and we'll start by installing the 101 SDK.
00:14:36.310 - 00:15:42.714, Speaker A: So over here in the walkthrough, as you can see, the first step to install our SDK would be to install the package using Yarn. So let's do that. Okay, so the factory was installed and I'll quickly open my localhost server and get the app running by entering Yarn desk. So this is what the sample NextJS app looks like. So I'll get rid of all of this, because we don't need all of this. I'll just create a div that says Hello World, and yes, you can see that on the website now. So once we have installed the package, the next step would be the initialization of the project.
00:15:42.714 - 00:16:12.898, Speaker A: So to do that, we'll import the following hook use hidden one and I'll do that over here. And then we can call the hook and it will return to us the initialize method that we want to call. So let's do that inside of a use effect. So we want to initialize the app as soon as the page loads. So we do that inside a use effect. And over here, we'll call the initialize. And then we need to pass in a project ID over here.
00:16:12.898 - 00:16:58.766, Speaker A: So to get the project ID, we can go to the API keys section of the docs and connect our wallet. Let me do that real quick. And once our wallet is connected, I'll be able to see my project ID over here. So let's copy it and paste it inside of our code. Great. So how would we know that the project has been initialized though? So the hook also returns an initialized Boolean, which tells us that the project was initialized. So if I go back to my SDK and walk through over here, I can create a dev which will if the project is initialized, it will show that it will show Hello World, and if it wasn't initialized, it will tell us please initialize.
00:16:58.766 - 00:17:46.240, Speaker A: So let's save this and hit refresh on our browser. So as you can see, it shows project please initialize for a very small amount of time and then it immediately changes to Hello World because our project was initialized. So once our project was initialized, we can head over to the next step, which is joining the lobby. So to join the lobby, we need to import the use lobby hook from our package. And when you call this hook, it will return to you a join lobby method that you can call. So to do that, let's add a button and we'll add that over here and it will be disabled when join lobby is not callable. Every method returned from the hook has a Is callable property on it, which is a boolean that tells you if it can be called or not.
00:17:46.240 - 00:18:32.480, Speaker A: And on the on click of the button, we'll call the Jordan Lobby method and pass in our Room ID as the argument. So to get the Room ID, we need to generate it first using the Create Room API, as we saw before. So if I head over to the Create Room API endpoint and let's copy this endpoint and quickly call it using Thunderclient. So I'll paste the copied URL over here, and this is a post request. And for the headers, we also need to add an API key. Header shouldn't look like this, and our API key will get it from the API key section. I want it once again.
00:18:32.480 - 00:19:44.584, Speaker A: Here's my API key, and I can quickly copy it and add it over here. After that, we also need to add the Content Type header and set it to application JSON because we will be passing in a body. All right, so inside the body, let's add the par parameters. So we need to pass in a title and a Host wallets array over here. And for the host wallets, I'm just going to add in my wallet address quickly copy from MetaMask. Okay, that looks like it's fine. And let's sing.
00:19:44.584 - 00:20:13.700, Speaker A: Awesome. So the roof was created successfully, and we have received our rue ID over here. If I go back to my code and add the Room ID over here, when I call the Join Lobby method, I need to pass my Room ID. And let's click on Save. So if that works well, we shall be able to see the Join Lobby button over here. So it doesn't look really good right now, so let's give it some styling. Okay, so once I've added some style to the button, this is what it looks like.
00:20:13.700 - 00:20:56.684, Speaker A: And if I click on Join Lobby, I'll be able to join the lobby. But we need to display some of the app state at the top to know if we successfully joined the lobby or not. So to do that, I'll create some components over here and I'll display this app state at the top. So the state of the app is written from a different hook called Use Meeting Machine. And if I call it over here, it returns to me the state of the app. And at the top, I can just display state value, which will tell me if the app was initialized or not. So over here at the top, you can see it shows Initialized Not Joined, which means that the app was initialized.
00:20:56.684 - 00:21:34.632, Speaker A: But I haven't joined the lobby yet. Now, if I click on the Join Lobby button, it changes to Joining Lobby, and then after a while, it changes to Join Lobby. Now it tells me that my current tab state is the Join Lobby state, and my mic and camera are muted and off, respectively. All right, so join lobbying method works. After that, the next step in the walkthrough is to enable and disable the media devices. So to do that, we'll use the Use Audio and the Use Video hook imported from our package. And these will return to us two important methods the Fetch audio stream and the Stop audio stream method.
00:21:34.632 - 00:22:12.372, Speaker A: And similarly the fetch video stream and the Stop video stream method for the video. So once I've added them, I can add two new buttons which will allow me to enable and disable my bike and my video. I'll add them at the bottom over here, and if I save and go back to my app again, I need to add some star into these buttons. Let's do that. All right, so now I can see the Fetch audio stream and the Fetch video stream buttons over here. Now, if I click on Join Lobby again, I have joined the lobby. And now if I click on Fetch Audio stream it asks me to allow access to my microphone.
00:22:12.372 - 00:22:53.610, Speaker A: And once I do that, it shows me that my mic was unmuted. And if I click on Fetch Video stream it will ask me to allow access to my camera. And if I allow that as well, it shows me that my camera was turned on. Now my mic and camera have been turned out, but I cannot see the mobile media yet. So to do that, I'll use the Use Event listener hook returned from my package at the top and I'll create a ref using the user hook from the app. And when my lobby cam on event was triggered, that means when my camera was turned on in the lobby, I'll change my video ref source to the camera stream returned from my app state. And once I've done that, I can add the video element here at the bottom.
00:22:53.610 - 00:23:39.952, Speaker A: All right, so the ref passed out to this video would be null initially, but when my camera was turned on, it will be set to the incoming media stream from the app state if I save that and go back to my app and hit refresh. So let's join the knobby now and click on Fetch Video stream. And now you'll be able to see my video stream has been fetched and it has been set on the Video HTML element over here. And if I click on Fetch Audio stream, my Mac will be unmuted and my audio stream will also be enabled over here. All right, so that works well. After that, the next step in the walkthrough is to join and leave the room. So now we have entered the lobby, we have played around with our audio and mic controls.
00:23:39.952 - 00:24:23.476, Speaker A: Now it's time to join the room. So to do that, I'll call the Use room hook return from my react package and it will give me two important methods, the join room and the leave room method. So I'll add two buttons for both of them here at the bottom. Mine again gives them the same styling that I have given to other buttons of mine. And if I go back to my app and hit refresh. Now let's do it again. If I join lobby, fetch my video stream and now if I click on Join room, you'd be able to see that the state of the top changed and it shows me that I've joined the room.
00:24:23.476 - 00:24:58.930, Speaker A: It shows me other peers in the room which is currently empty. And it shows me that I'm not producing my mic and I'm not producing my video. So even though I enabled my video and mic in the lobby, I haven't started producing the videos yet. So that's exactly the next step in our walkthrough. So now we need to send our media across to other participants. If you remember, we referred to the terms produce and Consume at the beginning of the video in the concepts section of our docs. And now it's time to produce our media streams and I'll add the buttons to do all of that as well.
00:24:58.930 - 00:25:45.804, Speaker A: Go to the bottom and add the backends. All right, so over here, the US audio hook will also return my stream which I can rename as Mike stream and use video hook also returns my video stream which I'll rename to my cam stream. Okay, so the buttons were added. Now if I go back to my app, hit refresh. Now I can join the lobby. It changed to join lobby. I can fetch my video stream in the lobby.
00:25:45.804 - 00:26:32.350, Speaker A: Now I can join the room. And once I'm in the room, I can start producing my cam. So if I click on Produce cam, you can see that it shows me that my producing cam is set to true and now producing my cam to other peers in the room, currently I'm the only peer in the room. So you won't be able to see the other peers. But let's finish off this app and open it in two different app tabs to join from a different peer. Before we do that, the current state of our app is that it shows me only my video. Right? Now, what if I wanted to consume the video coming from other peers, right? So I would do that using the used Peers hook which should return to me the different peer IDs of the peers in my room.
00:26:32.350 - 00:27:25.676, Speaker A: So once I've called my Use Peers hook over here, it returns to me an array of the peer ID as well as the peer objects themselves. So once I've received that at the bottom over here, I will create a div and then I'll map over the peers and then I'll filter the peers that have the camera turned on and then render a video component for them. I'll pass in their media string. So where is this video component coming from though? So our react package also exports a video component that we can use and it comes from arduino reactcomponents. So this video component can be used to display the media stream of other peers in the room. And once I've added that, I can save that and go back to my app. Now, I've opened this localhost on two different tabs.
00:27:25.676 - 00:28:17.760, Speaker A: Now, if I click on Join lobby over here, fetch my video stream, join the rooms, and if I go to my other tab and do the same thing again, current lobby, fetch video stream and join room. Now, both the peers are in the same room, but they cannot see each other's video because none of them has started producing it. So if I switch over back to my first tab and start producing my cam and come back over here, you can see that I can now successfully see the produced stream, which I'm consuming over here. And if I click on Produce cam in this tab as well and go back to my previous tab, you'll be able to see that my second tab stream is also being consumed over here. So, voila, it works. Now, I'm essentially inside of a room, and I can consume and produce long video streams if I go back to the walkthrough. That's it.
00:28:17.760 - 00:28:53.224, Speaker A: You're all set. This was a basic video conferencing app that we take over here. Now, if I click on Leave room over here, see that I've left the room and my second tab, I'm the only one left. And if I leave the room here as well, I've left the room from both the tabs. Now, so this is how you build a sample app using our React SDK. And in this tutorial, we covered a lot of different hooks and the methods returned from them. So this is how you would create a video conferencing app using our SDK.
00:28:53.224 - 00:29:33.936, Speaker A: This was obviously a very basic version with very minimal styling. You could take this a step further and tether it to your required use case. All right, so that was the Build a Sample App section of our workshop today. I hope you enjoyed building the app and gained an insight on how the hadon zero one SDKs power audio video communication in DApps. To close it off, here are a few project ideas that you can build using our SDK. At the hackathon, you could build a web three multiplayer game and power the ingame comms using our SDK. You could also build an all in one super app for dows, where members and rules could be managed, tokens could be traded, and voting systems could be conducted.
00:29:33.936 - 00:30:01.836, Speaker A: Real time text, audio and video communication would, of course, be handled using RSDK. You could also leverage our Token Gated meeting system to create apps for users to conduct token gated watch parties and music streaming sessions. Last but not least, you could build a clubhouse like Audio Spaces DAP using our SDK. So that's it. From my end, you can follow us on Twitter at the following handle. Make sure to check out our website for more information. We also have a Discord server, so feel free to.
00:30:01.836 - 00:30:04.730, Speaker A: Join should you need any sort of assistance. Thank you for watching.
