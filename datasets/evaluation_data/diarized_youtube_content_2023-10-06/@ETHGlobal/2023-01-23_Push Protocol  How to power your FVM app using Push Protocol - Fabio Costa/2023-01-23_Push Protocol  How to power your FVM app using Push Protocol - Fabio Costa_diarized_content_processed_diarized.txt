00:00:19.120 - 00:00:40.980, Speaker A: All right. Good morning. Good afternoon. Good evening. Depending on where you're calling from, we have Fabio here from Push Protocol, who's going to be doing a workshop on how to power your FBM app using Push Protocol. If you have any questions, they can go into the zoom chat and Fabio will be more than happy to answer them. And with that being said, I will pass the mic off to Fabio.
00:00:42.720 - 00:01:03.840, Speaker B: Yeah. Thank you, Anna. Hey, everyone, thank you so much for being here today. So, my name is Fabio, I work at Push. I'm working on the backend team. And so today we're going to be talking about what is very technical workshop. So first off, we're going to be talking about what is Push, and I think most importantly, what problem Push is solving.
00:01:03.840 - 00:02:01.392, Speaker B: And in the end, we're going to be doing some workshop code demo to show different ways on how you can integrate Pushball into your DAP with your back end, your smart contract or subgraphs. So, first of all, something that we always say is that everything starts with a notification, right? And Push was a project from ETHGlobal back in 2020, and almost three years later, we're happy to be now sponsoring the hackathon, something that we came from. And it's very nice and looking back to see how much has happened those three years. So I think the most important question is so there are a lot of missing pieces in web three. And I think one of the missing pieces that we're currently having is improving user experience. And let me just give you an example. So more specifically, an example about notifications.
00:02:01.392 - 00:02:43.680, Speaker B: So for example, everything that we do in digital life, everything starts with a notification. What do I mean by this? It's not like I'm constantly on Gmail, refreshing to see if I have a new email, right? So how do I know I have a new email? Well, I just receive a notification, and from the notifications I can see that I receive an email. Or when someone sends a message on Telegram, I receive a notification. And then from the notification, I do some action. I go to the telegram and I can see that someone has messaged me. So in web two, that's how we go by our lives. We receive a notification and then based on the notification, we can take some action.
00:02:43.680 - 00:03:49.136, Speaker B: If we think about it, in web three, we still don't have the same user experience that we had in web two. So, for example, protocols, they expect users to come back to the protocol and fact the information themselves. So for example, how do we know today there is a new governance proposal for your favorite Dow? Well, you have to be very active on Discord or Twitter to keeping yourself updated if there is any new proposal for you to vote. Or for example, how do you know if you're about to get liquidated in 85 protocol well, you as a user, as a liquidity provider, you have to constantly keep checking your collateral ratio to see if you're going to get liquidated. Would be much easier from the user perspective to receive a notification whenever an event interests me, instead of me going to the protocol and fetching the information myself. And this is exactly what Push protocol is doing. So we're bringing the Web Two user experience into Web Three and the applications for these are pretty endless.
00:03:49.136 - 00:04:33.830, Speaker B: So as I said, for Governance, you can receive notifications whenever there is a new Governance proposal for defy. Whenever you're about to get liquidated, you can get a notification. You can get a notification whenever someone outbids you on an NFT marketplace. Or for example, if you follow an NFT artist, it will be super nice to get notified whenever this artist publishes a new collection. And I think the beauty of the notifications powered by Pushpuro calls that they are completely customizable. So if you have a use case in mind for notifications, how to add the notifications for your protocol, it's completely flexible. I'm going to show you how to do this later, but there are different ways of how you can do this.
00:04:33.830 - 00:05:17.344, Speaker B: So what is the solution that Push protocol is building? So it's a digitalized communication protocol. It's an open communication layer. So that means is anyone can simply tap into the network and fetch the notifications to themselves. And I think very important, it's very important to note that the notifications, they are tied to wallet addresses. In Web Three, your identity is your wallet address. So we're sending notifications to your wallet address and since it's an open network, anyone can simply tap into the network and say, hey, give me all the notifications that I have for this wallet. Here the notifications, they are completely dynamic.
00:05:17.344 - 00:05:55.324, Speaker B: That means that what's going to trigger the notification, how the notification looks like it's all customizable by you. You have 100% control of the look and feels of the notification and the notifications, it's MultiChain. So we started on Ethereum, but now we are in multiple EVM chains. It's gasless. That means that for sending notifications, you want to send notification off chain. It's completely gasless. All you have to do is just to sign a transaction and splatform agnostic delivery.
00:05:55.324 - 00:06:29.012, Speaker B: For me, that's the beauty of this. It's because any front end can splay the notifications. So you don't need to install a Push Protocol browser extension or a mobile app to display the notifications. We have set of react components that you can import into our DAP to display the notifications right there. So users don't need to know that they have received a notification for Push protocol, they just receive the notifications right? Because that's how we deal in Web Two. We just receive the notification. We don't care how the notification is delivered.
00:06:29.012 - 00:07:03.044, Speaker B: I just want to get notified about things that I care and that's what we are doing so in Push, we have sent over 18 million notifications. We have over 60,000 subscribers. Subscribers are wallets that opt in to receive the notifications. And we have over 100 integrations. That means over 100 different use cases for notifications. And I think it's most notifications by itself, they are only useful if you see value in them. Nobody wants to get notifications from things they do not care.
00:07:03.044 - 00:07:32.540, Speaker B: So notifications should have different use cases, things that are care that you as an end user are interested in. So we have different use cases for a notification. This is just one handful of notification, types of notifications that we have. We call them friends of Push. So we have different cases for notification. For example, for uniswap altogether keydal or Gitcoin cryptocurrency jobs. And I can give another example of notification.
00:07:32.540 - 00:08:13.576, Speaker B: Imagine for cryptocurrency jobs, whenever there is a new job post, you can get notified on your wallet address that there is a new post for you. For example, for the defiance, let's say whenever there is a new post, you can get notified on your wallet whenever there's a new post for you to read. So Push, we started back in 2020. We were previously EPNS ethereum push notification service. And now we have rebranded to Push. And we started with notifications back in 2020, almost three years later. We're now happy to announce that we took the notifications one step further.
00:08:13.576 - 00:08:53.450, Speaker B: And now we announced something called Push Chat. So it's a webtree messaging platform provided by Push that every notification sent on the protocol. They have a long notification. So if I send a message from my wallet to your wallet, you will receive a notification there. And the idea is, we're taking all the webtree experience that we have, for example, for WhatsApp or Telegram and then bringing this to Web Three. So the experience for sending messages and receiving messages or receiving notifications on your messaging platform will be the same as you do on those web. Two platforms that we're used to.
00:08:53.450 - 00:09:27.280, Speaker B: So this here on the left is how the DAP looks like. So it's just a classic messaging platform. Unless we added here, that's how the notifications look like on your phone. And here on the right, we did a demo on Defcon. This is a demo that we did for Push video. So we added on top of wallet, wallet messaging video calls as well. So you can not only message receive notifications, but you can also receive video calls on the Push protocol.
00:09:27.280 - 00:09:54.396, Speaker B: So we have the end of 2020 and the beginning of 2023 is going to be a super exciting year for Push Protocol. At tons of new feature are coming. So we have destiny. So to integrate Push Protocol, we're going to go over the SDK different ways, how we can integrate Push. In our SDK. We have mobile notifications. We also have an SDK for this.
00:09:54.396 - 00:10:32.104, Speaker B: We're currently working on group chat. Very soon we're going to announce the SDK for group chat, privacy chat as well, where all the information, all the metadata for the chat is going to be encrypted and so on and so forth. And here, the right is just a prototype of how the mobile app for the chat looked a couple of months ago. But now that's completely changed. Yeah. So let's start with the demo. So first off, I just want to show you guys how the depths look.
00:10:32.104 - 00:11:11.740, Speaker B: Like, let me just log in here to MetaMask. Let me switch to mainnet and then I can log in. Cool. So the app for Push protocol is app Push. So on Push protocol, we have a concept of channels, right? And the analogy is the same as a YouTube channel. So we have different channels here, and you as an end user can opt in to receive notifications from those channels here. So, for example, we have MakerDAO Lens protocol.
00:11:11.740 - 00:11:45.776, Speaker B: Let's say, for example, I am interested in receiving notifications from Kidao. Let's say, hey, I want to get notified whenever Kiddow sends a notification. I'm interested in receiving those notifications. Me, as an end user, all I have to do is click into opt in. All I have to do is just sign a message and then boom. Now whenever there is a new notification by Kiddow profile, I'll get notified. So for the end user, they don't pay to receive the notifications.
00:11:45.776 - 00:12:16.626, Speaker B: And for the sender of the notification, then if you send off chain notifications, then you don't pay. You only pay to send on chain notifications. So now let's take a look. I've opted to receive a notification, right? So in this example, I just opt in to receive notifications from keydao. Now let's look into the other side. Let's see how we can send notifications. So once I have opting to receive notifications, let's start sending notifications.
00:12:16.626 - 00:12:58.908, Speaker B: So to send a notification, all I have to do is first to create a channel. So I have a channel that I have previously created here. But what I can do, I can just create a brand new wallet here, just show you guys how does it look to create a channel and just connect. Cool. So this is the UI. To create a channel, all you have to do is to stake 50 push. And then you need to pay the transaction fees for this.
00:12:58.908 - 00:13:25.270, Speaker B: But if you go to staging push staging Push, that's our testnets URL. So we can create end channels here for free. No fake push. It's fake. Push and fake. So all I have to do create a channel is just the channel name. You set the network, you add a channel description, and then you add here the URL from your channel.
00:13:25.270 - 00:13:47.550, Speaker B: Once you do this, you just upload the logo and then you have a channel created. I have previously created a channel here. Once you create a channel, this is how it looks like. This is how the UI looks like. And I have a channel here. Now let's send a notification. Let's show you guys how it looks like.
00:13:47.550 - 00:14:16.470, Speaker B: So if I come back here, so I have here on the right, what I'm going to do is here on the right, I'm going to opt in to receive notifications from this channel here on the left. And then I'm going to show you how we can see the notifications. So I go to staging Push. Click on the channels. So how does my channel is called Demo Channel. So I just come back here, demo Channel. Let's look for my channel.
00:14:16.470 - 00:14:39.470, Speaker B: And I already opt into my channel. So whenever this channel sends a notification, I will receive it. So now let's receive the notification. I click here on send notification. So there are three types of notification. There is broadcast, targeted, and subset. A broadcast notification that means, hey, notify all the subscribers of my channel.
00:14:39.470 - 00:15:03.268, Speaker B: A targeted notification is hey, notify that address. And the third one is Subset, which is notify this array of addresses. In this case, let's send a broadcast notification to notify all the subscribers of my channel. Notification can have a title. I'm going to call it. Hello, world. Hi.
00:15:03.268 - 00:15:44.556, Speaker B: And this is going to be the payment of the notification here below we see how the notification looks like. Now, let's click on send notification. Whenever my MetaMask opens, all I have to do is sign a message and the notification has been sent. So if I go to the other browser, click my inbox here, and I see the notification that I just sent it's here. Not only this, we have a mobile app. So you're going to receive a push notification on your phone whenever there is a new notification. We have a browser extension here as well.
00:15:44.556 - 00:16:11.920, Speaker B: So you're going to see see notifications here. Hello, Word. And as I said before, you don't need to rely on Push front end to display the notifications. You can display those notifications on your own DAP as well. All you have to do is just import the reaction components that we have. So we have sent notifications manually. Now let's see how to send notifications using the SDK.
00:16:11.920 - 00:16:44.080, Speaker B: It's a JavaScript SDK. Let me show you guys what it looks like. All this code here is in our repo. It's in our docs. Actually, I just took this from the docs. And where is the docs? So if you go to Docs push, you click on Developer Docs, and these are the Docs. So if you want to send a notification here, we have a section called Send Notifications.
00:16:44.080 - 00:17:23.840, Speaker B: And here we have different demos or different ways how we can send notifications. Let's send notifications using the SDK. So we click here, Sending notifications using push SDK. And all I did, I just copy and paste the code from here, and I have it here. So all this code is doing here is let me zoom in this. All it's doing is to send a notification using the SDK. You just need three information.
00:17:23.840 - 00:17:54.642, Speaker B: First of all is the private key from the channel you're sending a notification from. And the private key is going to be the private key from the wallet you created a channel. So in this example here, from my channel here, called demo channel, the private key is going to be the private key from this wallet here. So I just export the private key. I added this environment variable and I just prepand with zero x. Then I'm just using ether. I just get the signer.
00:17:54.642 - 00:18:25.250, Speaker B: And now we just need actually one more information. But in this case, I have two here. I have the channel address and the channel address is going to be this address here. And I'll just copy and paste here. And as you can see, the address has EAP one five, five column, five column. So we're just adding here, we call this type ten format. We're just saying that this address is on gen 85, which is girly.
00:18:25.250 - 00:19:19.350, Speaker B: So we just paste here address. And then in this case, in this example, we're sending a targeted notification, which means, hey, notify only this address here and this address here should be this one, which is let me just copy this. Yeah, let me connect this one. Just going to copy this address here. Let me opt into that channel again, opt in, cool. So I'm just going to copy this address here and that should be it. The rest all of this I just copied from the docs.
00:19:19.350 - 00:20:16.646, Speaker B: So if I come here and I just run this code. So I sent a notification. So if I come back here, click on the inbox and I see this notification with a bunch of ads. That's what I added here and that's it. So if I come here to the browser extension, all I can do is just log in with my account here and let's receive the notification here or you receive a notification on your mobile app or whatever you want to see if you see the notification. I see a couple of questions here. How does pushproco work under the hood to get messages from an address? Can you talk about underlying mechanism a bit? Of course.
00:20:16.646 - 00:20:48.210, Speaker B: So ultimately, how pushprocol work under the hood, we have something called push nodes. It's a network of we call them communication nodes. And all they do is to index communication. So whenever you send a notification, for example, using the SDK, all you're doing is talking to the push network. And then the push network is going to index this notification. And then we have a node called delivery node. And these nodes are responsible for dispatching the notification.
00:20:48.210 - 00:21:24.862, Speaker B: So all the indexing and specting the notification is done by this push network. And as of now it is a decentralized network. And as of now it's a network that is run by push protocol. And we're in the work of decentralizing this. And the end goal is for the community to be able to run this network and actually get incentivized by running it. For contributing to the decentralization of the network, though, the key part of here is the push node. Does it mean video calls or video message? Henry asked this question and yes, correct.
00:21:24.862 - 00:21:57.014, Speaker B: So the demo that we did in Bogota for push video is exactly this. So, on the DAP itself, if you come here on the push DAP, we have a section here called Chat. Just click here. Just allow it here. This is how push chat looks like, right? And the demo that we did on Bogota was there was a video button here. I just click here and I just video chat to the other address. So the other address, you receive a notification.
00:21:57.014 - 00:22:24.830, Speaker B: Exactly. How we're doing, web Two, we receive a notification saying, hey, this address is calling you. And you just accept and then you start the video call. Let me just read some audio. I see a third question here. I created a channel using the wrong website. Can update the channel with localhost address.
00:22:24.830 - 00:22:46.978, Speaker B: Totally. Edward asked this question if he can update a channel setting. Yes, now you can. Before you couldn't, but now you can. Cool. So let's move on with the demo. So we send notifications using the SDK.
00:22:46.978 - 00:23:28.050, Speaker B: I want to show you guys something very nice that me personally I like a lot, which is how to display the notifications on your app. Let me show you. So I have created a code here. So this is how to display the notifications on your own DAP, right? So here, so let me show you where this code is from. So the code to display the notifications, I just got from the Docs as well. So if you go to Docs push, you go to Receiving notifications. We're integrating front ends, integrating notifications.
00:23:28.050 - 00:23:59.882, Speaker B: So all the codes that I show there is here on the Docs integrating front end patch user channel. So all this code is doing here show you the end result. We have a react component that displays the notification exactly like this. So these were some demos that I was doing. You can see the notifications can have YouTube videos. They are pretty dynamic. So you can depart this on your own DAP.
00:23:59.882 - 00:24:53.108, Speaker B: Display notifications there. So you don't need to tell your users to go to push protocol to receive notifications. And the code to do this is pretty straightforward, is just show it here, index notification. So all it does is we have a react component called notification item. And this notification item is responsible for rendering the notifications like this, as we can see here. And this is getting called. We're calling this notification.
00:24:53.108 - 00:25:34.970, Speaker B: Yeah. And this is called by the depth here. Index. Yeah. And that notification components here is being called here on the app JS, and all it's doing is we're using the rest API SDK to get the notifications. And I can show you yeah, we're just using the push SDK get feeds function to get the notifications and then we pass the notifications. We get the array of notifications and then we pass the array of notifications to the react component that we have.
00:25:34.970 - 00:26:20.132, Speaker B: So it's pretty straightforward to display the notifications on your app, but please, if you have any questions, just ask. You can ask us on Discord. Me personally, I'll be on Discord answering all the questions and we have a lot of team members there as well to help to assist you any questions that you have. There are other ways to send notifications, but I'll just briefly touch upon them. First of all, you can send on chain notifications as well. And what does it mean? For example, let's say that you have a smart contract and from the smart contract itself you want to notify another wallet that something happened on your smart contract and you can do this. You go to Docstock.org,
00:26:20.132 - 00:27:16.500, Speaker B: click on Sending notifications using Smart Contracts, and here all you have to do is to do a function call to the push protocol smart contract and otherwise taken care of. We take the event, we transform the event into a notification and then we expect a notification. We also have another way to send notification, which is by using subgraphs. So if you have subgraph, if you already have an existing subgraph, you don't have to change anything to start sending notifications. From the subgraph itself. We have a helper function that you can import and from the helper function itself that we provide, we take care of getting the event and dispatching the notifications for you. I see a couple more questions here.
00:27:16.500 - 00:28:13.560, Speaker B: Is push per call available on FPM? Yes, so we're on FVM as of now. So I think we're going to be deploying this to our main deck by tomorrow. So I'll say probably by tomorrow morning UTC. We can already start sending notifications from FVM whether they are on chain off chain manual using the SDK. The bridge protocol has been developed from the ground up to be EVM compatible and future we're going to be on other VM chains as well, non EVM chains as well. But yes, by tomorrow we can send notifications from another question here using Push SDK. Can we make push group chat ourselves basically instead of using just chat components? If you use the SDK, is it too good to make a push group chat? That's a good question.
00:28:13.560 - 00:28:41.726, Speaker B: You can. So basically you can replicate a group in a sense that, for example, I send a message to a group and we have three members. I can send the same message to all the other members. So you can manually create a group. All you have to do is just iterate over. The people want to send message and send to them. Yes, they'll do ask this question.
00:28:41.726 - 00:29:17.740, Speaker B: Answering yes would be possible to do. All you have to do is to group over the people who want to send message and then send a message and they're going to get notification whenever they receive a message. But what I can say is we're almost done with the group chat implementation SDK. So what I can say is, in a couple of weeks we're going to launch this. So you can just use the chat react component and we're going to be doing on your behalf. So we just care on your logic. But if you want to do this, hackathon this, please go ahead.
00:29:17.740 - 00:29:51.810, Speaker B: I hope I answered your question. Another question here. During its India hackathon conducted recently, my group had used push protocols and you guys had provided an API key. Will the API key also work? Now that's an amazing question. Yes, you can use the same API key, no problem. If you need another, just ping us on discord. One question from Bolahi Ahmed.
00:29:51.810 - 00:30:32.404, Speaker B: Does this work with Smart Contract address as well or only with EOAS? Since we do not have interface with Smart Contract like we do for EOBs? Totally. You can send notifications from a Smart Contract as well. No issue at all. If you just want to see how it looks like, go to Darkflappush.org, send notifications using Smart Contract and then all you have to do is to call this function on our contract and we have a sample code here that just copy and paste. It is how the notification payload looks like, but you can trigger a notification unchecked angry. Ask the question.
00:30:32.404 - 00:31:07.920, Speaker B: Is it available in hyperspace currently? No, not currently. Another question from Suham. Can you give us some insights on how does push tech do a guessless transaction? So whenever I send a chat message, they are not stored on chain, so they're gasless because the chat messages, they are stored on IPFS network. So there is no cost to send chat messages. So each chat message or notifications, they're not stored, don't change. They are stored on the push network or IPFS. It's completely flexible.
00:31:07.920 - 00:31:32.170, Speaker B: So for this reason, you don't pay per message. That's why we don't have to pay anything we can do. It completely gasless. Yeah, I think that was all the questions. Any other questions? Just hop in. Discord from my side. I think that's it.
00:31:32.170 - 00:31:35.850, Speaker B: Thank you so much for being here.
00:31:36.700 - 00:31:59.100, Speaker A: Awesome. Yeah, thanks Fabio for doing this awesome workshop for the space warp hackers. This will be a great resource as people do their hacks and for the future. And thanks so much for the rest of you for tuning in. We do have another workshop in a couple of hours, so hope to see you there. And with that being said, I hope everyone has a great rest of your day. Bye.
