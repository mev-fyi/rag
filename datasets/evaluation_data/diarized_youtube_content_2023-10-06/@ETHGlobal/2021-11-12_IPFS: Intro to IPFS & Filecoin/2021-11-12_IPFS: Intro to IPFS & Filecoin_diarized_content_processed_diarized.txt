00:00:28.140 - 00:00:51.570, Speaker A: All right. Hello, everyone, and thanks for joining us on this lovely Friday or Saturday, depending on where you are. This is the Intro to IPFS and Filecoin workshop hosted by Discordian from IPFS and Filecoin. So let's get on with it, then. Here's discordion hosting the workshop. And Discordion, I'll pass the mic over to you.
00:00:51.980 - 00:01:16.270, Speaker B: Awesome. Yeah. Hello, everyone. Thanks, Anna. I'm Discordian, a community engineer from Protocol Labs, and I'm here today to give you an introduction to IPFS and Filecoin. All right, so what are we going to be doing today? Today we're going to learn the core concepts of IPFS and Filecoin and why they're important. Talk about what tools exist today to help you get started building.
00:01:16.270 - 00:01:58.780, Speaker B: We'll talk about some possibilities, throw out some ideas that might be fun to build with the tech. Near the end, I will tell you some resources you can explore into to learn more about IPFS and Filecoin, as well as where you can go to find our communities and connect with fellow IPFS and Filecoin enthusiasts. And finally, if there are any unanswered questions at the end, I'll try to have some time left for you to ask them, and I'll do my best to answer them. However, if you think of a question while I'm presenting, please don't hesitate to ask. A key part of IPFS and Filecoin is that they're distributed. Currently, the Web 20 model is centralization. One single point can fail, and entire services can go down.
00:01:58.780 - 00:02:54.780, Speaker B: As you get further and further distributed, your services resilience increases as the users themselves are what are powering the service? We believe that data and knowledge are a couple of the most important assets in this connected era. Being critical to human development, they must be safeguarded, open and in the hands of the people. IPFS is not the answer to all the problems, but it is the answer to some, and overall represents a strong building block in the Web three generation, particularly when it comes to removing borders and silos for data. So what exactly is IPFS? Well, IPFS is the Interplanetary file system. What is a file system? Files and folders. Any file with any content. Why Interplanetary? Because it was conceived as a way to upgrade the Web in a way that would work or still work when the network reaches across planets.
00:02:54.780 - 00:03:42.580, Speaker B: The idea being that if you are sitting in Mars, it may take 1 hour for requests to go and come back from Earth. But if that content was already fetched by someone else in Mars, then it should not travel all the way back to Earth for that. And that feature should be provided transparently by the network protocol rather than by something on top. As we will see, IPFS is distributed by design. No central authoritative servers are storing content, and no central server needs to be contacted in order to obtain the content. I'm going to explain the key technologies making this possible in order to do this, let's think of the process we follow when we put our data online. As we said, a file system has files and folders, and the web is no difference.
00:03:42.580 - 00:04:35.250, Speaker B: When we open a website, we are just opening some files with the difference that they need to be downloaded from a remote location, and that we do that using a browser which will print pretty things on our screen. With IPFS, we are also obtaining files from a remote location. But the key difference is that we don't need to know the location of the Content, but what we call the Content Identifier. The Content is still at one or several locations, but as we will see, it does not matter anymore where it is. We switch from a location based Identifier to Content Addressing by using a CID. In order to be able to have Content Addressing, we need to obtain Content Identifiers for each piece of information that we want to put on the network. And this is a cryptographic fingerprint of that piece of Content.
00:04:35.250 - 00:05:20.540, Speaker B: Every piece of Content produces a different fingerprint. All the fingerprints are of the same size, regardless of the amount of content. This fingerprint, which we name CID, can be reproduced anytime from the original Content. This means that if we obtained a piece of Content after requesting a CID, we can verify that we were given exactly what we asked for. So when it comes to files, the idea of how we Content address them is clear. But what about folders? Well, folders are just special types of files which have a list of files in that folder as Content. That list provides the names of those files, and in the case of IPFS, they're CIDs.
00:05:20.540 - 00:05:55.026, Speaker B: Since a folder is a type of file, a CID can be contained in exactly the same way as for any other type of file. This means that we can represent a folder or even a full file system using Content Address structure. Like this. Sorry. This meaning over here on the right side, as you see here, our top level folder has a root CID. It has two entries corresponding to two folders, and those folders have other entries corresponding to files. Each entry has a different fingerprint.
00:05:55.026 - 00:06:43.862, Speaker B: See the colors? As each fingerprint refers to different Content, this Content Address type of graph is what we call Merkel Dags. The Merkel Dags used by IPFS allow us to move from location based addressing to Content Addressing in a single step. By just replacing locations with the root CID of their content. The subpaths stay the same. One characteristic of Content Addressing that I mentioned is that the fingerprints are unique for any type of content. What would that mean if we wanted to copy file TXT to the folder of the second user? It means two things. Oh, sorry, I should mention that I have User One and user Two here.
00:06:43.862 - 00:07:13.650, Speaker B: That's what I'm referring to. So it means two things. First, we did not really have to copy the file. We just had to modify the folder to reference the content. Two copies of the same content have the same Identifier, so to IPFS, they are the same thing. There is no notion that the same content can be duplicated in different folders in IPFS because it is actually the same thing with the same CID. We call this property deduplication.
00:07:13.650 - 00:08:19.858, Speaker B: Secondly, since we changed a folder, the fingerprint of that folder changed, so we had to update the upper folder, too, to reference the new fingerprint. This means that the fingerprint from that folder changed, resulting in a new root CID. The moment something changes, you get a completely different CID. Your previous CID still references your previous version of the content, which has not been changed. The fact that a CID will always represent exactly the same piece of information, unlike a location unlocks the capacity of doing verification on any piece of data and makes IPFS a very good framework for appendonly storages, like blockchains or data archives. As you can see, content addressing is a nice drop in replacement to location addressing as we keep having folders and paths in a very similar way as we had them on regular web addresses. What about different CID? Okay, so Lucas has a question.
00:08:19.858 - 00:09:35.258, Speaker B: What about different CIDs for the same content using different CID methods? Like, for example, V one, V two, and et cetera. So right now we have a concept with CIDs where we have V zero and V one CIDs. I believe right now, if you stored something in a way and produced a V zero CID, and then you tried to reference it using a V one CID, that would work. However, if you encoded the data, which that's more of an IPLD thing, I don't think I have anything in this talk really about it, but the way that the blocks are actually encoded will produce a different CID as well, and the data will not be found. So you want to try to make sure that if you're looking for content, especially if you're working across different apps that you've made, that you are actually storing the content in the same way, producing roughly the same CID. And I guess just as a quick practical difference between V zero and V one CIDs, v one CIDs tell you more information about how the data was encoded, stuff like that. So it actually does produce variable length CIDs, where V zero CIDs begin with a capital Q lowercase M, and they don't contain that information.
00:09:35.258 - 00:10:08.046, Speaker B: It's all implied. Hopefully that helps answer your question. Okay, so peers peers in peer to peer systems are nodes that are connected to other peers to form a network or swarm. Forget for a moment about IPFS peers and think peers in general. There are certain features that a peer in this network must have. First, it needs to have a name so that other peers can identify it. In practice, each peer has a unique Identifier.
00:10:08.046 - 00:10:48.900, Speaker B: This Identifier is linked to a cryptographic identity which allows each peer to communicate securely through an encrypted channel. Secondly, it needs to share at least some functionality with other peers. If a peer needs to interact with other peers, they will need to support the same services. For example, the peers in the IPFS network are peers which support a set of services or protocols. One of them serves to request certain content by its CID from a different peer and download it. But in order to get there, it means that peers need to be able to discover each other. The network transports they support TCP, Bluetooth and the services they can understand.
00:10:48.900 - 00:11:34.746, Speaker B: This step is called Content and Peer Routing, and it is achievable using something called a distributed hash table or the DHT. So the DHT or the Distributed hash table is a critical service that each peer runs. DHTs are the equivalent of a large database that works by storing only a small number of rows in each peer. In order to get the value associated to a key, a peer will need to find some other peer that is storing it. The process consists of asking other peers in the network who has this row, but not in a random fashion. Remember that not every peer is connected to every other peer. Instead, peers with certain names or peer IDs are more likely to store certain rows.
00:11:34.746 - 00:12:30.782, Speaker B: Thus, a peer knows which one of the peers it is connected to is most likely to have the value for the key that it was looking for. What if it doesn't have it? Then it will request information about peers known by the other peer, which are more likely to have it. So now that we have a database shared by all the peers in the system, how does IPFS use it? Simple. When the content is added to IPFS, a peer will insert one row in the DHT mapping the Content IDs that we generated to its peer ID, declaring itself a provider for that content. Publishing this row involves finding a peer similar enough to the Content ID to store the row in any case. The Content ID is, however, a very small piece of information, and the actual content stays in the original peer. Peers also insert routing records in the database.
00:12:30.782 - 00:13:15.434, Speaker B: These map their peer IDs to locations where they can be reached and the method effectively to their IP address and port. Any peer that wants to download some content will then have to do two things. First, query the DHT to find out which peer ID is providing to that content. Second, query the DHT to find information on how to contact that peer ID. At the end of the DHT queries, a peer knows who has the content it wants and where to get it. IPFS is really useful to anyone who wants to serve or retrieve content on the web, which is almost everyone. As certain pieces of content get more popular, the data becomes more readily available and resilient to loss.
00:13:15.434 - 00:14:12.450, Speaker B: You can also run your own nodes on classic infrastructures like VPs or Pay, pending services to hold onto your data, ensuring availability. But what about alternatives that are both decentralized and reliable? This is where Filecoin steps in. Filecoin is storage designed for Web Three from the ground up. It is compatible with IPFS and other existing Web Three technologies, such as Near, ETH, many others, it's cryptographically Verifiable, so you can store CIDs on any blockchain, really, and reliably retrieve the same data every time, provided you have a storage deal made over Filecoin. At over Eight exabytes, Filecoin is an absolutely massive network without any central authority. It should have the capacity to handle any use case you can imagine. Can I PFS host services like React Apps is strictly file storage.
00:14:12.450 - 00:14:52.400, Speaker B: If you wanted to host a static website over IPFS, that would be very simple to do. Tools like Fleek are actually designed to make that very easy. If you wanted interactive applications, there is a layer to IPFS called Pub Sub or Publish subscribe, and that will allow your peers to communicate with each other in a decentralized way. You can simply subscribe to a topic like My. App and then have any other peer also subscribe to that topic and then anything published over it. You can see who published over yeah, yeah, exactly. Thank you.
00:14:52.400 - 00:15:41.036, Speaker B: So let's take a moment to talk about Verifiable storage on Filecoin. You or your app make a deal with a provider to store your data. Filecoin preps your data by transforming it into a directed acrylic graph, the Dag. It uses the same process as IPFS, so the resulting CIDs are compatible. Next, providers generate an initial proof of replication that's part of the storage deal that they publish to the Filecoin blockchain. Over time, providers have to keep proving that they still have subsets of your data, creating proofs of spacetime they are paid incrementally for keeping up the storage deal. Finally, you can get your data by making retrieval deals with providers.
00:15:41.036 - 00:16:44.660, Speaker B: You can also check the chain for proof that it's being stored and stored correctly at any time. Sorry, Emil, I don't quite understand the question. Filecoin does not have a link for data CID. Yeah, content is addressed slightly differently over Filecoin and then services like Web Three Storage or NFT Storage. Kind of abstract that away for you, but I haven't had enough experience like actually building things with direct access to Lotus to be able to comment on exactly what those differences are. Is there any way to host data that has access control or encrypted content? Well, as IPFS and Filecoin, you can just store kind of whatever data you want, binary data or otherwise you can encrypt it beforehand. In terms of access control, there's nothing yet you could build your own layers on top of that, like using things like Pub sub, for example, which I mentioned earlier.
00:16:44.660 - 00:17:25.030, Speaker B: But the easiest way right now would be to just really, I guess, build in encryption on your yeah, yeah, okay. I'm glad that makes sense. All right. So IPFS and Filecoin are perfect complements for each other as we've gone. Over IPFS is great for fast, flexible retrieval over the IPFS network, and can even be accessed through HTP gateways. For users not yet equipped with IPFS, though, IPFS needs somewhere to persist the data. Filecoin answers this problem by offering excellent persistence and verifiability through distributed storage deals which any storage provider can accept.
00:17:25.030 - 00:18:10.166, Speaker B: There are several layers to any application, and web Three offers no exception. You have storage helpers such as Web Three storage, NFT storage, fleek, estuary infra ceramic, and more. There are so many tools out there for storage, providing that finding the perfect fit for your project should almost certainly be possible. We have the logic layer as well, through smart contracts that can point to CIDs served over IPFS stored via Filecoin, a pinning service, or maybe even persisted through sheer popularity. The logic layer offers endless possibilities with so many technologies, including Ethereum, near and many, many more. Finally, we have the front end. This is what you see and can include typical web Two methods like throwing your page on a web server or having some server side code do some work.
00:18:10.166 - 00:19:05.190, Speaker B: But also web Three, where the website is served over the distributed web, often with integrations like crypto, wallets and NFTs, serving static websites over IPFS is quite easy. So I hope to see more and more Web Three type front ends as we move forward into the future. By now you might be wondering what can I build with IPFS and Filecoin? Well, we've been brainstorming some ideas to help you get started. We have quite a few, so I'm just going to briefly go over some as fast as I can. So here are eleven ideas of varying vagness difficulty and complexity. So you could create a social media website where data is shared directly, peer to peer timelines, decided organically by the data you literally receive in a stream filtered by the client. Perhaps you'd like to start at a lower level though, and design distributed social media standards the very primitives other networks could build upon.
00:19:05.190 - 00:19:36.958, Speaker B: A distributed video streaming service could be nice. Users could monetize their videos through a token, maybe requiring some form of payment for certain content or extras. You could help cache the planet and help store popular JavaScript libraries over the distributed universe. An RSS emulator could be fun. Users could subscribe to a Pub subtopic, which is a publish subscribe system you can use through your IPFS node. Peers could subscribe to a topic they're interested in. Another peer could publish updates to it.
00:19:36.958 - 00:20:13.340, Speaker B: Decentralized achievements could be fun. Create a system where web Three games can easily integrate achievements into their games, adding a whole new layer of fun to your new web3 games. You could make an app to simply snapshot a website and provide the immutable CID representing that website. Build a decentralized metaverse where any user can host their own planet, allowing users to colonize entirely new worlds in an inexpensive and distributed way. You could build a decentralized service that assists you in purchasing the correct temperature of coffee. A distributed Git platform could be really cool. Bonus points we can integrate an issue tracker for it too.
00:20:13.340 - 00:21:07.862, Speaker B: A wrapper for YouTube to help cache videos into the decentralized web could be absolutely invaluable in preserving certain types of content which are completely lost of time. I hope at least one of these ideas help spark your imagination. Oh yeah, I want to echo what Jeroppo or Hugo said, and thank you very much for answering that. He said it's rare to see people developing on filecoin directly because it's heavy to run. So most people end up using things like I've mentioned earlier, like Web Three Storage, which will abstract a lot of that layer away for you. Have you jordan? I will try to answer your question at the end unless somebody else can. Okay, so, all right.
00:21:07.862 - 00:21:43.810, Speaker B: I promised I would tell you about some tools to help you build your app, so I will go over a few of those. Now, let's take a second to talk about storing and retrieving data. We highly recommend choosing a storage helper. They simplify deals and workflows making it fast and easy to build. They simplify deal making in general finding providers, negotiating prices, waiting for confirmation, verifying storage. Storage helpers handle all that for you. You can store to both IPFS and Filecoin as a single call, IPFS for fast, flexible retrieval and Filecoin for persistence and verifiability.
00:21:43.810 - 00:22:25.034, Speaker B: A storage provider with filecoin integration will ensure that you never need to think about these things. So what's out there? First up is sleek's IPFS hosting. It's designed for fast, modern, censorship proof websites and web apps on the open web and works with most modern frameworks. It works by connecting to your GitHub repository and you add build settings from there. You can deploy your website to IPFS, which is backed up to Filecoin. You can find more about the services Fleek offers over at Fleek Co. Web Three Storage is a powerful solution for hosting your data for free, backed up over Filecoin and available over IPFS.
00:22:25.034 - 00:23:08.298, Speaker B: Seamlessly Data is immediately uploaded to a hosted estuary node and automatically stored with six providers around the world. It can be used in a variety of ways, including the Http API and web interface. NFT Storage is a powerful solution for hosting your NFTs for free, backed up over Filecoin and available over IPFS. Seamlessly NFT Storage is designed for NFT developers who want free, decentralized storage. You can simply upload your data and get back an IPFS CID that can be used in on chain NFT data as a pointer to your content. Storage and retrieval is free. You get properly formatted metadata back immediately after uploading, you can fetch it back via IPFS, and it's backed up to Filecoin via free storage deals.
00:23:08.298 - 00:23:54.030, Speaker B: NFT Storage is easily used via its JavaScript client library, their Http API, or can even be used as a remote pinning service. Last but not least, there's Powergate. It's designed for developers who want powerful ways to connect and extend Lib, PTP, IPFS and Filecoin Powergate bridges to near and Soon, ETH, Polygon and others. It works as a docker container wrapped around an IPFS node and a filecoin node. It can stage, store and retrieve data, as well as provide default configurations for minor selection. You can find lots more information about Powergate, including usage via Textile's website listed on this slide. I've listed only four storage providers here, but from ceramic to estuary, there are many others to discover.
00:23:54.030 - 00:24:26.902, Speaker B: So come learn and build. We have an awesome community comprised of builders who help us foster a positive and productive environment. I highly encourage you to check out a resource we've compiled of several tutorials currently available@tinyurl.com. Learnipfs filecoin as well. I hope to see you around, and I'll be available for the duration of the hackathon, so please ping me or send me a DM. I'm discordian on related discord servers and the filecoin slack. So I'll leave the slide up and answer any questions you may have now.
00:24:26.902 - 00:25:34.526, Speaker B: So ask away, don't be shy. So first I'm going to go to Jordan's question, which is, how can I test my code? For example, I have an in browser IPFS node, but how can I call some kind of mockup or temporary storage that pretends to be filecoin storage? I guess to answer your question, as Hugo said earlier, most people don't use Filecoin directly, so I don't know if we have a whole lot of tooling available for that. But considering web3 storage and NFT storage are completely free, I highly encourage you to just sign up, get an API key, and then just test out using their nodes. Yeah. So where do I save credentials for accessing helper apps in your deployed in production? Okay, yeah. So this question actually comes up quite a bit, and I wish I had a straightforward example I could point you to. To be honest, in terms of the hackathon, it's totally fine if you end up having to leave an access key in a public facing side while it's judged and stuff.
00:25:34.526 - 00:26:07.910, Speaker B: Definitely won't hold that against anybody. But the way I would personally do it is I would put the API key on a node that you run on something like a VPs, and then have requests for stuff like storing the data, which would be the only thing I can think of that you'd need the API key for. Have those sent over pub sub, and then that way your node can receive those requests, store it, and then advertise the CID back. That it. Got. I know. I realized Discording.
00:26:07.910 - 00:27:04.774, Speaker B: Oh, yeah. Could we have a quick overview of how pub sub works? Yeah, I wish I had slides handy. Do you have any specific questions? Otherwise I can just babble about it a little bit. So, in simple terms, the way I see it, so if you have node A and node B, node A can subscribe to topic A, node B also subscribes to topic A. If node A says something like, broadcasts a message, and this can be text, binary data, whatever you want, node B will receive it. Because they're subscribed to topic A. They will actually also be able to verify that it definitely came from node, because all messages are signed.
00:27:04.774 - 00:27:45.640, Speaker B: Can pub sub two sockets work for us? Well, pub sub, yeah, more or less. So there is nat hole punching that comes along with IPFS, so that would usually be through, honestly, all kinds of things. Pub sub is multicasted messages. Yes. So pub sub would be, I guess, a layer above sockets. So yeah, I think sorry, I don't know how to say your name. Moradif is correct in that sense, because you can just use pub sub instead.
00:27:45.640 - 00:28:18.020, Speaker B: True. All right, I'm really happy to see all this engagement in the chat. Does anyone have any other questions? Well, it looks like we're pretty much just right at time. So thanks for coming, everyone. I really appreciate it.
00:28:18.870 - 00:28:42.040, Speaker A: All right, thank you so much, Discordium, for the great presentation. And thank you so much to the rest of you for joining us today. The stream of this workshop can be found on the Ethnobal YouTube channel if you want to refer to it in the future. And Discordian can be available on discord and the sponsor IPFS filecoin Discord channel. And I hope everyone has a great rest of your day and thank you all once again.
