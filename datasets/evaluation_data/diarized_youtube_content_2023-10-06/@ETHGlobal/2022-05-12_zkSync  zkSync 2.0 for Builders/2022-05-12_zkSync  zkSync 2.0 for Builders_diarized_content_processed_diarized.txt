00:00:00.090 - 00:00:33.030, Speaker A: Bear with us while we get the live stream set up. We'll start in a few seconds. Welcome everyone. We have Stan here who is going to give you a workshop on ZK Sync for Builders 2.0. And if you have any questions in the meantime, feel free to pop them in the chat and we can take them towards the end. Dan, I'll let you take the stage. Thanks.
00:00:33.960 - 00:01:05.590, Speaker B: Hi everyone. So today we're going to have a talk about Ziki Sync 2.0. Ziki Sync 2.0 is the first EVM compatible Ziki roll up and we going to discuss how it feels from the UX, from the user perspective and from the developer perspective. The Kissing 2.0 has been live on testnet since February. And quick disclaimer here is that this presentation not only shows the features which are already available on testnet, but also the ones which will be available in the future.
00:01:05.590 - 00:01:44.764, Speaker B: So what is Ziki Sync 2.0? As already said, it's NL two powered by Zkvm. The main features compared to other ZK roll ups is that it is programmable in solidity and wiper. It has full support for a free API. That means that most Windworks presumably integrations with various indexes like the graph, they will be done very smoothly. And also your front end will most often work out of the box. And security and citizenship resistance are inherited from L One ZKE roll ups and roll ups.
00:01:44.764 - 00:02:38.640, Speaker B: In general, they solve the problem of Ethereum scalability. So for instance, currently users most often have to choose. They either pay high fees and use highly decentralized blockchain like Ethereum, or they should use something like a sidechain like Solana or Phantom or whatever. And while rollups do solve this issue partially, they only offer linear throughput boost. That means that on Vksync the transactions can get ten x 20 x 100 x cheaper than on Ethereum. But they will always be bounded by the limitations of Ethereum, even with the new EPS like Dank Sharding and block transactions. While we're getting cheaper, there's still some limitations imposed by the underlying L One chain.
00:02:38.640 - 00:03:32.672, Speaker B: That's why we will also introduce Ziki Porter. Ziki Porter is basically second Shard of Zksync which will be synchronously interoperable with Ziki rollup. It will have full security by One will be fully secured by zero knowledge proofs, however and it will also have all or non censorship resistance. So while roll ups inherit fully censorship resistance from underlying chain, the key Porter will allow either everyone to exit or nobody to exit. And in return for this small drawback, it offers limitless throughput. So the fees are comparable to other side chains. And as I said, these two parts ZQ Roll up and ZQ Porter they're synchronously interoperable.
00:03:32.672 - 00:04:16.460, Speaker B: That means that retail users and whales they can all coexist together in a single big ecosystem. All of our code is MIT license. We use only permissive licensing for our code. We want not to govern the community, but the community to govern us from the point of user experience. The Ksink will provide the same with the old Bridging, which you would expect from a developed blockchain like native departments from L One. We have a lot of partnerships, exchanges. We have partnerships, do on ramps.
00:04:16.460 - 00:05:15.204, Speaker B: Unlike optimistic roll ups, we will support fast withdrawals to L One, which will take hours, not days or weeks. And the conventional bridges to other chains will be supported as well. To interact with Ziki Sync, you could use any Ethereum wallet. So if you have your MetaMask wallet, no need to install any new one, you can just continue using all your accounts. We will natively support most of the contract interactions, so I will mention it in the developer experience later on. But this means that the code base, unless you need to deploy contracts or allow users Ziki Sync specific features like paying fees in your C 20 tokens, all the code base could be reused, as it said here. I will show you later an example of the P 712 message.
00:05:15.204 - 00:05:55.724, Speaker B: And also users have instant confirmations. No need to wait seconds or minutes for the transaction to be accepted. For the block, the acceptance is almost instant. And unlike Ethereum, users don't need to worry about paying fees in ETH. So if user has only USDC, they can directly pay fees with it. Here is an example of how it looks like how a message, an EP 712 message for a transaction where the fees are to be paid with USDC looks like we will also support account abstraction. Currently, the most popular wallet on Ethereum is MetaMask.
00:05:55.724 - 00:06:54.880, Speaker B: But MetaMask may not offer the best experience, especially for the new users. I wouldn't recommend MetaMask for my grandma, mainly because managing all these seed phrases and private keys, et cetera, it may be intimidating and very confusing for new users. Argent tries to resolve this with social recovery, where instead of private key control in your account, you still have private key. But if you lose it or get stolen, you can gather your friends and they can recover your account. And these wallets, when they were implemented on Ethereum, they did not work out really well, mainly because of the huge fees for smart contracts and also because Ethereum only treats EOS as first class citizens. ZK Sync smart contract wallets would be first class citizens as well. It will also enable protocols paying for gas.
00:06:54.880 - 00:07:41.890, Speaker B: For instance. Imagine you could swap on Uniswap without needing to pay any fees. And also applications like tornado cash. They could use account abstraction to allow their users to withdraw funds without using any relayers. Who knows what tornado cash is? They know that to maintain privacy to another cache uses relayers for their users to be able to withdraw the funds. With Zksync, the Tornado cache contract itself could withdraw them. From the developer perspective, our main job was to make migrating existing code bases as easy as possible, that is to make the changes as minimal as possible.
00:07:41.890 - 00:08:10.616, Speaker B: Most of the depths which you could use will work out of the box. And even though if you only interact with contracts, you could still use Ether JS most often. We still recommend you to migrate to RSDK, because it allows more flexibility. And most often the migration will look like that. You just change the import and that's it. The rest of the code will be the same. There are still some differences.
00:08:10.616 - 00:08:49.992, Speaker B: For instance, here we did not mention how to instantiate the provider, but we are working on reducing differences and minimizing them. Here's an example on how to pay fees in your C 20 token. So here's an example of how a user could do a contract interaction while paying fees with USDC. Just provide an override and that's it. Smart contracts come with some permanent changes. For instance, because Zkbm bytecode is different from Ethereum one Create, your Opcode address derivation will differ. Create has slightly different reason why it might differ.
00:08:49.992 - 00:09:21.750, Speaker B: We discuss it internally, but for now that's how it is. Currently we do not support native Ethereum, so payable is deprecated. You could still use it, but message value is always zero. Anyway, self destruct will be removed, but it's the same way as Ethereum goes. And Ethereum learned that supporting self desk self destruct is a lot of pain. And since we're building a new chain, we can afford ourselves to not learn lessons from the past. And also the gas pricing would be different.
00:09:21.750 - 00:10:19.590, Speaker B: We don't currently support Solidity before 0.3. Also, on the current testnet we only support Solidity 0.8, but soon we will also support older version of Solidity starting from 0.4. Some open Zeppelin libraries may not work right now, because some opcodes are not available and some tool needs adaptation. That's the biggest part, where you have to do some changes because of the different deployment procedure that it requires. EP 712 messages like here the existing tool in like typical hardhead plugin windows use Zksync, you would need to install ZK sync specific hardhead plugin. Also some crypto precompilers won't work though shutter Five, Six and DC recover will work as well as Kakar, so the most popular functions are available.
00:10:19.590 - 00:10:57.456, Speaker B: What will work? Everything else in postal wiper from the point of front end, most of the code bases can be maintained the same. So from for instance Legacy Takes format will be supported. Also, in our testnet all transaction formats from Ethereum are supported, but in the future we may change that. Web, three API. Fully compatible. That means that again Ethersjs works out of Box. All the tooling, most SDKs and other languages will work out of box as well.
00:10:57.456 - 00:12:18.248, Speaker B: Also we provide our custom SDKs, currently available only for TypeScript, but later on we may develop also father languages for straw, the Cross, Go, Python, et cetera. If you want to get started, here's the link to the documentation also, I would really like to emphasize regarding account obstruction, that in order to allow mass adoption for account obstruction, your DAPs should not assume that you always interact with an not. If your DAP or contract requires some signature verification, do not use recover. You could read more about it here. I will paste the link is okay, I'll answer all the questions in the end of the presentation. Okay, so our main security model is that everything that you write on Ethereum will work on Zksync. And our job is to make sure that the old audits are not affected.
00:12:18.248 - 00:12:59.508, Speaker B: Also, since we use validity proofs, the validity is enforced by Ethereum. So after every any new block, we publish proof on Ethereum that indeed all the transactions, all fee charging, et cetera. In the block was correct. As I already mentioned, we also plan support for mass exits. Currently, let's say that some L2 becomes malicious. Doesn't matter what roll up, what happens next, then most of the users will have to move their funds from to L One and then move them to some other L2. This is unsustainable.
00:12:59.508 - 00:13:56.270, Speaker B: If there are a lot of users, it will be too expensive and there will be a lot of users who will not be able to migrate to another roll ups. That's why in our long term roadmap we will support Masloxes to allow users to migrate to another fork of Zksync, or maybe to another roll up, if we ever go malicious. As we already said, it's not us that controls the community, it's the community that should control us. And this way we'll provide an analog to L One blockchain forkability, that if an L one blockchain becomes malicious, you can always fork away from it. That's all. I imagine we also have partnership with leading security audit firm, so we are both having throw audit for ourselves. And we're also willing to support our partners with getting audit for themselves.
00:13:56.270 - 00:14:54.270, Speaker B: Here's our ecosystem, as you can see here, various DeFi projects like Zigzag, Curve, NFT, Metaverse, Dao, et cetera. Ecosystem grants, as already mentioned, an example of hard hat tooling, which has to be changed, adapted to be supported by Zksync. We are also supported. We also support various ecosystem grants for developers who are willing to adapt existing tooling to the Ksync like Hardhead, Truffle, RAMIX, Foundry, Raffle, et cetera. All this tooling should be adapted to Zksync. The changes are not big, but they still need to be made and we would really appreciate any help from the community. If you have any other ideas, what tooling do you miss from Zksync, please let us know and we'll surely consider it.
00:14:54.270 - 00:15:30.010, Speaker B: Thanks everyone. I think here's the time for questions. I'll take a look in the chat. Do you support modex pre compile? No, we do not. Currently the only pre compilers that we support are Shuttle 56 and EC Recover and also CACAC highest standard WebSocket or PCP available. Yes. Any oracle available.
00:15:30.010 - 00:16:04.020, Speaker B: We are partnering with various Oracle companies, but on the testnet, there are no Oracles as of now. I think that there are likely not be much Oracles on the testnet. I may be wrong here, but I think most of the projects they want to launch on Mainet no more questions. In Zoom. Maybe there are some in the YouTube.
00:16:13.050 - 00:16:19.590, Speaker A: No more questions. And if there's any questions in the meantime, we can follow up over discord.
00:16:20.890 - 00:16:21.640, Speaker B: Sure.
00:16:22.490 - 00:16:25.682, Speaker A: Well, thanks again. Thanks, everyone. See you at the next workshop.
00:16:25.826 - 00:16:28.180, Speaker B: Thanks, everyone. Thank you.
