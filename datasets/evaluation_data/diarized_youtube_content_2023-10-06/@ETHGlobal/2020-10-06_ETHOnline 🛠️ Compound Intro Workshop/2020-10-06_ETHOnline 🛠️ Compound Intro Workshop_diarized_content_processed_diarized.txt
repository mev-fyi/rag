00:00:14.450 - 00:00:24.130, Speaker A: All right, the stream is up. See?
00:00:24.200 - 00:00:25.810, Speaker B: I'll kick off in 1 minute.
00:00:43.790 - 00:00:58.060, Speaker A: Oh wait, actually stand by Jacob. I got to check something on the stream. I'm going to back this up just in case. Sorry, this may take a minute. I may have to reset it.
00:01:00.470 - 00:01:19.910, Speaker B: No problem. I'm making an announcement anyway. It's looking good to me.
00:01:20.280 - 00:01:25.956, Speaker A: Yeah, you see it? It's good. But is it you showing or is it me?
00:01:26.138 - 00:01:26.816, Speaker B: It's Adam.
00:01:26.848 - 00:01:31.690, Speaker A: And I OK. Good. I was looking at the wrong one. We're good.
00:01:59.410 - 00:02:19.190, Speaker B: All right. Shall we roll out? You good to go Adam. Sweet. Awesome. Well, I'll do a quick little intro, but thanks everybody for joining us in the zoom on YouTube. We're really excited to be working with Compound as a sponsor once again. They've been an awesome supporter of ours and they've got awesome tech that they bring to every event.
00:02:19.190 - 00:02:40.560, Speaker B: So really looking forward to having them mean with that being know a reminder to check out the Slash prizes page which will list the prizes that Compound are hosting among all the other prizes. But I guess with that being said, I'll turn it over to Adam as this is his workshop to give.
00:02:41.570 - 00:03:05.090, Speaker A: Hey, thanks Jacob. Yeah. Really excited to be participating in ETH online. I'm going to share my screen, all right. Get my presentation going. Sweet. So yeah, I'm Adam and I work at Compound.
00:03:05.090 - 00:03:29.580, Speaker A: I will give you a little workshop that includes JavaScript and Compound JS. So yeah, my name is Adam and I am the developer relations lead at Compound. You can find me on Twitter. I'm Adam VOSA on Twitter. And I'll be in discord. You can ping me anytime. I'm available.
00:03:29.580 - 00:04:08.322, Speaker A: And also email me Adam at Compound finance. So today we're going to talk about the hackathon bounties that Compound is putting up for grabs. I'll tell you a little bit about the Compound protocol in case you're not familiar with it. And I'll show you some developer resources so you can get going working. And I'll present a little workshop to show you what you can do with things like Compound JS. So Compound has three bounties of cUSDC. The first one is for Compound JS and second one is for building governance tools.
00:04:08.322 - 00:04:48.790, Speaker A: And third is best protocol improvement. I will explain the bounties a little bit more in detail in a few minutes. So yeah, you'll hear more. So what is the Compound protocol? It's an interest rate protocol. So developers can build applications where users supply crypto assets like ERC 20 tokens or plain old ether. And suppliers can earn a varying interest income and borrowers can borrow crypto assets when they supply collateral. So there are several assets supported and it's supplying and borrowing on ethereum blockchain.
00:04:48.790 - 00:05:31.010, Speaker A: So as of today, these are the supported assets. The new one is uni. There was a governance proposal to support uni and the protocol that was added, it succeeded today. So it's not quite in the protocol, it still needs to go through the time lock, which takes two days, I think. And so, yeah, after that you'll see C uni contract. Those are all of the assets that combine to make the Compound Protocol. And this collection of assets can be checked out on the Markets page on Compound finance.
00:05:31.010 - 00:05:56.758, Speaker A: So the first bounty is for building a project with Compound JS. Compound JS is a JavaScript SDK. It works in the web browser and also Node JS. It's really cool. It's brand new, still in beta. You can use it to build whatever you'd like. And we'll give $1,500 of cUSDC to the project that has the most original use of the SDK.
00:05:56.758 - 00:06:36.630, Speaker A: So the documentation has code examples to get you started. And also this workshop, I'll show you how to use it. The second bounty is for the best compound governance tool. So the protocol is updated through Governance, which is a community run governance system. It's fairly new, it came out this year, so there's definitely room to innovate there. So you can build tools like applications, SDKs, APIs, there's lots of information in the docs, including code examples. That also has a $1,500 cUSDC prize.
00:06:36.630 - 00:07:05.938, Speaker A: And the third bounty with the biggest prize is a protocol patch. So the community can develop changes for the compound protocol and propose those updates and the community votes on it using Governance. And you can create your own patch. That's the biggest bounty prize. So we're actually building a developer guide for this. It's almost done. I will share it in discord once it's done.
00:07:05.938 - 00:07:43.562, Speaker A: So you can see how you can make improvements to the Compound protocol. And that's the $2,500 COSTC prize. So governance compound protocol is decentralized. It's not updated by the Compound Labs team, it's updated by the greater community. And there are two contracts in the Compound protocol repository that you can check out and you can read about them in the documentation. And I'll give a little explanation on how they work. So there's a comp token which is currently being distributed to all users of the protocol.
00:07:43.562 - 00:08:30.350, Speaker A: So if you're supplying assets or borrowing assets, you earn comp token for each block that you have an open supply, open borrow. And with this comp token, you carry voting weight when it comes to voting on proposals. So if somebody proposes a change, you can vote yes or no. And you could do that using the voting weight that you have. So what's cool about the Governance token is that you can vote yourself, or you can delegate your voting rights to a different address. So that way somebody with zero comp, but like a lot of voting weight can make a big vote in proposals. So that's a little bit about the token.
00:08:30.350 - 00:09:15.690, Speaker A: This is the proposal process. So if you have greater than 100,000 voting weight, you can create a proposal which is a change to the on chain protocol. And the phases are creating the proposal, which is the code changes. You deploy contracts, and then during the voting, everyone decides whether or not they like this change, choose to include it or not. Once the voting ends, if there is a successful vote, the proposal gets queued into the time lock, which is currently where the C Uni proposal is. It's queued, and after that it gets executed. And the protocol treats those new contracts as part of the protocol.
00:09:15.690 - 00:09:49.522, Speaker A: So this is the compound vote page. You can go to app Compound Finance vote and check out the governance proposals. And also the comp voting weight if you have MetaMask and your address hooked up. So that's one tool for governance that's already been made. And there's also a leaderboard of voting weight. So these are the top voting weight holders of compound governance. And you can choose to identify yourself.
00:09:49.522 - 00:10:14.240, Speaker A: You see there's dresses there and there's also some people and companies. So yeah, that's the leaderboard. That's another cool governance tool. But of course you can make more. We're happy to see people making more. And here are governance resources. So if you want to build something, you can check out the docs, check out our governance page.
00:10:14.240 - 00:10:41.750, Speaker A: Come on over to our discord and ask questions like concepts or code. We'll help you out. You can educate yourself using the Medium blog. We have guides for everything about compound. And of course we have GitHub, where you can check out open source code. Oh, yeah, that's my little presentation. Next part is the workshop where I'm going to show you how to develop with compound JS and JavaScript.
00:10:41.750 - 00:11:27.634, Speaker A: All right? Okay, so compound JS, I'll show you guys that real quick. It is a JavaScript SDK. It's on GitHub. Under the compound organization, you can get code snippets here, check out the source code, clone it, build on it, do whatever you need to do. And of course it's also on NPM, so you can install it for node JS real quick. But yeah, this is the SDK that I'm going to be showing in my workshop. All right, so here's my terminal, and I have an empty folder.
00:11:27.634 - 00:12:11.522, Speaker A: And the first thing I'm going to do is I'm going to create a node JS script, which will show you some of the SDK's features. And in order to use the SDK in my project, I have to create a package JSON file. So I can do that by typing NPN. Great. So now we have a package JSON file we can install from the package manager. So this will take the SDK from the Internet and download it to my machine. So I'll do NPM install compound, finance compound JS and the SDK is pretty light.
00:12:11.522 - 00:12:41.310, Speaker A: It is a wrapper around ethers. JS So if you're familiar with Ethers JS on top of that, it allows you to use ethers JS within it. So yeah, that's what we've built. So now we have the SDK on our machine. We can create node JS scripts that use it. So the first one I'm going to do is pretty simple. I'm going to send Ether from one address to another address using the SDK.
00:12:41.310 - 00:13:41.438, Speaker A: So what I'll do is I'll make a script. So I'll do touch, send, ETH JS So now we have script, and I'll open up my text editor so I can write the script actually spelled send wrong. Rename this file real quick. Okay, so the first thing we want to do is import the SDK. So do that variable, get the compound classroom. The next thing we'll do is we'll choose an Ethereum network to send Ether on. So I don't want to use real Ether right now.
00:13:41.438 - 00:14:28.314, Speaker A: I'm just going to do test Ether in my development environment. So I'm going to use Ganache CLI to make a local blockchain that runs on my laptop. And I'll send ETH from one account to another account using that. So the Ganache CLI address for JSON RPC is Localhost 85 45. And I will spin that up right now. So come over here and I'll boot up Ganache CLI. I'll use fork of mainnet, and I'll use this mnemonic, which I use in all of my demos.
00:14:28.314 - 00:15:09.580, Speaker A: So don't use this key for anything. Yeah, that'll boot up instance of Ganache. So we have ten accounts where we get the address and the private key. And each of the accounts has 100 ETH on my local machine, so I can do whatever I want to test out transactions. So I'm going to grab the private key which corresponds to the first address here. I'm going to grab that private key and I'm actually going to use it. So I'm going to do private key, make a string of it.
00:15:09.580 - 00:15:56.458, Speaker A: So that's the key where I'm going to send Ether from, and I'm going to send it to another address. So I'm actually going to grab the two addresses that were the first two here. So do paste this in, get rid of this garbage, do address us string and make this address number two. Cool. So I'm going to send Ether from address one to address two. I'm able to do that because I have the private key for address one. So what we need to do is we need to make a function.
00:15:56.458 - 00:16:29.602, Speaker A: So I'm going to make an iffy function do async. Do an arrow function, and also because it's Async, we need to do a catch. So I'm going to do console error. So in case there's any errors, I'll be able to see them logged. Yeah. So first thing we'll do is we'll check the account balance of our accounts that we have. So I can do that using the SDK.
00:16:29.602 - 00:17:24.294, Speaker A: I'll do find the e balance count, and we'll do let val one equal 80. So this will get the balance for the first address. We're providing the address and also a provider for a network that we want to get the amount for. So if I did this on main net it would be zero because there's no ether in that. But I'm using my local host, which we saw in the console. It has 100 ETH. So we should see 100 ETH come out of this.
00:17:24.294 - 00:18:23.834, Speaker A: And I'll do a second one and I'll use address two so we can see both of the accounts and we'll log this it, but it's Ethereum. So my balance is scaled up by 18 decimal places. So I'm going to divide that by one times ten to the 18. Do that with that JavaScript. So that will show us the integer number of ETH and also do number two. Okay, so that's the first part. We'll see how much ETH each account has and then we will send ETH from account one to account two.
00:18:23.834 - 00:18:55.382, Speaker A: So I'll do send one. I'll just show this in the console real quick. We'll do. Sending ETH. This part will make a transaction. So there's a way to send a transaction without initializing any compound object. You can do it directly on the compound class.
00:18:55.382 - 00:19:41.890, Speaker A: So this is our transaction object. We'll do await compound ETH TRX. So this does under the hood, it does JSON RPC send transaction and we're going to send ETH from address one to address two. So that's our address that we're sending the transaction to. And we're going to do an inline abi of a string. So I'm going to say function send kernel payable. So this is basically telling the SDK I'm sending ETH to a contract address with the function send, which actually doesn't exist, it's just an address.
00:19:41.890 - 00:20:09.730, Speaker A: So we're going to be sending ETH to that address. So there are no parameters for our fake function. And the last parameter is our call options. So you can think of like an ethers JS. You have transaction options, you can pass them in this object here. So for value, that's the number of ETH we're going to send. So again, I can do compound ethers.
00:20:09.730 - 00:21:05.550, Speaker A: This is actually the ethers class, can access it like this. Since the SDK is a wrapper around ethers and I can say how much Ether I'm going to send, I'm feeling generous today. I'm going to send five E and no semicolon comma. Okay? The provider is this provider up here, my local host. And our private key we're going to use is this. You can also pass a mnemonic if you want, but I'm doing it this way and that's the transaction object. So when you use Ethers, you can do the transactionobject wait and you can tell the SDK to wait for one confirmation.
00:21:05.550 - 00:21:47.340, Speaker A: So the code will stop here until the confirmation happens. So that's just one confirmation. And the last thing we'll do is we'll log the balances again. I'll just copy this code, same thing, I'll get rid of the declaration. Okay, so yeah, that's our whole script. Basically what it does is it says what are the balances of these two accounts? Should be 100. And then it sends five Ether from account one to account two.
00:21:47.340 - 00:22:05.730, Speaker A: And then the last thing it does is it logs the balance of ether. So that should be 95 and 105. Check my math. All right, let's run the script. So what did I call it? Send e. Okay. Node send ETH.
00:22:05.730 - 00:22:29.690, Speaker A: Yeah, it worked. Initially, we have 100 ETH in each account. Account one sends five to account two and it spent a little bit of ETH on gas. That's why this is not 95 exactly. And the other guy got five E. So yeah, that's how you send Ether with Compound JS. The most important thing here is the TRX function.
00:22:29.690 - 00:23:09.138, Speaker A: You can literally do any transaction. You can supply a one line abi like this. Or you could just name the function on a contract and then down here do Abi and then provide the generated abi that comes out of soul C, the JSON. You can put that here. So you can do that can you can put a mnemonic down here if you want, but yeah, that's how you create a transaction. Alternatively, you can do read, which would call ETH. Call under the hood for JSON RPC.
00:23:09.138 - 00:23:36.000, Speaker A: So that wouldn't spend any gas, that would just call a function and you could return a value. So, yeah, those are two cool parts of compound JS. You can do regular Ethereum calls or sending of transactions. I will put this code on GitHub after the stream so you can reference it if you'd like. But yeah, that's the first demo. I'm going to do three more compound JS demos. So that's the first one.
00:23:36.000 - 00:24:04.790, Speaker A: Next we'll do one in the web browser and that will be a little different. We're going to supply assets for the compound protocol. I'm going to supply Ether and I'll show you how to do it in the web browser with MetaMask and compound JS. So let me make sure this file is not all messed up. Okay, cool. So, new file. I'm going to do supply HTML.
00:24:04.790 - 00:25:04.422, Speaker A: So do a little HTML Sublime autocompletes that for me. It's kind of nice. We'll do Supply to Compound and here we'll make label. This is just going to be a little bit of simple HTML for a little user interface for supply to line break. And we'll do a text input. And this will be like a text box where you can put a number, put how many ETH you want to supply to the protocol. We'll give this an ID so we can grab it with JavaScript.
00:25:04.422 - 00:25:38.102, Speaker A: We'll do Amount, the amount of ether. We'll do another line break and then we'll do a second input, except this time we'll do a button submit this one, we'll call it Supply. The text inside of that button will be Supply. Cool. All right. I don't really like writing HTML. That's all we have to do today.
00:25:38.102 - 00:26:14.900, Speaker A: So that's good to the fun part, the JavaScript. So when I'm using the web browser, it's neat to be able to use a CDN to import the SDK. So I can do that using JS deliver. I head over to JS Deliver. I'm going to search for the NPM package. So I'll do compound yes, there it is, first result. And I'm going to go into the disk folder and I'm going to go into the browser folder and we got a minified version of compound JS here.
00:26:14.900 - 00:26:42.250, Speaker A: That's it. Yeah. So I'm going to grab the URL and I'm going to go back to my code and I'll make a script tag. I'll do source is that URL. So that way whenever this web page loads, it'll load the SDK from the CDN automatically. Nice. So next we'll do some inline JavaScript.
00:26:42.250 - 00:28:16.758, Speaker A: And here we will use the SBK to supply ether to the compound protocol. Let's first grab our HTML elements with document get element by ID. So we'll do supply amount box it supply, button supply and that's all the elements we have to get. And next we'll do a provider. So instead of a JSON RPC provider, we'll do a web3 provider which is if the user has MetaMask, they'll be able to grab this object in JavaScript. Next we could dot enable and that returns promise so that'll say, hey, we're going to use ethereum on this page and the user can connect their wallet using MetaMask. This time I'll initialize an actual compound object.
00:28:16.758 - 00:29:23.760, Speaker A: So last time I just used the class directly and now I'm going to initialize an object. This time instead of passing the ganache JSON RPC, I'll use the window ethereum. And next we should make a function that will do the supplying, which is what happens when the user clicks the button. So first we'll do supply function and in this function let's make it async so we can do await. We'll do const e to fly whatever we put in this text box up here. So that'll be that value and it'll be a string. So I'm going to coerce it to an integer using this plus sign.
00:29:23.760 - 00:30:06.826, Speaker A: Cool. So now we can create a transaction, except this one, we're not doing it directly on the class, we're doing it on our object again, which is initialized. So the key that the user selects in MetaMask, it'll use that account to create the transaction. So I can do compound supply. And this method is pretty straightforward. You can pass the asset you want to supply like that, like ETH and then two ETH. So it's pretty cool you could do that.
00:30:06.826 - 00:30:50.940, Speaker A: I'm going to change this up a bit. I'm going to do Compound ETH which is the same, it's just a nice variable that already holds that string. Instead of two, we're going to choose whatever was in this box which was ETH to supply. And you can get more exact with this by using a mantisa so if you scaled up the amount by 18 decimal places, you could say so. That way you could use a scaled up number. Or without this, it's just like one will represent one ether instead of one times ten to the 18. So, yeah, nice and simple.
00:30:50.940 - 00:31:38.426, Speaker A: I'm going to log the transaction for us in case something goes wrong, we could check it out. And again, I'm going to do that thing where I wait for it to get mined. Nice. So for waiting, we could show on the page. We could show a nice spinner loading screen on the page for the user and wait until gets mined and then update the page. But not going to do that now. I'm just going to make a to do show screen the transaction completed, something like that.
00:31:38.426 - 00:32:06.750, Speaker A: Yeah, not going to do it now, do it later. Cool. So next we need to have a function event for clicking the button and that will execute this guy. So I'm going to do supply. Supply button on click equals do. Supply. Sweet.
00:32:06.750 - 00:33:17.240, Speaker A: So now when the supply button gets clicked, this function executes. So, yeah, we're going to supply some ether to the compound protocol. What that does is it sends ether to the C ether contract and in return, the address gets C ether tokens. So you can hold these C ether tokens and redeem them later and get your ETH back plus interest. So I'm going to go back to my project folder and here I can boot up a HTP server node package so I can visit that web page in my browser. Okay, so I'm going to go to the supply page and wants me to log in real quick. It see if I go to the right account.
00:33:17.240 - 00:33:54.980, Speaker A: Going to go to my localhost JSON RPC, which is the Ganache that I was running earlier, I guess. There's a bug in MetaMask. I have more ETH than anyone on the planet. I'm the richest person in the world. It's kind of funny, but yeah, see, I have zero C E, so that means I haven't supplied anything to the compound protocol yet. But after I supply some ETH, you'll see that I'll have some ce. So I'm going to pull up my developer console just so we can see what we logged in case something goes wrong.
00:33:54.980 - 00:34:28.720, Speaker A: So I'm going to supply three E and so c e to ETH. The conversion ratio is almost 50. It's like a little bit off from 50. So when I supply, I should get about 150 C E. So I'm going to hit supply, and MetaMask will pop up a transaction. And so I'm going to send three ETH to the compound protocol. And there's a little bit of gas cost.
00:34:28.720 - 00:35:03.642, Speaker A: So I'm going to confirm. And it looks like there's an error with the transaction. And I think I know why. MetaMask doesn't like using Ganache CLI that much. So you have to come over here and reset the account every so often, so it fixes the nonce number. So I'm going to try that again. This, of course, works always on the public networks, but it's only with Ganache CLI, it doesn't like it.
00:35:03.642 - 00:35:27.330, Speaker A: So I'm going to try that again. Okay. Yeah, that was it. This time it succeeded. So when I look at my C ETH balance, it should be about 150. Yes, it's a little less because the ratio is a little bit off from 50 to one. So, yeah, that's how you supply ether to the compound protocol using Compound JS.
00:35:27.330 - 00:35:59.370, Speaker A: Okay, we got two of four code demos done. Next one will go back to Node JS. This one switches gears a little bit. We'll be doing governance. So remember, there's a bounty for building a governance tool. Maybe you can get two for one here by using Compound JS and making a governance tool at the same time. So, yeah, let's create a Node JS script that does vote delegating.
00:35:59.370 - 00:36:57.658, Speaker A: So make a new script and we'll say, like, my address, which is that first address from Ganache will say that that address wants to delegate its voting rights to, I guess, the second address. So that means whenever the first address has any comp balance, the voting rights will be delegated to the second address. So the second address can vote on behalf of the first address. So if there's a big influencer in the compound community and everyone trusts them to vote the right way on proposals, they can delegate their voting rights to them. So I'll show you how to do that with Compound JS, and I'll show you with a Node JS script. So let's make a new file. Let's call it tailgate.
00:36:57.658 - 00:37:46.510, Speaker A: JS And I guess the beginning of this file is going to look similar to the other script we made. So I'm just going to copy code. Yeah. So we got the SDK, we got the same Ganache provider, the local host copy of the blockchain, and we have the private key of the very first account that Ganache gave some fake ETH to. Cool. So this time we're going to actually initialize an object for sending transactions. So say little C compound equals new compound.
00:37:46.510 - 00:38:25.740, Speaker A: And this is pretty cool. You can actually pass the provider. So you could actually do like you do rotten, which would use the ethers JS backup JSON RPC provider. You do mainnet. You can actually do nothing if you want that'll, automatically choose main net and have no key initializing it. But, yeah, we're going to do JSON RPC with Ganache. And you can actually do some options here.
00:38:25.740 - 00:38:50.740, Speaker A: I'm going to pass my private key. You can also pass a mnemonic if you want. You could pass nothing. It's in the docs. I'll actually pull up the docs real quick for you. So if you go to Compound Finance docs, you can find the Compound JS docs. Here, this will show you how to initialize the SDK code snippets for every function.
00:38:50.740 - 00:39:56.306, Speaker A: That'll help you out. Anyway back to the code. So yeah, we have a compound object that can write transactions for this account. I'm going to do an iffy again async one. And this time we're going to do the delegate function on the governor contract so that has its own built in method in compound JS. So we're going to delegate from the first address to the second address. Let me go grab that from Ganache.
00:39:56.306 - 00:40:41.960, Speaker A: So this is the guy that's doing delegate and this is the guy that's receiving the vote. So yeah, that's the first parameter. Second parameter is call options. So you can think of these as ethers JS call options. I'm going to set a gas limit and of course we could do ethers util and this time was 600,000 way. That's probably safe. Yeah, okay.
00:40:41.960 - 00:41:38.220, Speaker A: Yeah, that's the whole function call. We'll do a call this res. We'll do the same thing we did later, wait for it to get mined and we'll wait for one confirmation and then after that we'll log the events. So when you do a delegate action, the governor contract will log who the delegate changed to. There's an event, I think it's a comp contract actually. So do console log and we'll do res events. So that way we'll see the events and if the event fired correctly, we'll know that the transaction worked.
00:41:38.220 - 00:42:29.882, Speaker A: So yeah, that I think, looks like it. Okay, I'm going to execute this. And we'll delegate from the first address to the second address that delegate. Okay, so we logged our transaction events and down here we can see an event fired that is called delegate, changed three parameters, which is three addresses, the delegator from delegate and then to delegate. So initially the account was not delegated to anyone. So it says zero. The first account delegated to the second account.
00:42:29.882 - 00:43:16.600, Speaker A: Yeah, that worked out correctly. So now if the first account gets some comp, the second account will be able to vote on its behalf. So of course you can actually delegate to yourself and vote on your own behalf if you'd like as well. So yeah, that's the third example. I'll go through one more code example. We'll go back to the browser and this time we'll show how to do the same thing delegating, except we'll do it for free. So if you have some users that you want to delegate to, you say you want to have some voting rights and you're trustworthy you can make your own page and say, hey, come delegate to me, I'll vote for you.
00:43:16.600 - 00:43:54.290, Speaker A: And you can have users create a signature for the delegate transaction and then they post that to your server using Http. And then you can use your own gas to post that on the blockchain so it's free for the user and the person who's receiving the votes can post on chain with their own gas. So that's. A way to get people involved and they don't have to spend any gas. So that could be appealing as well. So, yeah, well, let's make a new web page and do the same thing. Except we'll do it by signature.
00:43:54.290 - 00:44:35.150, Speaker A: This is one of the cool parts of developing compound JS. Was making an EIP seven one two module that is able to create these signatures for you with just like one line. Which is awesome because the examples on the internet right now are many lines and they're complicated and you have to know how to set it up. And doing it one line is better. Developers know one line better than a lot of lines. Okay, let's make a new HTML file. We'll call this one Gasless della gate.
00:44:35.150 - 00:45:23.762, Speaker A: I don't think gasless is a word, but should be all right. This one. Yeah, we're doing gasless delegation. So you just sign a transaction, send it over using something like Http. So let's do actually, you know what, I'll just copy the code from the other one pretty much the same. We'll call this delegate by signature. Great.
00:45:23.762 - 00:46:03.520, Speaker A: So we'll change up this label delegate two. And the input instead will be an address. And this button, instead of supplying, we're going to do delegate. We'll say delegate by signature. Got the SDK. And we'll change this up. We'll say address.
00:46:03.520 - 00:46:41.322, Speaker A: Call this address box delegate button. The delegate action. Same provider, same compound object. Call this instead. We'll do do delegate and do delegate address. Not a number anymore. Rid of that.
00:46:41.322 - 00:47:27.350, Speaker A: Let's do address box. And we're not sending a transaction this time. We're just calling a function that creates a signature call it sick. We'll do await compound, create dell signature and we'll pass the address. So yeah, that's the full line for creating an EIP seven one two signature with compound JS. Pretty cool. Let's log the signature.
00:47:27.350 - 00:48:13.800, Speaker A: I guess in reality you would do like an Http post request. Send this to your server where you would post it on chain for the user. So I'll just do a to do again, just do post this to by me web server. Okay, cool. And the last thing we'll do is when somebody clicks the delegate button, execute the do delegate function. Nice. All right, so this will create a signature and the user obviously sends it to the back end where somebody else posts it on chain for them.
00:48:13.800 - 00:48:46.962, Speaker A: All right, let's do the HTP server again. Already have that page up. Yeah. Okay, so go back to my server. Now we have the gasless delegate page here. Translate to welsh no. Okay, so who are we going to delegate to? Let's go crazy.
00:48:46.962 - 00:49:15.900, Speaker A: And delegate to the third address. Okay, third address down from the mnemonic, delegate by signature. So when we click that button, MetaMask is going to pop up and ask us to sign something with our private key. I got an error. It says nonsense. Okay, we got the same issue we did before. Got to reset my account again.
00:49:15.900 - 00:49:57.202, Speaker A: It refresh. Got an error again. Maybe my ganache CLI got stale. I'll reboot it. That again. Okay, hopefully it works this time. There we go.
00:49:57.202 - 00:50:41.430, Speaker A: Okay, so this is not a transaction. This is signing a transaction. So this is totally free, no gas. And here's our signature. So now the user has signed a transaction that another user can post on chain. So this obviously would be posted to the web server, and you can use the delegate by SIG function. So you would send those parameters, the VRS parts of the signature, into a different compound JS function when you're ready to use it.
00:50:41.430 - 00:51:05.306, Speaker A: So, yeah, those are my four compound JS demos. Of course. Again, that's a bounty in the hackathon. Yeah. So that's all of my code demos. I'm going to take questions now. See, we got Jacob and Andre.
00:51:05.306 - 00:51:21.140, Speaker A: No questions, though. Anybody have any questions you want to ask me about compound about compound JS, I'm happy to help. Seems like we're good.
00:51:23.590 - 00:51:24.994, Speaker B: You may have stunned them.
00:51:25.112 - 00:51:28.760, Speaker A: I've stunned them. You can find me in Discord. I'll answer your questions.
00:51:32.330 - 00:51:33.634, Speaker B: Question from Andre.
00:51:33.762 - 00:52:25.150, Speaker A: I see. Yes. Is this new EIP a standard for vote delegation? The EIP itself is for creating signatures. The compound contract happens to be using this EIP, but if you want to read more on it, it's EIP seven one two. There's lots of articles about it online, and you can also check out the source code I made a little module for it called EIP seven one two. So you could check out what I'm doing in the code here's. Sweet.
00:52:25.150 - 00:52:28.106, Speaker A: Cool.
00:52:28.228 - 00:52:31.940, Speaker B: Any other questions? Otherwise, we can look to wrap this up.
00:52:33.430 - 00:52:35.266, Speaker A: Yeah, let's wrap up.
00:52:35.448 - 00:52:54.490, Speaker B: Awesome. Great. Well, yeah, like Adam said, adam's going to be on the discord under the compound channel. So if you have any questions, feel free to reach them out there. Also, like I mentioned at the beginning and Adam talked about, there's a ton of prizes on the table, so take a look at that. You can just go to youthonline.org slash prizes and yeah.
00:52:54.560 - 00:52:54.890, Speaker A: Awesome.
00:52:54.960 - 00:53:00.666, Speaker B: Thank you so much, Adam, for walking through everything. And that was a great demo, very comprehensive. So I really appreciated that.
00:53:00.768 - 00:53:02.810, Speaker A: Thanks, everyone. Thanks, Jacob.
00:53:03.150 - 00:53:05.450, Speaker B: Yeah, catch you guys tomorrow.
00:53:06.270 - 00:53:07.030, Speaker A: Happy hacking.
