00:00:07.960 - 00:00:19.314, Speaker A: Hello everyone, and welcome to the LFGO Aave Labs workshop, improving UX of Defi applications. Joining us today is Yoni Helmuden, who will be taking us through this session. And with that, I'll pass it over to Yoni to get the session started.
00:00:21.094 - 00:00:35.994, Speaker B: Awesome. Thanks Rory, and hello everyone. I can see we got a bunch of participants already. I can't see your faces. I'm just seeing that my own screen, but yeah. Hi everybody. Nice to meet you.
00:00:35.994 - 00:01:06.614, Speaker B: So, just a quick intro. So, my name's Yoni, I'll be your design personal trainer for today. And yeah, I'm not really sure what kind of audience it is. I'm guessing hackers, devs, sort of various design experience. Maybe some, maybe none. So I thought I'll. So to give you some good tips, how to get started, kind of like a half an hour bootstrapping session for design, how to get going, or how to improve.
00:01:06.614 - 00:02:30.210, Speaker B: Yeah, in the past I've done a bunch of stuff in tech and ethereum pretty much since the early on, Aragon, Amazon finance, but now with the Aave fam or Avar, I should I say on aave our labs and lens, and you can find me on Twitter and lens on the handles there. Just ask me if any questions. If you want to show me some stuff you're building a category, feedback, just send me a DM. Well, happy to jump on call or chat. So today's session is, as I said, how to get started in design, how to get the basic chops, how to build something people want, is sort of a classic cliche, but it's very true when you think about design in a broader context, not just how things look or is it pretty, is it aesthetically pleasing? But I think designers design is such a powerful tool also for figuring out what people actually want, for testing, testing things out for, for, yeah, effectively understanding, empathizing with the users. So we'll talk a little bit about that, then some blockchain specific UX tips. So there's a lot of complexity in blockchains, some of that we can sweep under the carpet.
00:02:30.210 - 00:03:07.864, Speaker B: We'll talk a little bit about that, and just more generally, like how to make the blockchain complexity as easy as possible, especially for new users. And then last, sort of a hot tip is UI frameworks. I'm sure a lot of you are familiar with this, but we'll cover a few of these. So this can save you a lot of time when you get going, especially hackathon projects, but also for actual products. So there's a few of my favorite ones and pros and cons of using UI frameworks in general. And we've got some time in the end for Q and A as well. So yeah, any point you got any questions you can save for the end.
00:03:07.864 - 00:03:44.318, Speaker B: So how do you get started in design? The main things you'll need are sort of these three areas is one way to chop things up. I'm sure there's many, but this is something I put together for this talk. So the core craft is something you can't really get away from. You'll need to have these skills, and we'll talk about how to get better at all of these things. So Figma chops pretty much all the design that happens in Figma. There's some other tools still as well, but let's assume you'll be using Figma for this. Prototyping skills.
00:03:44.318 - 00:04:24.634, Speaker B: Doesn't really matter what tools you use could be infigma. Figma has got some really nice prototyping tools now, basic ones that I'll show you. You could prototype in code, you could use specific protein apps like principal and so on, but it doesn't really matter, whatever you're most familiar with. But you should prototype as quickly as possible, get in front of some eyeballs and get feedback as soon as possible. And then talk about a big community, how you can get involved. Design community and inspiration, where to find like nice designs to be inspired by. Actually, let's jump into, I've got slides for each of these, so we can talk about this in detail that way, rather than on this slide.
00:04:24.634 - 00:05:10.660, Speaker B: So jumping into the basic skills and inspiration. So design really at the core is pretty simple. Like you, you dealing with fairly basic things, which once you've mastered it, is not super quick because you'll sort of, you start from zero. Like it'll take you a while to, for your brain to start getting sensitive to your eyes and taste, to start getting sensitive for these things. But the main ingredients you're really cooking with our layout, hierarchy, typography and color. So those are the basics, I would say, to get started with. Of course, you've got flows, ux flows, sort of not just the visuals and static screens, but these are very, very important sort of core, core things to get familiar with.
00:05:10.660 - 00:05:50.914, Speaker B: And you'll be like, it doesn't matter how long you've been designing, always. So these are the things, the main big building blocks you'll deal with. Then you can add layer things on top of that. So of course the flows make sure that those are very smooth people find them easy to go through, but you can sort of delight with transitions, micro emulations and really reinforce the mental models of how the flows work with these things. And not many people are doing this yet. You see a lot of this in sort of native apps. But on the web, for some reason, even though tools are there, people don't really use this as much as they could not overuse it.
00:05:50.914 - 00:06:39.566, Speaker B: Like it is easy to go overboard with this stuff, but I've got some nice examples to show you how to test. Will use this to basically elevate the perceived quality, the polish and the delight. Like the users generally find these kind of small touches quite delightful. And then yeah, lastly the community, just to get inspired, remix stuff. So I would say the best way to get started really is to take existing designs. Maybe find a webpage you really like, try and recreate that in figma from scratch. Effectively you'll start to understand the decisions the designer of that app page put together, why they put certain type sizes in certain places, how many type sizes they're using, how do their, how does their pattern look, how does their hierarchy on the page look? Layout.
00:06:39.566 - 00:07:41.678, Speaker B: So I would just start with that effectively, just do, maybe start with four or five of your, the things that you most like, just recreate them. Like literally just draw them, design over them in Figma, and then you'll start to get an understanding for how to put things together. There's a lot of resources, you can take a screenshot of this, this will be recorded, but the resources I would guess used to get started would be. The Figma community is great. So there's a site for that just on the figma.com community where it's actually the closest you'll get to GitHub for a design where people post a lot of sort of files for you to just browse and use. They have different licenses on what you can do with them, but a lot of it is just, you can run with it, but sort of helps to as with open source, when you can see how exactly these things are made, how the fully structured, how everything works.
00:07:41.678 - 00:08:28.600, Speaker B: It's really helpful to see how this who more advanced than you are doing these things. Dribble is the old sort of favorite, but still nice for inspiration. I'd say again, when you get started, first thing you want to get inspired by something doesn't have to be even in the same domain, it could be up for something completely different. But just look at cool new stuff on dribble or even pinterest is a bit underrated but just immerse yourself. Arena is another good one. Immerse yourself in just sort of going through pages and pages of good design and then you'll pick up on ideas and it could be, as I said, a completely different domain, but it doesn't really matter. Most of the design is still very universal.
00:08:28.600 - 00:09:20.344, Speaker B: Design code is fantastic set of courses for. For designers and developers. So I've got a screenshot here just to make it more visual so that you can remember as well. So yeah, Designcode IO in no way affiliated, but this is great. Mengto and gang have done a great job on this for you to basically have a more handheld path in terms of learning and building stuff. So they've got courses for Figma, for react, for, for iOS, swift Ui, various things that sort of combine design and code together, which really is a superpower if you can do a bit of both. Typically people are stronger on one or the other, but if you can do both, even have a sensibility, it's really super power.
00:09:20.344 - 00:10:06.120, Speaker B: You'll be far ahead of most people. And this is just a screenshot of my community, so just type in whatever you want. Loads of Figma files will come up that you can just dive into. Some of them are paid, some of them are free, but you can find a lot of great stuff here as well to dive into. So yeah, that's the first part of getting inspired, learning the basic chops. Then I say one major thing that is maybe not obvious when people think of design is what it actually entails is a big part of design is perspective shift. So you really have to almost like see the world through somebody else's eyes, the eyes of the people who are going to use your app or site or wherever it may be.
00:10:06.120 - 00:10:39.076, Speaker B: So people, some people are better with this than others. And you can use user testing to help with this as well. We'll talk about that more. But you really need to not just think for yourself, like, or think what other people might want. You need to sort of deeply understand what their needs are and when they start using their prototype, like how they stumble and, and how they fail. So yeah, I'd say you'll have some intuitions, but you want to validate them pretty soon as well. Intuitions.
00:10:39.076 - 00:11:21.754, Speaker B: If you are kind of at the audience for your app yourself, you can use introspection, but I think it's still a good idea to test with users as soon as you can, and quite often as well. It's something that never really is finished, and talking to users never too early or never too late to talk to users and you might have a grand vision, but just keep poking holes. Ask your friends who are more grounded to poke holes at it. Ill helpful in a constructive way, not to bring you down, but to help you. Maybe a spot where the, where the holes might be. And then the last portion of this is the taste and polish. So taste is really, I think, really difficult to define.
00:11:21.754 - 00:12:01.098, Speaker B: It's something you just become more sensitive to certain things. Like, I guess if you're a chef, like, you're an amateur chef just cooking at home compared to like, somebody who works at a Michelin restaurant, they can probably taste every single ingredient, every single spice in, in the dish compared to sort of normal people. Same with musicians, I think, versus somebody who does listen to music. It sounds good, but you can't really tell why it sounds good or why it's good. It's just good. But once you sort of develop this sensitive sensibility, then you'll be able to pick point. And so it's sort of be more specific about why, why things are good, why things are bad.
00:12:01.098 - 00:12:56.144, Speaker B: You still also, like, be allergic to friction and things that don't work. A lot of, there's so many things in the world that are not very well designed, but people just get used to it and sort of take it for granted. But another thing I'd say is to always, like, if something, like, just be critical of, like, if it doesn't feel good, keep working on it, keep polishing it until, until it feels perfect or until there's no doubts about, you know, what's going to happen next. Or, you know, like if you have any doubts when you're using, when you're testing, you can be sure that your user is going to have those same doubts. Also, don't layer too many things in the designs at the same time. Something that happens a lot in the beginning, people just put a lot of things together, but the best designs tend to be fairly sparse. They have some things have a lot of space around them and then you can really elevate the things.
00:12:56.144 - 00:13:27.672, Speaker B: Again, the cooking analogy, I think is pretty good here. Good here. Yeah, just use the best ingredients, barely. And then, yeah, just keep, keep working. The sweat, the details part of this is super important. So, yeah, just keep reducing things again, like, you can start with a lot of things when you, typically, when you start design process, you'll just maybe put some mood boards together. In Figma, you start working on some, some initial ideas, but just keep chiseling it.
00:13:27.672 - 00:14:01.442, Speaker B: Like take away. Like if there's a lot of things, a lot of text just take away as much as you can until it's almost too much and then you can bring something back. But you really want to be sort of removing the cognitive load and friction. A lot of that is actually the design process. You may think it's just making things look nice, but it's taking away a lot of things. Family, I'd say our recent design friends who joined Vara are extremely good at this, so check out the family website for it. Inspiration.
00:14:01.442 - 00:14:43.984, Speaker B: And I've actually got a quick video of this just on sweating the details and something that Benji from family shared earlier. So this is some work that. Excellent work the family designers and developers have done. Just sort of onboarding floor to family wallet. But I thought it's really great in terms of the details and the motion works. So I'd want to share this with you guys. I don't know how that good frame rate is, but you can see how the transition from one state to another, it really sort of reinforces the mental model of where you're moving to where you're going, instead of just being sort of abrupt changes or just a normal slide.
00:14:43.984 - 00:15:07.014, Speaker B: And this is another sort of trick. I recommend. Use quicktime pro on your Mac or some kind of a screen or anything on your phone. If you see something really nice, just record it and go through it frame by frame or slow it down. You can see. Exactly. You can sort of reverse engineer how these transitions are done from one screen to another.
00:15:07.014 - 00:15:33.548, Speaker B: And then it can really help you try and understand them, how they work as well as they work. Because a lot of this transition work just happens in one or 2 seconds, and it's difficult to see a lot of the time. Family app is. Yeah, I don't work on this personally, but as far as I know, it's in swift. Uh, all of these native. Native is. So last thing, um, on this, um, the.
00:15:33.548 - 00:16:15.154, Speaker B: The sort of three main things is building something people want and this sort of cliche, a little bit of a cliche, but it's super important. And how. How do we sort of figure this out? Um, so how do you. How do you use design to help find your way to promark effect? So it turns out like, there's a lot of things in that sort of more UX research toolkit that you can use for this, but it's really about speed and then talking to users, I would say. So prototyping, getting stuff built, don't necessarily make it perfect. There's a balance between speed and quality, and I think on some type of products that bar for quality before you start sharing it. It depends on who you share with.
00:16:15.154 - 00:17:15.564, Speaker B: If you're friends, maybe they don't care so much, but before you start sharing publicly, then the bar quality can be higher. But you want to pick the prototyping tools you're the best in and the fastest in, I would say typically, whether that's in figma or just react or whatever, just run with that and then get feedback as soon as you can. As soon as you've got something that works, show it to your friends, share it on Twitter. Maybe see if you can put together some kind of one to one sessions on like getting people on Zoom for half an hour to walk them through it, because you want to see them, not just sort of comment on design Twitter. The comments tend to be like, it looks great or you know, more on the design of things, but as when you're testing things, you want people to actually use it and you want to see them use it. So like this kind of qualitative one to one interviews are really good for this. You can set this up, I'd say five or six usually gives you a pretty broad spectrum of different types of people using your prototype.
00:17:15.564 - 00:17:54.144, Speaker B: And that's usually enough, sort of half an hour to 1 hour calls with people. Or if you can do in person, that's great too. But yeah, Zoom works great for this. Then sort of surveys once you get to a bit further along. Surveys, unmoderated prototypes Maze is a tool for this where you can just put your figma prototypes on a link and then sort of set up tasks next to it and then people can reply, try and do the task in your figma prototype and write comments and stuff like this. It's nice to if you want to run research at scale for 100,000 people, and obviously you can't be on Zoom calls with all of them. So these type of tools are useful for that.
00:17:54.144 - 00:18:29.316, Speaker B: You can diy a lot of this stuff. I would recommend for user research maybe starting if you're able to, if you have budget or able to work with professional UX researcher I open UX is a new sort of web3 focused shop for that. We worked with them a couple of times. They're really good, but also others. I recommend this. You can do it for one or two sessions and you'll pretty much get the gist and you can do it yourself after that. User research does have limits.
00:18:29.316 - 00:18:45.006, Speaker B: The users won't design the product for you, but this will really help you uncover things. You don't see yourself. And we all are blessed to a lot of things when we work in something for a while. So it's super helpful. And then one last tip on this. Use testing. Just make it easy to use test as you're building it.
00:18:45.006 - 00:19:25.254, Speaker B: So this is a figma click through. That's the easy way to do a prototype you can put in front of people with maze. If it's a already built product on Testnet, make sure you've got the faucet in. It's easy for people to get the tokens and whatever they need to get going or, or even if it's just the fe front end flows, then just make sure that they can basically run through that without too many hoops or you're not going to get the sort of the feedback you want then some blockchain specific UX tips. So I've got a few for this. There's a lot actually. It could be in a whole talk, this one.
00:19:25.254 - 00:20:12.664, Speaker B: But there's a lot of complexity in blockchain, starting from the core protocol, like why do we have L2s and bridging to start off with? It's not something the users would want, so we'll kind of have to then hide away this complexity, like signing transactions, approvals, all this kind of stuff. Wallets in the first place. Just getting a wallet for somebody who's new to the space is already like a stumbling block. So thankfully there's better and better solutions for all of this stuff. If it's a consumer up your building, there's a lot of good embedded wallets you can use. Now, if it's not sort of super high value transactions. So consider those kind of things like hiding away the cross chain stuff on Ethereum specifically.
00:20:12.664 - 00:20:59.436, Speaker B: Maybe not so much in Solana, but Ethereum's got a lot of these issues with the liquidity all over the place, people needing to bridge from l two to l two. But again, there's starting to be pretty nice solutions, like with layer zero for cross chain swaps, where maybe that maybe you don't really need to. Depends on your application, of course. Like if it's a defi application for a specific thing, then these things are extremely important. But if it's like a consumer application like lens, maybe, and you're posting like Zora entities on lens, you don't probably want your users to have to bridge their ETH to Zora just to be able to mint like something that appears in the post in front of you. So this kind of cross chain swapping is really nice. And we're building this into lens.
00:20:59.436 - 00:21:56.864, Speaker B: But also any kind of more consumer application I think is a nice way to hide this L2 complexity and then of course you have again these things work for some things don't work for everything, but bundle transactions with account abstractions starting to be a thing gasless where effectively sponsor the gas if it's a low cost chain and this type of thing I think also it's combination of many things really really help. And then one last thing again, doesn't work for everything, but for non financial applications in particular it's great to reduce the perceived latency with optimistic UI in your uI. Just pretend that it's already happened. Even if it's mining in the background. You can have maybe some sort of a pending state, but don't block the UI, just let the user get on with their life. If it fails for some reason, most of the time it doesn't. But if it fails then you can at that point pop up toast and say let's try again, but don't make the users wait.
00:21:56.864 - 00:22:41.772, Speaker B: Okay, so some other things on this complexity topic we can breeze through this, but it's a good idea sometimes to start from mobile first, just because it forces you to think about what's absolutely essential and check the rest. If you got a large canvas on desktop, typically there's more space to add more stuff to it. And with this kind of concentrated mobile, even if your sort of target audience is on desktop, is sometimes useful exercise. And then also it's easier to usually start from mobile design. Go from desk, go to desktop, sort of load up rather than the other way around. Doesn't work so well. Okay, so let's look at some examples.
00:22:41.772 - 00:23:25.694, Speaker B: There's been a lot of text and a lot of talking. So it's practical examples. So this is a current UI of Aave, not designed by us, but sort of a good first step for switching tokens in particular. So this is functional, but there's quite a lot going on here. There's not very good hierarchy of things in here. When you sort of pick your assets that you want to swap from the drop downs quite small and there's things that could be improved. So yeah, for this particular example I just think it's easier to talk about specific examples.
00:23:25.694 - 00:24:08.584, Speaker B: Let's look at what we could improve here, for instance. So one is like focus, I think is is much better to start with little information by default. Just again, the essentials in this instance we've been blood background, but even just the sort of insights of the model here and then some better hierarchy effectively so you don't have a lot of things like a lot of strange gaps and like lots of different type sizes and so on. And then like the, I said drop down. I think it's nice to have a search in there. It's nice to see also the dollar value of these tokens. Just sort of basic things like that.
00:24:08.584 - 00:24:54.964, Speaker B: Nice to have it centered and not sort of cramped in the corner or small. And then maybe when you get to the sort of end of this more uniswap style token switcher, again think about what's absolutely essential to show. You can always show the extra things like on expanded view of this. Like these are probably the main things people want to see. And then if you want to see more stuff then you can show them rather than showing this up front because it looks quite scary. Like even though this is already reduced to minimum, like, it's not something people necessarily need to see up front. So it's better to hide things and like show more this type of ux patterns and then show like the extra stuff than just put everything on screen by default.
00:24:54.964 - 00:25:38.110, Speaker B: And just another example of how we could reimagine this, maybe from more first principles. A lot of time it is good to take existing patterns. Like we are very super familiar with this uniswap style swap widget, but there's probably other sort of paths for designing a simple widget with the same kind of stuff. So making again the things that you want to be big or focused on, very, very big. And then the other things can be a bit smaller. Cool. The last thing your libraries, I'm not gonna, since we're pretty close to the end, not gonna spend too much time on this, but effectively, yeah.
00:25:38.110 - 00:26:07.474, Speaker B: So you can save a lot of time with these things. If your aim is to go to get to market fast, you don't need to design this. Components build and react is all sort of built for you. This can be quite opinionated. Sometimes they introduce bloat to your code base, but a lot of the good ones are good and can be extendable. Sometimes it's a bit painful, but they are extendable. And out of box, of course is going to look generic like every other app with the same framework.
00:26:07.474 - 00:26:44.932, Speaker B: But you can theme most of these things. So I would say, just to wrap things up, I would say these are probably my top ones I would recommend for people. There's many other ones and this sort of just subjective, but you may be familiar with this, but if not, then check this out. Shardsians it's a great one from get the dev's name, but very good front end dev. Tailwind UI or catalyst, I think it's called now is great. Again, it's paid, but it is worth the money, in my opinion. If you're in the tailwind camp, Radix UI is great.
00:26:44.932 - 00:27:06.236, Speaker B: They also have headless versions of these components and then mus we currently use on Aave. It's a little bit more old school, but still pretty complete. So just sort of quick screenshots of this and we can start taking questions. Yeah. Cool. So we've got to the end. Any.
00:27:06.236 - 00:27:08.864, Speaker B: Any thoughts? Any questions?
00:27:09.504 - 00:27:14.324, Speaker A: There was one question early on at the beginning. Is too many animations bad?
00:27:16.064 - 00:27:40.910, Speaker B: Yeah, I'd say, again, it kind of comes down to taste like you don't want to distract people. Like, with animations. I would just say it's nice to have space because then it's kind of delight, like, instead of too much of a thing, and then it can get quite distracting as well. So I don't. This difficulty was too many. Like, you can. Like in an onboard journey, for instance, you could have a transition between, like we saw in the family example.
00:27:40.910 - 00:28:01.990, Speaker B: Like, there's a lot of transitions, but it's not like a circus that's going on. So it's just a matter of taste, I think. But, yeah, I'd say start with no animations and just add some to enhance rather than for effects. Cool. Any other questions?
00:28:02.022 - 00:28:22.094, Speaker A: And then, yeah, going closer, I guess, towards the bottom, there was a question, or I guess maybe. Yeah, a question. Don't you already see the one equals 25, oh, 225 in the inputs. Why duplicate it? This was, I think, when you were going through the few slides, the drop downs.
00:28:22.794 - 00:28:34.524, Speaker B: I see. I missed that one. Yeah. I think maybe that was just the sort of the minimum you're going to get. Maybe. Yeah. That design is still a work in progress, so.
00:28:34.524 - 00:28:46.544, Speaker B: Yeah, but I think that there's sort of pattern you see on uniswap as well. You want to see with the slippage sort of taken into account, what's the minimum you can expect? Because you can't tell a slippage ahead of time.
00:28:49.164 - 00:28:53.572, Speaker A: There was a question how to convert Figma design to code. Please don't get mad. I'm new.
00:28:53.748 - 00:29:15.206, Speaker B: Yeah. Yeah. That's a great question. Unfortunately, I wish there was some AI tool to magically do that. There isn't really. So, yeah, the other way around, it works pretty well. There's plugins that you can take an existing website, convert it to Figma layered Figma, but all the sort of automated tools I've seen from taking Figma into code, they don't really work that well.
00:29:15.206 - 00:29:49.034, Speaker B: So it's, I mean, otherwise I guess we wouldn't need front end generous too much. But maybe at some point AI will figure out. So far I haven't seen anything that's really that great and that's maybe sort of one sort of benefit for these UI libraries is because they're already built. So sometimes you have Figma versions of those. So you can sort of approach that flows in Figma quickly, but you don't have to build all the components from scratch, basically then your front end, so you'll save a lot of time that way.
00:29:51.614 - 00:29:55.034, Speaker A: And there was a question on what are your thoughts about scaffold ETH?
00:29:56.134 - 00:30:19.674, Speaker B: I haven't actually used scaffold. I saw it on our devguarding call yesterday. Yeah, I've had not personally used it, so yeah, I can't say, but the dev who was sharing the smart post, they had used scaffold it. They seem pretty impressed with it, so. Sounds like a good thing. Yeah. So Abbott uses mui.
00:30:19.674 - 00:30:29.594, Speaker B: Yeah, I don't know if we would stick with it if we were to redesign abet at this point. It is good, but yeah, there's also a lot of good competition these days.
00:30:32.254 - 00:31:13.318, Speaker A: I think that's the only question so far. So if anybody does have any questions, or if you think of questions after we end this call, please definitely reach out to the partners and the Discord channels and their partner channels. And if you haven't done so already, you know, connect your hacker dashboard to discord so you are able to access those specific partner channels. But yeah, if there are no other questions, then great. Thank you all for attending and thank you Yoni, for hosting this great session. Just a reminder, we have the opening ceremony and kickoff later today and then another team formation session and a few other workshops later today as well. This last question, do we need to have the teams finalized by today? No, you don't need those them finalized today.
00:31:13.318 - 00:31:33.304, Speaker A: You just need to make sure that uh, if there are people that haven't applied to lfgo yet, that they do so, uh, by today. Uh, but yeah, you can still, uh, you know, mess around with your teams for, you know, most, through most of the event. Um, but yeah, so awesome. Cheers. Thanks everybody. Have a great rest of your day. And thanks again.
00:31:33.304 - 00:31:35.384, Speaker A: Uh, yoni, thank you.
