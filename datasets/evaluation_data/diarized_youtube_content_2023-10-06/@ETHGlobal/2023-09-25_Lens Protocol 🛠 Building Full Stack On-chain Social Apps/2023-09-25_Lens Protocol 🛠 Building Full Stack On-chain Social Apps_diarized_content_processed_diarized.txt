00:00:07.930 - 00:00:57.486, Speaker A: We are ready to get started. I'm going to be going kind of quickly because we only have 20 minutes, so hopefully you'll still get a lot out of this. And I'm not going so fast as to kind of not explain some of the core concepts here, but I'm going to be talking about building full stack social applications today and we're going be combining a presentation at the beginning with an actual coding demo at the end. And the team that I work with is Ave and Lens Protocol and Lens Protocol specifically is what I'm going to be talking about today. I'm Natter, I've been a developer for about eleven years, worked in the traditional tech world and cloud and mobile, and then have now been in the blockchain world for a little over two years. If you want to get a reference to the resources we're covering here today, I'll give you a couple of minutes. If you want to scan this QR code, if you want a Lens handle, by the way, also come by the booth today.
00:00:57.486 - 00:01:25.378, Speaker A: We can get you set up with one. If you want some swag, come talk to us. We have a lot of swag there. We're trying to mainly get that swag to people that are building on Lens or Go. But if you come like maybe tomorrow and we still have some swag left and you're not yet building on Lenser, go and you can still pick some up. But if you are building on Lens or Go, definitely come speak to us. Okay, so I'm going to first introduce Lens.
00:01:25.378 - 00:02:18.886, Speaker A: So what is Lens? Speaking to developers here, I'm going to give a different description than what Lens is to a user. For a user you could kind of think of it as a social layer for Web Three or just really a composable social graph that allows you to take your identity and your followers across multiple applications and multiple experiences. But for developers, I could say it's more of like a protocol and a suite of tools and APIs for easily building social apps or integrating social features into existing apps. The way I like to kind of describe this, that might resonate with traditional software engineers. It's kind of like a managed service, offers features like Alt Zero or Okta, might offer authentication for you for your application. You don't have to build all that from scratch. You just tie into something like Clerk or Alt Zero and you're good to go.
00:02:18.886 - 00:02:48.674, Speaker A: You have things like S Three for file storage. You have even I don't know, there's all sorts of these managed services out there like Twilio for messaging. You could think of Lens Protocol as a managed service for building social applications or social features into existing apps. So you don't have to build or manage this back end infrastructure. It's all there for you. You just build out the front end, either a web or a mobile app and social is really interesting because it's kind of the biggest use case that there is in software today. I think 4.9
00:02:48.674 - 00:03:30.970, Speaker A: billion people are familiar with social. It's not like a lot of other blockchain technologies where there's a lot of onboarding and friction for people to have to understand why they would use this in the first place. It's just something that people are already knowing and understanding as well. And I think it's also interesting to see the two biggest social founders in the history of the world, mark Zuckerberg and Jack Dorsey, also moving into decentralized social. Jack with blue sky who then moved on with Nostra. And now you see Adam Masiri, who's the head of both Instagram and Threads, giving a talk at Ted last year talking about building decentralized social applications. And then one of his first posts on Threads is talking about how Threads is moving into a decentralized network.
00:03:30.970 - 00:04:14.542, Speaker A: And some of the language he's using here is Web Three language portable, social graphs, censorship, resistance are some of the themes here in one of his first posts. And I think it's really interesting and validating for anyone here that's been building in Web Three to kind of see that these ideas in practice actually do make a lot of sense. And I think when applied to social, it makes especially a lot of sense and hopefully you can see why by the end of this talk. So a social application doesn't necessarily mean an Instagram or a TikTok. It just means that you're implementing a feature that has some type of social functionality into your app. As developers, what are some applications that we might not think of as social, that are social? Well, GitHub is a very good example of this. I don't use GitHub only for storing code.
00:04:14.542 - 00:05:09.978, Speaker A: I use GitHub for discovery of new APIs and new applications and new software that the people I follow are building because I can follow a developer on GitHub. And now I have a feed of some of the most interesting things that are happening in the software space because the algorithm is giving me that information based on who I follow. So there's all types of ways that you can integrate social features into apps that don't necessarily have to be a social app in the front and forward, main selling point, and Lens basically allows you to do that. Lens is at the core a set of smart contracts deployed to polygon. But what really makes Lens powerful, I think, as a developer is more about how easy it is to build with. We have a lot of different things that you can use that kind of abstract away the traditional complexity of building on a blockchain. We have a GraphQL API that allows you to query it like you would a database.
00:05:09.978 - 00:06:15.154, Speaker A: So you can say, give me profiles that have been created, like for instance, at a certain point in time or that might have you might be able to search publications and sort and filter and all these things that you can do with the database. Our API allows you to do that. We also have a lot of interesting SDKs and developer tooling and things like that that allow you to build much quickly, more quickly than you would by calling just Raw API request that I'm going to show in just a moment as well. For UX, for the actual user facing things that we've built into the protocol that make it kind of more of a desirable place to build than just directly on chain is our gasless transactions and our dispatcher. Gasless transactions basically mean that the user doesn't have to pay for anything. So when a traditional blockchain application is launched and you want to get a user to use that, the onboarding flow is actually very bad. You have to explain to that person that they need to download this wallet and they need to create a private key.
00:06:15.154 - 00:07:07.134, Speaker A: They need to go to the bank and they need to open an account, and then they need to connect that account to an Exchange like Coinbase. Then they need to buy the right token. Then they need to send that right token to the wallet and be on the right network and then exchange for whatever token it is that works on, right? That's a shitload of friction, right? Users are very hard to come by already. And when you put all this additional friction, that's kind of a no brainer. While most blockchain applications don't have any users, if you think about building in the traditional Web Two world, people literally make onboarding seamless as clicking on a button to sign in with Google and they still can't get users. So I think that making this onboarding process as smooth as possible and not requiring all this is super important. So with Lens applications, the user doesn't need tokens, they just need a wallet.
00:07:07.134 - 00:08:03.286, Speaker A: And then they can start using the app for free. And the reason that it's free is because we've upgraded and improved our infrastructure that I'm going to talk about just a moment to make transactions super cheap on an order of magnitude of a traditional database, a couple of orders of magnitude, which makes it very inexpensive. I'll show you some numbers in just a moment. And then also our dispatcher at the API level allows you to just sign a single transaction saying I can post using this account without having to sign every other transaction going forward. So the end UX ends up being more of something like Twitter and I will try to kind of show an app in just a moment and then the developer experience is something that I'm going to show in just a moment as well. So one of the things that has been a challenge for building this type of application in Web Three is the scalability. If you look at a database like DynamoDB, I used to work at AWS for a little over three years.
00:08:03.286 - 00:08:55.158, Speaker A: We had applications that literally would be able to handle that did handle around 100 million operations per second for a single application. We have blockchains that are supposedly scalable, that can't even hit a few thousand transactions per second. And this is a shared environment. Like, not only that blockchain can only handle a few thousand TPS, but that is being distributed between every application ever launched to that blockchain and every single user on every single application that's launched to that blockchain. Clearly not a good use case for Social. And I think that we're starting to see a lot of improvement in this space with app chains and things like that that I think are going to be great. But even with that today, you cannot build using a traditional, what I would call a financial blockchain that has the limitations around fixing the double spin problem.
00:08:55.158 - 00:09:41.800, Speaker A: Which turns out in Social doesn't even matter because who cares if me and my friend post at the exact same time? The only thing that we care about is that that content is going to be there, it's going to be immutable, and it's going to be available for people to kind of use and be able to read publicly. So removing the constraint of the double spin problem allows you to use a protocol like Rweave. And Rweave is a protocol that's built specifically for data storage. And it's not built for financial use cases. It's more just built to store files and stuff. So our new infrastructure uses Rweave, and it's called Momoka. And at the last time that I checked, we had hit around 800,000 transactions for a total cost of $261.
00:09:41.800 - 00:10:29.846, Speaker A: I've paid $261 for a single ETH transaction during the bull market. So this is 786,000 times more scalable than that one transaction that I did. Obviously, that's not the typical cost. The typical cost for a transaction on a new L Two is probably closer to a few cents, but still, we are orders of magnitude cheaper than that, and therefore, it makes it easy for us to be able to subsidize all the transactions on the network at this cost. Now, in terms of developer experience, we have the GraphQL API that I talked about a moment ago, but we also have SDKs. So we have the Lens SDK, which is both a react hooks SDK and an agnostic JavaScript SDK. The react hooks SDK just allows you to call APIs with two lines of code.
00:10:29.846 - 00:11:01.470, Speaker A: The Lens client is a more agnostic JavaScript SDK that also allows you to kind of make requests with just a few lines of code. It sits above the lens. API So instead of having to understand and format GraphQL, you can just say, give me publications or Give me a profile. With this ID, two lines of code, you have that data back and ready to roll. Whoops. This is what the API looks like. So you just import the hook and then you render data loading and error, which kind of gets returned from you there.
00:11:01.470 - 00:11:25.254, Speaker A: And you also can pass in arguments for different props. Things like sorting and filtering and stuff like that. We have a UI kit for react native. You can get started with two lines of code as well. You can render a feed, you can render a publication, you can render a profile, all sorts of stuff. And then we have a widgets library. This is kind of an idea of what those widgets look like when you render those out.
00:11:25.254 - 00:12:11.362, Speaker A: You have a way to share profiles, we have a way to share content. You have a way to sign in with Lens using it more of like as an integration, which is what most of the time these widgets are used for. But it's also just a really simple way to kind of get started with Lens using just a couple of blondes of code. And then finally something that a lot of people have been building some of the most interesting stuff with is our BigQuery data set. So with our BigQuery data set, I think we have like 65 or 70 tables that allow you to literally query every piece of data in the history of Lens in a fairly short amount of time. And with this, people are building things like analytics dashboards and recommendation algorithms. And then we integrate really closely with Xmtp.
00:12:11.362 - 00:12:56.958, Speaker A: There's a Lens namespace that allow you to kind of integrate with every other Lens app. So if I send a DM on Orb and then someone else opens it on Butterfly and then you build a new app, you'll have all of those DM conversations integrated into your app without having to do much work. A couple of the core features of Lens that I think are super important to highlight that aren't really specific to Lens. It's more of like a Web Three thing. But I will just underscore them because they really shine with Lens. One of them is extensibility. So with Lens and especially with Lens V Two, which was just launched to testnet a couple of days ago, you can build your own custom functionality with custom modules and what we call Open Actions with these new features, or with that new feature Open Actions and with custom modules.
00:12:56.958 - 00:13:34.290, Speaker A: Basically it would be like if you could submit a pull request to Twitter and add a feature that you wanted. You can do that with Lens. So if you see something that you want that isn't already there, you can kind of integrate this. And this also opens the doors to a lot of cross chain stuff. So we're already starting to partner with some other protocols that are outside of the polygon network that allow you to interact and integrate with their applications and vice versa. And then there's this idea of composability. Composability is a big thing with smart contracts because anyone can just build on top of each other's contracts and you have all of this DeFi stuff that happened and there's all types of stuff you can do that.
00:13:34.290 - 00:14:24.818, Speaker A: But beyond that, I think it's important to underscore that the protocol itself is almost more of a managed infrastructure service like you would see with traditional cloud providers because not only do all of these things exist, they continue to be maintained and improved over time. And you as a developer only have to focus on the front end. So you can be a front end developer building web or mobile apps and not have to build and manage DevOps infrastructure, database, all this other stuff. And you also inherit the existing Lens user base so you don't have to kind of bootstrap and cold start are as bad as you would from a traditional application. You still have a little bit of a cold start problem because you have to get awareness of your app. But once people know about it, it's not like they have to sign up for a new profile. If they already have a Lens profile, they already have their followers on your application as well.
00:14:24.818 - 00:15:18.174, Speaker A: And one of the things that we're doing now that Lens V Two has been rolled out essentially is we're opening up Lens Protocol to be completely open for, I would say more of a permissionless access for new users. So as a closed beta it's been hard for people to get handles. They have to go through this process. But very soon we're going to have a way for developers to be able to onboard users directly through their applications without any involvement from the protocol at all. Composability for developers was spoken for there for users. It's interesting because for me as a user I have this portable social graph and I can focus on building my audience on one of these applications. But if I see a new application that launches tomorrow that I like a lot, I now have all of my followers there and I can experiment and try things out there without having to kind of worry about bootstrapping from scratch.
00:15:18.174 - 00:15:57.658, Speaker A: So lens tube or blaunches? And then I see this new app that is called Butterfly. Okay, this is pretty cool. Every time I sign into a new app, all of my followers are there and this is a really fun experience from the user perspective and I think a lot of creators kind of like that for the tech stack as a front end developer because you are not having to build the backend. This is kind of the tech stack. You might work with GraphQL and the Lens API, one of those SDKs that I just showed you, you still need to manage your metadata for a post. So when you publish some content to Lens you can choose where that needs to be stored. So you can either store on IPFS or Rweave.
00:15:57.658 - 00:16:21.800, Speaker A: We recommend bundler with Rweave. You can also integrate video streaming features with Live Peer. We see a lot of people doing that and you'll still be using some of the same SDKs that you've used in the past. Things like Rainbow Kit, wallet, Connect, Ethers Wagme and on the front end you can use any of the libraries that you've used in the past. Like next. JS react native. Whatever.
00:16:21.800 - 00:16:56.770, Speaker A: Okay, so tried to go through that kind of quickly so we could get to an actual demo. What I want to do is just show you how to build a social app in I don't know, 5 minutes I guess. So what we're going to start with is the Lens Docs. So if you want to get started, we have developer Quickstar right here. This is a great place to get started building out what we're about to build now. And this is actually the guide that I'm going to be following. What I have built out so far for this demonstration, for this demo is just a blank next JS application.
00:16:56.770 - 00:17:30.070, Speaker A: Literally nothing there. We're starting from scratch. And what I would like to duplicate is a experience similar to what we might see on Lens Tur, which is a Lens client or something like Twitter. And most social applications have two types of views. You have a feed of publications and you have a feed of people, right? Like if you think about almost every application that you've ever used, you have those two main components. You click on a profile, you see a feed of publications from that user. You click some type of recommendation algorithm, you see a feed of publications from random users.
00:17:30.070 - 00:18:04.790, Speaker A: You click on a user's profile and you want to see their followers. And you have now this feed of followers. So we're talking about feeds of publications and feeds of followers. We want to start our application from either one of those points. So for this demo, we're going to start with the feed of users. There's a couple of ways I can do that here in my code base. The first thing I'm going to do is just show you the widgets where I can maybe import a feed of publications from the widgets for React.
00:18:04.790 - 00:18:57.494, Speaker A: And I'm going to delete all this code and I'm going to drop in this pre made UI component, which, this isn't the main thing. We're going to actually use the regular SDK. But this is just a fun demo because I can just pass in a handle for like Christina who is here and I can just save that and I should be able to go here to my app and refresh. Oh, I need to use use clients for the new Next JS because it's really awesome like that. They just assumed everyone's building server side apps out anyway. So now we see a feed of Christina's publications and we got this done in just one line of code. This is very extensible as well.
00:18:57.494 - 00:20:30.304, Speaker A: So I can actually pass in a lot of different props to most of these components to do things like, let's say I want to theme it and I want to set the theme to Dark Theme. Now the Dark theme, there's about seven or eight different, I would say, types of UI components that we can build with that Widgets library. But what we actually want to have is more control. We just want the data itself and then we can build out the styling ourselves. So instead of using the widgets library, what I'm going to instead use is the React Lens SDK and I'm going to import Explorer profiles. And in our component here, I can just render the data from invoking the use Explorer profiles and I can log that out. Now if I go to inspect my element here, I see that I have an array of data that has come back with profiles that are given to us based on a very basic recommendation algorithm because we haven't passed any arguments to that.
00:20:30.304 - 00:21:21.660, Speaker A: It's just kind of given us the default. But you see that we have like a bio of a user. We have their handle, we have their profile picture, we have stats, we have all types of stuff about them. And I could even go here and I can pass in an argument that says limit like 30 or 40, whatever because right now we're only getting back ten. And then now we see once this is refreshed, that we have 30 profiles coming back. Okay, cool. So now that we have that, what I'm going to do is go to the Quickstar guide and I'm going to follow along and I want to essentially loop over those profiles and show the profile picture, maybe their bio, and then a link to the profile details.
00:21:21.660 - 00:22:32.074, Speaker A: So I'm just going to copy all of this code here and then we're going to walk through that. So instead of returning that, we're going to rename data to Profiles and then we're going to import Link from Next Link and we're basically mapping over the profiles array. For each profile, we're returning a profile picture, a profile handle, and a profile bio. And if I go ahead here and I refresh, we now have a pretty ugly but we at least have a working, functional social app that we have got started. So what I want to do next though, is if I go to Twitter or like Lenster, I can click on a profile and view their profile details. So I want to build out that feature in my app. So what I can do now is if you look at the link that I've created here, it links to a page called Profile.
00:22:32.074 - 00:23:27.410, Speaker A: Profile doesn't exist. So what we need to do is go here to create a new folder called Profile. And then in the Profile we're going to create a route called Handle. And then in Handle we can create a file called Page TSX. And with page with this page, I'm going to get the params from the route which are passed in as an argument. And we can now use that params that is essentially going to be profile ID or handle to fetch an individual profile. And instead of writing that from my own head, I'm going to go to the developer quickstart and continue there.
00:23:27.410 - 00:24:04.540, Speaker A: So the hooks that we're using here are going to be a little different. We have. Use profile. Use publications and profile. So I guess we need to call this profile component. The profile is for TypeScript typings, but these two are actual hooks that we're going to use because we need to first get the profile using the params handle. And then once we have that handle, we can get the publications for that user because what we want to render is this view here where we show their profile information but also their publications.
00:24:04.540 - 00:25:11.054, Speaker A: So the way that we're going to do that is we're going to create two components. One is going to be the profile component that I will actually just copy here. And the profile component is going to call Use Profile using the handle that's in the params. And it's going to return very similar to our other page where we have like the profile picture, the handle and the bio. And then we're going to create a new component called Publications that's going to invoke the Use publications, hook publications is rendered here if there is a profile. Once that profile is available, we're going to call Use Publications and this is going to return a limit we've set here of ten. And we're going to then map over the publications to render out the publication.
00:25:11.054 - 00:25:56.422, Speaker A: If it has an image, we'll render the image. If it's just text, we'll render the text. All right, chances are I broke something here, but we'll try this. So now what I should be able to do is just click on a profile and then we should be able to then view that profile and their profile information. That's the demo. What I want to do to close this out is make a quick post. Okay, cool.
00:25:56.422 - 00:26:34.500, Speaker A: So I'm going to go ahead and open Orb. The camera is not wait. Yeah, it is. There we go. Okay, so this is a lens app called Orb, and in it there is an ETH global New York community. So what I'm going to do is take a quick picture and post it here. It's not connected anymore, but I'll still do that.
00:26:34.500 - 00:27:13.260, Speaker A: Okay, so if you want to be in the picture, well, you don't have a choice. Cheese. Okay, so what I'm going to do then I guess I can just post it here and show it on Leinster. So I'm posting on Orb and we'll just also have this show up in the developer community, but also just in the public. All right. It just posted and I'm going to give it a couple of seconds and then refresh. And there we are.
00:27:13.260 - 00:27:52.790, Speaker A: That's the beauty of being able to kind of like have this social graph I can post on any application that I want and it'll probably be viewable on the application that you like the most. So to wrap it up I want to show a couple of links when we talk about the bounties we have $10,000 in lens bounties. We also have $10,000 in Ave go bounties or not we but the Ave Foundation does 4000 for best lens app, 2500 for most original lens app, 2500 for best social phi lens app and $500 times two for best integrations. Another view to the links and with that I'll wrap it up. Thank you for checking out the workshop.
