00:00:02.010 - 00:00:02.960, Speaker A: We are live.
00:00:04.370 - 00:00:26.070, Speaker B: Hey, everybody. Welcome to the scaling your DAP with Polygon workshop. Here we have Euling Ma from our sponsor Polygon and she's going to be running this workshop for you guys. If you guys have any questions, feel free to throw them in the chat. She'll try to get to them at the end of the presentation. You can go ahead and get started, Euling. Awesome.
00:00:26.220 - 00:00:58.874, Speaker A: Awesome. Thanks. Hi everyone. My name is Yuling Ma and I'm the integration lead at Polygon. So it's a privilege to be here with everyone at Hagfs. I know it's a super exciting once a year event, so I hope that you're having a great time. So just to start today's presentation for Skilling with Polygon, I would like to first talk about Polygon.
00:00:58.874 - 00:02:13.314, Speaker A: So then Polygon is the first well structured, easy to use platform for Ethereum skilling and infrastructure development. It was first funded in 2017 with the mission of making Ethereum infrastructure ready for mass adoption. So basically, it aims to tackle poor UX from pain points like high gas fees, slow speeds, network congestions, and doing so without sacrificing on security. With that said, we can quickly take a look at the current Polygon architecture that supports this scalability solution. And let's just come to this one. Currently, Polygon provides plasma solution and also the POS side chain solution. So then we call this as hybrid plasma POS side chain solutions.
00:02:13.314 - 00:03:42.290, Speaker A: Right? So basically it depends on the need of your specific project. You will be able to use either plasma or POS or the combination of those two with Plasma bridge, which is what Polygon first offers back in 2017 when it was still called as Maddox network. It's super secure, as many of you may have known, the security, it basically is piggybacked on Ethereum. So then just to secure the huge amount of asset, it's really nice to be able to use Plasma solution for the scaling. However, there's like a seven day challenging period that you would have to take when you are ready to exit your asset from Polygon chain back to Ethereum Minnet. Right? So then apparently this would not be an ideal solution for gaming or NFT or some of the DeFi solutions. And that's when Polygon evolved with another solution, which is the POS side chain.
00:03:42.290 - 00:06:00.538, Speaker A: So with that we basically have this three tier architecture that you see in this graph here, right? And then just on the very top part you see there's Ethereum Minnet and that's where the staking happens. And just in order to be a node provider or just to be a validate data for the Polygon chain. So then on the second layer you would have the checkpoints nodes, right? So then that's the validator layer in Polygon that we call as handle layer. So it's like for all the transactions that happen on Polygon side chain, which is what you see here, it's going to be packed together and it's going to be checkpointed to Ethereum Minnet through the Merkle Tree route. And then at any point of time, if there's anyone who challenges the validity of the transaction that happens on Polygon, it's able to do so through the checkpoint submitted to the Ethereum Minnet. So because of this, a lot of people would like to call Polygon as a commit chain instead of a side chain, right? Because the transaction finality actually takes place on Ethereum main net and then at this point the validators, we have up to 100 validators at this point and then the auction is going to take place to take new validators. And then just for this standalone board layer, this is block producer layer.
00:06:00.538 - 00:08:37.540, Speaker A: It basically just produces block at a very high speed and therefore not only it's able to provide scalability, but then together with the validator layer and the POS chain as well as the finality through Checkpoint Ethernet Minnet, it's able to provide a blazing fast speed and decentralized validate data layer and also it's able to provide very secured transactions. This is a quick overview about its architecture. And of course for transactions that takes place on Ethereum Minnet, stake sync mechanism is put in place to basically sync the state information between the Ethereum Minnet and the Polygon chain. With that said, let's just take a quick look at the current problem statement facing the skilling solutions, right? So then apparently there's no one size FISA skilling solution. So then with that said, just as an example that I shared about plasma chain and also the POS chain, we can see that different apps may have different requirements, right? So then just with the benefits from different skilling solutions, they may also come with restrictions as well, right? So then just from the plasma chain to the POS chain to the hybrid plasma POS chain, we're able to see that there's no size fits all skilling solution currently. But another thing that it's a positive thing, there's always new innovation in scaling that's taking place, right? So then just with that the old ones gets replaced by the more innovative ones. So now like people have been talking about optimistic roll up and ZK roll up.
00:08:37.540 - 00:10:59.680, Speaker A: So then all those basically would be nice that there's like a formalized framework that offer different solutions, right? Or just to be able to consolidate all those different solutions onto one platform or onto one framework. That way it can hand over the freedom back to the dev or to the project to be able to pick and choose which one will meet their need the best. And then of course there's so called Etheram killers that's constantly trying to take the resources away from Ethereum, right? And of course they also offer their own skilling solutions and then stuff like that. So then that is the current situation that we're facing in terms of then what is Polygon's solution to those problem statements? So then if we just take a look at the graph to the right here. So then you can see like in this graph we basically have Etheram as the main hub in the center and then we have different scaling solutions surrounded and which form polygon. So then here we see the POS plus another chains that's currently offered by polygon and then there's like standalone side chains just like our POS chain and then there's also secure chains, right? Like ZK roll up, optimistic roll up as well. And then there might be enterprise chain as well, right? So then those are all included in this polygon and then the interoperability is also offered through the connection to the Ming hub, right? And then they're also able to communicate or operate with one another.
00:10:59.680 - 00:12:59.670, Speaker A: So then just the ability to support all those different scaling solutions should that be a secure chain so called layer two aggregators, right? So basically the security would be provided by Ethereum main chain, right? Or the standalone chains like POS chain or side chain right, where they basically would provide their own validate data layer and then they would be able to secure their own transactions. So that either way it will be aggregated into this big polygon and then it will be offered with this single framework or platform. So then by doing this it turns Ethereum into a fully fledged multi chain system. And then we would like to call this as a Swiss army knife solution for Ethereum scaling and also infrastructure development because of this. And then the next the current power of polygon. So then currently there are over 500 DApps on board polygon platform and also with the current value locked, it's over $10 billion and we have 7 million plus daily transactions and 2 billion Maddox tokens sticked for security. So like the figures, of course they get updated very frequently and just to look at some attributes on polygon network.
00:12:59.670 - 00:16:18.646, Speaker A: So the current block time finality on main chain is 2 seconds and the average transaction cost here you can see it basically is just like a very tiny fraction of a cent, right? So it's like near zero and then it's an EVM compatible chain. And this is also why Dev loves polygon because all the tools that you're used to when you do development on Ethereum, you're able to use them on Polygon and there's no new skills are required for you to learn in order to have your devs migrate to polygon. So then it's just a very easy way for Devs to start using polygon and then save big on gas fee with high throughput of transactions just for the way that we actually do to deploy your smart contract on polygon. I will be demonstrating those in a moment. So then because of all those improvements like the skilling solution that it offers in terms of the block time finality and also the extremely low transaction cost, we're able to focus more on the high user experience, right? And also it actually makes a lot of sense for us to be able to provide meta transaction or gasless transaction services, right, just to make our like gas free for the end users to be able to use just because the transaction cost on Polygon is so low. And then we often say if you just have one matic token, which is the native token of Polygon, it's very much like Ethereum in the way that you use the matic token to pay for the gas fee for the transactions, right? So just with one single matic token, it's able to last you a long, long time and then you are able to do many deployments and thousands of transactions on Polygon. So then because of this, it's definitely more affordable, more practical for adapt on Polygon to be able to provide meta transaction just to cover the gas cost and then therefore to help with the major adoption of the DAP, of the DAP and of the blockchain apps in general, right? That's what we just talked about.
00:16:18.646 - 00:17:53.054, Speaker A: Why it's easy for developers there's no new skills are required to build up Polygon compared to Ethereum in terms of the dev tools or like the smart contract programming languages and the wallets and then stuff. So then we will go over that in a bit as well. Right? So then in the case that you already have a dev like on Ethereum, you basically just utilize Polygon as a high performance transaction layer. So then you can deposit your asset from Instagram to Polygon through its cross chain bridge, POS bridge or Plasma bridge. And then you can do transfer assets between different accounts on Polygon, save huge on gas fees, right? And then when you feel like taking out your asset from Polygon to Ethereum, you will be able to do so through the POS bridge and Plasma bridge as then those are different infrastructure structure toolings that currently you probably use with Ethereum. And those are all available for you to use the same way pretty much Polygon as well. And those are currently Polygon adoption.
00:17:53.054 - 00:18:42.580, Speaker A: So then we see huge list. If you just check out Awesomepolygon.com, you will be able to see a very impressive list of different WiFi, DApps, gaming, DApps, NFTs and also different tools that currently support Polygon. And the list just goes on. All right, so then before we come to Bonti's part, I would like to do a demonstration of how you would do deployments of your smart contract onto Polygon. But I wonder if there's any questions at this point. Let me just open this.
00:18:42.580 - 00:19:30.766, Speaker A: No questions yet. Okay. Yeah. Thank you. So then with that said, let's just quickly come to Polygon's Duck, which is Ducks Matic Network. Okay. You will be able to find a lot of detailed information here and then when you come to develop, you will be able to find all the network details here on this link, network details and just for Polygon for its main net as well as for its Mumbai testnet.
00:19:30.766 - 00:21:34.540, Speaker A: So then in order for you to first deploy a smart contract on polygon, of course you would need some gas token, right? So then you will be able to go to here and then just if we're to use MetaMask at this point. And then first you would like to define polygon, either it's testnet or it's Minnet here. So then the way that you do is just like the same way that you usually do to define a blockchain RPC, which is that in MetaMask you click on customer RPC at this point and then you just copy over all the information required here, right? So then you will be able to see them on this page. And then if you are to connect to the testnet, then you will be able to find this one here as well, right? So after you specify all those information and you click on Save and then there you will have this connection specified here through the RPC and all the other required information, right? So after you have this, make sure that you copy the account information in MetaMask that you would like to use to deploy your smart contract on polygon. And then you would come here to this site faucet matic network, right? So then at this point you want to select Matic token and we're doing the deployment on Mumbai testnet. And here you would paste your account address from MetaMask. And then you do submit, make sure all those information is correct.
00:21:34.540 - 00:22:42.154, Speaker A: And this is the matic token address for Polygon's gas token. So then you click on Confirm and your account in Maddox will be able to get 0.1 Maddox token. It doesn't seem to be a lot, but like I said, it's going to last you a long time. So then those two steps, right? So first we specify Polygon network in MetaMask, right? And then you get some testmatic tokens and now we're ready to do the deployment. So then the first one is with Remix, right? So then here I basically just have a very straightforward vanilla smart contract counter. And then at this point you would want to make sure that you select injected web3, right? And then with MetaMask make sure that you select polygon.
00:22:42.154 - 00:23:54.200, Speaker A: So then in this case I choose a testnet which you can see. This is a Ching ID for Polygon Testnet Mumbai. And after you choose injected web3 and then have the correct Ching ID here listed, you will be able to of course first compile your smart contract. And then once it passes, you will be able to deploy it exactly the same way as what you would do for Ethereum smart contract, right? So then you would confirm the deployment. And then here you will be able to see your newly deployed smart contract right here, right? So that if I'm to copy this smart contract address I will be able to see all its transactions in Polygon Explorer which is actually implemented by Ether Scan team. This is called polygonscan. So you access that through Polygonscan.com.
00:23:54.200 - 00:26:22.066, Speaker A: But then since we use Mumbai testnet, so you want to append Mumbai in front of Polygonscan.com. And then there once you just paste to your smart contract address, then you will be able to see that we basically just created this contract, right? So then this is like 46 seconds ago. And then if we were to do some very simple interaction with our smart contract, in this case in remix, it's very straightforward, you basically do count, which is the read transaction and then you can do increment which is going to be a write transaction, right? So then it's going to ask you to confirm and then once that one is done and then you do count, you'll see that there is a change, right? But then you can also again just to refresh this and then you will be able to see that there's a new transaction that just came in which is the increment, right? Okay, so then that is very straightforward way to do the deployment on remix. So what you do with Truffle as you deploy that, it's actually just the same. So then just here we basically just have a very straightforward smart contract that we call tutorial token, right? So then here you can see that it basically just extends open Zeppelin's ERC 20 smart contract, right? Again it's the same as you would do deployment with Truffle is that you create an entry for the network in the Truffle config file. So then you will be able to get all those information on Polygon's Duck if you just come here and you will be able to see deploying Matic, right? That's the previous name for Polygon. And then here you will be able to see all the different steps for deployment on Truffle or on Hardhead.
00:26:22.066 - 00:28:01.314, Speaker A: And then you can just copy over this specific entry for Matic and once you paste it in your Truffle config file here, you're good to go. And then here I basically just applied for a free dedicated RPC Uri here just for smoother transaction experience. So then feel free to do that as well or otherwise you will just be able to use what we have for a common public RPC as here, right? And of course you will be able to find all these information from the network details here. Those are the public RPCs that are available, right? So then once you have all those information then you would be able to just do Truffle migrate network Polygon or if you call this Maddox, it works as well, it's just a name and then reset and then it's good to go. So then now it's going to use Truffle to compile and to do the deployment. As you can see that the way that we do deployment on Polygon is very straightforward. Right? So then this is like when you just want to do direct deployment to Polygon.
00:28:01.314 - 00:29:46.262, Speaker A: So what if you already have a DAP, as what we mentioned just now? Right? So then what you can do is that you can basically map your token contract, I would say just for like ERC, 27, 20, 111, 55, those are all currently supported. Or just to map your arbitrary smart contract through the Mapper tool that we provide on Polygon. That's how Polygon is able to know the mapping to the smart contract on the parent chain, which is ethernet chain. Once the mapping is done and then the link is going to be established between the child contract and the parent contract and then you are able to use the SDK that we provide on Polygon just to do a very straightforward interaction with your smart contract. Of course, the web3 JS and Ether JS work just as well. But then with Matic JS SDK provided on Polygon, you are able to have a lot of heavy liftings taken care of for you and you can just call very simple APIs for the cross chain transaction interactions for the cross chain transactions between the main nets of Ethereum and Polygon main net. So then this information again is available here.
00:29:46.262 - 00:30:10.800, Speaker A: Right? All right, I basically covered how you would do with deployment on Polygon and also how you would do with cross chain transactions. Right. And I just want to quickly check, do we still have time?
00:30:12.530 - 00:30:21.460, Speaker B: We're actually out of our scheduled time, but if you have something that can be covered in about like five minutes, then we can go a little bit over.
00:30:21.830 - 00:31:08.610, Speaker A: Awesome, thanks a lot. Okay, so then I'll try to wrap this up in five minutes. There are just a lot of amazing things that we offer on Polygon. So then just feel free to check out the docs. Basically at this point we covered how to connect to the RPC, connect your tool like MetaMask with Polygon and how you would switch to Polygon. And also there's a network agnostic feature that we offer here in Polygon which is I can just demonstrate that very quickly. It's NFT today.
00:31:08.610 - 00:32:20.234, Speaker A: This one is actually for the testnet. It basically is a tool that we provide to the community to be able to mint NFT tokens free. So then this one not only it demonstrates meta transaction that we support on Polygon which we use Biconomy. And of course you can also just use other meta transaction framework that, you know just to support this gasless user experience here. And also it utilizes FPFS for storing and then with that said, I'll just quickly demonstrate this. So just okay, so then here you're able to see that file is being uploaded to IPFS. And actually I think it would be nice for me to actually switch to a different network here.
00:32:20.234 - 00:33:09.320, Speaker A: This may not be the best account. Okay, so then I'm going to use this account because with this account you can see that I have no guest token in here. And then we're actually connected to Colon testnet. So then just with this one and also let's just do title. And then of course I need to connect wallet just to connect this button here. And this is connected as you can see. I think we may have to refresh this page because seems like it's connecting to the previous account then.
00:33:09.320 - 00:34:15.502, Speaker A: So files being uploaded to IPFS and then we can just click on Mint, right? And then we see that JSON metadata is being uploaded to IPFS as well. And then again, this one is actually connected to Polygon testnet Mumbai and then you will be able to test it on your own. And we also have Mint NFT that's connected to the main net I think. Is that network? No. Okay. It's just today. So then first you want to connect to your wallet and then here switching back, we see that NFT is already Minted at this point.
00:34:15.502 - 00:35:01.866, Speaker A: And then if you click on the transaction hash, you will be able to see the NFT token information here. Right? So then we have this token ID and there you go. All right, so then this is information that we are covering today. And there's actually also network agnostic transaction provided as well. Crosschain asset transfer. We briefly touched it that you can do deposit and withdraw. So then with that said, I would like to quickly come to Bounties that are currently offered by Polygon.
00:35:01.866 - 00:35:17.920, Speaker A: So then feel free to check that out and if you have any questions, please feel free to reach out to Polygon team on Discord. And just happy hacking here.
00:35:19.410 - 00:35:34.450, Speaker B: Thank you so much Healing, for running this workshop. And thank you, polygon, for sponsoring Hack FS two. Just like what Yuling said, reach out to them on the sponsored Polygon channel on Discord and yeah, have a great day everybody. Bye.
