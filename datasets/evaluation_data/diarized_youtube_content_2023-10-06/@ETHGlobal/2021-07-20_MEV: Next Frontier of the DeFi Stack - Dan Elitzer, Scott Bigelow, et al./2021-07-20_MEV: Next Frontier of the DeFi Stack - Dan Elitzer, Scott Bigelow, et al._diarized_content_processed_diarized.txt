00:00:00.410 - 00:00:01.120, Speaker A: All right.
00:00:03.410 - 00:00:26.630, Speaker B: Thank you, Tom, for this panel. And we're now down to our last panel of the day, moderated by Dan. I guess I'll stop sharing my screen so that we can see all your faces. Guys, I was just showing the questions real quick. Dan, I'll let you take the stage. All right, thanks. Thanks for having us.
00:00:26.630 - 00:01:20.840, Speaker B: This has been an incredible day of talks, and I feel like we're very privileged to get to wrap this up and really focus on impacts for protocol developers and for users of those. So thanks. I know the schedule said we were having somebody from wanting to join us, and I don't think we are. And so we've got Benji Richards from Future Swap is added to the agenda. And so welcome Benji joseph Scott and your own so actually, Joseph maybe you want to take the first shot at know we've had a lot of quantitative approaches to mev today and trying to quantify how much mev it is how bad it is from what you've seen interacting with the Sushi swap community. How much of a problem do you view mev as today? For the users and potentially for the development team as well.
00:01:26.650 - 00:01:52.254, Speaker C: Basically every trade that's like five digits or more is, in USD terms, right in the tens of thousands of dollars is getting sandwich attacked. If your slippage bounds are not tight enough or if there's like, a profitable sandwich attack there, do you assess that.
00:01:52.292 - 00:01:55.454, Speaker B: Users are aware of this, or is it just kind of, like, happening?
00:01:55.652 - 00:02:46.510, Speaker C: No, I just talked to somebody just the other day who's, like, a large trader. They're trading in seven and eight figures, and they said they went back and once somebody had showed them kind of like a site that would highlight mev that had happened to them, just selected by their wallet, and they said, every single trade I've made this year has been hit with mev. It's like, damn. Yeah. But I'd say quantity wise, capital wise, it's bad, but I'd say quantity wise, most users aren't trading in that range or they're trading in ranges that are just unprofitable for me. If we're not having a gas crisis.
00:02:48.950 - 00:03:08.940, Speaker B: That makes sense. Scott, you've had a pretty broad view across the Ethereum ecosystem, and you've been part of the flashbox community since the beginning. Does that sound similar to what you're seeing across other projects of, like it's just a fact. It's there people don't really think about it that much, but it's just ever present.
00:03:10.030 - 00:03:31.502, Speaker A: Yeah. I think that slippage has started to become instead of an amount that you'd be willing to accept, I've seen some users start to recognize that this is the amount that I will be accepting. And if that isn't the case, it's like, it was your lucky day. And so I think that with this.
00:03:31.556 - 00:03:32.160, Speaker B: Change.
00:03:35.030 - 00:03:58.410, Speaker A: There are some users who are more aware of just how much that they are leaking here and trying to set their own slippages tighter and work with protocols that maybe don't have slippage in them, such as these RFQs. And I think that there is been some awareness there, but I think we could do a better job of promoting this information, especially from the wallet.
00:04:00.190 - 00:04:28.238, Speaker B: That makes sense. So while users, it seems like they're accepting it just because they have to from the protocol developer side, I'm curious, how much is this coming up in conversations within your teams or talking to developers and other teams? Is this something people are designing around or just it's there and we have to deal with it or if it's going to get solved, it's going to get solved at the protocol layer.
00:04:28.414 - 00:04:45.494, Speaker A: Yeah, it's kind of fun in this way because Flashbots has both kind of created the crisis, but then it also has the Band Aid, which is well, just privately relay your transactions. So it's a bit of two sides of the same coin here. I do think that relying exclusively on.
00:04:45.532 - 00:04:47.206, Speaker B: Private relay is a little bit of.
00:04:47.228 - 00:05:07.946, Speaker A: A Band Aid to get us through, I think, what's going to be some real fundamental changes in protocols and UX that are going to, I think, ultimately mitigate this to a level that I think that users will find more acceptable. Mostly it's projects that come around and say like, hey, we want a private.
00:05:07.978 - 00:05:33.830, Speaker B: Relay because we actually haven't solved this problem. So also sorry, Luciano is here, just not on video from Urine. Luciano, I'm curious, within the Urine developer community, as you're looking at different vault strategies and different pieces here, how much does mev factor into discussions for what you do and don't do or how you implement?
00:05:35.290 - 00:06:38.842, Speaker D: Hey guys, MEB is actually a big part of what I develop for these days or this past month, I think. So for strategies and for strategies, sorry. And for most protocols or forks that usually use the same kind of code base as we do, kind of the most critical part is the kind of the harvest method. So whenever the strategy kind of claims the rewards and also blindly swaps them. So we usually have 100% slippage tolerance on those methods. So they are extremely juicy and extremely tolerable and sandwichable by whoever, basically. But the thing is, we haven't seen any attacks at least on Wyorn until a month ago, whenever this first happened right there.
00:06:38.842 - 00:07:32.830, Speaker D: So we were using Keeper network jobs to do that. So a Keeper got sanguished and we lost, I think around nine k on a trade. So we stopped all the jobs and we've been doing kind of this harvest manually through Tai Chi and we've been as well developing a lot of contracts to kind of force or incentivize keepers that are like the bots running the jobs to use either Flashwatch or a private mempool. So it's kind of been a pain in the ass to having to deal with mev, but we already kind of knew that it was going to happen. We're just like waiting and hoping to have a bit more days to able to develop. But also it helps us grow in a more robust and kind of reliable solution.
00:07:33.650 - 00:07:47.730, Speaker B: So when you're using these relays that keeper networks, is that just kind of like a standardized repeatable solution you can just apply across most situations or do you have to do a lot of tuning for specific implementations?
00:07:48.710 - 00:08:48.930, Speaker D: No, yeah, it actually is kind of a generic solution we come up with. So we have a set of contracts called the stealth bout and the stealth relayer that let's say they have a few checks both for only EOA transactions or accounts and for kind of a slashing mechanism that it will happen if the transaction gets either publicly available or there's another issue or collision with EVB. So the keeper will get slashed and the protocol can at least get some refund out of it if the penalty is high enough. But yeah, the thing we develop obviously is right now we are starting to test this. I think we deployed yesterday actually on wiren but then when it's kind of battle tested, at least for us, anyone can use this. So we hope it helps a little bit on the ecosystem.
00:08:49.290 - 00:09:03.480, Speaker B: So this will be something that anybody in the ecosystem can just start using this once you guys have got it to a place where you feel good about it. Sorry, go ahead.
00:09:03.950 - 00:09:52.060, Speaker D: Yeah, obviously it has a little bit of gas cost for the user, but let's say like for example for us, the keepers running jobs on keeper network usually kind of have an implicit cost for reverted transactions since they are always racing each other. The first one that gets the job done is the one that gets paid all the other transactions if they don't get canceled or even if they get canceled, incurring a cost of the cancellation of the cancel of a transaction. So by forcing them to use flashboards, we are actually making them save money so we can also lower the cost of the jobs that we work. So this is kind of a good win win situation for both of us.
00:09:53.310 - 00:10:16.180, Speaker B: That does sound pretty good. Sounds like you guys have got some good solutions there. We've heard that it sounds like generally people are accepting this. It's kind of like an ever present thing. Are there any features or things that any of you have looked at implementing and then discarded and just said we can't do that because just the mev problems are too great?
00:10:19.590 - 00:11:00.846, Speaker D: Not sure. Our problem is a pretty small one and it's pretty easy to tackle. So our vulnerable method, quote unquote is not like user facing. So the end users are not the ones that are kind of taking the slippage. So it's easy for us kind of to mask or to move this vulnerable swap into more protected systems. But in the case of a Dex or a CDP where you need this to be publicly available, it gets more complicated. And we didn't even thought about a solution for those kind of issues.
00:11:01.028 - 00:11:13.220, Speaker B: It seems like maybe it'd be more relevant to the Sushi or Future Swap projects because you guys do a lot of trading. Have there been anything you guys have tried to do where you're just like can't do it? Mev is going to be too much of a problem.
00:11:14.390 - 00:11:48.160, Speaker C: Yeah, right. Like our harvester, we take all our fees and LPs and then we have to unwrap and harvest those and we have a service that helps us with vulnerabilities and about once a week we have a vulnerability. Reporter it's like people can sandwich attack when they press the harvest methods. Right? It's just something that we have to deal with or we either have to privatize that and put tighter bounds on it.
00:11:50.370 - 00:12:12.680, Speaker E: Yeah, I know. At Future Swap we were looking for our V three to use polygon and essentially the miners or I guess stakers can trigger block reorbs in certain situations. So you would actually have like a two and a half minute window to go back and insert one of your transactions. And that's definitely something where we had to scrap our plans and kind of go back to the drawing board and rework that.
00:12:14.010 - 00:12:20.714, Speaker B: And so you guys were going to launch on Polygon didn't because of that, what are you doing instead?
00:12:20.912 - 00:12:35.840, Speaker E: Yeah, so we're launching on Arbitrum. We've been chatting with the team and essentially their sequencer solves that problem. It's a trusted entity where you're trusting Arbitrum right now to run that. So it's essentially you're trusting them not to wreck their brand name.
00:12:37.650 - 00:13:16.140, Speaker B: Okay, so I don't know if everyone was online earlier for Tom Schmidt's talk about kind of protocol approaches to mev or sorry, I guess more application level approaches to mev. So one of the things that he mentioned was ways to internalize some of that mev into the protocol itself. Is that something that any of you have explored as a potential solution? Or if not, are there other things you've looked at to kind of turn this on its head rather than just being like we'll try to minimize it but it is what it is.
00:13:18.590 - 00:14:11.870, Speaker C: For us. We have looked into that. The issue that we come around with is to solve mev. Every single solution relies on Asynchronous and we just have this lovely synchronous composable network right now. And introduction of Asynchrony is problematic for if you're an application that you want other people to compose with you. So it's like where do you put the Asynchrony? Do you put it in the protocol level? Do you put it in pre consensus like with Flashbots? Do you put it at the L one? Because there are great solutions if the assumption is that what is fair is natural ordering, right? Like first derived, first executed. There are good solutions out there, like threshold signatures, et cetera, that work, but it's just like, are we going to remain synchronous, I think is the real question.
00:14:11.870 - 00:14:15.200, Speaker C: And we're probably going to have to give it up in e two anyway.
00:14:19.090 - 00:14:21.518, Speaker B: Anyone else have thoughts on that?
00:14:21.684 - 00:14:51.450, Speaker A: Some of the designs that I've heard floated around, revolve around, trying to get the number of participants that can extract this mev very low, sometimes even down to one. One of the proposals was to have some sort of a token that has a supply of one that if you are the owner of this token, you are the exclusive executor of any of these MEB operations. But you need to pay to hold onto this token and that payment can go to the project operators, usually via some sort of like a harbinger.
00:14:53.070 - 00:14:53.674, Speaker B: Exactly.
00:14:53.792 - 00:14:57.322, Speaker A: This came from Austin Williams. I think you right.
00:14:57.456 - 00:14:58.140, Speaker B: Yeah.
00:15:00.770 - 00:15:01.774, Speaker A: It did.
00:15:01.972 - 00:15:02.286, Speaker D: Yeah.
00:15:02.308 - 00:15:18.530, Speaker A: So I think that's probably one of the solutions that I think of the most when I try to find a way to reduce that contention around who's competing and who's sharing so much that profit with the miners.
00:15:21.350 - 00:15:22.100, Speaker E: Cool.
00:15:23.590 - 00:16:06.290, Speaker B: So when we think about different places where you can potentially have solutions, we talked about things you do potentially at the protocol level, at the DeFi application level, but how about at the DAP level? This is one thing that I've thought about when I'm getting sandwiched on the Daily. Is this something that the wallet should handle for me or is this something that the web app should have some solution and approach for this? Do you guys have any strong opinions on where some of this responsibility most easily sits?
00:16:09.190 - 00:16:36.300, Speaker E: I think the easiest one would be the application, as Joseph mentioned, just having really tight bounds. For example, future swap. We have an adjustable bound, but I think the limit is defaults to 0.1, which is relatively small, 0.1%. So applications can definitely do that. But beyond that, it would be amazing if Wallets started doing that. But pretty much any problem, everyone's always like MetaMask should do this for the users, and I'm sure the hands are very full.
00:16:41.630 - 00:16:42.620, Speaker B: Go ahead.
00:16:43.150 - 00:17:18.760, Speaker A: I was going to add to that. One of the things that I've always felt that Wallets should participate more in is updating your slippage as blocks progress. I think that the UX around signing a transaction is so burdensome that people choose much larger slippage limits that are necessary because they don't know if a transaction is going to land in three or seven blocks. Where if your wallet and DAP could work together to keep your slippage really tight. Based on the current situation, as opposed to just firing once and hoping it lands in a couple of blocks, I think you could prevent that single block mev from growing, especially when prices move kind of in your favor.
00:17:21.630 - 00:17:28.570, Speaker B: That feels like significant complexity to add. Yeah, absolutely.
00:17:28.640 - 00:17:38.590, Speaker A: No, it's definitely not simple I think it's really sad that I'm going to ship this with 2% slippage because I don't know what's going to happen because I'm not a computer that can react.
00:17:42.370 - 00:18:49.158, Speaker C: I have some thoughts around this with Mev. Do we think that Mev is like a tax that we're willing to pay? Right. This all comes from just like, pre consensus, right? This idea that I can't validate that a message arrived, this is all included in the Byzantine general's paper. I can't validate when a message arrived. And so a lot of our network just relies on this pre consensus, kind of like whisper and gossip altruistic network. And our public mem pool is going to suffer pretty soon if we start kind of going down this road of like, okay, well, I don't want to get robbed, so I'm going to be blackmailed more regularly. Right.
00:18:49.158 - 00:18:51.320, Speaker C: It just doesn't make sense to me yet.
00:18:54.050 - 00:20:18.810, Speaker B: Yeah, it feels like we need some I know that when I am doing certain trades that I know are likely to get sandwiched, I just flip over to Tai Chi and MetaMask, and that's like the easiest solution for me. But it feels dirty. Like, why am I sending it just to one mining pool that doesn't feel like the decentralized future we were promised? Well, so one of the more extreme things that we talked about here and Joseph, you actually addressed this a little bit in one of your earlier answers is the idea of where composability becomes a trade off. Here one thing that I've seen, at least discussed more, and I think we're starting to see outside of the ethereum ecosystem a bit is the idea of application specific chains where you can have more, I guess, fine tuned trade offs to your own application and potentially manage fair ordering in some way. But the trade off is you lose a lot of composability. Is that an approach that you think will become more common or necessary? Or what would it take for the extent that you're working with a protocol, what would it take to get you to say, okay, yeah, we need to go and do this just to create a better experience for our users?
00:20:19.950 - 00:21:03.542, Speaker C: I think it will become more common. I think part of the reasoning is people in search of a solution to MAV, but it's not really a good solution, in my opinion. To say that you're going to do fair ordering is like, okay, well, I hope, right, you're going to pinky promise each of your nodes that you're going to do fair ordering of the transactions. That's what optimism is saying. They're saying, oh, we're going to do natural ordering of the transactions. Okay, how long does that last? Right? When you move to these application specific chains, you don't really have any control. Well, you can say that you're going to do it a specific way, and you may or may not.
00:21:03.542 - 00:21:09.030, Speaker C: That's not what we rely on. We rely on programmatic guarantees.
00:21:09.930 - 00:21:15.014, Speaker B: Well, but do we need to rely on programmatic guarantees or can we think more kind of like economic guarantees?
00:21:15.062 - 00:21:20.800, Speaker C: Like, I always go back to crypto economic guarantees. Yeah, sure.
00:21:22.370 - 00:21:30.746, Speaker B: Even some softer ones. Right? Like thinking to say like the Auger Security model, right. Using rep as what you're bonding rather than just bonding ETH.
00:21:30.778 - 00:21:31.118, Speaker E: Right.
00:21:31.204 - 00:21:59.660, Speaker B: You can cheat it, but if you cheat it, you're going to destroy the value and something that you've been holding. It's more of a problem rather than using a completely separate platform asset as the thing that you're putting at stake. So by moving it to a single application chain, if you've got a native governance token and you're putting that at stake, it kind of aligns interest more for you to play fair. Because if you try to cheat there, people are going to stop using the application and you've cost yourself all of your future cash flows as well.
00:22:00.590 - 00:22:01.340, Speaker E: Yeah.
00:22:05.870 - 00:22:31.790, Speaker C: Threshold signatures so far to me seems like the best solution. Flash bots are probably like the second best solution as like a patch. But I definitely think the solution has to come at the protocol level and I don't think starting a new chain for a specific application is going to alleviate that at all. But they will be very popular, no doubt, because people think it's a pretty light undertaking, but it definitely isn't.
00:22:31.950 - 00:22:35.460, Speaker E: You could almost consider that is like what Duidx did with.
00:22:37.670 - 00:23:02.974, Speaker B: Yeah, effectively. Yeah. So I know Benji. That future swap. When you guys did your Alpha launch a while back, one of the reasons that you guys ended it early was realizing that there were some meaningful mev problems related to doing Oracles on l One, especially once you've added on a significant amount of leverage. Can you share a little bit more.
00:23:03.012 - 00:23:03.600, Speaker E: About.
00:23:05.410 - 00:23:10.154, Speaker B: What that looked like and how you may have tried to address that in future versions?
00:23:10.282 - 00:23:33.698, Speaker E: Yeah, definitely. So we launched Future Swap V One, when mev really wasn't a common term. This was like April 2020 and essentially what you saw was exactly what everyone now knows. Mev is front running and back running. We had the front running handled of at least the Oracles, but the back running was definitely a problem. So we went back to the drawing board and no l Two was even close to ready. This was last summer.
00:23:33.698 - 00:24:15.350, Speaker E: And a solution that we came up with was, what if we have somewhat trusted entities, these off chain Oracles that are in charge of sequencing the transactions. So the user would actually sign the transaction and then it would get broadcasted to the we call it the Oracle Relayer Network and then they would be in charge of putting it on. And again, there's a whole complexity about how do you trust them? What are the repercussions if they're dishonest? And how do you prove that? Which is a whole nother can of worms. But essentially, in the last version, Future Swap V, two traders would just sign a message and then their trade would be pretty much executed because it would be broadcasted to the off chain Oracles. They would sign it and then they would be with the ones putting it on chain.
00:24:17.690 - 00:24:21.750, Speaker B: So just kind of all then went on chain through that network.
00:24:22.090 - 00:24:31.850, Speaker E: Exactly. And since they already had the price labeled off chain in that order, it really didn't matter if you got in front of them or behind them when it mined on chain.
00:24:32.910 - 00:24:53.810, Speaker C: That's interesting. I didn't know that about your platform. That sounds very similar to how preconceisus happens on Flow. The Dapper Labs blockchain, they use a sequencer so you kind of get block ordering from the jump and then they do their execution and block creation afterwards.
00:24:55.270 - 00:25:15.510, Speaker E: That's interesting. I have to check it out. We now are going down the model of saying Arbitrum, like trusting that entity is good enough for now. I know that Ed Felton has a paper on actually how to prove sequencing. I haven't dove into it that's way above my head, but hopefully they actually implement that so it's not a trusted entity.
00:25:18.250 - 00:25:40.770, Speaker B: So is this one of the more, I guess, practical solutions right now? It sounds like going to a smaller number of people who can take actions or trusting some party in some capacity to be ordering. Is this the path that we're likely to go down over the next, I don't know, six to twelve months where we're just going to rely on some more trusted or centralized solutions?
00:25:44.930 - 00:26:00.580, Speaker E: It sure looks like it is. Everyone's ready to launch on Arbitrum and while they can only reorder and manipulate it that way, they can't actually do anything fully dishonest. It seems like that's the consensus. Everyone's perfectly fine with that.
00:26:04.790 - 00:26:06.050, Speaker B: Anyone disagree?
00:26:07.610 - 00:26:58.802, Speaker D: Yeah, just a little bit. I think with the technology we have today, we can minimize mev a lot. So basically a similar thing, let's say. Okay, yeah, you can basically just reduce slippage to a minimum percentage amount as a user, obviously, because you can off chain calculate the price you're going to get doing this on chain. Obviously it's way more expensive. You only kind of have the risk of the price moving and having your transaction reverted. So basically losing money or losing an opportunity, you can obviously use, as I said, like flashbots bundles to kind of avoid your transaction getting reverted.
00:26:58.802 - 00:27:54.710, Speaker D: You can also kind of send your transaction through a relayer that only executes the transaction on a certain block. So you can actually kind of avoid having the ankle bandit attack on your transaction if it gets included in an ankle block. But I think just by having users kind of opting in into, okay, yeah, I want to pay a little bit more, but my transaction and obviously having to sign a bunch of transactions until it gets included into the block. This is kind of the bad UX you will have. But it won't cost as much as whenever there's a bank run or whatever. There are a bunch of failed transactions. I think Vitalik was the one that kind of had to use Archer Dao to kind of drop all the tokens, like a few months back.
00:27:54.710 - 00:28:48.230, Speaker D: But let's say the reverted transaction cost for last month were like 150 ether, so like around $330,000 just on reverted transactions that did nothing. So let's say hypothetically, if you could send a transaction to the protocol and it costs the same as a regular transaction, but you send it with a flag, that okay, if these reverts don't include me, that will be like a huge improvement on the protocol because you can just circumvent this cool feature that Flashbot gives you. But I think with only that, obviously it kind of ruins a bit the user experience. But I think those are kind of the 99% cases where users get a bad experience out of the network because of mev.
00:28:52.030 - 00:29:15.410, Speaker B: So it sounds like is that like your kind of top near term wish to see an ecosystem for improving the mev situation be better? I guess transaction management from wallets? Is that what yeah, exactly.
00:29:15.480 - 00:29:25.250, Speaker D: Yeah. This obviously can be done at application level, so in the UI, but the Wallets are the ones that should implement this as a more general approach.
00:29:27.450 - 00:30:07.060, Speaker B: I'm curious, the rest of the panelists, we've heard from the foremost experts in the world on the topic of MEB today. They've proposed a lot of different paths for research, different solutions. You've all got your hands full kind of working on very specific projects right now for the broader research community. Are there asks or things that you would say like, hey, this is the thing that for our protocol, for our users, would make the biggest difference for them realistically, over the next six to twelve months.
00:30:10.790 - 00:30:31.110, Speaker C: Flash bots, that's the direction we're going for these private mem pools. We have integration with Archer Dow. I think that's already released. Maybe it's not, maybe it'll be released this week, but integration with Archer Dao, y Cabal and a bunch of these other mev pools.
00:30:34.010 - 00:30:35.350, Speaker B: Benji Scott.
00:30:37.770 - 00:31:38.350, Speaker A: Yeah, I mean, I mentioned earlier, I'd love to see smarter wallets that are able to kind of take advantage of some of either the private relay to protect users or cancellation when things don't work anymore. I think to the point that was brought up earlier about how much is wasted on these rover transactions, we have the capability to do these things, and I think it would improve a lot of things, improve negative externalities and how much money users are spending on these things. I think I also want to make sure that when we talk about mev, we don't try to overcorrect and reduce mev so much that some protocols become unstable. With the Black Monday thing from a year ago, there was a pretty massive problem that occurred, I think because mev was reduced too much in that system. And I think some mev is a good thing. And we shouldn't try to drive it all out. We should try to leverage it into a system that can react appropriately when necessary.
00:31:39.730 - 00:32:06.310, Speaker B: What if we take this to a logical conclusion, right? Like, if you want the wallets to help manage this, we don't want to waste gas on failed transactions. Shouldn't wallets then by default just submit everything as a zero way transaction through Flashbots? But then what are the bigger consequences of that? Right. That solves that problem, but it presumably creates some nuance.
00:32:06.890 - 00:33:01.020, Speaker A: Yeah, I think it creates a lot of probably load on the system, especially a system we're still trying to decentralize. I think the point made earlier about who do we trust, flashbots is a system that's also working towards this more decentralized architecture. I think that there is probably not that much negative aspect of it so long as these back channels and private relays and these executions can keep up with that load. I can't think of a lot of negative externalities to these transactions appearing directly in mind blocks. Actually, maybe gas wars. Right? You're going to get back to gas wars because people who want to take these mev are going to try to outbid each other on the next block as opposed to doing it in the current is. I wonder if there could be some reverting to the old top of the block warring again.
00:33:01.020 - 00:33:04.090, Speaker A: Right?
00:33:04.160 - 00:33:12.460, Speaker B: I guess the miners will be happy about yeah. Yeah. Benji, any wish list for you?
00:33:14.610 - 00:33:48.950, Speaker E: Yeah, I wish that the wallets would natively handle this for users because using MetaMask is already complicated enough for the average person that's just using Robin Hood or something like that and then trying to explain to someone what mev is. There's zero chance it's actually going to happen. And there's the site, and you can see like $750,000,000 or something in mev if you look at it's, not like a linear graph. It's growing almost exponentially. So this year we could easily see it break $2 billion. And so the quicker we address this, I think the easier it'll be on the end user.
00:33:51.560 - 00:34:06.250, Speaker B: All right, well, we're about up on time here, so I want to thank you guys all for joining and participating in this. And thank you to the audience, the organizers, for having us.
00:34:12.380 - 00:35:04.836, Speaker F: Well, yeah, thank you. This will mark us exactly, I would say, well five minutes short of 8 hours marathon on mev, and this panel has wrapped up our part four, which is application level response to mev. Thank you for a great panel. And it's very rare for us actually hear that some of the biggest developers in DeFi sharing their expectations on how future of the DeFi stack is going to evolve. So we hope to discuss more of these with you guys to bridge the researchers and the builders together. So that we can get a much more coherent and coordinated view on what is ahead of us in tackling mev. Yeah.
00:35:04.836 - 00:35:14.440, Speaker F: So here we go. Our time is up, and I would like to see you all on the next Mev Roast. Thank you, everyone, for joining.
