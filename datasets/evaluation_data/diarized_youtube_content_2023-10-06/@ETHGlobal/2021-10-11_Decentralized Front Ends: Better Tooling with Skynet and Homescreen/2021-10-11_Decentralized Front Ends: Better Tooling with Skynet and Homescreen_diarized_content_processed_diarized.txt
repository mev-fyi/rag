00:00:06.330 - 00:00:19.120, Speaker A: Without further ado, thank you very much, Daniel. Daniel is going to be talking about how to decentralize frontends with Skynet and home screen. So Daniel, welcome and I'll let you kick it from here.
00:00:19.570 - 00:00:50.958, Speaker B: Thank you so much for the introduction. Let me go ahead and get my screen sharing going and I assume everything can be seen now. So yeah, thanks Kartik, for the introduction. I also just want to, before I get into things, say thank you so much to ETH Global for inviting me to speak. The hackathon and summits have been a lot of fun so far. Always good to learn from all the smartest people around. Yeah.
00:00:50.958 - 00:01:39.740, Speaker B: So the talk name it is decentralized Front Ends better tooling with Skynet and Home Screen. I'm Daniel Helm. I'm the developer evangelist at Skynet Labs. And in lieu of doing kind of a personal bio, I figured I'd kick off this session with a question. Should we decentralize front ends in the Web Three space? So I work day in and day out in decentralized storage. So I'm going to emphatically say yes. But this is the question that developers have to make a decision about, right? And I think maybe it's better to reframe this question if we really want to get to the bottom of it and ask, are we really building permissionless systems if they're centralized at the point of entry? So phrased another way.
00:01:39.740 - 00:02:14.882, Speaker B: Are we really building open protocols if we're only letting our users access them or 99% of our users access them using AWS, Netlify, Versaille, DigitalOcean? So these are kind of how I'm framing my talks. If some of these terms are new to you, don't worry, I'm going to do some backfilling. But I just want to kind of set these out at the very front. So if you're unfamiliar with decentralized storage, we can kind of start there. Maybe you missed. Yusef's. Great talk earlier today introducing some of the ideas of decentralized storage.
00:02:14.882 - 00:03:15.366, Speaker B: But we're talking about a core piece of Web Three infrastructure where files, web apps, NFTs, basically anything not stored on chain can be accessed without relying on a single trusted authority. At their best, they're trustless, permissionless and censorship resistant. And they're really good ways to potentially wrangle control of data storage away from the Amazons and the Google's of the world. There are a lot of folks building in this space, so we're talking about projects like Skynet or IPFS or Rweave, and most of them take a similar approach, at least to this kind of base data that you're going to upload. So you upload a file and what you get back is a unique identifier, this cryptographic hash or merkel root that looks all crazy. But what it says is that this is the contents of this file and if this file changes, my URL is going to change. So here I'm actually showing a skylink.
00:03:15.366 - 00:03:32.640, Speaker B: It's what we use inside of the Skynet ecosystem and it can be used to know that once a file is uploaded, you can share that URL. And no one's going to change it. You're not going to change it. The portal is not going to change it. No host will be able to change that data. That data is immutable. It's not going to change.
00:03:32.640 - 00:04:19.322, Speaker B: And what this lets us do is take that and stick it on the end of a portal URL. And so again, everyone in the ecosystem has portals or gateways ways of accessing this data through a web browser. And so here we see the Skylink stuck on the end of Sciasky net, which is the portal that we run, or you can stick it on the end of a community portal like SkyPortal XYZ. All right, so if this is new to you, this might seem a little bit abstract. So real quickly, I just want to show what it looks like to upload something to Skynet we can jump over. And I'm actually going to upload a web app because we're talking about website front ends. And look, I've already forked and Yarn installed and Yarn Build, the uniswap interface.
00:04:19.322 - 00:05:24.530, Speaker B: And so we have a build folder here, and I'm going to open it up in Explorer, find my build folder, and drag and drop it to the Skynet uploader. And so what happens when I do this is that file goes onto Skynet. It gets broken up into a bunch of pieces and stored on the SIA blockchain. And at the end of it, what I'm going to get back is one of those URLs, right? So I have this folder that has the index HTML file, and I get back a URL that I can open, and I've got uniswap here. And once that file is uploaded and on the Skynet network that is available everywhere, so we have a URL, Sciasky net, I can change this again to SkyPortal XYZ, click Enter, and I'm able to pull up the exact same content. So this is kind of the base idea of decentralized storage. We're able to have lots of access points to this data that's not stored in a single location.
00:05:24.530 - 00:06:44.990, Speaker B: Okay, great. Let's see what this looks like, though, from the perspective of running a web app, because I think a lot of developers say to themselves, like, hey, it's just a web app. These are kind of overblown requirements. We don't need all of this to be immutable. But the stakes are real, and they're getting realer every day in the Web Three space. And so we're seeing developers and Web Three users get placed in really tight spots, and they're having to kind of address questions like, what do teams do if they're hosting a site that makes them liable for user actions? Or what if their hosting providers don't like the way that the wind is blowing with regulations or local social pressures? And for users right now, you're totally unaware when the code of a front end changes, which kind of puts you at the whim of the security and product decisions that the dev team is making as they push out these changes to their website. So these aren't paranoid hypotheticals like we see this play out in the news, right? Uniswap had to, you know, they removed assets from their front end in order to protect the developer team and users during a time of regulatory uncertainty.
00:06:44.990 - 00:07:42.720, Speaker B: We had Sushi's miso attack that put over $3 million at risk, not because of a smart contract bug or some of the security issues we saw before, but malicious code that was introduced into the front end. And one of my favorite things I've seen recently is one inch's new feature that I don't even know if it's live anymore. But briefly, you had to sign with your wallet a little message saying I am not a citizen of the United States. And they also did some geofencing where if you then still tried to use their web app while being located in the US. It would say, no, you're not in the US. So make sure you disable your VPN, which is telling us that you're in the US. And so if we're seeing all these issues, developers can be asked, why not decentralize? And it's because there's lots of challenges and concerns that developers have.
00:07:42.720 - 00:08:41.250, Speaker B: Not all web two patterns translate well to web Three. If you've always used a back end to handle server side things like storing user sessions or doing database queries, sometimes the new web Three frameworks can just feel weird, just like writing smart contracts can feel weird. Similarly, in the web Three space with this decentralized architecture, we have limited framework support compared to traditional web serving. So if you're only serving static assets because these things are immutable, then your frameworks are going to be limited. And most protocols don't even allow for writing custom routing rules, which are usually available on traditional web servers. And the final kind of thing that I think developers have concerns about is performance. And so I think this can take many shapes, both in terms of things like time to first byte for users, you want your website to load really fast and feel snappy.
00:08:41.250 - 00:10:10.320, Speaker B: But there's also performance concerns about is the long term scalability proven for projects that are going to be like storing all their files on the blockchain? Or is data availability that's a performance concern? Who can we rely on to keep data available and online? So these are real challenges, and to these developers, I shill why not decentralize with Skynet? So it's true that not all web Two patterns translate, but the tooling is being built for really performant mutable data APIs, including one of my favorites is one that we've developed called MySky, which is a cross ecosystem, decentralized user identity. Additionally, there is limited framework support. So some kind of classic both backend front end paired frameworks aren't going to work. But at this point you've got full support for things like gatsby and react router and other dynamically routed client side frameworks. And lastly, with regards to performance concerns, it's probably a little bit out of scope to get deep into the architecture of Skynet or saya, here. But try it out. I think you'll see that our speeds are already comparable to the experience of Web Two and what Web Two users expect.
00:10:10.320 - 00:11:04.510, Speaker B: And this level accessibility for our users is our primary concern. We're always working to really reduce our time to first byte and what that looks like. So with Skynet, all of these things are possible for users and developers without having to install a wallet or special software or really touch any sort of cryptocurrency. Okay, so yet the end of the day, yeah, this is our goal. Any developer can build a Web Three app that anyone can use. All right, so I talked about some of the kind of like, fundamental ideas there. But if our web app is immutable, if we have this folder of files that we stick on to our Wevip IPFS Skynet, how do users keep up to date? Right, we have this crazy URL that is not very readable.
00:11:04.510 - 00:11:35.050, Speaker B: Well, let's take a look at an example. Here we have our friendly user, and that user really likes this website that has daily builds and they use the decentralized web. They're good. And so when they release Tuesday's build, it has a Skylink like that. And our user grabs that Skylink and is happy using Tuesday's build. They've been using it all the time. But tomorrow rolls around and the developers roll out Wednesday's build.
00:11:35.050 - 00:11:59.566, Speaker B: They shipped their dark mode update, and our user doesn't have any way of knowing what that new Skylink is or is going to be. It's a cryptographic thing. It's unpredictable everything else. And so we have to introduce ways to fix this issue. And for Skynet. This looks like Resolver Skylinks in IPFS. They have IPNs.
00:11:59.566 - 00:12:52.050, Speaker B: But what this does is let you have a mutable constant URL that you can just then point and make those updates when you sign some sort of certain proof that you are the owner of this piece. And so what this looks like on Tuesday is that our user has the Resolver Skylink and is getting Tuesday's build. And what this looks like on Wednesday is the user still accessing the build through the exact same URL this Resolver Skylink and never had to worry about the immutability of the core underlying data. And then in actuality, this is kind of ugly and terrible, right? This is not very usable. And so what most developers will do is add in a human readable name. And so this is going to use DNS, like traditional DNS ENS or HNS to give us something like dailybuilds.com dailybuilds ETH.
00:12:52.050 - 00:13:54.310, Speaker B: Those will have records pointing to the Resolver Skylink and then know the Resolver Skylink probably is part of like a GitHub action when a new build gets created and deployed, will automatically update to point to the latest build. All right, and again, I'm using Skynet here, but all the other ecosystems, I think, have kind of comparable things. All right, so this is how easy it is to get a decentralized front end. But then the next question is, is decentralized hosting enough here? If a user is still just going to like app Uniswap.org, which is hosted on IPFS, that's great for censorship resistance, it's great that it's decentralized and hosted that way, but that still doesn't answer that question of the front end attack. And I want to kind of look at that a little bit in our diagram here. So returning to the diagram, let's assume Thursday comes along and a bad build makes it through.
00:13:54.310 - 00:14:53.254, Speaker B: The developers have gone rogue, there's malware everywhere. Worst of all, Dark Mode has been removed from the application. What we have is a situation where our automated deployment is still just going to go ahead and automatically point to that and our user, when going to dailybuilds.com is going to still in a decentralized way access this malicious build. And unfortunately, because the user is so accustomed to accessing the website through the ETH domains, they have no history or recollection of the underlying immutable data that's still available, but they just don't know how to access it. And so for this reason, we've really started seeing a problem where it seems like we need to not only decentralize our front ends, but also our upgrades for users need to be voluntary and a version history kind of needs to be accessible. And Home Screen has entered the chat.
00:14:53.254 - 00:15:34.294, Speaker B: This is the project that we've been working on. We released Home Screen at the beginning of this hackathon. And what it is, is a decentralized application where users are able to log in with fully decentralized identity and access their favorite decentralized apps. These are versioned builds of web apps. They're fully controlled by the user and when they pin these to their own personal cloud, it gets all of the assets, all of the code and stores it there so that they always have access to these apps. And then they can also upgrade downgrade, share the apps with friends at any time. So I just want to quickly show a little bit of what it's like to interact with Home Screen here.
00:15:34.294 - 00:16:03.220, Speaker B: I can go to homescreen HNS sciasky net and it tells me that web Three needs decentralized front ends. Great. I'm going to go ahead and authenticate with my sky. And this is what I was talking about earlier, our decentralized identity. And we can sign up. I'll get a new passphrase. This is never communicated to any server or anything, but I'm able to use that passphrase across device anywhere to access my personal cloud.
00:16:03.220 - 00:16:33.690, Speaker B: And so we're sitting here interacting with the mutable data layer of Skynet and I can add apps whenever I want. So let's say I want to go and add Uniswap ETH. I told you earlier, this is hosted on IPFS. We have IPFS support here. Oh my God, the live demo gets me. Okay, let's try app Uniswap.org. Let's see if that one will work.
00:16:33.690 - 00:17:07.890, Speaker B: All right, cool. Also hosted on IPFS, it finds the IPFS link uploads that to Skynet. And now I'm able to pin that DAP to Skynet and have it always accessible for. Okay, so and we can also kind of look at the details, know it's going to pull down our name, our description, and some other details. And now when I go to click on Uniswap, I have a build of uniswap here. Okay. I talked to you earlier about Resolver Skylinks and how those things can update.
00:17:07.890 - 00:17:29.318, Speaker B: And I don't have updates available for Uniswap because they host on Ipffs. But we do have updates available for Skysend. And so I love Skysend. I'm using it. I want to check for updates I can do. So here it'll go. It'll find that we now have a new Skylink, a new immutable file.
00:17:29.318 - 00:18:20.134, Speaker B: The resolver skylink is pointing somewhere else. The dev team is signed off on this version and I can then pin it. It's then stored on Skynet and then I will add it to my personal metadata here. And I can access this new version of Skysend instantaneously. If I don't like this new version, I'm also always free to go view the details, come in and I can say better version and downgrade to my older Skylink that I had before. And that way that will always be my default when I come and click this here. Okay, so if you've worked with decentralized storage before, maybe some of this isn't new, but also just like pay attention to how fast this is going.
00:18:20.134 - 00:18:56.854, Speaker B: We are interacting with mutable data and it's performance. Yeah, it feels good. If you're a developer and this is interesting to you, I really encourage you to look at what it takes to integrate with homescreen. Let's get this full screen again. So for integrating with home screen, there's kind of three main steps. You're going to have to get an app that deploys on Skynet. You'll want to set up automated deployments using something like our GitHub action, which I can show a little bit of later.
00:18:56.854 - 00:19:37.186, Speaker B: And you'll want to add a home screen button and a reference to that app's, Resolver Skylink, so that users can easily find this and add it to their home screen. So you can follow along any of this at docs. Sciasky. Net integrations slash home screen. And you'll also find a link there to the video that I did earlier for ETH online that I actually do this as live code in about 20 minutes to set up a home screen integration. So we already deployed an app to Skynet. Obviously when you're building code, you're not going to want to go drag and drop a file every single time.
00:19:37.186 - 00:20:46.166, Speaker B: But just to kind of, again, say, any directory with an index HTML file is going to be supported as a web app. And then if you use kind of our deployment tooling, you have additional gatsby and react router support that you can get working in terms of automating those deployments. Like I had mentioned, we have a GitHub action which lets us build and upload our build directories straight to Skynet whenever we push a new PR. And we can also set a secret in there so that we can sign that code and update that Resolver Skylink every single time one of those new builds deploys. And the Resolver Skylink is very nice because then we can also point ENS names or HNS names or traditional domain names at that Resolver Skylink. And we know that we have this kind of like fully automated deployment system and at no point do we ever really have to interact with a traditional hosting provider. And then again, step three here is going to be adding the Add to Home Screen button and our Resolver Skylink.
00:20:46.166 - 00:22:00.210, Speaker B: And so, like I kind of showed before, when we're interacting with Home Screen, you can go ahead and actually type in things like we're still tweaking the UX for the user side of things, but you can also find repos where an Add to home screen button has been added. So I've worked with some kind of like unofficial builds here where I've made a repo for, say, Balancer, and it now has an Add to Home Screen button that has the Resolver Skylink that gets built every time something gets pushed to main. So I have a GitHub action that deploys to Skynet. And when that happens, there's a step here that you can copy and paste from our documentation to get things automatically deploying to Skynet. So when I click on this Add to Home Screen button, I'm able to be taken to Home Screen instantly, asked if I want to add this app to my home screen. And we can see all the metadata that the developers provided, including the Resolver Skylink where it's going to be updated. And of course I can open up Balancer here on the next tab and get going with decentralized storage and decentralized trading.
00:22:00.210 - 00:22:32.490, Speaker B: Okay, so yeah, one last little shill here. There's a 10,000 Psycoin prize pool, 2000 Psycoin for the best hack using Home Screen. And so look into it. If you are a last minute hacker still having to figure out how to get your front end live and on the internet, we have a lot of Skynet resources. If you want to learn more support, scisguy. Net is kind of our intro guide, but we also have developer guides available at docs. Sciasky.
00:22:32.490 - 00:23:15.462, Speaker B: Net along with SDK, stuff for JavaScript and SDKs available in quite a handful of languages. If you're interested in joining the Skynet community, it's a good one. We have a discord at Discord GG Skynet Labs and it is full of developers that have built with Skynet and are super generous with their knowledge. So come say hello, tell us what you're interested in building and I'm sure some folks will help you get started. Thanks again for hearing my appeal for the Web Three needing decentralized front ends and I'd love to answer some questions from the chat. Thanks, Daniel.
00:23:15.606 - 00:23:40.658, Speaker A: This was great. I think we have a couple of minutes. I think the set of questions or follow ups here are maybe just understanding what does this evolve to like, hosting static content is great, but code is a lot more complex. Use cases of front end applications. How are you going to think about the evolution of home screen or just kinded? And if you can share some things that will be possible in the future or in the works right now?
00:23:40.824 - 00:24:40.726, Speaker B: Yeah. And so I kind of glossed over all of our mutable data structures. We have a good handful and MySky is a big one that we're kind of aggressively developing on the back end where users have totally user provisioned storage space that when they log in with MySky in different applications, those applications can request permissions to other application storage. So you can build a social graph on application A and just import it natively into application B as though it were an API, even though it's a piece of storage that you locally own. And beyond that, probably a few more months out. We are working towards monetization and so if you have content that you've put up as part of your MySky identity and people want to help support you or consume that content, we want to have a more equitable way for content creators to get paid for their data. Amazing.
00:24:40.908 - 00:24:46.840, Speaker A: And I know the answer, but I'll ask this for the sake of others also knowing this is kind of free.
00:24:48.730 - 00:25:23.086, Speaker B: Yes and no. So free to use it's freemium. Similar to web3 storage. If you use Sciasky Net, you get, I think 10GB. If you don't give us your email, if you give us an email address or later on just sign up with MySky, you'll get 100GB and then you can pay in Fiat beyond that at this point. But the whole storage stack or the whole portal stack is totally open source. So if you don't trust us, you don't like us, please run a community portal.
00:25:23.086 - 00:25:27.058, Speaker B: We love community portals and you don't have to rely on us at all.
00:25:27.224 - 00:25:36.806, Speaker A: And just so we have some clarity on the limitations, when you say ten or 100 gigs, is that storage or bandwidth? And how does bandwidth work if it's not?
00:25:36.908 - 00:26:08.830, Speaker B: That is storage. Bandwidth is actually kind of like on the consumer, not on the original uploader or provider. So once something's kind of on Skynet, anyone can pin that. And so there's no single owner anymore. And so right now the bandwidth is just kind of like part of the system. And the portals eat that know? Maybe other portals will need to throttle that or something else, but we have kind of some of those things in place, but nothing that, if you're not on a very impressive connection, you'll probably ever notice.
00:26:09.410 - 00:26:19.080, Speaker A: Well, hopefully, Victor, that was good enough for your question to be answered. And Daniel want to thank all well, thank you again for doing this amazing presentation and making a live demo work.
00:26:20.010 - 00:26:27.570, Speaker B: Thanks so much. It was a lot of funny.
