00:00:00.810 - 00:00:58.650, Speaker A: All right. Thank you, Luke. Hi, I'm Eric Tang and I'm the co founder and CTO at Know. Today I'm going to tell you a little bit about video streaming. We're really excited to be at this Hackathon LF grow, and Lens Protocol is a really exciting new protocol that we've been kind of working with for a while now in the background and excited to be kind of participating in this session where we got to see a lot of exciting new ideas come out this weekend. Obviously, social networking and video is so intertwined today that it's hard to imagine building a social app without some kind of video component to it. And so Lifepeer is really excited to be participating here just for the people in the audience that who aren't as familiar with Lifepeer.
00:00:58.650 - 00:02:06.438, Speaker A: Life here is building the video streaming layer of Web Three. So what that means is Life Peer can be leveraged as a video streaming infrastructure that helps developers building Web Three applications to add video features into their application. So think of it as IPFS or Filecoin to storage as Live PR is to video streaming. Today I'll go through spend a little bit of time talking about a decentralized social and Web Three video, get some concepts out there, but spent most of the time going through an example application just kind of talking through what it might take to build a decentralized TikTok with Lens plus Live. And please feel free to ask any question that you have. I'm already seeing questions rolling in. Is it possible to use Live Peer also for audio online sources? Absolutely.
00:02:06.438 - 00:03:03.186, Speaker A: So you can actually just stream an audio only track, for example, and Life Peer would be able to stream that, no problem. Going into kind of decentralized social applications and Web Three in general a little bit. Today we live in this world where there's this huge creator economy and social applications is where creator economies, creators kind of create their content. Some of them even make a living full time. Right? So it's estimated that there's about around like 50 million people around the world that identify as content creators. About 2 million of them are professional content creators, as we can see here. Most of them are using a few big centralized platforms.
00:03:03.186 - 00:04:43.410, Speaker A: And as we all know, there are these kind of perverse incentives on these platforms. On the one end, these platforms are in business because the creators are on these platforms creating content to keep these platforms going. But on the other end, the platforms are now keeping a and the creators are dependent on the platform because the platforms are so big and they kind of hold so much power over the creators that they are taking a huge cut in this economic relationship. Right? So for YouTube, for example, YouTube's take rate is about 50%, which means for every $2 YouTube makes, it shares one dollars with the creator and it keeps the other which is quite a big tax if you think about all of the content on YouTube is created by creators. So as we see already happening, these creators are finding out about Web Three. And there's all these interesting benefits in Web Three. One of the biggest things is that in Web Three, creators and content creators actually own their content, right? When you create something, when you create an Ft, the NFT is in your wallet and you have this indisputable proof that's cryptographically signed that you own that piece of content, right? And because of this, we have applications that are built around this concept.
00:04:43.410 - 00:06:02.158, Speaker A: Instead of users being beholden to the application, applications now are working around the users. And we're seeing this type of shift where creators are coming into Web Three. And there are interesting Web Three based creator applications that are being built on top of Web Three infrastructure. So diving in a little bit more into kind of what a Web Two video application looks like. In the back end, if you zoom in, we see that we have either live streaming video source going into a media server or we have kind of users uploading video from a front end application. This media server would then kind of transcode the video, maybe Store, or upload the transcoded renditions up to an object storage, maybe S Three, something like that. And this content gets cached in the content delivery network and then it gets distributed around the world to the user's end devices, right? It could be a front end kind of web browser based video player, it could be a mobile application and something like that.
00:06:02.158 - 00:07:01.780, Speaker A: And then in the back end we have the database that stores all the user information and then we have the server side logic, the back end of the application themselves, that kind of have the business logics built in. So this is a pretty kind of typical technical architecture of a Web Two based video application. So what does that look like in the Web Three world? Well, we still need to have all these components for video streaming to work on the Internet, right? But instead we start to use decentralized infrastructure to power these applications. So we have a decentralized streaming and transcoding network, which is life. We have decentralized storage, it could be Filecoin, could be Rweave, Store, J. There's a bunch of solutions. We have decentralized CDNS even, that are starting to pop up.
00:07:01.780 - 00:08:25.840, Speaker A: And then we have the blockchain kind of replacing the database as the storage of the user information. And then we have a decentralized query layer. It could be the Graph, or in this case, Lins Protocol actually has a query backend for application developers. As developers, we can continue to build these applications in the front end. So, looking at this in layers, we have at the very bottom this smart contract layer that provides us token standards, provides us means for value transfer, making markets ability to kind of coordinate in a decentralized way, right? And then on top of that, we have this Web Three infrastructure that gives us storage, data querying, video streaming. And then on top of that, we have Web Three video applications, whether it's social or NFT applications, metaverses, we have wallets commerce applications, et cetera, et cetera. These are kind of just high level concepts of building applications in the Web Three space, especially around video or social.
00:08:25.840 - 00:09:20.430, Speaker A: Let's take a look at an example. How would we build a decentralized TikTok, especially using Lens and live here? Since this weekend is about Lens, let's take a look at a couple of features and how we can build them. So a decentralized TikTok should probably have a user profile that's tied to a Web Three wallet. It should have video upload and playback capabilities. People should be able to record a short video, upload it, and then the application should be able to play back. TikTok also has a live streaming capability, so users should be able to create a live broadcast. They should be able to record those broadcasts so that viewers can go and play back past sessions.
00:09:20.430 - 00:10:53.420, Speaker A: And then there's kind of the cornerstone features, right? And there can be other additional features on top that are more Web Three centric and we'll get to them in a little bit. So diving into each of these features, thinking about profile, how do we create a profile? Well, Lens kind of has this for us. So if we just go to if we just go to the Lens documentation, we see that here's a way for us to create a profile with a few parameters. And from there, a Web Three wallet would have a profile. And so after that, once you create a profile, you can create posts in those profiles, right? So really, video uploads in the video context become posts in the Lens context, right? So again, going to this Lens documentation page, we see that each profile can create many posts. And then for example, here in the post metadata field, we have this content URL. And that's really what we need in order to specify what the post looks like.
00:10:53.420 - 00:11:29.800, Speaker A: We can have different types of schema stored in these posts. So I'm going to show you how to do a video upload with the Life API, right? So for example, this is Mr. Beast's profile. So how do we create a profile like this? So let me go here. The first thing that I'll do is I'll pick a video. So I'm going to pick this waterfall video.
00:11:31.470 - 00:11:34.810, Speaker B: This is a video of a beautiful waterfall.
00:11:35.310 - 00:12:21.674, Speaker A: And from there, what I will do is I can go to Lifepeer.com, which is a gateway service for the Lifepeer network. I'm going to go here. This is what it looks like when you log in. You can go to Players, you can go to API key, and you can create an API key right? So I'm going to copy this API key and I'm going to set this API key in my local environment. So now my environment knows what the API key is. And from here I can use the video NFT package from Live.
00:12:21.674 - 00:13:29.758, Speaker A: Just this is a NVM package and I can use this package to help me create a video NFT. So what this is doing is right now it's kind of downloading the NPM package. Now I can say I want to call this NFT waterfall and I don't want to customize any NFT metadata, but if I wanted to, I could. So now this script is basically going through the video, uploading the video into Life Peer and then it'll transcode the video and optimize it for online streaming. And after that, it'll return us the metadata that we need in order to create a post or mint NFT or any web3 specific action that we want to take with this video. Right? So now it's uploading the video. The video is about 30 megs, so it'll take a little bit for that upload to finish.
00:13:29.758 - 00:14:08.090, Speaker A: And by the way, all of this code is open source. And there's also an NPM package that you can use to embed this system into your application so that you don't need to go through the CLI process. It can all be done programmatically. So now we see that the file has been uploaded, we have this ID and we're just waiting for the import task to complete. It'll take a little while to kind of transcode the video. And after the video is transcoded.
00:14:10.130 - 00:14:10.446, Speaker B: We.
00:14:10.468 - 00:14:14.830, Speaker A: Should get a metadata field back.
00:14:14.980 - 00:14:18.960, Speaker B: So let's just wait for a few minutes maybe.
00:14:20.930 - 00:14:30.434, Speaker A: As we're waiting, let's just go back to the documentation. I can show you guys how to.
00:14:30.472 - 00:14:34.420, Speaker B: Create a post if you haven't seen that before.
00:14:36.970 - 00:15:16.706, Speaker A: So in Lens, we can create many posts in a profile and at the same time posts can have comments. A post is also called an publication and from there you can even create a mirror in and that is basically a collection of different posts from other profiles. So you can kind of create this view so that you can create a curated list of posts. Looks like I'm having a little bit.
00:15:16.728 - 00:15:36.690, Speaker B: Of a problem here, getting my task to finish. I'm just going to try to do this again. Just give me 1 second. Waterfall don't want to.
00:15:38.420 - 00:15:44.870, Speaker A: Now it's gonna, it's gonna upload the file. Maybe we'll, we'll skip this part since it's taking a little while.
00:15:48.600 - 00:15:49.350, Speaker B: And.
00:15:52.460 - 00:15:56.052, Speaker A: We can go to a file.
00:15:56.116 - 00:15:59.690, Speaker B: That I have previously uploaded already.
00:16:00.220 - 00:17:13.216, Speaker A: So just to show you what it looks like. So I'm going to play this file. What we see is this file has IPFS hash and it's pinned using Live Peer. So if I play, I will see that this is that same file for the waterfall. And now this file is inside IPFS, right? So what I can do, for example, is to then play back this video in a browser. So here I have a code pen, right? So this is just a really simple video player inside video JS. And what I can do is find this source and replace this source URL with the URL of the video that I just uploaded into IPFS and using Live peer to transcode it.
00:17:13.216 - 00:17:27.670, Speaker A: Now you see, I am able to play this video back in the browser. So this is, for example, a component that you can use to embed all the videos that the users have uploaded into your application.
00:17:29.400 - 00:17:29.812, Speaker B: Cool.
00:17:29.866 - 00:17:58.930, Speaker A: Oh yeah, we see. This is successful now. And this is what you will see once you upload the file. You see that not only do you have the video file CID and kind of gateway URL, but you also have an NFT metadata gateway URL. So this one is interesting. If I just curl this and pipe that into JSON P.
00:18:03.540 - 00:18:05.568, Speaker B: Maybe I don't have that installed here.
00:18:05.734 - 00:18:44.092, Speaker A: So we'll see that this is a JSON that basically follows the ERC 721 or 1151 standard. So that you can just use this URL as your token Uri to mint an NFT if you wanted to. Cool. So this is kind of the video uploading portion of the workshop. I'm going to do another one which is kind of live broadcasting and playback. Right. So imagine your user wants to broadcast a video.
00:18:44.092 - 00:19:27.448, Speaker A: So what do we do there? Well, there are a couple of things that we can do. One is we can have an in browser broadcasting experience using one of the tools that lifepeer has created. So the first thing that we'll do is to create a stream inside Livepeer. And I'll say, this is called LF grow rocks. This is the name of my stream. There are a few pieces of important information here that we should know about. The most important thing is probably this stream key which represents where I should ingest my live stream.
00:19:27.448 - 00:20:02.010, Speaker A: And of course, this ingest URL is what I can use to ingest that video. So for example, if I used a broadcasting software like OBS, I can copy this URL into OBS and using the stream key to start streaming. But what if you wanted to offer kind of an in browser broadcasting experience so that you don't need to require the users to then have to download another piece of software to run to run this? Well, we have built this tool called I'll just cast it.
00:20:06.300 - 00:20:07.610, Speaker B: I don't know why.
00:20:09.580 - 00:21:23.100, Speaker A: Okay, so this is kind of an in browser broadcaster that's been built. There's a shorthand here which is I can just copy my stream key into the URL. So justcastit two the streamkey and now I can start broadcasting. Now I just press a button and I am broadcasting my video into the live Here network. It's being processed in a network and transcoded and all the infrastructure that complex diagram that we saw is taken care of by the network and we see that here we have a live stream going already, right? Another interesting thing that we have piece of information that we have is this playback URL in the CDN. So what I can do is then copy that URL to put it into a video player for example, right, we go back to now this is a slightly different player just to showcase. This is called the Plier player that plays HLS instead of before we were playing an MP4 file.
00:21:23.100 - 00:22:19.532, Speaker A: So I'm just going to copy this playback stream. I'm going to put this as the video source. It'll load and now I have my live stream embedded in this page in this video player. So it's that easy, right? And now you can imagine building a kind of a live streaming style experience. One thing to note is that if you want to build kind of this channel concept inside Lens, you should probably create just one post or one publication that's dedicated to the live stream of this channel. Right. And what you can do is every time you can specify to the live peer network to record the session here, I can just turn that on manually.
00:22:19.532 - 00:22:51.980, Speaker A: But of course everything can be controlled with the API. When you turn on the recording session you will see that there will be a recording URL when your session is finished. And you can use this recording URL as a content URL when you're creating your post inside Lens here. Right. So for every session you would create a new post that represents a recording of the previous session.
00:22:53.600 - 00:22:54.156, Speaker B: Cool.
00:22:54.258 - 00:23:43.980, Speaker A: So these are kind of the basic video streaming features and how you would use live here to add video streaming into your applications. So what are some of the other features that you can potentially think about? Well, one is how do you build a feed of kind of this home feed. If you launch into TikTok, you're sent into a home feed. Right. There happens to be a pretty handy tool inside Lens that I think will be helpful and let me just find what that is. I think there's an explore functionality. So here you can kind of explore all the publications or all the posts that have been published by people.
00:23:43.980 - 00:24:51.568, Speaker A: So you can for example, create a video explorer view. You can do follow and follow. Inside Lens simply means it's very similar to kind of subscribe to channel type of concept where as people post new videos you will be able to see them come up mirror where we talked a little bit about which is curating videos. So users can go to other creators profiles and curate their own custom video galleries or they can even create their own video galleries. For example, if you want to create an education platform, video based education platform, you can have different courses to be within different video galleries. Collect is a really interesting mechanism inside lens. And this kind of represents monetization for video content so that for every publication you can specify a custom collect functionality.
00:24:51.568 - 00:25:33.360, Speaker A: And from there, basically when people try to it gives users a way to kind of pay the patronage for creators. And finally, I think content moderation is a really important thing, especially when it comes to decentralized social networking. You need to have a way to prevent bad or offensive content or harmful content from entering or from being surfaced to users. So kind of flagging sensitive content. There's a way to do that inside lens as well.
00:25:33.510 - 00:25:34.930, Speaker B: So that's kind of.
00:25:36.740 - 00:26:27.200, Speaker A: Yeah, that's in here reporting. So you can kind of follow this mechanism to flag a piece of content. That's most of the yeah, that's most of the workshop I'm going to jump to. Just to give a quick overview of all the prizes that Livepeer has of $16,000 of total prizes. The first place prize is for the best Web Three video creator social platform using Live Peer. Right here we're emphasizing creator social platform. So thinking about how to empower creators to kind of connect with their fans to monetize the content that they're creating.
00:26:27.200 - 00:27:42.484, Speaker A: Second prize for $4,000 is the best Web Three live streaming social platform using Live Peer. So imagine what a Web Three based twitch would look like or things like that. Third place best short form video social platform using Live Peer, also for $4,000. So, yeah, like imagining what a Web Three and decentralized TikTok would look like. And finally, we have a price pool of $4,000 for any hack that uses Live Peer to add video streaming functionalities into their application. Like I said, I think in today's world when you're building a social app, it is really hard to imagine the popular social applications that actually don't have any video component in there. And finally, I'm just going to mention that Live Peer is also hiring, right? So if you're interested to work on video streaming to kind of enable video streaming for the Web Three world, come and check out these job posts.
00:27:42.484 - 00:28:07.090, Speaker A: We're hiring across engineering and marketing and Debbie Evangelism many different roles. So you can go to Lifegeare.com Jobs to take a look at what are the open roles. All right, I'm going to hop over to the questions for a couple of minutes. Luke, is that cool?
00:28:09.160 - 00:28:10.388, Speaker C: Go for it.
00:28:10.554 - 00:28:16.336, Speaker A: All right, cool. We already talked about the audio file.
00:28:16.528 - 00:28:21.408, Speaker B: So Video NFT is creating a new ERC 721 collection.
00:28:21.584 - 00:29:03.680, Speaker A: I'm maintaining one token with the hash for each. Exactly. When you upload a video, it just creates the metadata that you need in order to mint the token. And you can just use that to mint the token, right? You don't necessarily need to it won't necessarily mint the tokens for you. So that means you can use any ERC 20 contract, for example, to mint token. And by the way, I also think inside Lens. Lens heavily uses the concept of NFTs.
00:29:03.680 - 00:29:12.280, Speaker A: So for example, I believe every publication inside Lens is also an ERC 721 NFT.
00:29:14.620 - 00:29:25.790, Speaker B: Cool. Going to go next is ifs Livepeer.com IPFS blah blah blah pull video from IPFS OS Three.
00:29:27.200 - 00:30:17.770, Speaker A: It's going through an IPFS pinning service. So it does use IPFS for the CDN architecture? Absolutely. The CDN through the lifetube gateway service is now a centralized CDN that we use. Right, and that's because decentralized CDNS haven't quite gotten there yet in terms of scalability. And there are some quite scaled applications that are using the Lifepear gateway right now. So we kind of use a centralized CDN, but at the same time, if you're interested to swap in your own decentralized CDN, you can actually just integrate that on top of the Livepeer.com URL and that would also work.
00:30:19.660 - 00:30:24.860, Speaker B: Cool, so video NFTs only uploaded video and getting the hash?
00:30:25.280 - 00:30:29.616, Speaker A: Yes, I think that's right. Yeah. You can then use the metadata to.
00:30:29.638 - 00:30:34.784, Speaker B: Mint your own NFT. Is there any API to get?
00:30:34.822 - 00:31:21.090, Speaker A: How many users currently watching? Yeah, that's a great question. We're working on this feature right now and it's currently not available. So my recommendation here would be to either integrate with something like Google Analytics to keep track of that information, or to simply implement some kind of counter in the backend that kind of counts how many times the page has been loaded, or use a cookie to identify unique users. And that way you can keep account and show that count to the viewers if that's an important feature in your application.
00:31:23.700 - 00:31:34.384, Speaker B: Cool. Can we do hack and run it? Is there any way to establish a private gateway mechanism with the IPFS hash? Like Submarine?
00:31:34.512 - 00:31:59.310, Speaker A: Yeah, great question. Right now there is not a way to do a private IPFS hash, but yeah, definitely. I think that's a really cool feature and something that we're interested to see exist. Absolutely. If you want to build a hack around it, let us know.
00:32:00.640 - 00:32:19.880, Speaker B: Cool. I think these are all the questions that I got. All right, I see a couple more coming in. How does performance compare to serving from IPFS or S Three?
00:32:21.450 - 00:33:45.570, Speaker A: Performance on Life Peer is pretty comparable to S Three, and I think if you're just using pure IPFS, it's going to be a lot better than just purely running IPFS. Right, because the DHT inside IPFS is actually not super well calibrated for kind of a global video streaming workflow without any kind of incentives to cache that content. I also saw someone ask, what's the cost of using Live Peer? So if you use the Liver gateway, it's free to use. You get a certain amount of free minutes, I think up to 1000 minutes, and then from there you pay on a usage basis. If we compare that cost to something like an Amazon IVs or even cloudflare stream, you'll see that it's anywhere between five to ten times cheaper than any of the centrally hosted solution. And that's exactly because it utilizes the life peer network under the hood and take advantage of kind of the cost savings when you're using a decentralized network.
00:33:48.630 - 00:33:54.406, Speaker B: All right, I think that was all the questions. Awesome.
00:33:54.588 - 00:34:17.534, Speaker C: Thanks again. Eric, thanks for this excellent presentation. Always a pleasure to have you on. We always love having you here and I know that our hackers agree. I want to encourage everyone to continue talking to Eric in discord and follow up on some of the conversations that were started here today. We all wish you a lot of good luck. There will be a team formation session happening at 06:00 p.m.
00:34:17.534 - 00:34:25.550, Speaker C: Eastern time today, if anyone's interested in that. But otherwise, good luck. Go start planning your hacks and get ready for an incredible weekend.
00:34:26.450 - 00:34:27.022, Speaker B: All right.
00:34:27.076 - 00:34:28.442, Speaker A: Thanks, everybody. Thanks, Luke.
00:34:28.506 - 00:34:30.010, Speaker C: All right, we're going to be closing the session.
