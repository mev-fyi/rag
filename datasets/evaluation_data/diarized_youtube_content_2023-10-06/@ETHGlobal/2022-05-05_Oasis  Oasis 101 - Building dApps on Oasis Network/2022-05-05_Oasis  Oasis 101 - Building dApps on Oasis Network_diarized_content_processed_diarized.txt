00:00:14.730 - 00:00:16.878, Speaker A: Cool. Great.
00:00:16.964 - 00:00:27.630, Speaker B: We're live. So we have dashboard here with us from Oasis network and you're going to learn how to build a DAP on their network today. I'll let you take the stage.
00:00:29.770 - 00:01:24.150, Speaker C: It okay. Thanks Anna. Thank you for short introduction today. As you see, we will have a short it's only 30 minutes, right guys? We will have 30 minutes intro to our network to Oasis, mostly EVM blockchain, Emerald. I will introduce some basics like our architecture and then we will dive a bit deeper on EVM chain. And the second half of this meeting we will have actually a demo. I hope it will help you understand how easy it is to use some popular tools to deploy smart contract to our network.
00:01:24.150 - 00:01:35.866, Speaker C: To testnet, for example, or even integrate a band Oracle smart contract to your app, for example.
00:01:35.968 - 00:01:36.570, Speaker A: Right?
00:01:36.720 - 00:02:43.502, Speaker C: So let me start, or just begin with our first slide, which is agenda for today. Again, we have 30 minutes to go through our Oasis network technology, also architecture and all the paradigms that I will introduce. And then we will actually jump into the Emerald paradigm, which is our first EVM compatible blockchain. You will see how this add benefits to Oasis. And then we will have two demos. I hope I can complete both in this time schedule, right? So first I will show you how to simply deploy one, let's say demo project from Truffle or with Truffle tool. And then we will have a demo how to integrate band Oracle smart contract with very simple tool in browser, which is remix, right? So at the end we will have this Q A.
00:02:43.502 - 00:04:15.966, Speaker C: If you have some questions, of course you can type them or ask me at the end of this short meeting. And then we will discuss or answer your question. Anyway, we are always available there on our Discord, we have emails for support and recently we also moved from Slack to Discord. So, yeah, Discord is our main social, let's say, channel for developers, for node operators, even for the rest of the community, right? So Discord is the thing now. Now let me begin with the Oasis 101. So the network technology, right? So what's behind? So how actually Oasis decided to design to build the network, right? So we have pretty unique approach. And you will notice that we have so we're layer one, right? And typically what is mentioning around in this blockchain area is that we are privacy first or let's say confidential built in layer one chain, right? And that's true, right? Because we have some kind of layer one and layer one and a half.
00:04:15.966 - 00:06:31.154, Speaker C: Or maybe you can also take this as a layer two if you want. But essentially, since it's so let's say connected together with consensus, you will notice that it's kind of a layer one or layer 1.5. So something in between, right? So let me first begin that we have a consensus layer, right? And this consensus layer is clean as possible. It doesn't support any smart contracts and stuff like that because we want to make it sure it's clean, it's robust, it's scalable, and it's only performing his own job, right? So that's consensus layer, right? And then we have so called paratimes, right? So paratimes are essentially, let's say, isolated standalone blockchains, if you want, which are independent from each other, right? So we can have like EVM blockchain, we can have so called cipher paradigm and we can have so called Parcel paradigm, right? So those are all blockchains who actually share a common consensus layer, right? So we are actually sending batches of confirmations to consensus layer, which means that our paradigms, our parallel executions, right? These blockchains, they don't need to have their own consensus layers, right? So it's very simplified from that perspective. And we can have only one consensus layer. And then we have different paradigms. Now, each of these paradigms will have their own, let's say, properties or benefits, right? And these benefits could be okay, so we have ethereum compatible blockchain, which is called emerald, right? So you're probably familiar with EVM chains, but then we have something called parcel paradigm, right? Parcel, for example, is for you can call it data tokenization or you can call it data privacy.
00:06:31.154 - 00:07:25.660, Speaker C: So I will introduce all things about parcel later on. But essentially, if you have some documents or files to stay confidential, especially while sending them to computing and then sending the results out, that's one of the things that you want to use. Or even cipher paratime, right? Cypher. It's even more, let's say, robust in terms of privacy and confidentiality. And we will talk and mention both, right? But we will focus on Amarov later on. Now, huge benefit coming to Oasis is that all these chains or all these paratimes will be able to talk to each other, right? So currently they still need to go via APIs, through your application and so on. But essentially they will have inter parapime communication very soon.
00:07:25.660 - 00:09:15.198, Speaker C: Okay? So now we know the architecture. Now I will jump to each of these pair of times and a bit more into the numbers, right? So first of all, Oasis network, if we compare a bit to other networks, you will notice we have pretty good average block time on consensus. And since we have all these pair of times that are sharing the consensus, they all have the same average block time, right? So it's 6 seconds or plus minus, right? But 6 seconds, it's the thing, right? We have instant finality, which you can compare that to other chains that you will see and notice that we are almost the only one with the instant finality. And this could be easily tested or tried if you're using, for example, our Wallet browser extension. And then you can move, let's say, rows from one address to another or maybe even between consensus at pair of time you will see how awesome and fast it works. Right? So that's one of my favorite features actually on Oasis because everything is so connected and it works together so smooth that that's the biggest benefit from my perspective, right? Because I was also using other chains before and when you get used to it some faster, cheaper, user friendly chain, you cannot actually go back to slow and to expensive chains. Don't ask me which one of this is that one, right? So privacy I mentioned we have built in privacy in layer one.
00:09:15.198 - 00:10:36.982, Speaker C: So you will notice we have this confidentiality support and maybe one good data about throughput, right? So we have up to one K transactions per second. Now keep in mind that that's let's say per parapime or one blockchain but you can have thousand blockchains, I mean thousand paratimes, right? So currently there are three built by Oasis team and you have opportunity to build your own paratime, right? So that's very convenient for developers, right? You can actually design your own paratime. I don't know what's your idea behind, but you can have another features that are not, let's say in parcel, cypher, Emerald but you can add your own paratime, right? That's really cool. Cool. Maybe one more thing about smart contracts. There is no secret that solidity smart contracts are supported on EVM blockchain on our Emerald but we also support vASm WebAssembly if you want. This is supported on Cypher and currently I will mention it's the Rust language but we will come to there right now.
00:10:36.982 - 00:11:53.674, Speaker C: First cipher paratime. Cipher paratime as I mentioned is again blockchain paradigm that actually shares consensus and it has the same average block time, so 6 seconds. It provides confidentiality with private transactions and private state, which is very important here, right? And you can imagine the technology that was primarily, let's say on our machines. So we are using or there is an example with Intel SGX enclaves. The point here is that this technology trusted execution environment. We want to make sure that whatever you send to computing that this environment is secured and can be trusted. Right? That it's not malicious, right? Even though that some hacker actually get into your machine or your environment, this thing cannot get malicious or hacked because it's hardware, right? Even though well, somebody can physically actually remove that from the hardware.
00:11:53.674 - 00:12:40.170, Speaker C: But that's probably mission impossible right now. Of course, scalability is there because of our unique architecture and design and you can see that most and all actually our networks or blockchains are decentralized. So we don't really run any our nodes, these nodes are all decentralized across the world. So currently we have a bit more I think than 43 operators on cipher paradigm and we are always using Rose as our native token. So on consensus there is rows, we have rows on cipher paratime, we have rows on Emerald and we have rows on parcel.
00:12:40.250 - 00:12:40.880, Speaker A: Right?
00:12:42.210 - 00:14:01.400, Speaker C: Now if we jump to parcel that's again a paratime, it's let's say layer one, five or 1.5, or even two if you want. Now, the parcel, if cipher is focused on everything privacy or everything confidential, parcel is more for data or documents that can be tokenized and private or protected or isolated, right? So we have this protection and we have all the compliant environment that's very important for enterprises or even for our national institutions and so on. So we are compliant. You can actually govern the data, so you can have data managers who can actually decide what is allowed or not. So how the data is shared, right? And also you can analyze the private data without revealing the raw data. That's pretty crucial here, right? So essentially, when you have encrypted data, you can send this data to our, let's say black box.
00:14:01.400 - 00:15:50.518, Speaker C: Data can be processed, computed, and then what goes out or the analytics is done without actually revealing this encrypted data. Now, it's very important that we also have the audit possibility, right? So we have Immutable ledger for audit, which means that all transactions that will operate on the sensitive data are also maintained, right? So it's possible to get all this if you have any compliance request. So you have audit. Now we will jump to the Emerald. Emerald actually is EVM compatible blockchain and we have full EVM compatibility, right? So you can now imagine the EVM web based NFTs metaverse, it's popular with GameFi, you can imagine Oracles, you can imagine anything, right? DEXs and so on, right? So a lot of stuff coming and scalability again mentioned since we shared the consensus 6 seconds block time and the parameter that it's very crucial from my perspective is that the fees recently were actually set to very low amount just to prevent some attacks and so on, right? But essentially before that we had zero fees. But essentially to avoid all these attacks, we had to introduce some fees. But they're like thousand times lower than ethereum.
00:15:50.518 - 00:16:52.094, Speaker C: For comparison, right? Now, Emerald runs on over then 56 node operators already. And we are using Rose as a native token. So, just for comparison, when we launched Emerald EVM paratime, you will notice that we had almost the same transactions per day when we picked, right, as the ethereum on the average from January 3 to February 3, basically. So in one month, of course, that then decreased because the Hype and so on went down. But yeah, on average now we have around two K. This is probably a bit old data, but it's still pretty good that consider that we are pretty new chain, right? Emerald, cool. So max throughput, that's also a good thing to point out, almost 7 million transactions per day.
00:16:52.094 - 00:18:02.882, Speaker C: We are scaling that up to 10 million in the future. Transactions fees are mentioned down below. And before we actually jump into the examples, I actually can share one very unique news. If you're following our social channels and especially let's say Twitter and other accounts, you maybe catch the news that we actually launched our first confidential privacy enabled NFT. So you can actually dive deeper on that. But that makes huge environment to build very new and unique DApps, right? Because now you will have opportunity to have private NFT with some data that is not revealed, right? And then you can have some NFT that it's revealed, right? So we are basically using combination of Parcel and EVM blockchain. So very unique feature.
00:18:02.882 - 00:18:58.706, Speaker C: I don't believe that anyone else has that. So thumbs up for that. Now when we go to compatibility, right? EVM solidity, I bet you already know that, right? So we have smart contracts in Solidity. You will notice that we have our paratime module based on Sputnik VM. It's pure rust. EVM implementation. The tools that you are probably already used to it, if not, they're the most popular like Hard Hat, Truffler, Remix that we will have an example and recently actually, if you are interested, you can join I will say our community, especially in the development area because I will try to onboard developer ambassadors.
00:18:58.706 - 00:20:15.280, Speaker C: So we have one developer ambassador joining us who actually add support or let's say documentation for different languages. For example, not only JS and these tools, but we have this wiper thing, we have other languages so we can deploy smart contracts and so on in different ways. Okay, so parade time with Truffle, right? I will not be too long here. So I will give you an example here. But essential part to deploy on our network is just how and where do you configure your network parameters. Right? So today we will actually see how you can configure your config file in JS with our network and deploy that on testnet, right? So we will have an example in Truffle and then Hard Hat, same story. You have like hard hat config TS file TypeScript and then this is the parameter that you need to change, right? So you need to provide the networks and then you choose where to deploy, right?
00:20:16.450 - 00:20:16.922, Speaker A: Okay.
00:20:16.996 - 00:20:45.862, Speaker C: This is the example for Remix. We have Solidity contracts, we can connect multiple accounts then with one account or we deploy the smart contract to Testnet or Mainet and then we can try how this smart contract works, right? So we will do that with Remix just to show you how you can get some prices like Bitcoin and Ethereum, right, versus USD.
00:20:46.006 - 00:20:46.700, Speaker A: Yeah.
00:20:48.110 - 00:21:28.694, Speaker C: One thing to remember, if you are developer, we have pretty nice good environments to start with. You can locally actually start. You can download docker image from Docker hub. I think the recent version was updated three days ago. But essentially you get single Oasis validator node. We have three Oasis compute nodes with Emerald paratime and we have the gateway all inside that image, right? So you can prepare your local environment. It could be found on docker hub Emerald dev.
00:21:28.694 - 00:21:58.082, Speaker C: So that's awesome if you want to start quickly on your local machine, right? Okay. If you want to get parameters, you can always go to Docs Oasis, dev. So essentially, you have all these parameters for Emerald from Testnet Mainet. So basically, web3 gateway configurations, the RPC and so on, right? Chain ID.
00:21:58.136 - 00:21:59.060, Speaker A: And so on.
00:22:00.710 - 00:22:17.426, Speaker C: Block explorers. We have separate block explorer for testnet and separate Block explorer for Mainet. Keep that in mind because sometimes people start deploying on testnet, they are using the mainnet Explorer and then they cannot see the transactions or smart contracts.
00:22:17.458 - 00:22:17.846, Speaker A: Right.
00:22:17.948 - 00:23:04.790, Speaker C: So keep that in mind. This could be found on our docs as well. But yeah, go to the right Explorer. So, yeah, now we have around five minutes or so, or let's say almost seven, eight. I will show you first integration with Band Oracle smart contract, right? So this is a demo when I will show you the remix and how to use Band. So I will just move to another out of the slides to another tab I already prepared. So if you want to get this example, this is just an example smart contract that you can use to deploy on our network.
00:23:04.790 - 00:23:45.518, Speaker C: Essentially, if you will go through, you will notice that down below where the contract begins, it's called Demo Oracle. You will notice that our function or let's say our function, get price or get multiple prices, will actually return wrapped BTC versus USD, right? Or wrapped BTC versus USD here and ETH versus USD. So essentially, those are like pairs always up and below, right? So we can call them base versus quote.
00:23:45.614 - 00:23:46.260, Speaker A: Right.
00:23:48.310 - 00:24:14.618, Speaker C: So let me show you how to deploy any contract in remix. First, we need to choose the right compiler. So we are using the solidity zero point 6011. This one. Yeah. We will have to compile the contract right. Now if you go to deploy and run.
00:24:14.618 - 00:24:42.870, Speaker C: Yeah, so that's the second tab. So we compiled already. Now we have deployment. You have to connect one of your accounts. Right? So what I will try to do is actually let me switch the network. So I will go to Emerald testnet. I will connect, cancel, cancel, cancel.
00:24:42.870 - 00:24:54.582, Speaker C: I will connect to my different where's? My Oasis.
00:24:54.646 - 00:24:55.260, Speaker A: Yes.
00:24:56.830 - 00:25:01.034, Speaker C: And now I will go to connect my account.
00:25:01.152 - 00:25:02.220, Speaker A: Right. So.
00:25:04.190 - 00:25:48.570, Speaker C: Let me refresh that because I want to make sure that I connected the right address, right? Okay, let me compile again. Let me go to deploy and let me check the yeah, of course. I need to choose injected web3, right? So that's why I didn't have an option here. So that's my address. Now you see 19.9. That's basically rows or our test tokens. Okay, so what do we need is actually a contract address, right? A contract address can be found on our documentation.
00:25:48.570 - 00:26:08.490, Speaker C: So I will just jump to here and keep in mind that there are two contracts. One is for testnet and one is for mainnet. So I will use the testnet contract address for our data aggregator. Copy that. And I will put that to my address reference.
00:26:08.650 - 00:26:09.178, Speaker A: Okay.
00:26:09.284 - 00:26:16.180, Speaker C: And now I can press deploy Poof. Okay. I will have to of course confirm that.
00:26:17.110 - 00:26:19.954, Speaker A: Confirm, boom.
00:26:20.082 - 00:27:12.678, Speaker C: Let me extend that a bit, okay? And down below you should see a transaction. So I opened that transaction. And if I go to transaction hash, I can copy my address, essentially copy that. And if I go to testnet explorer, so you see it's testnet explore Emerald. And if I put here my address, I should see, you see 36 seconds ago, creations of smart contract, which is awesome, right? So there is a smart contract on the testnet, boom, like that. And if I just show you an example how you can now get some results, right? So there are functions. Get price.
00:27:12.678 - 00:28:07.442, Speaker C: For example, that was one for bitcoin versus or wrap bitcoin versus USD. Okay, let me do that and let's see what happens. Get price. So we see. Now we have a call to our smart contract from my address. And if I extend that, you will notice I have the output and I think it's exponent -18. So, yeah, keep in mind that the price would be like 39,164 USD, right? So, yeah, that's one cool feature.
00:28:07.442 - 00:29:14.826, Speaker C: Or get multiple prices. So that's all online now on our testnet, right? And there is a price for BTC rep BTC and for ethereum, right? So that's pretty cool, simple, fast. And this is the remix. Now for the Truffle, I think it won't be enough time, but essentially if I just give you an example in few minutes, right, I will just copy my code that I prepared and just deploy that on testnet just for a demo. So let me just go to CDLs. You will notice I already have a metacoin project, that's demo project from the Truffle CD metacoin. So you will notice I have contracts here, I have Truffle config JS, right? And this is the essential file.
00:29:14.826 - 00:30:33.910, Speaker C: So if I say bi Truffle JS, I can see what I have inside. So you notice the example comes with all this code already, but without Emerald testnet or Emerald Mainet network, right? So that's what I actually already inserted. And there is one required, let's say module or library to use this hardware wallet provider to get the private keys from the environment variables. So let me just try to execute that. Let me go out if I say so, yeah, if I say Truffle test network network and I will deploy that on Emerald testnet, I think it was testnet, right? So if I just let me try VI Truffle again. VI Emerald testnet, you see, that's the network I want to deploy. So that's my testnet.
00:30:33.910 - 00:30:49.180, Speaker C: Okay, go out again. Boom. Okay, let's do it. So Truffle, truffle test network, emerald test.
00:30:49.790 - 00:30:50.540, Speaker A: Net.
00:30:55.890 - 00:31:41.126, Speaker C: Probably I misspelled something. So Truffle test network, emerald, okay, package maybe I missed. Do I need to import? Let me try one more thing. Maybe I need to export. Yeah, probably I have to export my environment variables. So yeah, my environment variables will be two private keys for two addresses that we can transfer tokens between two addresses. And I have demo account, so no worries.
00:31:41.126 - 00:32:26.410, Speaker C: Let's first export. Let me see if now it works. Yeah, looking better. Okay, compiling my contract. So keep in mind, this is live. So these contracts are now being compiled and deployed to testnet, right? So essentially what we needed here was just reconfiguring our Truffle config JS file and executing the Truffle test network. And this is the destination network that you can find inside this configuration file.
00:32:26.410 - 00:33:19.034, Speaker C: For this example we had to export private keys because now we will use these private keys to test smart contracts. Yeah, so essentially if I just show you what's inside, right, meanwhile that testnet is deploying that and testing the smart contracts. In my metacoin, I have contracts and there is, for example, you will notice the first one is test metacoin. We can do metacoin open, yeah, we can use text edit, it doesn't matter. But yeah, essentially there are some parameters already written just for a demo. And this is now executing on our testnet. So we will not focus on that.
00:33:19.034 - 00:34:20.154, Speaker C: But essentially all these smart contracts inside our metacoin demo example. So it's just an example, don't be overhyped about our new coin or something. Okay, that's just a demo from Truffle, right? Okay, cool. So, yeah, we're almost at the end. So before we actually finish, we will wait and see what will happen on our testnet, deploying our contracts. If you have any questions, let me read them through if you have any, all right, do we have any questions? Yeah, can you please share the code of the contract? So yeah, that's what I did, but I'm not sure which one you want. By the way, for any of these examples, again, you can find I will type in the chat.
00:34:20.154 - 00:35:24.900, Speaker C: So if you go to docs, let me just copy and paste that here. So I copy and paste it, right? Let me send to everyone. So here you have the links to our docs with all these examples you will find an example for Oracle and the smart contract. There you will find the example for this Metacon example with Truffle. And there are also examples for Hardhead and we will add support also for the Viper and Rust and so on, right? So be ready because we will support not only this, let's say flow, but yeah, here we have it, right? We have our smart contract deployed on testnet. We have the tests successfully passed on the testnet. So you see this test, initial balance and so on.
00:35:24.900 - 00:35:54.380, Speaker C: We were sending let's say 10,000 metacons from one account to another. And so on. So, yeah, that was actually done on the testnet. So let me check if we have some evidence on our testnet. I will just go to my transactions. If I will be lucky, lucky, lucky. Who knows, right? Probably I will not find it like that.
00:35:54.380 - 00:36:05.840, Speaker C: Contract call, token transfer, blah, blah, blah. I believe that should be something from here. But anyway, so it's on the testnet, right.
00:36:06.690 - 00:36:07.440, Speaker A: Cool.
00:36:08.690 - 00:36:16.420, Speaker C: Do we have any other questions about the cipher paradime? It's possible to run bits that nobody else can see.
00:36:19.530 - 00:36:22.758, Speaker D: I think we'll probably take the questions over to Discord in a moment.
00:36:22.924 - 00:36:23.590, Speaker C: Okay.
00:36:23.740 - 00:36:44.382, Speaker D: Which we have the ETH Global Oasis sponsored discord, as well as anyways contact you. Okay, I think that'll be best. Thank you very much. That was very informative. We're going to move it over to the next talk coming soon. You can find you on the Discord, and if you have any questions, you find them there.
00:36:44.396 - 00:36:44.958, Speaker A: Here.
00:36:45.124 - 00:36:58.720, Speaker C: Yeah. Thank you. So I know there are so many things to talk about, so yeah, welcome and join the Discord. We have many things and many developers here. So come, we will help and yeah, I'm happy to start building with you guys.
00:37:00.130 - 00:37:00.590, Speaker A: Great.
00:37:00.660 - 00:37:02.000, Speaker D: Have a great day, everyone.
00:37:02.450 - 00:37:04.540, Speaker C: Yeah, sure. Same.
