00:00:07.490 - 00:00:24.642, Speaker A: Okay, we're good. Awesome. All right, we'll redo the intros. So hi, everyone. This is Matthew from unstoppable domains. If you've checked in with us earlier, you'll know that we have two tracks for hackathon prizes for hackfs. One is for building decentralized websites.
00:00:24.642 - 00:00:56.246, Speaker A: You can find more information about that. It by clicking in our channel. And we also have a Google Doc that describes that in a little more details. And then we also have a second track for building a decentralized chat application. We're going to talk about that a little bit more today. We actually have Carson from the textile team joining us to talk about threadsdb. So if you're trying to build an application that works on filecoin, you're probably going to want to use some tools to make it easier for you to organize and save data on the network so you don't have to write all of it back in for yourself.
00:00:56.246 - 00:01:29.726, Speaker A: And that's where something like Threadsdb comes in. There's actually a couple of different ways, implementations of organizing data on the back end. Another one just to mention is Orbitdb. We're talking with them as well. Maybe they'll join us on a future office hours. But today we've got Carson here, and I don't want to hold him up since he's taken time out of his day to come and join us to talk about threadsdb, and in particular, hopefully give us a little bit of insight into how he might implement a chat app up on Threadsdb. And believe it or not, they did this before over a year ago.
00:01:29.726 - 00:01:44.206, Speaker A: And there's an old medium post where you can go find that as well, which would be helpful for people participating in the hackathon to get an idea how it works. So without further ado, I'm going to hand it over to Carson and we'll let him talk a little bit about threads and chat apps.
00:01:44.398 - 00:02:14.880, Speaker B: Cool. Yeah. Thanks so much. And this is your office hours, so I'll try to keep it brief because I don't want to dominate the conversation. There's probably tons of awesome questions, but yeah, I can talk a little bit about threadsdb. So basically, if you want to win one of these prizes, especially the chat one, I think I might have a pretty good example that folks could play around with Matt. I just lost Matt, but hopefully everybody else can still hear me.
00:02:16.210 - 00:02:16.622, Speaker C: Yeah.
00:02:16.676 - 00:03:17.922, Speaker B: Okay, cool. So, right, threadsdb. First of all, threaddb. It's a decentralized peer to peer database built on top of the best bits of lib, P to P and IPFS. We use it for all sorts of things. It's the backing for Textile's Buckets API, which is like an API for pushing large files, mutable, collaborative files on IPFS, and if anyone's played around with any type, that app is built on top of Threads and a bunch of others. Anyway, I don't want to dwell on what it is too much, but it's a decentralized peer to peer database and like decentralized peer to peer databases, you can do things like synchronize state between different peers and why that might be useful for someone.
00:03:17.922 - 00:04:33.366, Speaker B: Building a chat app is basically each of your peers can just write to their local database, sync that state across with other peers and you effectively have a chat app. And so Matt and the Unstoppable team mentioned a day or two ago, hey, we've got this chat app Bounty and do you guys think you could point some folks in the right direction with building this on threadsdb? And so we put something together and here I'm just going to paste it into the chat here. So we've got a repo of examples. Best way I find to learn is just to break things. So we've got a repo of examples that you can break and there's a pull request in there for a chat app that is pretty neat for a couple of reasons and I'll highlight why those reasons are. One, it's actually based on our local first offline first database implementation of threads. So basically what you're doing is you're writing to a local database in the browser's cache using LevelDB and then you're syncing the updates to your remote connected peers when you have internet connections.
00:04:33.366 - 00:05:12.310, Speaker B: So in theory, this chat app works even if you're not connected to the internet. You could write your little chats and then when it goes online, it will flush those out to your other peers. So that's pretty cool. And I think certainly like in the decentralized world, the remote or local first is a pretty nice feature. The other cool thing about that is and my team member and our CEO Andrew actually put this chat app together. He wrapped using basically this is like a replacement for Socket IO. So it uses Observables as a really nice wrapper and framework for just like pushing and pulling updates.
00:05:12.310 - 00:05:48.274, Speaker B: So the idea is you could actually any app that where you might want to use socket I O. You could just plug this threads demo in there and start playing around with it. And that's kind of nice because it means suddenly you've kind of got this decentralized framework that fits into a bunch of different contexts. So we just got this pushed up this afternoon. I recommend you go in there and start playing around with it. I guarantee you it will break and it's your job as the hackers to fix it and make a better version of it. And I'm going to be playing around with that at the same time actually.
00:05:48.274 - 00:06:42.686, Speaker B: So you may see some pushes to that example as I find some rough edges and things like that. But I highly recommend you just grab it. It's one of those things where you check out that examples, repo CD into the I think it's called Hub chat or something like that, CD into that, NPM install, NPM run start and it'll pop up a little thing, open one up in actually, I guess I could. Well, I don't want to take up too much more time, but open up one in Safari, open up another window in Firefox and start chatting with each other. And you'll see the little chats popping up, and it does work in real time and it's pretty slick. And if it breaks, ping me here. I'll hang out in the Unstoppable Domains chat for the next couple of days or weeks, ping us in our textile chat.
00:06:42.686 - 00:07:04.860, Speaker B: And, I mean, I want someone to win with this, so I'll try to provide some support as much as I can, because honestly, I think the more sort of decentralized chat alternatives we have, the better, and I'd like it to be mine. But what I really want is just a really solid chat app. So let's make that happen.
00:07:07.710 - 00:07:08.122, Speaker A: Yeah?
00:07:08.176 - 00:07:13.534, Speaker B: I don't know what else I can say about that except get in there and play around with it. Break it.
00:07:13.572 - 00:07:29.822, Speaker A: Yeah. So I can provide a little context on what we're seeing in the market. And first carson, can you hear me? Okay? Just checking my volume. Is it I'm all right? Perfect. Excellent. Yeah. So we actually see a lot of excitement around there's.
00:07:29.822 - 00:08:36.940, Speaker A: There's several people working on decentralized chat just in the ecosystem. The thing that's actually happening this year that's new and different and I think really important is you're going to be able to incentivize the keeping of your messages, right? That's a huge difference. I've had conversations on applications before that I've lost or that have been deleted, just because some apps will only keep your chat history for so long. I actually had with Bogdan on our team, he actually had a link that he had been using for forever, and for whatever reason, he lost his access to that link that he had been using for this particular he had a blog saved from like three years ago, and whenever it got deleted, now he can't find it, right? And it's gone forever. So if instead users own their chat messages and they can pay for the storage of those chat messages, and they can ensure that they're going to have those chat messages forever, it's pretty awesome. And then if the app goes away, there's so many apps that don't exist anymore that I used three or four years ago. You still have your chat history.
00:08:36.940 - 00:09:18.326, Speaker A: And then it's also neat for app developers, and this is maybe a longer term thing because they don't have to worry about building chat protocols anymore. Because if a lot of people build competing chat protocols and some of them are really good, then why don't I just plug into that on my application? And now I don't have to worry about all these chat design features. I also don't have to worry about privacy, right? Because as the app developer, I'm no longer worried about leaking my users text messages. So it can simplify the application development. It makes the chats portable across a bunch of different apps and it also makes them essentially immutable for the user. And this is all possible. It only really works once you have an incentivized chat system.
00:09:18.326 - 00:10:12.614, Speaker A: There's not a way for you to pay for your storage to be up there for forever. Then you're relying on other people being nice, essentially for keeping your chat message up, or you have to run your own node. So you have this situation where you either have to be really rolling your own all the way to having your own server at your house, or you can't really use it as an end user. For us at Unstoppable, we have tens of thousands of people who are a little less sophisticated than wanting to run their own node or their own server from their house, but they are a step up from normal users where they're interested in using new technology. And so I'm just going to put it out there. Anyone who builds a chat app that passes in this competition, because it's basically a pass fail, we will put it into our front end application on Unstoppable. So you will guaranteed have 10,000 plus people.
00:10:12.614 - 00:10:41.318, Speaker A: It's actually closer to 40,000 plus people. Email Blasted on our side about using this chat application, and we're assuming that filecoin comes out in August this year. So we're looking at doing that push very shortly after. People are like, what are people going to use Filecoin for? Why do I need a p to p server? I think chat is very natural. It's one of the things I use the most. I have like 50 different places where I'm messaging right now. It's annoying.
00:10:41.318 - 00:11:10.666, Speaker A: I'd like to have one. I want to be able to save my chats for forever. I don't want to have to lose them. It's a surefire use case for P to P storage. The other cool thing, it's tiny, right? Which is a huge advantage for end users because it's text. We already have people looking at video and we've actually done some work on that as well. But if you have a pure text messaging app that covers 80%, it's the 80 20 rule of the use case.
00:11:10.666 - 00:11:38.994, Speaker A: And you could have users storing their data and it would only cost them a few dollars or maybe even less for a whole year because text is just so tiny. So yeah, I think that's it. On Business Overview, I'm going to take a look and see if there's any questions here, and I don't think there are yet. Cool. All right, so if someone has questions, submit them in the chat. We'll find them. Let's see if there's anything else we want to talk about.
00:11:38.994 - 00:12:08.446, Speaker A: I mean, that's really it, guys. You check out the docs for threadsdb on chat. Also, Orbitdb is another option for storing these things and get to hacking. I'll take a pause here for a second. And then I'll see who else on my team is in this thing if they wanted to present anything specific. Otherwise, we're here for you to help you answer questions on the hackathon. Yeah.
00:12:08.468 - 00:12:12.160, Speaker D: If anybody wants to chat karate. Yeah, go ahead.
00:12:14.690 - 00:12:17.486, Speaker E: You guys are going to get sick of hearing me. Matt, this is, like, day one.
00:12:17.588 - 00:12:18.480, Speaker A: Not yet.
00:12:20.850 - 00:13:00.526, Speaker E: No, I was going to say if you could demo. So I'm going to be onboarding my users and my application will basically you have a JavaScript library that I can install in my app and put in there so that they can search the domains on your API, and then it can integrate with MetaMask and then purchase a domain from you. So, like, say, if my new portal app allows people to push this decentralized subscription blog and then I want to start selling them, for example, on my platform, I'm calling it a platform. It's not yet, but is there an API way I could use your JavaScript to search your crypto or whatever domains you have and then use MetaMask so that they can this is them.
00:13:00.548 - 00:13:00.734, Speaker A: Sorry.
00:13:00.772 - 00:13:08.382, Speaker E: This is me pushing my wallet. I always do this. It's weird, I know, but is there a way I can do yes.
00:13:08.516 - 00:13:47.898, Speaker A: So and we actually have it even easier than that, if you would like. So we actually have a reseller's API for the domain name, so you can actually hit an API endpoint, and it's at docs. Unstoppabledomains.com. Johnny on this call here, if he's still hanging around, is actually the person who you'd be working with to get that integrated. And the way that it works on our smart contracts on the blockchain is we have a permission to mentor. And the reason why we built it this way is it makes it way easier for resellers. Right, because now you can actually just hit our endpoint and you can do things like take fiat payment, which would allow you so you have more options for purchase instead of just MetaMask.
00:13:47.898 - 00:13:49.680, Speaker A: Like you're saying, press the MetaMask button.
00:13:50.290 - 00:13:51.626, Speaker E: It's my hardware wallet.
00:13:51.738 - 00:14:24.520, Speaker A: Yeah, but I'm saying you can offer additional payment options instead of just MetaMask, which could be very helpful. There's also, of course, methods here for you to check domain availability, and we'll lock them and all those other kind of things while the transaction is complete to make sure that your users get them. And we already have a reseller integration set up with my Ether wallet, which is live. And I'm the wrong person to demo this because let's see if I can connect here. You connect.
00:14:26.010 - 00:14:29.138, Speaker E: If you give me your seed phrase, I'll be happy to demo it for you.
00:14:29.164 - 00:14:57.410, Speaker A: Yeah, well, I'm not set up to demo here, but I promise you we're inside of my Ether wallet. When you sign in, I don't want to connect and drop a password across the entire Internet right here, but it's there. So we have a reseller already. Set up with mew. It's in our docs, and so you can totally do that with domain names. And My Ether Wallet even went a step further where you could buy a domain name there and then also deploy a website. So they did the whole thing on their side, so they've got a cool set up.
00:14:57.410 - 00:15:19.820, Speaker A: And my ether wallet is going to be implementing chat. And right now, we have a single chat protocol on there right now, but whoever builds one for this, it'll also be a chat option on My Ether Wallet. So I think that it's pretty interesting right now what you can do. We're really trying to help people get decentralized tech into all the partners that we work with.
00:15:20.910 - 00:15:22.026, Speaker E: Thank you very much.
00:15:22.128 - 00:15:34.560, Speaker A: Yep, no worries. Cool. I'll see if there's anything else I can mosey around with here since we're on these office hours.
00:15:36.930 - 00:15:38.270, Speaker D: Go ahead, Nestor.
00:15:40.150 - 00:15:40.900, Speaker A: Hello.
00:15:43.190 - 00:16:11.580, Speaker F: I would like to ask about I was asking that on the Discord channel, on the Slack channel. What about if you want to deploy a block in the platform, but you want to have kind of like an API, JSON API, in order to consume all the posts that you have done and use them in could be a react native application.
00:16:12.110 - 00:16:52.838, Speaker A: How can we do we actually the best person to talk to about that is actually Don Stoltz. So, Don, if you're still on the call, we'll unmute you. Yeah, we see you, Don's, on here. And Don actually built a blogging tool as part of one of the examples that we have. So Don, if you don't mind doing a little talk about the blog that you built and then maybe even demo it, because when you have the blog tool, you have to store posts, right? And then users also comment, which we're working on enabling. And I think Don actually already has the pull request for comments on that as well. And they built that through three box.
00:16:52.838 - 00:16:55.770, Speaker A: So, Don, are you available to chat?
00:16:56.350 - 00:17:05.482, Speaker C: Yeah, so I didn't quite catch the question, but I can the blog, whichever you guys need there.
00:17:05.616 - 00:17:26.866, Speaker A: Perfect. Yeah, go ahead and get set up to demo the blog so you can share your screen and show people what that looks like. He's basically just asking, I want to store content, and then I want to be able to update that content. The blog is a good demo because you have one blog post and then you have two, and then there's also comments, and I believe you use three box to do that, but I'll let you take them through it.
00:17:27.048 - 00:17:53.100, Speaker F: Yes, and actually it was about also, how can you consume all the posts in a react native application, for instance? Yes, so you will have your blog on a browser, but also you will have also, like, JSON API just to consume that in a react native application.
00:17:55.630 - 00:18:05.134, Speaker A: Like an yeah, yeah. Okay. Don, are you still with us? Yeah.
00:18:05.252 - 00:18:05.920, Speaker D: Okay.
00:18:07.890 - 00:18:30.520, Speaker C: If I'm understanding this, like, pretty much just want to access, just call the three box rest API would be pretty much what you needed. That's what we're using for the blog. We're using their messaging, and we're just storing each post as basically a separate message.
00:18:35.050 - 00:18:54.880, Speaker A: Let me see if I can share my screen here and provide a little more context here. So let me know if you can see the screen. Cool. Excellent. And then don let's talk about how a person actually goes through the deploy on our website. So Don, if I'm going to my domain and then, oops, this is fine.
00:18:55.890 - 00:18:58.970, Speaker C: Hit the code and stuff online if you want me to share the screen.
00:18:59.140 - 00:19:05.620, Speaker A: Yeah, that's much better. You go ahead. Cool.
00:19:06.710 - 00:19:16.790, Speaker C: Yeah. So here's our log. I just have it running locally, but it runs the same, whatever all that uses.
00:19:22.730 - 00:19:23.190, Speaker A: Yeah.
00:19:23.260 - 00:19:26.106, Speaker C: So you just sign in using the.
00:19:26.128 - 00:19:26.810, Speaker B: Regular.
00:19:28.510 - 00:20:33.234, Speaker C: Web, three MetaMask, and everything's already set up from a config file. And the config file is just stored on the this has most of the information that would be static in our react app. And basically all that it needs to be more dynamic is the address to find it with three box and Orbit BB. And then, like I was already saying, each post is basically a separate message using three boxes, messaging API. So, yeah, it's just ads and posts using their API, which is really very simple. Like for adding a post, all I have to do is parse it into a string and then just call add post, red post. Yeah.
00:20:33.234 - 00:20:36.660, Speaker C: Three box was the easiest way to get a blog quickly up and running.
00:20:38.150 - 00:20:59.980, Speaker A: Yeah. All right. And then how did you tie the three blocks ID to the blockchain domain name? Because that may be a question that they also have. That's also pretty easy.
00:21:00.510 - 00:21:29.490, Speaker C: Yeah. So basically the wallet is just the same. There's not any field in the domain that comes from three box. Like on your domain name, all you would store is the IPFS hash for this website. And then from our website, when you set up a blog, it automatically adds the admin wallet as the owner of the domain. So that's the connection right there. That and the IPFS hash.
00:21:29.490 - 00:21:39.270, Speaker C: Yeah. So just sharing a wallet and then with three box, it automatically sets up your profile when you sign in with a crypto wallet.
00:21:41.610 - 00:22:02.142, Speaker A: Cool. All right, excellent. I hope that was useful. We haven't done a lot of exploring of how to just digest messages into I should rephrase that. We actually just started looking at digesting messages sorry. Like some sort of doing, like, RSS feeds. So I don't have an update on that.
00:22:02.142 - 00:22:35.378, Speaker A: But if we're looking particular at our blog, you can see that we're just using three box and they do have an API endpoint to grab all those messages that you were looking for. There's a couple of questions here. I'm going to answer them real quick. So one is from Darren, he's like, can domains be reserved with Chinese characters? The answer is not right now. We actually had a few reserved as Chinese characters earlier. We decided to pause registration of Chinese character domains at this point in time just to prevent confusion in wallets. Like it's a lot more parse trickery.
00:22:35.378 - 00:23:19.954, Speaker A: Yeah, because there's a way that people could get a name that looks very close to another one, but they do support puny code so we are able to do that at some point in the future. There's another question here, how will E 2.0 impact on Supple domains? So I will say it is undetermined at this time the size of the impact of E 2.0 on Supple domains. It is going to allow us to do many more transactions. So when we're looking at the future of blockchain domain names, you have to decide are you going to be on the layer one or eventually do you need to roll up and be on layer two? We're going to see how E 2.0 rolls out and then take a look at transaction throughput.
00:23:19.954 - 00:24:14.214, Speaker A: If you work with Ethereum a lot, you'll know, recently there's been really high gas prices on there. It's not really a problem for domain names because you're only updating those records a few times a year or maybe once a month. It's not like sending stablecoin or something where literally it's being turned over three or four times a day in some cases and those people are much more likely to move to layer two first. So we'll sit happily on layer one and then in terms of what it looks like when it started, we actually have experience with that already because we built another naming system on Zilica prior to this and you just split the state. So we're looking forward to ETH 2.0. We are in a wait and see mode because we don't want to make too many major updates to the underlying protocol while E 2.0 is still kind of pending, but the developers are pretty reasonable over there.
00:24:14.214 - 00:24:48.786, Speaker A: We'll be able to make any transition that needs to be made and I think that if anything, it's just going to make transaction costs a lot cheaper for everybody and increase the utility. So with the sooner the better. And of course we don't want it any sooner than it's ready, so yeah, that's it. Is there a service similar to ETH Link? It's another question. Yes, I think it's called hosting, like dot hosting IO. So if I'm wrong then we'll try to correct that and drop that into the slack. We would like to have another one.
00:24:48.786 - 00:25:20.986, Speaker A: So if you are thinking about building a service similar to ETH Link then yeah, so someone just dropped one. They built Zill Sh, so thank you, that's awesome. But if you're looking to build one, we do have a grants program as well. We run that we actually run our Grants program in conjunction with a few other companies that also do grants. So, yeah, definitely we want to make that easier to build. Since we've got all these hackers here, I might as well tell them the other things that are very interesting to be built for the decentralized web. One is an Ethereum Lite client.
00:25:20.986 - 00:26:00.714, Speaker A: So there's also going to be that's very helpful for browsers looking to resolve blockchain domain names. So we're looking to help and assist building an Ethereum Light client along with we're hoping to work together with ENS team on that as well and potentially others in the Ethereum community. So we just talked about that yesterday with them. So that's going to be big. And obviously an Ethereum Lite client is good for filecoin and everyone building decentralized websites as well because it's going to make it easier to do the reads. Very big browsers are concerned about the size of those types of things. So that's another thing in addition to these redirect links that came to my head there.
00:26:00.714 - 00:26:04.620, Speaker A: Cool. Excellent. Ready for the next question?
00:26:09.090 - 00:26:13.120, Speaker D: I don't know if we have any specifically in the chat yet, unless I'm missing somebody.
00:26:14.930 - 00:26:18.958, Speaker A: Cool. I can actually just talk about a few things until we pop. Yeah, for sure.
00:26:19.044 - 00:26:28.258, Speaker D: Yeah. Either you can talk and then if anybody has just open discussion about unstoppable or questions they had, it doesn't have to be a specific technical question.
00:26:28.424 - 00:26:58.570, Speaker A: Yeah, and you can also just tell me to stop talking if I miss it in chat because I may miss it. So feel free to interrupt me. Something here on the website building and we forgot to post this earlier, but this is actually our repo for decentralized websites. And you'll see Don is on here and we've had several other contributors as well. You can actually see several example templates here. And we'll see here don, where can I see these? Oh, there they temp. So this is completely an open source repo.
00:26:58.570 - 00:27:37.914, Speaker A: These actually end up inside of our web app itself. So again, if you submit a template through us, then we can distribute it to our users, as long as that's what you would like us to do. And there's like a correspondence here between this GitHub repo, I think here's the ambitious, right? And then you can see here's ambitious on our website here. And so this is a good place if you're looking to build websites. You can go through here and you can see several different examples. And then I believe the blog, and this may be useful for people who are interested in connecting in with three box. So here's the blog example on here as well that you can take a look at.
00:27:37.914 - 00:28:08.898, Speaker A: And let's see going here what's interesting. Yeah, here you go. And this is a good little tutorial on three box. So if you want to get around and play with using three box to have stored state for a particular user and then updating a website with that. That's a good place to go and play around with. So I dropped a link to that in the chat. What are people building on the decentralized web? I think there's some really cool ones here that you should check out.
00:28:08.898 - 00:28:28.906, Speaker A: And let's see if I spell this right. So hope this loads live demo. Yes. Switchio. So this is actually a cryptocurrency exchange. So people are like, what are people going to build on the decentralized web? This is literally the front end for Dex, which is pretty cool. This is up on IPFS right now, right? And this is live.
00:28:28.906 - 00:29:11.174, Speaker A: And what's great about this is, again, we're pre incentivized storage models. So this is still being pinned via a pinning service. But four months from now you're going to be able to deploy your Dex, put a bounty on the Dex for file storage, and then you just know that Dex is going to be up there. And you can actively connect your wallet here if you'd like, and trade cryptocurrency directly on the decentralized web. And this is cool for DApps because if you want to build an unstoppable application and that's one of the big things behind a lot of these Ethereum DApps right now. If you're hosted on a.com domain name, they can turn you off.
00:29:11.174 - 00:29:58.230, Speaker A: And there's actually been some companies, I can't remember if it was Kyber that got temporarily turned off for like 8 hours earlier this year because they had an issue with their DNS hosting provider. But you don't want your DAP to be turned off by whoever is your DNS custody custodian, right? So. Especially for DApps. Another big thing here, it's kind of a cool consideration and this actually goes back to websites. We haven't seen anyone do this yet, but I expect somebody to do this quite soon. And that is you can shove a domain name into an Ethereum smart contract, right? And then that domain name can be owned by a set of token holders. So let's say that you have a Dao or a specific token.
00:29:58.230 - 00:30:57.558, Speaker A: It could even be an NFT token. And you guys wanted to decide as a community what your website would look like, right? And right now you have this problem where if you buy a website for your application, someone is registered on that website with the custody provider. So even if you're MakerDAO or any of these other really large and important Ethereum applications, somebody owns this domain, right? makerdao.com. And at the end of the day, that person is going to be held liable for what's happening on that application and they're going to have to deal with all of that BS, Jimmy, frankly. And it's even more worse than that because you have 200 plus countries across the world, so where that person lives also matters. So our friends over at ENS, for example, I think that they're pretty smart because. I think they have the ownership of this in a nonprofit in Switzerland.
00:30:57.558 - 00:31:44.666, Speaker A: Right, but not everybody is going to be able to start a nonprofit in Switzerland in order to have good jurisdiction for what it is that they're building. And Nick from the team even moved to New Zealand, which is probably one of the best places to be if you care about freedom on this know, but not everyone can afford to make all those moves. However, everyone can put their website up on the decentralized web and it's super easy. You just get a blockchain domain name and then point it to your application. And again, the ownership of that domain name could be the smart contract. So we haven't seen anyone do yet do that yet, but I think that's pretty cool. You spin up a smart contract with make up a token, make up an ERC, 20 token and give it to yourself.
00:31:44.666 - 00:32:46.320, Speaker A: And then one that I would like to see is get something up like which vitalik crypto and then people can log in and then they can vote on which picture of vitalik they would want to show up on that website. So that's not actually available. I mean, sorry, that's not actually a domain now, but I'm saying that you could have your token holders vote on what the front end is. And another way of thinking about this is if you're MakerDAO and you have an application and you want to make an update to your front end instead of having one person who's assistant know push the new website, you could have a lot of people submit new versions of the front end to the website and then you could have people vote on it. They literally vote on everything else except for their front end. And we're saying that let's also move this back so that token holders have more control over these decentralized applications that they're building. So I'm going to pause there for a second, see if that spurred some questions and we'll take it from there.
00:32:46.320 - 00:33:34.474, Speaker A: Cool. All right, so this one is from Ryan Bell and he says, I'm most curious about the passing of messages from the P to P back end to the web client front end. How does that work? So let's see if we still have James on here and he may have jumped. James, do you feel comfortable trying to answer this question he's talking about? And I know we're using Gundb on our chat example, but I think it's still going to apply if someone's using threads. James, let us know if you can. Hello? Hello. We got hey, yeah, I think I already answered in the thread there for Ryan there.
00:33:34.474 - 00:33:55.022, Speaker A: But yeah, we do use Gundb to do all the peer to peer stuff. And please check out the library that we did build. I sent the link there to GitHub. Very cool. Thank you. Got it. Excellent.
00:33:55.022 - 00:34:18.634, Speaker A: And then, yeah, also I'm going to pass that back to Carson, if you don't mind. So, Carson, the question is about the passing of the messages from the PDP back end to the Web client on the front end. Do you have any thoughts on how someone might do that using threads or what to be concerned about there? If Carson's here, I just dropped it on him.
00:34:18.672 - 00:34:44.162, Speaker B: Oh, there we go. Cool. I think I was muted for a SEC. Most curious about passing of the messages. Right, well, with threads, we use WebSockets as the transport layer. Actually, that's not entirely true. We use a bunch of different transport mechanisms because our philosophy is probably something's not going to work.
00:34:44.162 - 00:35:49.490, Speaker B: So why don't you try and get everything to work? And so we use Lib P to P Pub sub as one transport mechanism. And there's a custom protocol that's run over Lib PTP. We use WebSockets for the direct push and pull, which is pretty cool. This is pretty cool. So what we do is we have gRPC services that run on the remote peers and then from the client, basically it uses gRPC Web calls, which are really just like a translation of gRPC, like Web Two to Web 1.1 streams. And so the client can call gRPC methods on their remote back end, peer to peer peers, and so they can say like, hey, pull, give me the latest head, or I've just made a change push.
00:35:49.490 - 00:36:39.560, Speaker B: Here's the latest thing. And the cool thing about using WebSockets as the transport layer there is you can actually do like by die communication before you actually do any of the exchange of data. We have implemented a handshake, so you can say like, I'm so and so, and I can prove that I have the private key for this particular identity and all that good stuff, and we use WebSockets for that. I think that's like, for a lot of nice buy die stuff, the WebSockets is good. But yeah, our philosophy is basically you should have as many possible routes between those two peers as possible. And so the Pub sub is also nice because that gives you proxy routing and things like that. And it's a gossip pub, so you can gossip message.
00:36:39.930 - 00:36:41.846, Speaker A: And then for those WebSockets, is that.
00:36:41.868 - 00:36:46.026, Speaker C: Just like an express server or are you doing that with golang or something like that?
00:36:46.208 - 00:36:52.890, Speaker B: The back end ones are go, and then the front end is just a gRPC client thing.
00:36:52.960 - 00:36:54.490, Speaker A: Cool, I'll check that out.
00:36:54.640 - 00:37:40.140, Speaker B: And honestly, that's great and it's cool. And the back end stuff is cool. But we're also working on directly calling gRPC methods between Lib P two P peers, which sounds like impossible in magic, but we have some examples where, like, a browser peer is basically calling gRPC methods on another browser, which is just like amazingly cool. So you can start to really get direct peer to peer communication across any channel that Lib P to P supports. And this is not even pie in the sky. This is like stuff that works, but it's going to take some time before it's really proper and safe and scalable. But yeah, there's some really cool stuff happening in the space.
00:37:42.350 - 00:37:44.140, Speaker A: Ryan, did you get all your answers there?
00:37:44.590 - 00:37:47.770, Speaker C: Yeah, I got to read a lot of documentation.
00:37:48.750 - 00:37:51.606, Speaker A: Well, just want to make sure you got at least pointed the right direction.
00:37:51.638 - 00:37:53.014, Speaker C: I have enough to chew on now.
00:37:53.152 - 00:37:53.742, Speaker A: Perfect.
00:37:53.876 - 00:37:57.310, Speaker B: Yeah, you got to be careful what you ask me because I'll just start getting excited.
00:37:59.090 - 00:38:40.686, Speaker A: Carson's definitely the right guy to ask. So glad he could be on here. We've got like five minutes left here. So we had one other question and I'll answer this one here and then we had a comment. So the question is, is there a concept of name server for an unstoppable domain? And could I point to my own name server? So right now people are reading from Ethereum and all the lookup data, all the mappings are stored directly on Ethereum. Now you're probably thinking to yourself, that's incredibly slow. And I would respond with, you are correct, because a name service response time is ten milliseconds and an Ethereum lookup I think is closer to a second.
00:38:40.686 - 00:39:26.570, Speaker A: So we're doing some improvements on chain so that we think we can cut the lookup time in half, essentially. And we're going to keep looking and see if we can find some more ways. I think that it's possible people will stand up name servers to make the lookups faster, but then again, the users are going to have to decide who they want to trust. And I think that if someone like Rave or Cloudflare stood up a name server and that's actually not unlikely that people would trust Cloudflare, basically, I think people would trust them to do it, at least to some extent. But at the end of the day, you're always going to be able to read directly from the Ethereum blockchain. That brings us back to the comment about the light node for Ethereum. Right.
00:39:26.570 - 00:39:57.954, Speaker A: Lite client rather. And I think that that's going to be important because if you have a light client for Ethereum, particularly if you had one that was optimized to do domain name lookups to run in the browser, then you'd actually just be reading directly from chain. And when we get to E 2.0 and there's a bunch of shards and you know which shard you're looking at, you know what contract you're looking at. We can get that size down. It can be 110 thousandth the size of the main chain and still be up to date and checkpointed and everything. And yeah, I think it's more likely we head that direction.
00:39:57.954 - 00:40:21.882, Speaker A: In the interim, though, I think people will stand up those name servers. Next one is from karate. There's actually two here. First, he had a comment about USDT being blacklisted. Just want to say yes, that was crazy. So what an interesting day we live in. Also USDC today, it's been pretty active, so the censorship is running rampant at this point, even in crypto.
00:40:21.882 - 00:40:47.286, Speaker A: The next one is again from Karate. It's like, do you have anything in graph? I'm assuming you're talking about the graph IO and we have just not gotten to it. But yeah, we have talked to that team. We are looking to put something up there. Their API. It's being improved. Right? So there's like a query limit there.
00:40:47.286 - 00:41:28.914, Speaker A: You actually see a few weeks back that both three box and then subsequently the graph went down for a little bit and that's because we launched the blog and then we had a bunch of users using the blogs on IPFS and then they were making a bunch of updates to all their posts. This was getting routed through threebox which then relied on the graph and they both crashed. So both of these services, we have demand right now for people to check out the DWeb. This is a champagne problem. So we're going to revisit the graph probably in two months and get something up there once we have a little more time for those things to get a little more stable. Yeah, it is like 1998 again. Cool.
00:41:28.914 - 00:41:36.290, Speaker A: All right, guys, I think that's it. That's our time here. Trent or Andrew, did you want to do the outro?
00:41:37.030 - 00:41:50.860, Speaker D: I mean, there's not much to outro. I think we got a ton of good questions and people will see us in Slack. They know where to find everybody in the Unstoppable Domains channel and elsewhere. So thank you guys for answering these questions.
00:41:51.870 - 00:41:56.440, Speaker A: Thanks everyone for attending and special shout out to Carson. Thanks for being here. Later, everyone.
