00:00:06.250 - 00:01:05.330, Speaker A: Well, welcome everyone. Super nice to see you all here. I'm Alec, co founder of Alice, this is Zach, our CTO, and yeah, we're here to learn about Web Three native software distribution and let's get right into it. So what is Web Three native software distribution? Well, basically a lot of elements that you already know like publishing fetching and secure updates from existing Web Two systems like GitHub or other auto update systems you've used before, but also now we can imagine new cool use cases like Dows coordinating software together. So if you imagine a Dow publishing a new version of an Ethereum client like Geth, that's what you could do with Web Three native software distribution. And then if you're monetizing apps or games for any type of assets, we have software licensed NFTs in our system that you can use as a form of DRM to token gate your application in. Again, a Web Three native way and native crypto payments.
00:01:05.330 - 00:01:53.586, Speaker A: So why do we need Web Three software distribution? Well, right here we're still publishing everything on Web Two platforms. So we have some really amazing protocols here. Even Ethereum's Geth is built and published on Microsoft Azure Blob store. Polygon Boar uses GitHub releases, which is also ultimately Microsoft servers. We rely heavily on docker hub for managing infrastructure, especially things like Graph nodes, but it also goes down all the way to the end user from the emerging Web Three gaming stuff, mobile wallets that you download from centralized app stores, you name it. Pretty much everything is still being published over Web Two, so we're putting massive amounts of energy in a decentralization just to recentralize It at the distribution level. So we got to change that.
00:01:53.586 - 00:03:08.334, Speaker A: And the issues with this include lots of the things you're already familiar with, but risk of compromise, censorship risk, availability, risk, and then if you're using payment infrastructure, all this stuff right now is centralized to Apple, Google, Meta, all of these companies that you have to ask permission for, and they take 30 to 50 plus percent of your take rate. So these centralized payment infrastructures, we got to get away from them and then they take a high take rate anyway, so it's not very regenerative. And what can we do now that we're in Web Three? So first it looks kind of familiar. We have to start with porting over all the common features from things like GitHub and Steam and Versal and those other types of platforms. And that includes the ability to version, publish, fetch, and then securely update your artifacts and having auto update systems, as well as the ability to manage team level and project level access control so that you can actually have an organization account and then separate projects underneath that have separate access control. But Valus is a set of tools that coordinate all these Web Three protocols together to make publishing in Web Three easy. And then once reported over no reliance on a single entity for distribution, not even Valust.
00:03:08.334 - 00:03:34.030, Speaker A: All we're doing is pulling together all these protocols together. So there's no centralized thing. Vallast IO is just a gateway. You can monetize your software directly now with NFTs. So again, no need to ask Apple or Google or anyone for permission or even to have a bank account for that matter. You could just create a wallet, publish your software, set a price and you're good to go. And then of course, DAOs can coordinate software releases.
00:03:34.030 - 00:04:11.790, Speaker A: So these giant softwares that we all rely on, we can actually decentralize the publishing process for that a little bit more. And then we also have the ability to create super awesome auto update systems powered by these smart contracts and IPFS. And the protocol fees can actually provide public goods funding. So revenue generated by software licensed NFTs can actually be pointed at things like radical trips or Gitcoin grants. And so there's this connection between the monetized software and the donation based drip mechanisms that we have now. And so how does it work? Well, there's lots of different options. We make it pretty easy.
00:04:11.790 - 00:05:05.374, Speaker A: But architecture essentially is such as you publish all the software on IPFS, everything gets archived on a filecoin for long term storage. And then we use Polygon and other EVM chains to checkpoint and handle all the access control and versioning. And then from there the Valus client and SDKs, everything like that is aware of all the latest releases. So you can say hey, I want the latest version of Ethereum Gath 1.0.0 or something like that. And then how do we use it? Well, we have a web front end CLI, a GitHub action for if you're already doing GitHub releases or if you're already doing your own system there, it's just copy and paste the workflow at the end to add it to your publishing step. And then we have TypeScript and Go SDKs for all the developers that want to kind of dive deeper into the nitty gritty there.
00:05:05.374 - 00:05:48.298, Speaker A: And then so this is what the web app publishing page looks like. It's pretty simple, it's just account project the version and then you could drag and drop your assets from there. So if you're a game developer, this might be the move for you to drag and drop your Unity build or drag and drop your static web app over into here and call it a day or a binary, whatever you want. Our CLI allows you to easily create and publish releases as well. And so here we have Valust publish the organization account acmeco and then the project is called Go Binary. And then the version publishing here is 1.0.0 and then I'm just publishing the disk folder that I built.
00:05:48.298 - 00:06:35.766, Speaker A: So if you're publishing and building stuff you could just point it there and you could also configure multiplatform releases. So if you're building for both Mac Windows and Linux, the CLI lets you actually configure which binaries go to which platform, and the Val system will know how to account for that. And then like I said, we have a GitHub action. So if you're already doing releases, this is a super simple example where basically it's just tracking the repository goipfs, and then anytime a release is made, it just takes that release and publishes it under valust. So it's a super easy way to get started there. If you already have an existing workflow, and then you can transition more into the web, three native workflows. And then again, SDK, super easy, all you need is a wallet.
00:06:35.766 - 00:07:09.590, Speaker A: And then you could plug in IPFS nodes, your own RPC stuff, or you can use the default Valus IO infrastructure, and then you could find it at Vallus IO. The docs are pretty detailed. They go over the whole system as well as the different nuances. And then our discord is Vallast IO discord. We're always super excited to help. And we have teammates from around the world, so chances are someone's going to be awake. And then our GitHub is Vallast IO or Vallus IO, and you can find all the cool things there.
00:07:09.590 - 00:07:38.314, Speaker A: And then I guess our Twitter is valust underscore IO, if you want to check that out. We're posting lots of updates there. And then as far as the prize pool, for anyone that's publishing on the platform, you automatically get qualified to the prize pool. And then we're selecting five other apps that are doing a little more novel use cases or some other cool things that we're going to pick out of that group as well. So, pretty simple. All you have to do is publish and qualify the pool. And then yeah, so super excited.
00:07:38.314 - 00:07:51.730, Speaker A: I'm going to pass it over to Zach. He's going to go over the system and how it works and we'll go from there. But thanks again and best of luck at this hackathon. Really amazing stuff. And yeah, we're here to help Zach.
00:07:52.870 - 00:07:54.930, Speaker B: Yo, yo, yo, what's poppin?
00:07:56.630 - 00:07:56.994, Speaker A: Cool.
00:07:57.032 - 00:08:33.042, Speaker B: So I'm just going to take you guys through a quick demo here so you can check out the front end web app on app Vallus IO. Sorry, just bear with me here. A bit of a slow internet going on here. Okay, cool. So you've connected your wallet. You're all good to go. You'll see your dashboard like this.
00:08:33.042 - 00:09:00.362, Speaker B: It's kind of just like a Versal GitHub esque dashboard. And you'll see we have our projects here. We have some activity of all the transactions that have taken place. We can audit all of those different transaction hashes. See those on our block. Explorer, shout out to Polygon. Our app Vallus IO is currently on Polygon, but we also support any EVM based chain.
00:09:00.362 - 00:09:33.282, Speaker B: So check out the contract, check it all out. So the first thing that we are going to want to do is to create an account. So if we go to the account creation page, we have a couple options here. So the first thing that we can do is that we can upload an account image. So I usually use this one. This is my crypto coven. And then we can set our username.
00:09:33.282 - 00:10:33.658, Speaker B: So just like kind of any other distribution system or package management system like NPM, docker, all of these different things, you need a namespace. So in the case of Vallast, this is an Immutable namespace and that's again just to kind of prevent any kind of changing or supply chain attacks type of stuff there. So here I'm just going to go with let's just go with Metaverse co I'll keep that all lowercase. And so then the display name is not Immutable. This you can change it to anything that you want and it's kind of just like a display name on Twitter or anything else. So I could say the Metaverse company cool. And then we can put in a website there.
00:10:33.658 - 00:11:24.380, Speaker B: We can say like Hello World or something like that. And then just a quick description so we make Metaverse stuff cool. So that's it for the basic info there. Then each account on Valis can also function as a team. So again it's just like a GitHub organization or like a Versal team or anything kind of like that. So normally this is where you would take your list of addresses and you would paste them in here. I'm just going to take my local MetaMask address and create that.
00:11:24.380 - 00:12:03.542, Speaker B: Oh, interesting there. Okay, some weird stuff going on here. This might be an internet thing. Sorry. There we go. Okay so you'll see that? Here it is prompting me so we're a big fan of open source, we're a big fan of public goods so everything on Valust is free by default. It's all metatransactions.
00:12:03.542 - 00:13:59.760, Speaker B: So all I have to do here is just give it a quick signature with some basic info here and I can create my account and so while that's pending I can check that out on the block explorer make sure everything's AOK there and you'll see everything's good. So now I got Redirected to create my first project so I'm just going to select Metaverse Co as my account and now I can create any kind of project that I want. And again, you can kind of think of this higher level namespace just as like you have your local GitHub account and then you can publish your GitHub pages or anything like that under your default GitHub namespace and you can have any number of kind of like federated namespaces under that root namespace. So for me I'm just going to say let's just call it Metaverse metaverse and then again we can just do another display name so the Metaverse game, something like that. Website this is again if you're submitting to the ETH global hackathon you might want to put your website in there or your GitHub or something like that. Sorry I'm not the best speller here. So I'm just going to put Hello World in there too.
00:13:59.760 - 00:15:13.976, Speaker B: So we have a full discovery page, a lot like a Steam esque marketplace because a big thing is not just open source software but developers have to eat too. So there's a lot of paid software on Vallast and paid native crypto DRM games. In this case, let's say that we'll do like installable game and then we can set that with some tags here. We can say game application. And so once we do that now we have a couple description fields that we can add that will show up on our Valis profile and throughout the marketplace when people search for our game. So I'm just going to say a super cool Metaverse game. And then I just have some example markdown here that I'm going to paste in there.
00:15:13.976 - 00:16:19.550, Speaker B: And so we have our Metaverse game join thousands of players online for the next revolution of web3 gaming, experience distant lands, and discover untold treasures in the Metaverse. Free to play, no pay to win. Okay, we have the idea of account level access control, but then there is also the idea of project level access control. So we might have some team admins that are managing our organization. We want them to be able to add other people through this kind of like role based access control system. But then we might just have Verifiers or publishers on the development side where you're a developer, you have your development key and you want to be able to verify a build. So this is where I would then paste my development key and I'm just going to copy that from MetaMask again.
00:16:19.550 - 00:17:07.660, Speaker B: Cool. So now all the fun stuff when you're on a marketplace and you're on a game, games need trailers, games need a lot of good stuff, a lot of screenshots, interactive content. So for this I'm just going to pick my main promo image. There it's of Lost Lands, Forgotten Kingdom. Then I'm going to add a couple screenshots for my game. So here are my game characters. Here's my cool Metaverse girl in the metaverse with her Metaverse glasses.
00:17:07.660 - 00:17:49.150, Speaker B: And then that's it. All I need to do is create my project. And again, if you're doing like a live stream or a presentation of your own or anything like that, you can paste in a YouTube link here. Thanks. You can add all kinds of other content and videos and it'll all go right to IPFS. So there we go. Now we are back on the dashboard here and I am just going to select my new account, Metaverse Co.
00:17:49.150 - 00:18:52.130, Speaker B: And so you'll see my new project Metaverse pops up a super cool Metaverse game. And if I click that, I am greeted by this beautiful Vallus profile. Now this is where I will be able to manage my versions, any activities, any other members or maybe like people that are in my dow that are distributing software that want to collaboratively sign off on releases and distribute their software together with me. But then, yeah, all of my nice little screenshots, all of my nice little markdown right in there all ready to go. And so then we're also tracking all of these downloads through like IPFS gateways. So there's a lot of really cool metrics that you can see to track how many users are actually pulling my files from these decentralized networks and playing my game or running my app. Cool.
00:18:52.130 - 00:19:25.850, Speaker B: So let's publish. So I'm just going to do version 0.0.1. Usually I just use Semver for any semantic versioning, and then we can do a basic description. So I'm just going to say initial release. Then I'm going to take my hello, world. Go, Binary. That is my metaverse game.
00:19:25.850 - 00:20:36.400, Speaker B: And then it's just as easy as publish release. Sign one more signature right there. And just like that, we have published our first release. So here is our release from the IPFS gateway. Anybody can now take our Vallast client, do a vallast install on this game natively, and then stay tuned because our game client with our built in wallet support Sapphire, will also be dropping very soon. So again, just to take another look at this, this is the basic settings page. It's pretty much the same as the account creation page, but there's a few additional settings that we have here now.
00:20:36.400 - 00:21:35.666, Speaker B: So a huge part of Vallast, again, is that not just the distribution, but also the monetization of software. So as part of that, we're web3 native. So we need to have web3 native DRM for our software. So each project on Vallast has a built in project ID that I can activate and embed within pretty much any SDK. So whether it's like ChainSafe gaming or Morales or any of those, I can take those and check a digital signature against somebody's token balance to then token gate my application. And there's different levels of security that you can implement there with that kind of DRM. But this at least gives developers the primitives that they need to monetize their software in a web3 native way.
00:21:35.666 - 00:22:43.480, Speaker B: And this is really powerful because when someone goes to distribute software on someone somewhere like Steam, you might already have paired with a game publisher, they're taking 10%. Then you go to put your software on Steam itself, they're taking 30%. Apple is taking 30%, google is taking 25%, gumroad is taking 15%, itch is taking like 20%. With Vallus, it's two and a half percent. And then we take all of those funds, they go to our community treasury, and then we cycle that money back into open source projects. So what we can do here, again, we're on polygon, so everything's in matic, we can set a default price, we can set a limit, and we can set a royalty percent so that if anybody transfers one of these game licenses, to somebody else. There is a royalty on that as well.
00:22:43.480 - 00:23:01.510, Speaker B: So then you're also able to customize your royalty address and all of these aspects to monetize your piece of token gated software natively on the chain. Cool. Yeah. Do you want to hop in?
00:23:01.520 - 00:23:30.822, Speaker A: Yeah. Awesome. Yeah. We're about to wrap this up with just one more example. So if you are a Go developer or you're building some kind of CLI and you prefer to do more of like a CLI publish, then we have also check out this example projects repo for sure. We have a bunch of different ways that you can publish different types of software here. So we have a Go project, a multi platform Go, a rust solidity project as well.
00:23:30.822 - 00:24:22.162, Speaker A: So there's definitely different examples there. But just to show you what the CLI is capable of, we're actually in this example repo right now with the CLI Publish multiplatform project. And the command can work both ways. So if we have one binary, for instance, this one is a single Go binary here that when we build it, it's just one hello world. To do that, it's literally just Valis publish and then the version and then the folder I actually need to make that folder. But then there we go. So then if I run the make publish that'll actually do this, build it'll, select the account I want to sign and send this from and you can see the meta transactions.
00:24:22.162 - 00:24:54.026, Speaker A: Oh, I need to bump it one more version. So you can see there it knows when an existing release has been used. And I guess I did this a couple more times than I realized. Let me just go to five. But yeah, basically it'll upload the binary, publish the release and it'll do all the metatransaction stuff so you could actually see all the open gas station network stuff that's happening in the background, all the magic that we make your lives easier with. But basically, yeah, right there it's confirming that transaction. And then it just published that Go binary.
00:24:54.026 - 00:25:55.874, Speaker A: It shows you the link to Go and fetch it and then boom, there's my binary right there. And then with SDKs you can also do the same thing and fetch it at this namespace and then similar for the multiplatform do you want to say something? Okay, sorry. For the multiplatform it's the same thing, only now we can additionally describe other releases. So you saw I just uploaded the disk folder and just called it a day. But with this I can actually specify in the Vallus YAML the account I'm publishing to the project, the version and then let's bump this up to like eight just in case the files the same way. And then we have an install field here where you can actually describe the name of the binary and then the platforms that you're targeting with this. And then we use the Go standard combinations here so you can basically say, hey, if I'm building for a Mac on a regular AMD 64, this is the binary I'm publishing.
00:25:55.874 - 00:26:45.342, Speaker A: If I'm building on Linux or Windows, these are the binaries. And then I just have my build scripts here tell Go to build multiple versions of this. So essentially I have in this folder a bunch of different versions that work on different platforms. And in this Valus YAML, I'm describing those versions and which platforms. And then since the Vallast YAML is already set up, I could just run a Valust, publish it'll, parse everything and know I didn't hit save on that. And then it will publish each of the binaries as well as some additional metadata that lets the rest of the system know about the different platforms. So I'll jump to this in a second as soon as it confirms and oh, that's interesting.
00:26:45.342 - 00:27:37.430, Speaker A: Okay, so let's go to the Acmeco site here and then go to this multiplatform project on the website and then the launch will take you directly into the folder. But then if you actually go to the higher level metadata here, you will see this is kind of the JSON we use to describe that install stuff. So basically all this metadata is just to tell the front end how to actually interact with the project. And so, yeah, it supports pretty much any type of software and there's all kinds of different ways to publish depending on your preferences and your stack. And like I said, anyone that publishes gets qualified to our prize pool and then we're picking five finalists out of that group as well. But anyone who publishes is going to qualify no matter what. So that's going to be pretty easy.
00:27:37.430 - 00:27:53.260, Speaker A: And then, yeah, we're always here. Definitely come find us if you need any help. Come join our discord. We're super stoked to have you there. And yeah, check out the GitHub action. For sure. Well, amazing stuff everyone.
00:27:53.260 - 00:28:50.570, Speaker A: I guess we'll just take a couple of questions if we have any and then yeah, sweet. Yes. So this project here, so with the Token Gating, it's actually pretty interesting because this is a weekend hackathon, we're very curious to see what comes out of that. But this Acme co has an example for a token gated unity game that basically if I launch it, hopefully the internet will play nicely with us. But we have this example here and in the docs we have how to actually set this up and a separate video and a separate walkthrough as well. And then for Unity apps, we also have an example script here. So if you go to this page on the docs Token Gating, your software, you'll see the general flow and then some links to examples.
00:28:50.570 - 00:29:32.170, Speaker A: And then this one is the unity example we put together for the signatures. And then basically the way it works is oh, this is the wrong one actually, but I think it's this one so, yeah, this is just the unity game and then you connect the wallet and it'll do the balance check from there. And then, yeah, this is going to be a little interesting, but I have it firing off in the console right here. That one in success means that the balance is there. So, yeah, it's definitely possible to Tokyo get a unity game or any type of app. And yeah, looking forward to that. Sweet.
00:29:32.170 - 00:29:35.260, Speaker A: Cool. Thanks, everyone.
