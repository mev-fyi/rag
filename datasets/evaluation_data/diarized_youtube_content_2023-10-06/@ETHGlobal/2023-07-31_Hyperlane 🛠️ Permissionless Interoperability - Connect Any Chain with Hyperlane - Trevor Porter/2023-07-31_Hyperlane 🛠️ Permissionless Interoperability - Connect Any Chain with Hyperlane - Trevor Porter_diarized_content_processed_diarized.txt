00:00:07.210 - 00:00:41.102, Speaker A: Thanks for coming everyone. So my name is Trevor Porter. I'm a protocol engineer at Hyperlane. And today I'm going to talk to you about permissionless interoperability, what that means and how you can use it in your hackathon projects. So I guess just to set the seen what Hyperlane is, is we're an abstract message passing bridge. So we allow you to send arbitrary bytes between two different blockchains so two different smart contracts can interact with one another that live on different chains. Using hyperlain.
00:00:41.102 - 00:01:43.110, Speaker A: Kind of the thing that differentiates us the most from competitors, kind of in the same realm, is we allow you to deploy hyperlane onto whatever chain you want. So if you want to be on a certain chain that doesn't have interoperability built in into it today you can go to our competitors and they'll say, give us hundreds of thousands of dollars and we'll deploy onto you. Or you can just go to our docs, run a script, run some infrastructure that we provide out of the box, and you get connectivity with a whole network of chains for free. So to start with some definitions. So we call ourselves a permissionless and Modular Interoperability layer. So permissionless can mean a lot of things. I think it's usually a marketing term, but to me it means that you can do something without anybody else's permission, right? But some people will claim that permissionless means that anybody can propose a hard fork to a network, which is definitely true, but it's still gated on the node operators in that network in order to create a hard fork.
00:01:43.110 - 00:02:10.850, Speaker A: So the idea with Hyperlane is you literally don't need to talk to us whatsoever. You can just go to our docs, you can deploy it. It's easy as that. That's why it's permissionless. Anybody can use it. And then interoperability it can mean a lot of things to different people, but to me it just means some kind of interaction between two different blockchains. So for us, we are an interface for sending bytes over the wire between two different chains.
00:02:10.850 - 00:02:58.580, Speaker A: You can build things on top of this, like token bridging, but fundamentally just that communication is what interoperability is. So to set the scene, why this is even important, we can look at the history of blockchains and where it's led us to today. So at the beginning we had bitcoin and this is really great for payments, but it was not too great for many other things. So people got excited by the idea of what you could do with blockchains. If you look, before Ethereum existed, people had ideas like creating something similar to ENS, but that required creating an entirely new chain. I think it was called name chain or something along those lines. And you couldn't use the same security layer for building unique applications with just bitcoin.
00:02:58.580 - 00:03:45.168, Speaker A: So then Ethereum came and that was kind of the first fragmentation, or major fragmentation, where now you have bitcoin and now you had ethereum. And Ethereum gave you the ability to create applications with the same infrastructure based layer. But pretty quickly, the limits of ethereum were hit. There are some serious scalability issues with just having a single blockchain like Ethereum that also imposes some very prescriptive trade offs on applications that are on ethereum. So Ethereum wants everybody with a laptop to be able to run the entire chain. But that comes at the cost of people not being able to have really high throughput on ethereum. So in 2019, around that time, there was a lot of talk about things like plasma or shorting or all these different ideas.
00:03:45.168 - 00:04:27.520, Speaker A: Some of them eventually turned out to be what we call roll ups today. But we also saw the explosion of alt L ones. And people were moving to these alt L ones, like Binance Smart chain, like Avalanche, like Salana instead of Ethereum, not necessarily because there was anything special about these blockchains, but because there was cheaper block space. And then new communities were created around this cheaper block space. And this was the first kind of step of scaling. But as you scale in the paradigm that we've chosen to today, you create more fragmentation. So to me, there are three valuable things about blockchains, and it's composability verifiability and censorship resistance.
00:04:27.520 - 00:05:08.480, Speaker A: And as you scale and create new block space, you give up composability. So interoperability between all of these is extremely useful in order to preserve that composability. So during all of this, things like Cosmos or ecosystems like Cosmos and Polkadot pioneered app chains which have kind of evolved into the rollup thesis today. So specialized chains that have their own block space that allow for scaling outside of just the world of ethereum. And eventually today, we're at rollups, and there are various roll up ecosystems. There's the Ethereum roll up ecosystem. There's the Celestia roll up ecosystem.
00:05:08.480 - 00:05:39.716, Speaker A: There are still app chains in the Cosmos world. I don't think Solana is going like there are still all of these ecosystems that are being built, new chains, new block space. And I think it's just an unavoidable future as these links get more complex and all these new ecosystems arise. There's no good way of interacting between all of these. That is kind of one size fits all. And people are migrating to roll ups. So DApps, like Zora, they recently launched a roll up cello.
00:05:39.716 - 00:06:11.510, Speaker A: The L one is transitioning to be a roll up. There's a lot of effort on the ethereum side toward growing the roll up ecosystem. And there's a lot of discourse around roll ups that are using the same DA layer. So data availability layer of having better and more trustless communication with one another. But this is still like super early stages. There's a lot of research going on there. It's not a one size fits all situation.
00:06:11.510 - 00:07:20.272, Speaker A: So we need interoperability between roll ups, between chains, regardless of what they look like. Today and we can't really afford to wait for a future where there might be more trustless communication. So incomes hyperlay and further it is set the scene, I guess, just to explicitly say the common path of roll up to roll up interoperability today, if you're on optimism and you want to go to Arbitrum, you pretty much need to wait seven days to go down to L One and then you go back to Arbitrum. And that's just unacceptable for the vast majority of these cases. So on top of this, there have been different protocols that maybe use an external verifying set to sign off on these messages between these roll ups or people who provide liquidity upfront for the destination on the roll up, knowing that they can wait seven days in order to get it in the future. But yeah, the general idea is all of these different roll ups, they look so different. You might be familiar with storage proofs, which is kind of a hot topic in the ethereum community of facilitating better roll up to roll up communication.
00:07:20.272 - 00:08:26.236, Speaker A: And the way those work is a roll up will learn about the block header of another roll up. Inside that block header lives an attestation to all of the state that lives on that roll up. And if you come up with this proof to find out maybe what the storage slot is at a particular place in a contract in that storage route, you can read the state of another roll up within this roll up. But the problem with these is it's so specific to the implementation details of these roll ups that it creates fragility. If one roll up creates a hard fork, what happens to that bridge? It's fragile. So what hyperlane does is we don't want to wait for a future where there are all these different types of message passing paradigms that may be further along in research, but look totally different and we can't have them today. So how do we get this today? We separate the transport layer and the application layer.
00:08:26.236 - 00:09:24.544, Speaker A: So what does that mean? It means that hyperlane is an interface that is constant for all chains, but under the hood the actual security that is used for these messages can change and it can be different for different chain to chain connections depending on what is seen as what the application wants. Or we provide a default security model which might be the most trustless security between two different chains. So to give an example, if I'm on ethereum L One and I want my application to send messages to Optimism, to Arbitrum, to Polygon, to Salana, the last thing I want to do is do the legwork of integrating with each of those, the roll ups, their native token bridge. I don't want to know the interface and the implementation details of that. I don't want a massive switch case statement saying this is my destination and this is the code that I want to run. I want to just have the exact same interface. I don't want to know the implementation details of how it gets there.
00:09:24.544 - 00:10:15.220, Speaker A: I just want to know, sure, maybe this security of that message, but I don't want to know the interface into using that bridge. So what we do is we have a contract called a mailbox that lives on each chain. And this mailbox is the single interface for sending messages to other chains or receiving messages from other chains. And then applications. And this is where the term modular security comes in. Applications can opt into what security they want to use for messages that they receive. And this is super powerful because as new research comes out, you can kind of just change configuration and you get the new research, the new product, the new fancy ZK proof completely for free.
00:10:15.220 - 00:11:03.650, Speaker A: But today you can launch and still be equipped to use that in the future. So concretely, if you use hyperlane between L One, Ethereum and Arbitram today you'll be using the native token bridge, which is trustless, or the native bridge, which is trustless. And maybe if you were to go from ethereum to avalanche, there isn't a great trustless interoperability solution there. So you'll use a different type of security, other things you can do with this. So I guess to go into the details of how it works on this destination side, the general idea is you call in on the origin into the mailbox's dispatch function. So that's how you send a message out from a chain. It emits that message.
00:11:03.650 - 00:11:51.632, Speaker A: There's some off chain infrastructure that you don't really need to worry about that listens for these messages and then comes up with the appropriate proofs in order to deliver these messages on the destination. And the way that they deliver this is by calling a function on the mailbox called process. And then that mailbox will call the recipient's handload. And there's a step that I missed there which is the mailbox needs to know what kind of security that recipient requires. And the way that a recipient defines that is through this thing called an interchange security module. And all this is is a view function on the recipient that returns the address of some smart contract that encoded into it has the rules of how to verify this message. And this is the step five right here.
00:11:51.632 - 00:12:38.912, Speaker A: So you pass in two parameters into verify. One is metadata. And this can be anything that is specific to this interchange security module. You can imagine it as like validator signatures over a message or maybe a proof verifying this message. It's some kind of off chain data and then the actual message that was sent. And the cool thing here is that you can actually tweak the security that you want depending on the contents of the message as well. So if my application is a token bridge that I've built on top of hyperlane and somebody is sending $10, do I really require them to have the most stringent security for that? If that security has, like, a monetary cost, probably not.
00:12:38.912 - 00:13:45.590, Speaker A: So I could choose for a really low value transfer to maybe require, like, an m of n validator signatures over this message. But if there's a million dollars going over, maybe that's where I'm willing to put a cost onto the user, where they have to process a more expensive proof in order to verify that this is correct. And like I mentioned, this is future proof. So as new things come out, you can really easily just change out the transport layer under the hood without having to make any changes to your application. So, yeah, this all kind of leads up to our special sauce, which is permissionless deployment. So in a world which I think we're seeing, where there are countless roll up as a service companies, a bunch of new roll ups being created each day, new chains, whether in the cosmos ecosystem or elsewhere, there's just this explosion of chains that's occurring in this last year. Like, speaking to so many people here, there are a lot of new chains being created as well.
00:13:45.590 - 00:14:34.820, Speaker A: And there's this problem of, like, when you create a new chain, it's this entirely isolated ecosystem. And the first question that clients of will up as a service companies ask is, how do I tap into the rest of the ecosystem? And if you are, let's say, an ethereum l two, you get a lot of that through the native bridge. But if you're a Celestia l two, because Celestia is just a data availability layer, they don't have any kind of smart contracts on the l one. You don't really get any benefit of that native token bridge to bring in liquidity into your chain. So what hyperlane provides is just go to our docs. You can do it. If there's a chain that you guys want to deploy hyperlain onto during this hackathon, it's as simple as just going to our docs, running some scripts, and then running some infrastructure.
00:14:34.820 - 00:15:35.760, Speaker A: I've talked with many, many teams who have asked our competitors to go under their chain, and the answer is, pay us money. And I think that's just not quite in the ethos of crypto. Like, if you look at uniswap, for example, the reason why it got so big and why it's to this day still pointed to as a great example of what DFI is and can be for everything. It's the permissionless nature of it. It's the fact that I could just go to the uniswap v two factory, call a function, and create a new pool. So unlocking the long tail of assets and the long tail of chains, I think, is going to be of extreme importance to this industry as we lean heavier into roll ups. So just to talk a little bit about things that you can play with and build on top of hyperlink.
00:15:35.760 - 00:16:00.900, Speaker A: So it's all fine and dandy. Like, let's say you're a new chain. You deploy hyperlink onto your chain. What you get out of the box is bytes over the wire. But what can you do with bytes over the wire? You can build applications on top of that and really anything that you want. But an example of that is just basic token bridging. We have our own twist on token bridging called Warbrouts.
00:16:00.900 - 00:17:08.030, Speaker A: And instead of like a classic Token bridge so a Token bridge when I say this, it's like a lock and mint kind of thing where on the origin side, let's say I have a Token, I send it into some contract where it's escrowed, some message is sent to the destination chain and then a new token is minted and given to me. And that new token we generally call a synthetic token because it relates to the existence of a remote chains, real canonical token. In a classic token bridge, they usually have a security model that they impose on the entire bridge. And it kind of turns into this honeypot of like this is like a specific one size fits all security model that is being forced onto this token bridge. Whereas with warp routes, it works for permissionlessly deployed chains and it allows the deployer of a warp route. So the deployer of this bridge token to specify what security they want for it. So it's kind of like a tool in order to bring tokens onto your chain in the terms that you want to.
00:17:08.030 - 00:17:43.620, Speaker A: So we have three different classes of these. So there's a native warp route. And what this means is, let's say you're on L one Ethereum and you have ETH. ETH is the native token. So there is a smart contract called a native warp route in which you just send your ETH in there you call a function. Your native ETH is Escrowed in there and then that's where the message is sent to the destination chain, where then a synthetic token is minted. We have the collateral version, which is for an existing token that isn't the native token.
00:17:43.620 - 00:18:14.468, Speaker A: Similar idea, escrowed and then mint. And these are particularly useful for chains. Let's say it's a roll up that maybe wants like AVAX on its chain. So you have a bridge that is lock and mint in structure that you get to define the security parameters for and you get to deploy yourself. So we offer scripts to deploy these things really easily. We offer a UI that you can customize to look however you want as well. That's what that screenshot is there.
00:18:14.468 - 00:19:14.176, Speaker A: And it all just kind of works end to end out of the box. Yeah, great question. So, yeah, circle supports native transferring between two different chains. I think today it's Ethereum and Arbitrum or Avalanche and Arbitrum as well. Ethereum, avalanche and arbitram. So those three and yeah, this is great. I think you should use this instead of War brouts, because Circle is attesting to the validity of all of these tokens.
00:19:14.176 - 00:20:13.960, Speaker A: And they've blessed these tokens on all three of these chains. And I think you'll actually see a continuation of this for the very popular Fathead chains, these kinds of tokens will have canonical representations on those chains. But for the long tail of chains, circle is not going to support some random roll up out of the box because they have no incentive to. So that's where hyperlain warp routes would come to play. And that kind of also plays into our eyes being set on permissionless deployment for these long tailored chains. So in that scenario, the canonical USDC token on Arbitrum, you could bridge that to my roll up if you wanted. And in that scenario, the USDC would be turned into a collateral warp route on Arbitrum, and then it would be sent over to my roll up, and then it would be minted to me as a synthetic token.
00:20:13.960 - 00:21:32.830, Speaker A: So I think these things aren't mutually exclusive, and I think the trend of long tail chains having canonical representations for these kinds of centralized stable coins will continue as well. Yeah, exactly. If it's not the canonical one in our jargon, and some people use it differently, that's a synthetic token. So it's like pegged to the value of a token that exists on a remote chain. Cool. So a couple of other things that you can build or play with, that we've built for you that are really cool primitives, are these things called interchange accounts and interchange queries. So this is borrowing from the Cosmos ecosystem where they have these same primitives, but for context, the Cosmos ecosystem, they have this really robust way of communicating between chains called IDC.
00:21:32.830 - 00:22:17.514, Speaker A: But the implementations today are very specific to the Cosmos ecosystem. So it only really works for these chains that have the same kind of consensus mechanism, whereas hyperlain, it works anywhere in any kind of execution environment. So we can look at kind of the cool primitives that they've played with and built already and then bring it to the rest of the ecosystem. What interchange accounts are is a smart contract wallet that lives on remote chains that is controlled by a smart contract on an origin chain. So an example of this could be like a Dao, for instance, that lives on ethereum. They can control a smart contract wallet on some remote chain. They can own contracts through that.
00:22:17.514 - 00:23:11.120, Speaker A: They can call contracts through that. They can own tokens, they can own native tokens. They can do anything. And another cool thing about this, there's this word called like, counterfactual addresses, which are addresses that you can generate and know what that address is without actually creating it or requiring any action from the owner. So an example of this is like if you're familiar with create two if you know the bytecode hash and then assault in order to deploy this contract, you know that it'll exist at a particular address. And the importance here is then, like, the uniswap Dow, if they wanted to use interchange accounts, they don't need a Dow vote in order to create one of these. They can just know that they own this theoretical address that exists on a remote chain without any kind of action on their part.
00:23:11.120 - 00:24:02.800, Speaker A: And then there's this thing called interchange queries, which allows a smart contract on one chain to query some state on a remote chain and then get it sent back to it. So maybe I'm on my roll up and I really want, like, chain link price feeds. I can use interchange queries to query the current chain link price feed that lives on ethereum. And then I get back a call into one of my functions with that value. Yeah, I'll leave it here for any kind of questions. I was thinking I could do a live demo, but I don't have the time. But, yeah, if I were to ask you guys to have one takeaway from this, it would be that Hyperlane is the only permissionless interoperability project.
00:24:02.800 - 00:24:39.120, Speaker A: And, yeah, we're excited to kind of hear you guys feedback about it. If you're deploying any chains or if you have any cool ideas around modular security that you guys are going to play with, there are just so many things that I would be doing during this hackathon on Hyperlane. So if you have any ideas that you want feedback on, feel free to let me know. Happy to take any questions. If you get sabo. Oh, we have a booth downstairs as well. Yeah.
00:24:39.270 - 00:25:02.630, Speaker B: I have a question related to Bridging that you've called Warprobe. Basically, what's your take on Bridging data? I mean, not just related to Tokens and NFTs, but everything else. Like, how do you do everything else?
00:25:03.640 - 00:25:29.070, Speaker A: Yeah, so Hyperlane just allows you to send anything over the wire. So you can send if there's, like, KYC data on one chain or something like that, you can send that to a remote chain. You could even have applications that are natively multi chain, meaning that their state kind of exists on these two different chains or multiple different chains. Kind of like a distributed system type deal. And yeah.
