00:00:07.290 - 00:00:56.958, Speaker A: Thanks for coming. So, there are two parts to this session. I'll explain the Streamer network and Nico will explain the data unions that run on top of streamer. So there are two separate prizes, one for all good, one for using streamer, one for using the data union dao. So I'll go through what is Streamer, how to use it, I'll then talk through some ideas of what I think could be great hacks and then on to Nico for data unions. So, what is streamer? So it is a decentralized peer to peer Pub sub network. It means that data gets streamed to any number of ethereum accounts in real time.
00:00:56.958 - 00:01:56.580, Speaker A: And the role of the network is to move data from the publishers to all the subscribers over a decentralized networking topology. So if you're familiar with Pub sub channels or topics, streamer has streams and they mean the same thing and can be any number of publishers, any number of subscribers protocol scales based on this principle of shared responsibility where the users contribute their own bandwidth to support the topologies. So yeah, this is more a definitions slide. So we get asked these questions a lot. It's not a blockchain, so it's classical networking technologies, but it does have touch points in the blockchain. So it's an ephemeral data transport. But we do also have support for data resending through the storage nodes that we run.
00:01:56.580 - 00:02:56.760, Speaker A: And note there is a liveness requirement for this. So the storage nodes store the encrypted data, but you need to have the publishers online to be able to do the key exchange. So that's one small gotcha that you need to be aware of. But essentially the Streamer network provides this infrastructure for many to many data pipelines. Our access control is online, so this is one of the main touch points in the blockchain. All the data is cryptographically signed, every single data point signed by the private key of the user and comes with end to end encryption out of the box if you choose to use it. It's also free to use as well with the slight caveat that you just need to pay a cent or two for gas to create the stream and any sort of edits on the permissioning layer, the on chain access control.
00:02:56.760 - 00:04:12.080, Speaker A: So in the Web Two world, what we're replacing is this centralized data piece, the data center. So to move a lot of data around in real time, the Pub sub model is to decouple the publishers from the subscribers using some beefcake server in the middle that can scale up and handle anything that comes at it. But of course we know that this is centralized and we don't want to build our apps that are dependent on Google cloud, for example. So the Streamer network looks quite different in that it appears more as like this. If the web Two way was this vertical flow of data through data centers run by the Silicon Valley giants. The streamer network is the data flows horizontally through this overlay mesh network that is made up from the users of the network, the users that are intrinsically interested in the data from the topics or streams of the network. So at this point it's good to jump into an example.
00:04:12.080 - 00:05:13.842, Speaker A: So this is the streamer network website, it's just like any other website, loads JavaScript and loads image assets from a centralized point. But if you scroll down the fold you'll reach a data feed. And what's interesting about this data feed is that it's a stream on streamer and the data is not coming from a centralized source, it's actually coming from other visitors that are on the streamer network website at the same time as you. So this is a peer to peer data feed inside the browser. So while you're visiting the streamer network website, you are becoming a light node in the system. So this is the network Explorer. So I've plugged in that stream ID in the top left there and what it returns to me is the visual representation of what that network looks like.
00:05:13.842 - 00:06:07.570, Speaker A: So in one of these is the actual publishing script but the rest of these nodes are other visitors on the visiting the streamer network website and more likely than not, this is where you are pulling the data from. Okay, so onto the access control. So the on chain stream registry is on polygon. This is the network source of truth. So it defines who can do what on the network. So on these streams you can typically publish or subscribe and the blockchain looks to this registry to determine who can do what. And it also unlocks some interesting smart contract access control policies.
00:06:07.570 - 00:07:22.890, Speaker A: So this piece, this module, if you're familiar with the lit protocol, it's quite similar. We rolled our own permissioning system for the network but perhaps it could be composable with lit as well. So this is an open question, maybe it gets answered in the hackathon this weekend. So here is a different view of the access control fine grained permissions, publish, subscribe, changing permissions, edit and delete and whatnot and yeah, like I mentioned, you can start to get a bit creative with these access controls. So you could have a token gated pub sub channel perhaps there's stake to pub sub different kind of primitives that you can bake in to the access control and on our marketplace that Nico will speak to more we have time based pay to access subscriptions. So this also composes to the access control. You pay tokens to get a time based access or subscription access to a certain stream.
00:07:22.890 - 00:08:05.830, Speaker A: So getting into the tooling now, so the streamer client is your best friend to make all of this work. So it's designed to be this wrapper that interfaces with the onchain stream registry and the network and it bundles in the light node as well. So it really kind of takes care of you from all different angles. So you will need a little bit of matic to interact with the Stream registry and we're happy to sponsor this of course. So just reach out to us if you need any matic. And it's just an NPM package. So the Streamer client runs in the browser as well as any sort of node JS environment.
00:08:05.830 - 00:08:44.098, Speaker A: Also a shout out to the examples repo has a bunch of code samples to learn from as well. So if you're stuck, head there. And we also make it really easy as well. So we can also create a stream using a user interface. So just using MetaMask or whatever wallet that you have available, you don't even need to touch code to be able to create streams and edit the access control. So it's a nice way to get started, I think. So this is what's called the Core app.
00:08:44.098 - 00:09:23.060, Speaker A: You can visit it at Streamer network core and it's super easy. So this is the stream. ID that I'm configuring here. So the ID is made up of the Ethereum account that creates the stream plus some path name. And this can also be your ENS name. It will kind of scoop this up from the ENS registry. And in the share settings sidebar you can edit the access control, but you can do all of this within the Streamer client as well.
00:09:23.060 - 00:10:06.958, Speaker A: And we have Docs. Yay. The client is JavaScript Implementation. So if you are building or integrating with a different language, there is a solution for you here. We have what's called broker nodes. So you would need to run a broker node and open up its interfaces. So it has three interfaces, WebSockets, Http and MQTT and just about every single language ever written has these sorts of libraries built into them.
00:10:06.958 - 00:11:06.482, Speaker A: So you can publish and subscribe, push and pull into the network using these interfaces if you run a broker node. So this is an option if you want to work with a different language for the most part. So we have this kind of gateway into the network if JavaScript isn't your thing. So what can be built with the network? One of the most native and most interesting use cases I think is like a decentralized group wallet chat. So this is using the network for decentralized real time communications between Ethereum identity wallets. So a chat room is just a stream and the participants in this chat room have publish and subscribe permissions to write messages. These messages are being signed so you absolutely have full proof that you are talking to who you are talking to.
00:11:06.482 - 00:11:57.290, Speaker A: And there are no servers here, so if you don't count where the JavaScript came from, from the single page application, this is a totally serverless experience. Extensions to this, creating token gated chat rooms, et cetera, et cetera. Token gated experiences. This is quite a powerful primitive to build on. Okay, so very long list. Yeah, it all fits in, luckily. What should you build with Streamer? I think obviously your creativity should guide you, but here are some concepts that often come up as useful.
00:11:57.290 - 00:12:46.530, Speaker A: So I think I talked to the access control policies for Streams you can do a lot. There decentralized metrics gathering and web3 open data sharing. So this is about collecting fine grained metrics from other decentralized systems and using the network to interconnect and kind of improve on decentralized systems without having to reach for centralized solutions to be able to monitor the health of the network in real time. So I think this is quite a rich use case and it can be stacked with many other networks that are also sponsors. Here today. Wallet to Wallet Communications. I showed you the chat app.
00:12:46.530 - 00:13:50.034, Speaker A: So this is what it is essentially off chain multisig chat and conviction voting. So imagine the chat app but with your multisig participants from Gnosisafe for example, you can build conviction over what to vote on and so on in this off chain experience group chat plus lens protocol. I think this would be fantastic. Protocol stack interconnection so if you have IPFS and it needs to talk with live Peer or whatever, then you could use Streamer as this middleware to have this decentralized communication between your stack. We have decentralized wireless network proof of coverage. So this is a bit of a long shot for a hackathon, but something to think about. If you can create kind of a coverage map for decentralized wireless networks, then yeah, it can feed into the proof of coverage algorithm.
00:13:50.034 - 00:14:39.030, Speaker A: So this is fantastic first mile data transport from data providers to Oracles. So this is from the provider up until the Oracle. The Streamer network is a great technology solution for this. Redstone is one of the kind of next generation Oracles that are using us in this way. Multiplayer gaming, real time state share, I think that's one quite clear and RPC load balancing, which is not clear. So I will speak briefly to this one. So this is kind of just an internal idea that we have to scale the RPC centralized point in many blockchains.
00:14:39.030 - 00:15:39.814, Speaker A: So yeah, typically if you have this very popular DAP and they're polling the RPC, it's quite a heavy load for the RPC, 10,000 users, 10,000 requests a second if it's fast polling, for example. So that's not great. What we can offer is to use the Streamer network to sort of load balance these RPC calls. So how this would work is you would have these kind of watcher nodes that would do the RPC request as many as you want for as much decentralization as you want. But then your DAPs would be interconnected and kind of pulling in the data that originally came from that RPC load. Sorry, that RPC endpoint, they would be getting it from each other. So this is where the shared responsibility of the Streamer protocol comes in.
00:15:39.814 - 00:16:29.354, Speaker A: It's kind of similar to what we showed with the streamer network website where you're getting the data from your visitors. So in this way, we take all the pressure off that RPC endpoint and you can kind of start to imagine other sort of use cases where there is this central point or central data publisher that can get overloaded. So if you have this system where you sort of protect it with the streamer network, where the messages are coming from the other participants, it becomes quite an easy scale solution. So, yeah, this is something to think about. Okay, moving on to data unions. And Nico will take over.
00:16:29.552 - 00:16:52.640, Speaker B: Awesome. Let's see if I can get this thing a bit down because I'm not as tall as you are. Thank you, Matthew. Hi, guys. I'm Nico. I'm the devra engineer for Data union Dao. And Matthew just told you how you can handle all the data stuff, and I'm going to now tell you how you can actually monetize this data.
00:16:52.640 - 00:17:32.110, Speaker B: So let's jump in. So first of all, how you monetize this data? You monetize it with a data union. What is a data union? It's an organization with an application where individuals participate in the creation of valuable data. So what does that mean? It means members generate data through data union's application, which crowdsources data. And in the streamer context, this data can then get sold on the streamer marketplace. And I'll talk about that more in a minute about the marketplace. And with a data union, you can essentially monetize your data streams.
00:17:32.110 - 00:18:33.040, Speaker B: The Data union Dao offers the Data union framework, and this contains a smart contract template that handles payment distribution for the data union and a TypeScript based SDK that handles all the interaction with the data union or with the smart contract. And this SDK is an NPM package, and I will talk about that more in a minute. And we also offer server architecture for your member management. So let's see how this payment distribution works. So you can see here wait, do you see if I move my mouse? No. Okay, well, you see this center contract there? And as I said, it is a smart contract. And essentially money gets or Token gets sent into that contract and then distributed to the different members.
00:18:33.040 - 00:19:33.300, Speaker B: I'm just going to talk you through how this kind of works. So you've got an admin and that's going to be your project, right? So you have an Ethereum address that publishes or deploys that contract, and that's going to be the automatic admin. And this admin can then add members. So essentially the data publishes, right? And then the admin can set an admin fee which will result in this. I don't know if you can see the 30%, for example, and you can configure that in the way you want, really. And then if Token gets sent into that contract, the admin, for example, gets 30% and your data unit members will share the 69% of those incoming tokens. 69, because 1% of that of the 100% go to the Data union dow and we use this 1% for funding new projects, going to a hackathon and those kind of things.
00:19:33.300 - 00:20:20.242, Speaker B: Yeah, and once a token gets sent to the smart contract so that could, for example, happen on a marketplace, right? So your data get someone pays to be able to subscribe to your stream and those token then gets sent to that smart contract. And then again your members are able to withdraw their token or they can just accumulate it over time and take them out whenever they want. Really, right. This happens. So we have the smart contract and we have the SDK. And the SDK enables that you to interact very easily with the contract. As I said, it's just an NPM package and you can really just it's really those few lines of code.
00:20:20.242 - 00:21:15.374, Speaker B: We have more interaction with the contract, with the essential lines. You can deploy the data union with the SDK, you can set the admin fee, you can add members, remove members, and also withdraw your tokens from there. Alternatively, you can also use the Streamer core. Matthew briefly talked about this and it's essentially front end, where you can deploy the data union. And it's got a nice interface where you can add the name, your admin fee, and even your streams that you want to monetize. Right, and then about the marketplace, you can then publish this data union onto the Streamer marketplace. So they're like different data products where all the streams are sent on the marketplace.
00:21:15.374 - 00:21:52.894, Speaker B: And then Data Buyer can subscribe to those streams for token, like they will pay for it. By the way, those tokens don't have to be the Streamer data token. That can actually be your own custom token, right? We also have documentation, there will be a little bit of a guide how you can actually deploy data union. One way is with Streamer and the other way is just programmatically with the SDK. Yeah, an example would be, for example, for DATAUNE is Swash. So Swash is a browser extension. It's very easy.
00:21:52.894 - 00:22:39.390, Speaker B: So you just install your Swash plugin into your Chrome browser, join that dataunion, and then you can share your browser data and earn by sharing your browser data. So it's actually quite clever. And then if you're still looking for an idea what to build, EMRA, our community manager, he did a great blog about some ideas that you can build at this hackathon. So feel free to go to this link and check it out. I highly, highly recommend. And yeah, we're giving out $10,000 in prices. So one track is building with Streamer and the other track is building with Data Union.
00:22:39.390 - 00:23:39.826, Speaker B: So I really recommend integrating this into your project. And yeah, I think it works very well together, streamer Data Union. Anyway, and if you've got any questions, feel free to reach out to us on Telegram. You can also join the Discord server of Data Union or of Streamer and we'll be present there too and of course the one of ETH Global as well. Cool, right? Do you want to add anything? Okay so if you guys have got any questions, we're here to answer it. Cool. No we don't.
00:23:39.826 - 00:23:55.130, Speaker B: No, not in the moment. Yeah we can, we can we sponsor we sponsor the transaction fee to actually deploy the contract and the stream.
00:24:01.400 - 00:24:03.990, Speaker C: Gate. Where do we send that?
00:24:08.700 - 00:24:23.660, Speaker B: Ideally you do it so if you built with streamer I would recommend doing it on the front end and then you will see how you can add the payment and how much it costs and all that kind of stuff and then publish it to marketplace.
00:24:24.000 - 00:24:37.810, Speaker C: Got you. Accounts can actually post like for example the ownership of an NFT. Can we use that as.
00:24:43.960 - 00:25:43.680, Speaker A: This is kind of like the cutting edge of what we have out of the box on the access control. So it's basically in PR at the moment for a very complete code example that is on the chat repo. So you will need to kind of dig there and we have the contracts that do talk to the access control there, but this is like very well, I'll just say it's not documented at all. Like this token gating kind of twist to the access control. It's not like the core functionality of the network. So I guess we have some catching up to do on that documentation. But we have accomplished kind of feature completeness on the chat app that I showed and that's open source.
00:25:43.680 - 00:26:20.560, Speaker A: And so there's a few caveats here that the chat app Token Gating is just for ERC 20 tokens on the polygon chain and there's a PR out there for NFT token Gating. So it's very fresh and very hackable to kind of build this in but it's not quite as easy as just taking Lego blocks at the moment. So we have the examples there but it's quite cutting edge.
00:26:23.780 - 00:26:30.470, Speaker C: Take that PR and just deploy it to Mumbai and then set up some kind of.
00:26:35.900 - 00:27:20.186, Speaker A: I think it's too hardcore for me. I think the access control you would need to move to Mumbai as well. So if you're super brave yeah don't recommend but we can sponsor the transactions. It only costs a cent to do these things. Very happy to support that and we will have full native sponsoring of all transactions on Streamer. It's just not ready this weekend. Any other questions? It okay.
00:27:20.186 - 00:27:29.740, Speaker A: Well thanks for staying up so late and yeah, really appreciate it and please reach out to us if you have any questions. Thanks.
