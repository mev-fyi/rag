00:00:34.090 - 00:00:45.680, Speaker A: Hello everyone, and welcome to the ETH Online 2023 workshop. Breaking down the Polycon Zkevm bridge. Joining us today is Tony Olindo, who will be taking us through the session. And with that, I'll pass it over to Tony to get the session started.
00:00:47.090 - 00:00:48.254, Speaker B: Okay, great.
00:00:48.452 - 00:00:50.646, Speaker C: Just again, confirming everybody could hear me.
00:00:50.668 - 00:00:53.382, Speaker D: You're good? All right.
00:00:53.436 - 00:00:55.302, Speaker C: And everybody can see my screen.
00:00:55.356 - 00:00:56.360, Speaker D: I see you.
00:01:05.390 - 00:01:21.290, Speaker C: Okay, cool. So let's get started. My name is Tony Orlando, and I am Darrell Engineer at Polygon Labs. And I'm Tony Orlando on Twitter. And you can ping me anytime if you have any questions related to Polygon.
00:01:21.370 - 00:01:23.898, Speaker B: And what we're doing. But before we begin, I guess let's.
00:01:23.914 - 00:01:59.978, Speaker C: Just start by introducing the base of why we're all here and what made all of this possible, and that is the Polygon ZK EVM. So on March 27, the polygon Zkvm went live. There's a QR code to the announcement. And it was like the work basically Jordy's life's work. And a lot of people worked towards this particular goal. And we were able to achieve a launch on mainnet well, a main net beta. And as we all know what the stages of that would look like, we know that we are progressively moving towards a fully trustless system.
00:01:59.978 - 00:02:54.794, Speaker C: But at the base of understanding all of this is understanding just what the Zkvm is. And it basically represents the next chapter of ethereum scaling. So for Ethereum developers, polygon Zkvm allows you to seamlessly deploy your code while basically retaining the interior security of Ethereum, but with just faster, finality and lower cost. So you could think of what we're building in the Zkvm as an expanded execution layer for Ethereum, and it's a zero knowledge rollup. And what ZK rollups essentially do is that they are scaling solutions that are designed to just increase the throughput on Ethereum Mainet by moving computation and state storage to layer two. And ZK roll ups were considered like the Holy Grail of the ethereum protocol. And it took quite a bit of time.
00:02:54.794 - 00:03:04.160, Speaker C: Most people didn't think it was going to be possible within the timeline that we expected. But it's been amazing to see the various teams come together.
00:03:05.650 - 00:03:09.138, Speaker B: And this is just beyond even us.
00:03:09.224 - 00:03:17.940, Speaker C: Just in terms of the whole ecosystem and seeing various L2 S launch really complicated pieces of technology.
00:03:20.070 - 00:03:21.586, Speaker B: And seeing.
00:03:21.688 - 00:04:15.746, Speaker C: Solutions being actually built. And we are very proud to be a part of that whole journey and story. And Ethereum's development and how it essentially works is basically a blockchain, is a public database, and it's a shared computation layer. And the way we think of the EVM essentially is that the EVM is like a shared state machine or like the world computer. And specifically on Zkevm, we have transactions that are batched and processed, and so they come through. So you have the initial step here where you have the transactions that just come in, and then they are sequenced. We have a sequencer that essentially sequences all of those applications, aggregates them and then a validity proof is essentially generated which is a zero knowledge proof that computes all of the state transitions.
00:04:15.746 - 00:04:39.470, Speaker C: It produces a merkel route that we then store on L One but we also use to actually compute the brand new state given a batch of transactions. So the way that you could think about it is imagine if you have a very large receipt so if you go to Target or to Costco or something of that sort and you buy very many items.
00:04:42.210 - 00:04:43.006, Speaker B: What each of those.
00:04:43.028 - 00:05:26.286, Speaker C: Items represent is like a single transaction. And what we do is that inside of the Zkvm we basically batch all of those transactions and give you a zero knowledge proof that represents all of these transactions. So basically producing summaries of transactions on chain using zero knowledge proofs. And the reason why we use ZK is because you could actually trust it without necessarily being afraid of any kind of fraudulent transaction because it's all done trustlessly and it's using math on the back end. So why would you use the Polygon Zkvm? You basically inherit ethereum security. You have almost full EVM equivalents. There are certain opcodes and different things.
00:05:26.308 - 00:05:28.286, Speaker B: That we still do not support and.
00:05:28.308 - 00:05:31.502, Speaker C: If you check out our Wiki it actually has information around that.
00:05:31.636 - 00:05:37.950, Speaker B: So you could go and check that out. Additionally.
00:05:40.370 - 00:07:02.822, Speaker C: The Zkvms generally are considered to be fast and performant and eventually they're actually going to get to a place where they will power a lot much more lower cost transactions as we move ahead. But enough about the zkvm. So once we have the Zkvm, what we kind of began to see at Polygon is the capacity to build what I call and I'm hoping but none of our marketing has picked up. Sadly it's called the Zkverse in my books. But imagine a few chain which you could have a host of chains that are secured using zero knowledge technology and that's essentially what Polygon 2.0 basically represents is a secure ecosystem of chains that are all connected together using zero knowledge technology. And it represents that once we actually got through the bigger hurdle of just deploying the Zkvm and we've seen usage and adoption increase, we then have to step back and look at, okay, so what is the next evolution of this, given that we have ZK now? Closer, and with that, we're essentially able to build the next stage of evolution for the protocol.
00:07:02.966 - 00:07:07.158, Speaker B: So it's essentially a protocol that allows.
00:07:07.174 - 00:08:32.790, Speaker C: Us to basically unify scalability and liquidity. And the biggest piece of this is think of app chains, right? So individual chains that people could deploy at will. That's what the Zkevm kind of powers through the Polygon chain development kit. And so if you're building a protocol or you're building a particular tool imagine you could actually deploy your own chain and once you deploy your own chain you could actually decide how you wanted to function? Do you want to have purely gasless transactions? Do you want to have your own native token? Do you want to be able to power different use cases? Somebody's building in gaming would have vastly different ease from a team that's building DeFi and so on and so forth. Which is why we have this kind of solution that basically is essentially comprised of a proving layer which actually gives us the security that supports the execution and the interrupt layer that allows for cross chain communication and cross chain proof generation which secures the entire network. And then we have a staking layer that enables us to maintain the ecosystem of nodes and the various actors that are needed to ensure that the protocol is actually functioning.
00:08:33.230 - 00:08:39.686, Speaker B: But if you find this is a bit difficult to understand, okay, cool, let's.
00:08:39.718 - 00:08:50.158, Speaker C: Break it down even simpler. And Mark Boyron, who's our CEO. Let's simplify this tweet. Right, so if you look at what you're saying there, it's essentially if you.
00:08:50.164 - 00:08:52.206, Speaker B: Seem to understand Polygon 2.0.
00:08:52.228 - 00:09:11.974, Speaker C: But here's the simplification. So for most people who know Polygon, they know Polygon as Polygon POS, which is a chain with Broader, which is one of the most adopted chains. It's fastest and cheapest on Polygon. Then you have Zkvm, which was launched on March 27 and it has most.
00:09:12.012 - 00:09:14.642, Speaker B: Advanced secure zero knowledge chain.
00:09:14.706 - 00:09:30.966, Speaker C: And we have a killer proofer that is proving to be really Polygon. And then Polygon of the future is the Polygon of today, plus Polygon Biden which is coming up soon and it'll.
00:09:30.998 - 00:09:32.380, Speaker B: Be on testnet soon.
00:09:32.990 - 00:09:36.282, Speaker C: And then the Polygon endgame is essentially.
00:09:36.346 - 00:09:40.014, Speaker B: Where we headed is Polygon future plus.
00:09:40.052 - 00:10:15.706, Speaker C: All of the app chains that people will actually deploy. And if you followed the announcement of the Polygon chain development kit, you know that we have a couple of partners like Palm, nosis, Pay and different other solutions who are building on Polygon. And we also submitted a governance proposal to sello see if they would like to run their layer two using the Polygon CDK. So it's like Zke EVM as a service essentially. And all of those chains will be.
00:10:15.728 - 00:10:18.186, Speaker B: Connected using the Lxly bridge so that.
00:10:18.208 - 00:11:21.226, Speaker C: You allow transactions to move across the chains. And once we're able to actually connect all of that, then we have unified liquidity, right? So it'll be really sad if we have all of these app chains being developed and all of these various solutions and then we don't have a simplified way to bring everything together. And so the NFTs that you mint on Astar's CDK cannot be bridged to Ethereum, which is very sad. But what we want to do is just enable all of that to become really useful and portable. So if you're looking at what this will enable is that we have the Zkvm mainnet which essentially allows us to have connection to the Ethereum Mainet. But every other app chain will also have the ability to communicate with the Ethereum mainnet. And you also have Polygonmiden, which is a really cool privacy focused chain, privacy and performance chain that is launching.
00:11:21.258 - 00:11:23.306, Speaker B: So you could think of this closer.
00:11:23.338 - 00:11:28.080, Speaker C: To like Stark or Noir or Kakairo or something like that.
00:11:31.350 - 00:11:33.106, Speaker B: So this is what it currently looks like.
00:11:33.128 - 00:11:46.870, Speaker C: But in the future we're going to be upgrading the Ly bridge to be fully cross chain. So you'll be able to not only just terminate to Ethereum, but terminate to any other chain, any other app chain that exists within our ecosystem.
00:11:47.930 - 00:11:50.886, Speaker B: But let's go through, let's define so.
00:11:50.908 - 00:11:52.470, Speaker C: Let'S start with a base definition.
00:11:52.910 - 00:11:54.582, Speaker B: What is a blockchain bridge?
00:11:54.726 - 00:12:05.894, Speaker C: It essentially enables two blockchains to facilitate, basically connects two blockchains and facilitates secure and verifiable communication between those two parties.
00:12:05.942 - 00:12:06.540, Speaker B: Right?
00:12:09.170 - 00:12:19.746, Speaker C: The two main things that it actually powers is messaging and it powers transfer of assets. So you could think of like ERC, 20s or any kind of digital asset that's based on the blockchain can be.
00:12:19.768 - 00:12:24.866, Speaker B: Transferred using the Lxly bridge. If you want to think about it.
00:12:24.968 - 00:12:26.306, Speaker C: There are many types of bridges that.
00:12:26.328 - 00:12:29.406, Speaker B: Actually exist and they could be broadly.
00:12:29.438 - 00:12:31.666, Speaker C: Classified into two types.
00:12:31.698 - 00:12:34.566, Speaker B: So you have trustless bridges, which is.
00:12:34.588 - 00:13:28.086, Speaker C: Like the Lxly, so they operate using decentralized systems such as smart contracts with embedded algorithms. And the benefits is that the security of the bridge is the same as that of the underlying blockchain. And so you have native blockchains and every L two implements its own native blockchain. And so if you check out the Arbitrum bridge and various other bridges, you'll find their own implementations and they basically enable users to remain in control of their funds basically through smart contracts. And then you have trusted bridges which depend upon a central entity or system for their operations. So you could think of like accelerator and what they do is that they depend upon a centralized entity or system for their operations. And the big trust assumption that you're making when you're using any of these.
00:13:28.108 - 00:13:30.134, Speaker B: Tools as you're saying, I trust this.
00:13:30.172 - 00:13:41.740, Speaker C: Team and therefore I will submit my funds to them and I will trust that they do have the funds on the destination chain that I want my liquidity of my message to actually appear on.
00:13:42.510 - 00:13:43.500, Speaker B: And so.
00:13:48.210 - 00:14:01.826, Speaker C: You'Re making that kind of assumption there. And if you're to summarize the different types of chains, the different types of bridge, trustless bridges are essentially trust minimized bridges where we minimize the need for.
00:14:01.848 - 00:14:04.222, Speaker B: You to trust the bridge because it's.
00:14:04.286 - 00:14:17.186, Speaker C: Basically inheriting the security of the underlying blockchain. And with trusted bridges you're making trust assumptions. And so those are the challenges that you actually kind of have to navigate.
00:14:17.218 - 00:14:20.310, Speaker B: If you're thinking about how to build those bridges.
00:14:21.610 - 00:15:17.286, Speaker C: But now let's delve a bit into Lxly. So I'll just go through the process because I actually didn't want to spend too much time on the theory and then we'll jump a bit into the code where I'll take you through the code sample. But essentially the bridging process is basically defined in five different stages and steps. And so the very first one is you deposit tokens on the L one and once you deposit tokens, you essentially then go and append, or rather your particular transaction is basically appended to the exit leaf and the global exit route and the bridge smart contracts take care of that and then it's synced on the L2. So the sequencer then eventually picks up that transaction and it's synced on the.
00:15:17.308 - 00:15:18.726, Speaker B: L two and then it makes it.
00:15:18.748 - 00:15:27.520, Speaker C: Available for you to actually claim the asset. And once you then claim it, the process is then validated and then completed on the back end.
00:15:32.690 - 00:15:35.646, Speaker B: Sorry, just trying to move the presentation forward.
00:15:35.828 - 00:15:38.420, Speaker C: So essentially how this works is.
00:15:40.470 - 00:15:40.834, Speaker D: For.
00:15:40.872 - 00:15:45.026, Speaker B: You as the user, or as any.
00:15:45.048 - 00:16:10.460, Speaker C: User, you would initiate a transaction on ethereum L One to deposit tokens to the Polygon Zkvm bridge contract and that would trigger the bridge asset function of the Polygon Zkvm bridge, right? Because what you're essentially doing, the place for you to fundamentally start, unless you magically had testnet ETH, is that you're going to look for ETH or you're going to look for some kind of ERC, 20 to be able to transact on any L two.
00:16:10.910 - 00:16:12.698, Speaker B: That's your first step, right?
00:16:12.864 - 00:16:39.154, Speaker C: Otherwise you won't be able to pay for gas. So basically it triggers the bridge asset function of the Polygon Zkvm contract. And once you do that, the bridge asset function internally calls the deposit function, which calculates a leaf value based on the deposit and adds it to the merkle tree of the pending deposits, right? So you don't have to do this. That happens internally and when you look at the code, you'll be able to see how that goes. And then after that, after a certain.
00:16:39.192 - 00:16:43.894, Speaker B: Period of time, the beauty of L.
00:16:43.932 - 00:17:49.690, Speaker C: Two S, and not like ZK EVMs and ZK roll ups, is that it's just a small period of time as opposed to seven days or something like that. So a certain period of time, the global exit route is updated on the L2 and the sequencer essentially fetches the latest route and ensures that which ensured that the exit route studied the designated storage slots of the global exit contract on the L two. And essentially this is the next stage that requires user interaction. The user can now construct merkel proof for their deposit leaf on F two and submit a transaction to call the claim asset function. And once they call the claim asset function, it then exists on their end and Bob's your uncle, essentially. And on the back end, once you trigger the claim asset function, the Polygon Ekvm bridge contract follows the steps and verifies the provider Murko proof and ensures that you have the deposit lease authenticity.
00:17:50.910 - 00:17:54.906, Speaker B: But that seems like a bit of a mouthful, so I'm going to spend.
00:17:55.088 - 00:18:03.520, Speaker C: The rest of the time here. Just I'll spend five minutes and leave a couple of minutes at the end there for anybody who has questions. Just give me 1 second.
00:18:08.710 - 00:18:09.460, Speaker D: Right.
00:18:11.590 - 00:18:12.050, Speaker C: Sorry.
00:18:12.120 - 00:18:31.000, Speaker E: Do you have any link or YouTube or whatever that it will help me to understand how CK really works? I know it's hashings. I know there is America tree, but I never studied correctly. So if you have any good introduction to share, it would be good.
00:18:31.530 - 00:18:32.280, Speaker C: Right.
00:18:35.710 - 00:18:40.522, Speaker B: Again, let me just share this on my end here so that you have.
00:18:40.656 - 00:18:41.980, Speaker C: That bit of information.
00:18:45.550 - 00:18:47.500, Speaker B: Sorry, 1 second.
00:18:52.430 - 00:19:09.666, Speaker C: All right, so I'd encourage you first of all, if anybody's looking to submit to the Lxly bounty, please scan the QR code. And this QR code will show you will take you to the code base that I'm showing you now, which essentially gives you an idea of what that looks like for you to be able.
00:19:09.688 - 00:19:12.910, Speaker B: To actually build, like, a cross chain solution.
00:19:12.990 - 00:19:13.620, Speaker D: Right.
00:19:14.710 - 00:19:16.322, Speaker B: And this is the official documentation.
00:19:16.386 - 00:19:40.878, Speaker C: So I think Mariano was asking, like, if they want to get started. You could actually scan this QR code, and it'll take you to the Zkevm docs, and it'll show you how to use it. But to be entirely clear, unless you're doing anything super complicated, the vast majority of smart contracts just simply be deployed to the Zkevm in the very same way you've been deploying to any other chain. And so it's important for me to.
00:19:41.044 - 00:19:43.278, Speaker B: Let you know that you don't need.
00:19:43.284 - 00:19:45.706, Speaker C: To do anything to be able to use the Zkvm.
00:19:45.738 - 00:19:49.390, Speaker B: You could use it exactly similarly, use any other chain.
00:19:51.010 - 00:19:52.000, Speaker C: Okay, thanks.
00:19:52.950 - 00:19:56.500, Speaker E: Not fully, but yes, something thank you.
00:19:56.870 - 00:19:58.386, Speaker C: You could delve into the docs and.
00:19:58.408 - 00:20:00.434, Speaker B: Then try to bring that out.
00:20:00.632 - 00:20:12.194, Speaker C: So I'll then go to the ping pong code example. I won't spend too much time here, but we have the Zkvm contracts. And so you could implement a sender.
00:20:12.242 - 00:20:18.090, Speaker B: Or a receiver on your end. And let's first start looking at the sender.
00:20:18.830 - 00:20:21.450, Speaker C: And what that does is that essentially.
00:20:22.670 - 00:20:26.960, Speaker B: You'Re pulling in a couple of interfaces. So you're pulling in.
00:20:29.410 - 00:20:30.954, Speaker C: The message receiver.
00:20:31.082 - 00:20:32.666, Speaker B: And then you're pulling in the Zkvm.
00:20:32.698 - 00:20:34.490, Speaker C: Bridge, which is the actual implementation.
00:20:34.650 - 00:20:35.360, Speaker B: And.
00:20:37.970 - 00:20:41.858, Speaker C: When you deploy the contact, you have to provide the Zkvm bridge address.
00:20:41.944 - 00:20:43.860, Speaker D: There that you could look at.
00:20:45.030 - 00:20:50.690, Speaker B: And once you get to the this is just for messaging.
00:20:51.670 - 00:20:54.374, Speaker C: You only need to specify these three.
00:20:54.412 - 00:20:56.854, Speaker B: Parameters, and you could deploy right.
00:20:56.892 - 00:21:00.594, Speaker C: So it basically comes down to these three parameters. The destination network.
00:21:00.642 - 00:21:02.486, Speaker B: So this is the chain ID, whether.
00:21:02.508 - 00:21:08.442, Speaker C: Or not you want to force an update of the global route, which you usually do. And then the value that you want to pass.
00:21:08.496 - 00:21:08.906, Speaker B: Right.
00:21:09.008 - 00:21:16.054, Speaker C: So the value is essentially encoded, and it's passed here. So you could see the ping message.
00:21:16.112 - 00:21:19.502, Speaker B: Here and then polygon Zkvm bridge message.
00:21:19.636 - 00:21:21.294, Speaker C: And you have all of those.
00:21:21.412 - 00:21:28.862, Speaker B: And that's essentially it. It's not that difficult for you to start to send messages from Polygon Zkvm.
00:21:28.926 - 00:21:33.698, Speaker C: To Ethereum l one. And if you're using Gorelli then you.
00:21:33.704 - 00:21:34.980, Speaker B: Could use that as well.
00:21:36.470 - 00:22:17.610, Speaker C: And on the receiver side you're basically extending the same receiver and the bridge. And once you implement that bridge in the constructor you actually pass in the address and then the network ID of the bridge that you're actually implementing and that is then set and that becomes like the place that it will be receiving events from. And on message received is just the main handler that you need to be able to transact with and it basically gets the origin address, the origin network.
00:22:17.690 - 00:22:19.490, Speaker B: And then the data that was passed.
00:22:20.150 - 00:22:22.354, Speaker C: And then just a basic require here.
00:22:22.392 - 00:22:24.180, Speaker B: That ensures that.
00:22:26.790 - 00:22:39.318, Speaker C: The message came from the Zkvm bridge that you specified. And then this here could only be called by the sender on the other network. So the ping sender that needs to.
00:22:39.484 - 00:22:41.960, Speaker B: Match the origin address that you pass here.
00:22:43.530 - 00:22:47.274, Speaker C: Yeah, the ping value, you would decode that value and then just ping it.
00:22:47.312 - 00:22:47.514, Speaker B: Right.
00:22:47.552 - 00:22:57.934, Speaker C: So really bare bone simple example that shows you how you could send messages across chain. And if you go back into this.
00:22:57.972 - 00:22:58.750, Speaker B: Repo.
00:23:01.090 - 00:23:14.286, Speaker C: There'S a custom ERC 20 that goes into what that looks like for ERC 20 asset transfers. For the sake of this presentation, I won't go into it, I'll just delve.
00:23:14.318 - 00:23:26.726, Speaker B: Into the scripts here. The deployment. So you would deploy the bridge, you.
00:23:26.748 - 00:23:33.578, Speaker C: Deploy the main net and then you verify the main net contract. So once you deploy your instance of.
00:23:33.584 - 00:23:40.170, Speaker B: That bridge network, it then is essentially need available.
00:23:40.240 - 00:24:02.034, Speaker C: And then you could provide your own factory for you to be able to actually start to bridge ERC 20 tokens. And once you're done with the deployment, you could verify the contracts on main net or Gorelli or Zkvm. And once you go into the scripts here, the scripts show you how to.
00:24:02.152 - 00:24:07.614, Speaker B: Bridge essentially the messages from a destination network.
00:24:07.662 - 00:24:40.186, Speaker C: So if the network name is Ekvm Testnet or the KVM mainnet and it essentially deploys basically contacts the bridge that was already initialized and the bridge factory. And from there it just has to run the standard transaction that we actually accustomed to. So you have the approve and you could initiate the approve there. And then you could also initiate like the bridge which allows you basically to bridge the token.
00:24:40.378 - 00:24:45.866, Speaker B: And once you bridge the token, that's it. So I'm hoping that this has provided.
00:24:45.898 - 00:24:48.930, Speaker C: Just some basic understanding of what that.
00:24:49.000 - 00:24:50.914, Speaker B: Would look like for you.
00:24:51.032 - 00:24:52.418, Speaker C: Given that we have 30 minutes, I.
00:24:52.424 - 00:24:55.826, Speaker B: Can'T go fully into all of the.
00:24:55.848 - 00:24:59.730, Speaker C: Code examples, but I hope that this was useful.
00:25:04.840 - 00:25:05.312, Speaker D: Awesome.
00:25:05.386 - 00:25:24.140, Speaker A: And yeah, there's a few questions I can go back and read to you. So there's a question. Can we get some technical insight into where the Zero knowledge step is actually applied to the block mining process and which contents from the result are stored on the block on the polygon and ethereum chain.
00:25:26.240 - 00:25:26.990, Speaker C: Okay.
00:25:33.220 - 00:25:36.290, Speaker B: Hashtag fun times. Just give me a SEC.
00:25:44.920 - 00:25:45.670, Speaker D: Okay.
00:25:46.360 - 00:26:10.428, Speaker C: So when a transaction is this is very high level, I'm just going to give you a very high level overview. So transactions are received on the l Two, right. And the nodes essentially get those and then they process into a single batch, and you have batches that are then linked together.
00:26:10.514 - 00:26:11.052, Speaker D: Right.
00:26:11.186 - 00:26:18.656, Speaker C: And what happens inside of the sequencing and the batching process is that all of these transactions represent a state change.
00:26:18.758 - 00:26:19.216, Speaker B: Right.
00:26:19.318 - 00:26:39.288, Speaker C: So each of those state changes are then calculated inside of a batch and a proof is generated that represents all of the state transitions. So it is at the point at which those state transitions are being represented. I won't say polynomials or anything, I.
00:26:39.294 - 00:26:43.576, Speaker B: Don'T want to get into that level of detail, but essentially it's at the.
00:26:43.598 - 00:26:47.080, Speaker C: Stage where transactions, the batch transactions.
00:26:49.740 - 00:26:50.104, Speaker D: After.
00:26:50.142 - 00:27:19.910, Speaker C: They'Ve been sequenced and aggregated, a proof is then generated based on that batch that essentially represents all of the state changes inside of that particular batch. And that batch is then the validity proof that is generated sorry. Is posted back to L One as part of the data availability, and it is stored inside of a storage contract that we have that resides on L One.
00:27:21.560 - 00:27:22.292, Speaker B: I'm not sure.
00:27:22.346 - 00:27:23.300, Speaker C: Hi, Tony.
00:27:23.720 - 00:27:43.960, Speaker F: That was me asking the question. Thank you so much for the answer. I really appreciate it. As I understand, you give quite a high level overview. I am a blockchain developer and I would like to learn more about this in depth, right down to the nittygritty of it. So could you help me get started with the same give me any reference as to how I should proceed.
00:27:44.560 - 00:27:52.156, Speaker C: Yeah, that's great. The Polygon wiki here has a lot of the information that you need to.
00:27:52.178 - 00:27:56.096, Speaker B: Know about the architecture, how to set.
00:27:56.118 - 00:28:00.130, Speaker C: It up, the nodes, and all of those pieces of information.
00:28:01.540 - 00:28:02.336, Speaker D: Right, okay.
00:28:02.438 - 00:28:22.276, Speaker F: But one thing, Tony, that I've observed with the documentation throughout all development is it tends to go right into the details quite soon. So the way you explained it right now with a high level overview first gives a nice idea as to how to proceed with breaking those blocks individually.
00:28:22.308 - 00:28:23.080, Speaker D: Technically.
00:28:25.020 - 00:28:43.230, Speaker F: That helps me personally, and I'm sure it would help a lot other people as well, learn these things in a very structured way because you can break the high level overview to, say, five parts and learn the low level for each five parts. Is there any guidance you can give me for the same? Because the docs don't do that.
00:28:44.320 - 00:28:50.690, Speaker C: Maybe if you message me, like on Twitter and telegram, I could probably try and figure out how I could get you the more information you need.
00:28:51.700 - 00:28:54.370, Speaker D: Yeah, thank you. Cool.
00:28:56.520 - 00:28:57.172, Speaker B: Okay.
00:28:57.306 - 00:29:02.580, Speaker A: The next question was how do you make sure that the sequencer is not becoming a central point of failure.
00:29:06.600 - 00:29:09.892, Speaker B: Not sure what that would mean, but.
00:29:09.946 - 00:29:14.084, Speaker C: Essentially, if you talk about, like, trusting.
00:29:14.132 - 00:29:19.290, Speaker B: The sequencer or what type of failure do you mean?
00:29:20.380 - 00:29:21.848, Speaker C: Epic. Are you here?
00:29:22.014 - 00:29:22.344, Speaker B: Yeah.
00:29:22.382 - 00:29:32.590, Speaker C: Transactions are pooled and they're entering the MEMP pool. And you could actually see all of the transactions and the batches and how they're being put together.
00:29:33.280 - 00:29:34.780, Speaker B: Yeah, a bottleneck of sorts. Yeah.
00:29:34.850 - 00:29:50.660, Speaker C: So all of those pieces are going to be eventually fully decentralized. So I think the sequences and all of those things would kind of enable that to scale. And we've had challenges with that before, but we've been able to scale up and down effectively for the Zkv.
00:29:53.240 - 00:29:53.652, Speaker D: Okay.
00:29:53.706 - 00:30:00.490, Speaker A: And then the last question was when we deposited on l One, how the l Two knows? Some fund deposit on l One.
00:30:02.540 - 00:30:26.224, Speaker C: All right, let me see. So the process here is essentially our sequencer basically appends a state route. So we basically append the global exit route. So if you look at the end.
00:30:26.262 - 00:30:26.850, Speaker B: Here.
00:30:29.700 - 00:30:37.960, Speaker C: When you run the action, it appends. It either if it's from l One to l Two or L2 to l One, it's appended to the destination.
00:30:38.060 - 00:30:40.196, Speaker B: To the source chain so that you.
00:30:40.218 - 00:30:42.036, Speaker C: Have a clear idea of where those.
00:30:42.058 - 00:30:45.684, Speaker B: Funds are, and that's what enables you to do that.
00:30:45.802 - 00:30:56.856, Speaker C: But the sequencer essentially transfers oh, sorry. Sequencer essentially pulls the exit route and creates that.
00:30:56.878 - 00:31:02.860, Speaker B: And the Zkvm Bridge receives that and pushes it accordingly.
00:31:03.920 - 00:31:05.724, Speaker C: I really have to run now because.
00:31:05.762 - 00:31:10.316, Speaker B: I have another engagement. Unless there's any other question, I'd like.
00:31:10.338 - 00:31:22.016, Speaker C: To encourage people to ping me on either WhatsApp or sorry, please don't ping me on WhatsApp on Twitter or the.
00:31:22.038 - 00:31:26.790, Speaker B: Dope who posts his telegram as well.
00:31:27.560 - 00:31:31.110, Speaker C: So, yeah, you could always ping me there, but then technical questions.
00:31:32.360 - 00:31:34.388, Speaker B: I sleep for about 4 hours or.
00:31:34.394 - 00:31:40.512, Speaker C: 5 hours on average, and I take 20 working days to respond to messages.
00:31:40.656 - 00:31:42.340, Speaker B: But I'll respond eventually.
00:31:43.400 - 00:31:43.812, Speaker D: Awesome.
00:31:43.866 - 00:31:44.084, Speaker C: Yeah.
00:31:44.122 - 00:31:55.000, Speaker A: There are no other questions, so thank you, Tony, for the great presentation and thank you all for attending. And, yeah, if you have any questions, definitely feel free to reach out to Tony. So thank you all. Have a good rest of your bye.
