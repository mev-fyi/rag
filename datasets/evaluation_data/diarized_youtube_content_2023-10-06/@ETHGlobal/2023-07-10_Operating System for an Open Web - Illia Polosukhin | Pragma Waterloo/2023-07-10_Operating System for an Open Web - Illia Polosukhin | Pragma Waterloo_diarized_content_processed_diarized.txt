00:00:07.610 - 00:00:10.240, Speaker A: All right, last talk of the day.
00:00:10.610 - 00:00:39.814, Speaker B: And then we get to talk to all of our speakers outside with a bunch of drinks. And I know all of you are being very patient here, so without further ado, I'd like to bring on our next speaker, Ilya. Ilya is the co founder of Near Protocol, and some of you have seen Near Protocol. Some of you have heard of it. Some of you have heard of what Ilya has done in the past before starting near, we'll cover all of that and what the future looks like of MultiChain world in the next 60 seconds. Welcome. Oh, well, we'll cover starting that.
00:00:39.814 - 00:00:44.220, Speaker B: There you go. Don't worry. I'm also tired, but please welcome Ilya from near.
00:00:47.070 - 00:00:55.562, Speaker A: It's been a long day. I know. I was talking with Carter yesterday. I'm like, you're going to be on stage 7 hours. Are you sure this is good for you?
00:00:55.616 - 00:01:23.240, Speaker B: He seemed like a good idea last night. Well, I want to cover a lot of the blockchain stuff. I want to also cover a lot of how we should think about near versus Ethereum versus all the other chains that are out there and what that world looks like on Scalability. But I want to start off by asking you, what did you do before starting near? And you should tell the audience kind of how you got into this space and what made you start near?
00:01:23.690 - 00:01:44.734, Speaker A: Yeah, so my background is actually in machine learning, and I got kind of excited about it very early on. I think somebody asked me what's my favorite movie from kind of teenage years? And I responded. Artificial intelligence. And so not a lot of good.
00:01:44.772 - 00:01:46.922, Speaker B: IMDb ratings on that one, but it was a good movie.
00:01:46.986 - 00:02:19.718, Speaker A: It was a good movie and definitely kind of led to a lot of thinking from there. And so I've been working for about ten years in machine learning. I've done a bunch of projects kind of across everything from cancer research to insurance to finding oil. And then I joined Google Research to work on natural language because I actually think natural language is the best way to represent knowledge, and apparently that's true.
00:02:19.804 - 00:02:23.354, Speaker B: Now that we think a chatbot here would agree.
00:02:23.472 - 00:03:05.458, Speaker A: Yeah. And so at Google Research, I worked on if you searched for stuff@google.com and saw kind of short answers for this, our kind of team was powering a bunch of that, everything from lists to actual short answers. And I worked on TensorFlow, which is machine learning framework. Got really kind of whenever I saw open source, I'm like, I need to work on that. And I ended up kind of through being it was actually a funny story because the whole attention is all you need came from lunch. So it was a lunch conversation.
00:03:05.634 - 00:03:07.366, Speaker B: Okay, that's a story I don't think.
00:03:07.388 - 00:03:35.314, Speaker A: I've heard before either. So let's hear this. Yeah, it's not a well known story, but yeah, it was a lunch conversation. The context was we were building a lot of kind of recurrent neural networks. So if you're not familiar with neural networks, you're processing one thing at a time, and so it ends up being very slow and very unstable. So it's like easy to really hard to train. And so in result, we couldn't launch anything like that in Google.com
00:03:35.314 - 00:04:00.380, Speaker A: or translate because it was too slow to kind of do inference. Instead, everybody was doing just bag of words, which is just, you literally don't have a sequence of words in your model. It's not considering sequence of words. You literally just take a sentence, split it into words, and feed that into a model without any order, which was working surprisingly well.
00:04:01.550 - 00:04:04.700, Speaker B: I didn't notice on Google that I don't think you would notice anywhere else.
00:04:06.110 - 00:04:47.080, Speaker A: The idea of transformers originally, like, there was a concept of attention, which was kind of pioneered by a year or year and a half before that. And I was like, well, if you use a bag of words and attention together, can attention actually recover the sequence and instead be the power instead of the recurrent neural networks? So that was like a lunch conversation. And so I went back, kind know, hacked something together and it was not noise. And so then me and Ashish and others, we started kind of trying to bring it to life and see if it works.
00:04:47.450 - 00:04:50.298, Speaker B: That's awesome. So it turns out that attention was all you needed.
00:04:50.384 - 00:04:51.114, Speaker A: Exactly.
00:04:51.312 - 00:05:11.038, Speaker B: For those in the audience, he's being a bit humble. Attention is all you need is the actual invention of transformers, which is what powers all these LLMs and OpenAI and chat TPT and everything else. He's one of the authors and inventor of that concept. And that was almost five years ago.
00:05:11.204 - 00:05:16.180, Speaker A: Yeah, it was 2017. Beginning six years ago. Yeah.
00:05:16.790 - 00:05:29.046, Speaker B: And seeing that come to life now, and everybody kind of finally realizing what you can do with all amps is insane. So inventing transformers, and then something in the middle, and we have near how that happened.
00:05:29.148 - 00:05:59.754, Speaker A: Yeah. So paired up with my co founder, Alex kidonoff, and I wanted to do something like we had kind of transformers. I always wanted to do code synthesis. So for those not familiar, it's what GitHub copilot is. And so we kind of started near AI pretty much to build GitHub copilot five years ago. Five years ago, without Microsoft money or GitHub data. And so what we did was our competitive programming background.
00:05:59.754 - 00:06:18.950, Speaker A: And so we got a lot of data from that. And then we had all of the students around the world actually working for us, adding more data. And the challenge we had was actually paying them because we had students in China, in Russia, in Ukraine, and kind of all those countries which have monetary control, like the US.
00:06:19.020 - 00:06:19.702, Speaker B: Capital control.
00:06:19.756 - 00:07:01.810, Speaker A: Yeah, capital control. You're sending money from us to these countries complicated some students didn't have bank accounts. And so the crypto was like, hey, we have this global payment network that everybody's talking about. And this was like, beginning of 2018. Can we use that? And the answer was, no, you cannot, because it's way too expensive for what we're doing, way too complicated even for developers to figure out how to use it's like, hey, before you can receive money, install MetaMask and fund it, you're like, Wait, with money? We paying people to do stuff. Can we pre fund it for them? It's like, no, you cannot. They need to have their wallet.
00:07:01.810 - 00:08:17.290, Speaker A: So that was all kind of drivers like, this doesn't seem like the way it should work. The idea is great, a lot of concepts are great, but it doesn't work. And so we started digging in and trying to figure out, how should this work? Who is working on this? What are the kind of ideas in the space? And so that's when we met Vitalik, we met Justin Drake, we started also meeting all the other kind of protocols as well, diving in, how it works. And at the end, we haven't found anyone who's trying to make set of trade offs that we believed are right. Which, by the way, very similar to what kind of flow is thinking about, which are, how do we make it really simple to use for people who don't know anything about blockchain and shouldn't? How do we make it really simple to build and kind of as available to anyone, to any developer without needing to learn new concepts? And then how do we make it really secure and scalable to billions of users? Right. So that it actually linearly scales as more usage comes in. The kind of analogy I like to use is that Netflix never asks you to pay more because other people are watching the same movie.
00:08:17.290 - 00:08:53.490, Speaker A: So it should just scale underneath. And Uber does well, maybe they need the better. I think they were working autonomous driving that was supposed to solve that. So anyway, so that was kind of the origin of near. We ended up doing a really if you haven't seen a whiteboard series, which was a really cool way to learn about what everybody else in the space are doing. And so we interviewed everyone from Cosmos, from Ethereum, from Salana polka dot. So there's like over 50 episodes.
00:08:53.490 - 00:09:16.720, Speaker A: Filecoin is there as well, and really diving in into how technically their protocol is working and really kind of what is the concepts and what are the trade offs? And so that gave us a lot of understanding. And as we were designing near, we were kind of understanding very well, what are the trade offs we're taking? And also kind of how that compares to the whole space.
00:09:17.570 - 00:09:39.906, Speaker B: I want to kind of interject here for a second, because this seems like such a casual thing that you're saying, but three years ago, we had to invent a lot of these things and hope that they worked in production the way they work in theory. And this kind of applied to anybody who launched a blockchain, anybody who kind of played with different consensus algorithms or just different ways to think about scaling.
00:09:40.018 - 00:09:42.006, Speaker A: So it feels like, oh, of course.
00:09:42.028 - 00:10:02.320, Speaker B: It would work, or this is a given now to everybody who's coming in. But this was crazy. Five years ago, people were still skeptical of E two and Sharding, and we've kind of seen iterations on all that too. So maybe before we kind of dive in what were kind of some of the things that you either ended up inventing or iterating on from existing computer science problems that kind of led to near being what it is now.
00:10:02.690 - 00:11:02.938, Speaker A: Yeah, the underlying question pretty much is one computer, the blockchain usually relies that there is one computer that produces a block and then everybody else validates it, meaning they kind of replay the block, execute transactions and get to the same result as everybody else. And so in reality, you ended up with capacity of one computer. So you cannot do more work than what one computer can do. And this is even without consensus overhead, right. This is literally like if we assume there's no networking lag, there's no need to wait for agreement. It's just like you execute as fast as one computer can do and obviously that's limiting and there's other sets of kind of limitations. Then you add consensus, which is, well, if we need to wait for an agreement before we can produce next block, that's extra latency and in turn less throughput to the network.
00:11:02.938 - 00:11:41.498, Speaker A: And then on top of it, you have the problem of kind of VM execution. And actually, the real problem is storage. Because if you want to have authenticated kind of storage and what this means is in blockchains, you can verify that this piece of state your balance, you can verify that indeed you have this much ether or whatever token in your account and there's a proof for that and it's kind of consensus proven. And so to do that, we actually store it in so called kind of authenticated database. Right. Which means there's a proof for each piece of data. And that is very expensive.
00:11:41.498 - 00:12:59.778, Speaker A: Meaning if you have a million records, you actually need like ten writes and ten reads for any single piece of data to write or read. So it's like log n pretty much complexity for computer science students here. So that's a very expensive right, because if you have a transaction that touches like 100 pieces of state, that can be like 1000 reads of disk, which is really expensive even with SSDs, these are all the kind of problem if you decompose a blockchain. This is the storage VM execution kind of consensus, and then the fact that you're only running on one machine. And so the way to solve this is kind of work on each of these layers and figure out how to remove the bottlenecks. And so, starting from the top, the single machine thing is how do we have multiple machines running in parallel, executing transaction in parallel, ordering transactions, executing transaction in parallel? Then how do you pipeline consensus in such a way that it doesn't have a lag, right, that ideally, at any point of time, somebody is producing next block and while somebody producing next block, you're executing the previous block, right. So that you don't wait while you execute to produce next block.
00:12:59.778 - 00:13:25.680, Speaker A: And on kind of VM level, how do we optimize performance that's as close to native and on storage level, how do we kind of remove the bottlenecks? When we talk about writes, how do we pipeline writes so we don't need to wait for them? And for reads, how do we have ideally in memory or at least like flat data storage that we can read from? So this is all kind of pieces, right? And from there you need to really build a thing that works.
00:13:26.210 - 00:13:28.314, Speaker B: Combining them is not yeah, combining.
00:13:28.362 - 00:14:32.930, Speaker A: Yeah. And the specific, the sharding part, running things in parallel is hard because usually when people come to blockchain, they expect this atomic execution, right? They expect that if I send a transaction and it touches a bunch of contracts or apps, if something goes wrong, the whole thing rolls back. And you cannot achieve that if you have multiple kind of parallel execution happening, right? It's the same kind of going from a single threaded application to a multithreaded application. Now you need to think about kind of locks and complexity around that. And so that was one of the core trade offs, right, which with layer twos with polka dot, the decision was different. The decision was like, well, why don't we have still this single threaded applications, but we just have a bunch of them and the users and developers figure out how this should work. Right? And from our perspective, I started with simple and secure and scalable, right? The simple was the important part.
00:14:32.930 - 00:15:15.860, Speaker A: And this is not simple. This makes complexity surface to the user and saying like, hey, do you know which layer two you're on? Or app chain you're on? Or power chain you're on? Zone or whatever, you need to know which security it has, who's running it. Is it a solid offerhead? Does it have all the ethereum in account to actually submit blocks? Should probably monitor that as a user. So that's the complexity that kind of the other trade off has. And we wanted to remove that and user, not think about it. And in turn, it meant that we have each account, each contract to be running in parallel as well. So we don't have this ethnicity on a transaction level, we have it on an account level.
00:15:16.230 - 00:15:23.966, Speaker B: I mean, that's a very hard problem to solve with locks and just making sure this is globally consistent. We won't get into how you solved.
00:15:23.998 - 00:15:27.794, Speaker A: It because there's a video on YouTube.
00:15:27.842 - 00:15:52.540, Speaker B: Yeah, we'll send you the YouTube link. But obviously this is now we know that it's working and it works great. So let's go into understanding what is now enabled by these primitives becoming more accessible, whether it's from the near's perspective or just the Web Three ecosystem overall. What are kind of some of the themes that you're seeing that are now evolving and becoming more and more possible?
00:15:53.550 - 00:16:32.250, Speaker A: For sure. Yeah, I think kind of probably to finish the story, right? So we started with layer one. We really kind of focused on making it simple to use. So we did a lot about account extractions kind of early on as well, making our accounts extremely flexible and powerful, like everything from multiple keys to turning them into contracts back into accounts. Somebody just launched turning account into NFT and back as well. So you can do all kinds of crazy stuff with them. We have WebAssembly, so you can run Rust, JavaScript, Python, whatever you want as a smart contract.
00:16:32.250 - 00:16:35.306, Speaker A: New compiler can run and compile for.
00:16:35.328 - 00:16:36.730, Speaker B: That as well, cadence.
00:16:39.390 - 00:17:41.006, Speaker A: And we have Sharding, right, to actually scale. And so the next step of that was and it was funny to kind of look at Power loom before because yeah, it's like the next problem is, okay, well, now you have all this blockchain, but the data is in completely different shape, right? The usual database problem, data is always in the wrong shape for your application. And so how do we kind of worked on indexers and different frameworks and APIs and SDKs on top of it to really power it. And now that we had that, the next step came in, which is well, there's a lot of smart developers who build interesting applications, there's people who are actually creating really interesting things, but they don't have a full story of product onboarding, kind of all of the pieces together, right. They usually don't think about it at least yet. And so how do we power that more? And kind of the evolution that we came up with. We call it blockchain Operating system.
00:17:41.006 - 00:18:24.798, Speaker A: It's really an idea that right now we have kind of blockchains which are really kind of almost like hardware, right? They have a very low level APIs. They kind of provide a very low level primitives of asset ownership of kind of business logic that you can program for. And as well, we have a lot of them. So you have fragmentation as well across. But as a user, you don't really care about that. You just want to go use some apps, you want trade some NFTs, play some games, swap some tokens, not caring about Slippage and mev and all this stuff, right? So that's a disconnect. And as well as as a user you want a product.
00:18:24.798 - 00:19:10.140, Speaker A: You don't want one app that gives you one feature like uniswap, you want a product that gives you notifications. You can search for stuff, you can interact with it, you can find dashboards, you can do all those things in kind of one place. And so Blockchain wherein system is really connecting all those pieces together. It abstracts kind of blockchain complexity with all the data layer as well as metatransactions as well as kind of indexing and things like that. And then on the other side it creates a user journey, right? It onboards users. We call a thing called Fast auth. 5 seconds, you sign up as an email, you get a named account, you can use your apps, don't need to pay fees, you don't need to figure out what zero x something means, you don't need seed phrases like all that is abstracted out.
00:19:10.140 - 00:20:11.086, Speaker A: You have discovery which is decentralized front ends. So this is turning what smart contracts did to services, doing that to front ends as well, making them decentralized, really composable kind of living on blockchain, but in turn being rendered and kind of creating this very powerful developer environment in which you can kind of navigate from one app to another inside the same kind of platform. And so for those who like you mentioned Facebook and Zynga before, like that's what Facebook was kind of before. It's like a platform on which you can build new apps really easily and then they kind of close it off. So this is the open version of like everything is open source. You can fork any other application as well and build on top of it and you can spin up your own version of this and kind of showcase how it works. You have search notifications and kind of all those services as well that users are used to and kind of packaged all in one kind of really powerful platform that everybody can use.
00:20:11.086 - 00:21:17.158, Speaker A: And so that's kind of where we see this evolving, is really we're still truly preserving the principles of web3 of user ownership, of decentralization, of anyone kind of being able to run their own version of this as well. But the applications, the front ends, data, everything is common. And so it doesn't matter which gateway you come from, it goes through near or Boss GG or potentially some brands going to support this, you can actually navigate to the same apps. Like it doesn't matter where you start. And so we're kind of turning around this problem that decentralization meant you have no distribution because nobody can find anything to really decentralization actually means you have more distribution because now every channel that installs this operating system can navigate to the same apps. Yeah, and so that's why, again, going back to this operating system analogy, as you get more installations, you now have bigger platform for these applications to be used. And the important part is it works with any blockchain, right? We have people running on layer twos on Ethereum, folks are adding other cosmos chains as well.
00:21:17.158 - 00:21:27.186, Speaker A: And so it kind of spans the specific. Also, I call it religion. Instead of like, hey, you need to convert to my religion.
00:21:27.218 - 00:21:28.918, Speaker B: Whichever culture you're part of at the.
00:21:28.924 - 00:22:06.120, Speaker A: Time, like, hey, this is just solving people's problems. For DeFi, this is decentralized front end such that you don't need to run and maintain front end and be on the hook right. For other applications like, hey, this is a quick discovery because all the users right away can access this and not need to connect, right? You have social features that are already embedded there. You have kind of all those pieces really coming together in one platform. To your question, this is where we see this evolving is really like this kind of becoming more of a ubiquitous platform that leverages different web3 technologies under the hood. But as a user you're just navigating it and using it.
00:22:07.210 - 00:22:09.990, Speaker B: That sounds like a pretty good, pretty good pitch.
00:22:10.490 - 00:22:15.000, Speaker A: It's almost like I've practiced like 50 times in past three weeks. But yeah.
00:22:18.090 - 00:23:05.366, Speaker B: You may not realize this thing, but we did plan a lot of this. So not the talk, we're not that coordinated, but how we get to this conclusion, why this talk is the last one. Part of kind of the goal for today, for Pragma was to kind of tell people about what you should be actually looking forward to in the next couple of years. And if there's one thing you kind of take away from this, it's the fact that things are going to be on chain and that's just you need to accept that because that is great for everybody. You get so many brand new features and you get to optimize for things that we are currently suffering from. A lot of that is distribution and portability of information, which is what decentralization actually solves because it gives you the ability to exit. We kind of started off in the morning with talking about what's actually happening on chain to get a lot of users to get into crypto for the first time.
00:23:05.366 - 00:24:05.366, Speaker B: That's with Rabbit Hole we saw a lot of information around, okay, now that you have some information about a user, how do we actually tie all of that into actions that was tally, especially with Power Loom, which is the last demo. It was, okay, now you have people's information, you know who the users are. You want to be able to tie all of that into actual data that they're producing to be able to reference that later. And if you have all these data pieces, you have the networking pieces, you have the user information, you kind of get all of that together into packaging that into an actual front end, which is what people usually interface with. And having that be reliable and consistent and not be beholden to one single web services provider. Taking that away is a beautiful thing because not only is you kind of talked about the operating system. I feel like the better analogy is that it's actually another open internet that exists for anybody to also discover the same things without relying on one single DNS resolver to decide one day that they don't care about this thing anymore.
00:24:05.366 - 00:24:46.214, Speaker B: And effectively, censorship can be mitigated by having multiple copies of full on stacks, whether it's contract data applications and your JavaScript bundles all in the same place. So to me this is personally super exciting. And kind of my question to you is, well, seems like from what I understood, all of this is right now on near. And you kind of said it's actually not specific to Nier. So could you tell us more about how does this actually apply to any other blockchain? Can I run a uniswap front end there in that world? Where is that interfacing with how does it know which one is ethereum? What's near? Tell us more about how this works with the rest of the world.
00:24:46.412 - 00:25:24.242, Speaker A: Yeah, so, I mean, the general principle that we're trying to follow is that everything is open source and everything is kind of componentized. And so you can pick whatever set of components you want for your own use case. And so in case of you wanting to what would be some components here? So the discovery is this decentralized front ends component, right? So this is where you can build this front ends. You can build them for uniswap which already exists. You can build for galaxy, for ave. I just saw it actually. Somebody built it.
00:25:24.242 - 00:26:00.638, Speaker A: Somebody built for one inch. I just retweeted that I'm wearing one inc socks, right? Yeah. So you can build that for any network that kind of supported by the web engine, the thing that runs it. And so the idea there is, yeah, it works with any blockchain already. For example, Fastos right now works on near and creates near accounts. But the next stage will be to kind of also create, we call them like remote accounts on other chains. So you can start like as you onboard through this funnel, you can start interacting on other chains as well.
00:26:00.804 - 00:26:02.206, Speaker B: Directly from the web app.
00:26:02.308 - 00:26:18.814, Speaker A: Directly from the web app. The same experience. You don't even know that you interact with other chain. Right. Same with kind of indexing framework. Kind of going to be integrating other data indexers from other chains such that as developer, you don't really care again on which chain it should be. You don't need to change APIs.
00:26:18.814 - 00:26:33.450, Speaker A: You just say like, hey, get me data, this kind of data from this contract on this chain and it just pulls it up. Right. So underneath kind of all these components need to just play together and be expandable and support any chain.
00:26:33.870 - 00:26:44.622, Speaker B: Nice. How do we think about data integrity in this world? How do I know that the uniswap front end I'm using is not malicious or the other person doesn't update it? After. How should we think about that?
00:26:44.676 - 00:26:58.194, Speaker A: So the front end itself, I mean, it is stored on chain, so that's stored on near protocol and it is signed, cryptographically signed. And so when you retrieve it, you have actually a proof from the blockchain that it's indeed this front end that you're looking at.
00:26:58.232 - 00:27:00.420, Speaker B: So any future updates to that code.
00:27:00.790 - 00:27:28.650, Speaker A: Will be stored on chain. Yeah. So if you pull it up right now on near and you can go to develop mode and see the source code of the page you're looking at and you can go to history and see all the changes as awesome. And if you forking it or using this in your own, for example, you're like, hey, this uniswap looks cool, I want a mega swap. Right, which has uniswap as part of it, you can link to either specific version or the latest version as well. Or you can fork it and link to your own version.
00:27:29.150 - 00:27:30.140, Speaker B: That's awesome.
00:27:34.190 - 00:27:39.102, Speaker A: There will be a workshop tomorrow as I show you, without me trying to explain.
00:27:39.156 - 00:28:00.998, Speaker B: No more live demos. Well, this is super cool because you've effectively made it easy for things to actually work on all devices too. Because now if I have portability on my desktop and mobile without having to have the same key copied, I get access to the same maps. Is that a good way to understand it?
00:28:01.084 - 00:28:30.734, Speaker A: Exactly? Yeah, potentially this can be rendered in command line for those who are like emacs fans. You can go into that mode as well. The idea is that the essence of the application is now stored and the way you render it can be different. Right. And so the way it can be rendered into web, it can be rendered to mobile, it can be rendered command line, it can be rendered into Led lights. Right. And in turn as well.
00:28:30.734 - 00:28:54.680, Speaker A: We actually just partnered with Orbit for those who are deep into the rabbit hole and so Orbit is kind of self hosted like when you actually have a server yourself. The OG religion in this religion. Yeah. And so you can run that thing off Urbit as well and kind of have all your front ends making sure they are all your own and nobody can affect them. Right.
00:28:55.850 - 00:28:56.722, Speaker B: That's incredible.
00:28:56.786 - 00:28:57.206, Speaker A: Actually.
00:28:57.308 - 00:29:17.950, Speaker B: Also, if you haven't noticed, I am learning live what the features are, which is fascinating for me. I want to ask one more question on this thing. I want to move on to a couple of other topics that I feel like are worth kind of talking about because it's a shared theme on all the other interviews. How do stories work in here? Does that sound super expensive to keep all this on chain? What's kind of the magic trick?
00:29:18.450 - 00:29:25.146, Speaker A: Well, the core trick is using history of the blockchain, which is way cheaper. I mean, it's the same trick you're.
00:29:25.178 - 00:29:27.698, Speaker B: Doing parcel diffs of the next data.
00:29:27.784 - 00:29:38.486, Speaker A: Well, we store right. Now the full, but the history is stored in the history of the blockchain. So same as like so that's a cold data, more data instead of but.
00:29:38.508 - 00:29:41.480, Speaker B: That means there's even more data than you would want.
00:29:43.530 - 00:30:02.454, Speaker A: Well, because near is Sharded Jesse, the storage is way cheaper than understood. And in general the storage is not that expensive, as was mentioned. And so we don't have that limitation. That a single machine, it's not a global.
00:30:02.502 - 00:30:04.122, Speaker B: Everybody has to sync the same storage.
00:30:04.186 - 00:30:33.174, Speaker A: And second is for history. We actually store it in the history of blockchain as well, which is pretty robust and reliable and at the same time way cheaper. So if you think of GitHub, GitHub actually has all the history of all the repos on top and they are replicated as well, right? And so the cost there is not maybe like five, seven x difference with what near does and it's not that much.
00:30:33.212 - 00:30:34.326, Speaker B: It goes down over time and goes.
00:30:34.348 - 00:30:36.002, Speaker A: Down with the cost of hardware.
00:30:36.066 - 00:30:56.990, Speaker B: That's super cool. I want to switch gears a little bit on just scalability altogether. My question to you, as somebody who is not in the ethereum or directly the flow ecosystem from at least today, what are kind of your perspectives on layer twos? And if I were to kind of ask bluntly, are layer two scaling from your perspective?
00:30:58.290 - 00:31:14.930, Speaker A: So I mentioned this, right? The approach to scalability is all the same across everyone, right? It's like we need more machines to run stuff in parallel and that's the only way to do it, just physically. Well, sorry, the unziwen is bigger machines.
00:31:16.250 - 00:31:19.240, Speaker B: More computers, either stacked up or left.
00:31:21.610 - 00:32:30.778, Speaker A: What layer two is right now they're done the first step, which is like, okay, let's pull out the execution away from consensus, right? So they said like, hey, we're going to run this execution machine and then we're going to settle on ethereum, which just adds latency for the ethereum. And individual roll up doesn't scale yet, right? So if they need to scale the roll up, they will need to actually implement Sharding on the roll up side, right? So right now the way the scaling works is everybody says, well, let's run another roll up. And although it is indeed more stuff running in parallel now, it just becomes more complicated from what we've seen so far. It's not like people say, hey, we're going to run ave here and uniswap there. It's like we're going to run all the same stuff on every single row up. And so again, not clear what we're scaling there. So from my perspective right now, there was a first step made which is like, hey, we kind of moved the execution away from the consensus so we can easier do things.
00:32:30.778 - 00:32:47.678, Speaker A: But it did not really scale because and in turn actually all these roll ups that are now competing for block space, actually driving prices for themselves up. And so it actually becomes more expensive because there are more roll ups to run, to execute the only fight for being included.
00:32:47.774 - 00:32:53.570, Speaker B: I see. So the solution is move everything to layer one.
00:32:53.720 - 00:33:27.520, Speaker A: Well, so there's two solutions. Either say, okay, we're going to Shard roll up. And so they will need to build the staff way building on the roll up side. And then the ethereum needs to implement Dunk Sharding, which is data availability, which is again what Nier done. So this will be deconstructed near into multiple chains and you have multiple tokens. Or you can collapse it into one integrated system and optimize it for latency and have faster blocks and faster execution. So that's a trade off.
00:33:27.520 - 00:34:01.050, Speaker A: The ethereum takes a trade off that it's better to have people experimenting and kind of having more of these alternatives of the execution, which is a initial position. Yeah. And we take the position that we can optimize more and deliver better latency and better throughput through pretty much making some specific design choices around which VM is running and how those things are tied together, but in turn give a better usability to the user and developer.
00:34:01.390 - 00:34:14.590, Speaker B: Amazing. I'm going to go off a little bit tangent and then we'll come back to our last question for today. Kind of from your perspective, what's kind of the overlap do you see between blockchains and AI?
00:34:15.330 - 00:34:41.880, Speaker A: Yeah, so that's a good question. I've never been asked this before. That's a joke. Yeah. So I think there's like on AI side, there's like kind of to understand the basics, right. AI is formed or like machine learning generally is formed from three concepts, right. There's data, there's compute, and there is a model kind of architecture and structure and ways of training.
00:34:41.880 - 00:35:24.062, Speaker A: So what blockchains are really good at is marketplaces. They're really good at creating liquidity for anything. And so for each of these three things, there is actually right now a very limited availability of each of them. So if we're talking about data right now, if you want to get more training data, you need to go to scale AI, talk to their salesperson, figure out how to get these things, pay a lot of money and kind of start collecting data. And potentially it's low quality and you need to fire scale AI. You cannot fire individual person who's working on that. And so the first step there is like creating a marketplace for data, for crowdsourcing.
00:35:24.062 - 00:36:07.550, Speaker A: This is actually what we started with. So then for Compute, similar thing, if you want Compute, you actually need to go to Amazon, potentially talk to their salesperson, get the commit for like $7 million a year if you want to do AI properly. So that's again, something where we can have a compute marketplace. It is harder. There is a lot of caveats around how that is done and requirements there. But this is kind of conceptually and same for models, right? Right now there's a lot of researchers investigating how to improve Transformers. There's a lot of people kind of like if you go to hugging phase, there's a ton of stuff there that people are experimenting with, but there's no marketplace.
00:36:07.550 - 00:36:51.600, Speaker A: There's no way to request, hey, I want a model fine tune for this, or there's no way to kind of also monetize models. If you do make it, you either open source it or you close source it and give an API charge. So there is a opportunity there to create a combination of something that's private that doesn't leak all your data to some company and at the same time give some money to the developers. Model somewhere between open source and closed source. Pretty much like a new way. And this is where people research in Zkv ZK, machine learning and other stuff, but kind of conceptually that is kind of a powerful place as well.
00:36:51.970 - 00:37:33.286, Speaker B: That's pretty good, I think, especially with doing machine learning on private data without reading the data is, in a way, novel kind of thing that we were kind of just seeing at the beginnings of I guess one thing I was curious about when I asked that question was understanding how do we actually think about authenticity of information? Because of course, marketplaces work on the side where somebody is contributing to these data sets. But how do I know if I receive a message it's not generated from chat GBT or if I have all these deep fakes or a voice message that just copies my voice after 3 seconds of input that it is actually me and not someone faking something. So I wanted to see if you kind of think about how does blockchain.
00:37:33.318 - 00:38:25.694, Speaker A: Help with yeah, so this is the flip side of this was like how to use blockchain to do AI. And this is like how do we use blockchain to make sure our society doesn't fall apart. So kind of fundamentally our society runs on language, right? Everything you do from kind of creating a form, filing for your taxes, lawsuits, political messages, everything you do is language. And one thing that language models are really good at is at language. And this is the first time actually in computing where computers went from outputting something where you need a human to interpret it and tell it to everybody else, to the computer being able to communicate directly. And this is where all the flaws of our society are surfaced. It's not that AI is actually like breaking things.
00:38:25.694 - 00:38:27.290, Speaker A: This is problems that exist.
00:38:27.370 - 00:38:28.942, Speaker B: The broken system is highlighting it.
00:38:28.996 - 00:38:54.774, Speaker A: Yeah, it's just like the scale at which you can kind of now exploit it is tremendous. Right. Generating a million page tax return that IRS is required to read. Great. Spam the judiciary system with lots of fake lawsuits, no problem. Create fake voice messages from your friends, like literally can be happening now. So all of this is again exploiting the existing things.
00:38:54.774 - 00:39:20.110, Speaker A: And so the point is we have cryptography and cryptography creates a very much natural way to authenticate and link it to some identity. And so then kind of let's say if we mandate that all the content generated needs to be cryptographically signed now we can actually know where it's coming from. So right now voice messages by the way, are not signed.
00:39:22.050 - 00:39:25.390, Speaker B: All of our communication, communication is not your emails.
00:39:26.210 - 00:40:19.006, Speaker A: The first thing to do is like we need to cryptographic sign it. Which by the way, if you cryptograph assign it, you need to associate that cryptographic key with something that's where PGP and GPG been not great because it's been really hard to have this kind of registry of people and being able to exchange these keys. Well, that's where Blockchain comes in. Blockchain is really good at actually having kind of this reputation and so you just need a good account abstraction to manage that. And so this is where kind of all these pieces really coming together. And again, from our perspective, what we're doing with Blockchain, every system is trying to power a lot of that is like social kind of we have a social component there which is fully cryptographically signed. The front ends are cryptographically signed and to have feature yeah, and you can go to a user right now and see everything from which transactions they did to which front ends they built, to which posts they did, et cetera.
00:40:19.006 - 00:41:20.914, Speaker A: Right? So you can have now this powerful reputation being built like which dows they participate, et cetera, to actually authenticate who are you communicating with because the other problem is sure it can be signed, but then obviously bots can create accounts and sign things, but you need to understand who is signed with. And then the next thing that we need is actually community governance. We need, I mean to the kind of point of previous speakers, we need community to be able to decide which things are kind of not appropriate in various ways, right? And provide this kind of almost filters that users can apply on their communication, on their way they read the internet, et cetera. And so this is where Blockchain is powering all that as a kind of really core infrastructure. There's a lot of pieces that need to come together like content management systems and other pieces probably browsers need to support that. When you read an article, it need to validate that hey, this is not cryptographically signed. Or like hey, the signature is from could be CoinDesk.
00:41:20.914 - 00:41:51.982, Speaker A: Yeah or like this quote is not signed. You realize right now quotes in articles are not confirmed, most screenshots are just edited. All of that we have now infrastructure to do that. We just need to now build it into the stack and showcase also to users that they need to care about. I think the good example was the transition to SSL. The fact that people starting caring that their lock on their browser is like red.
00:41:52.036 - 00:41:58.240, Speaker B: There was a time to convince people that your website must be https and you can see the lock all of early 2000s.
00:41:58.790 - 00:42:13.990, Speaker A: We need the same things. We need the same thing right now to happen, which is like the browsers need to show like, hey, this page is not signed. You may be reading or this book is not signed. Books can be fully generated. You may be reading completely different thing under the same title. Right. You wouldn't even know.
00:42:13.990 - 00:42:27.286, Speaker A: Textbooks, like, imagine textbooks that teaching kids completely random stuff. Well, that's a scary world. And to be clear, this is already happening. This has been happening for hundreds.
00:42:27.318 - 00:42:33.258, Speaker B: Yeah, it's like it's already happening. You were just pointing it out live. So maybe let's find a way to.
00:42:33.264 - 00:42:37.182, Speaker A: End this live stream. Are people breaking society right now?
00:42:37.316 - 00:42:42.800, Speaker B: Not yet. Two weeks, it'll be up on YouTube. We'll photoshop this later.
00:42:43.510 - 00:42:46.194, Speaker A: Deep fake it. There you go.
00:42:46.232 - 00:42:56.598, Speaker B: Let's let me solve the problem with the problem. Well, my last question to you is what I've asked every other speaker. What does decentralization mean to you?
00:42:56.764 - 00:43:57.570, Speaker A: For me, at the core is this kind of low to no cost of switch cost. Right. The fact that you're not locked in into the platform, be that at any level, right. Be that the blockchain itself, the block producers, the wallet that you're using, the RPC that you're using, any level of the stack should not be like, this is the only place you can get this and anywhere else you cannot. And I think that's why front ends has been actually a lot of so like, how do we replace kind of every level of stack is really important, but kind of for me conceptually, and if we go into AI, it's the same thing. It should not be that OpenAI is the only place you can interact with Chi GPD and it gets all your data. So how do we get to on every stack, on every piece that you're not locked in? There's always kind of an alternative and it's no cost to switch to that alternative.
00:43:57.570 - 00:44:07.146, Speaker A: I think, again, consensus is a really good example of that is it doesn't matter if one of the nodes goes away because the switch is nothing.
00:44:07.248 - 00:44:15.982, Speaker B: So it's not just the fact that you have the even alternative option is that it's also easy enough to be available at the same time for somebody to switch over.
00:44:16.036 - 00:44:38.102, Speaker A: Yeah, because you have alternative banks. But switching from one bank to another is pain in the ass. Right. If something happens with your bank, it's crude. So here if you have switches, kind of low switch cost, no switch cost everywhere. It also means that everyone is competing as hard as possible for your business. Right.
00:44:38.102 - 00:44:45.878, Speaker A: And which means you have to drive perfect competition, which means actually everything is innovation or driving forward.
00:44:45.964 - 00:44:50.102, Speaker B: Yeah, absolutely. Well, Ilya, this has been a wonderful chat. Thank you. So much for taking the time.
00:44:50.156 - 00:44:52.406, Speaker A: Thank you and can't wait to see.
00:44:52.428 - 00:44:53.700, Speaker B: More bos on the world.
