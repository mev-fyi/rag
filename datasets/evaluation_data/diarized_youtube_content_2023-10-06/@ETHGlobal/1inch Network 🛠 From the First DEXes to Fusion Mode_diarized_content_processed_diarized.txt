00:00:07.210 - 00:01:11.038, Speaker A: My name is Kirill I'm the backend team lead in 1inchh where we actually build the future of decentralized trading experience. Today I'm going to talk about how we came up with an idea to build one inch fusion. We problems it solves and how it actually works. And also we will dive a bit into the history of decentralized exchanges in the distant years. DeFi was born with appearance of first MMS, and since then, the DeFi market has grown about 70 times and we built a lot of cool projects. The combination of these projects to build the defy even more efficient than the centralized exchanges. The first step in defy world was DEXes.
00:01:11.038 - 00:02:34.266, Speaker A: Like AMMS, developers decided to create some formula on a smart contract that allows to provide liquidity with two tokens and swap one token to another. But there was a problem at the beginning, it was about five DEXes and you need to find the best one. So what I can do, I can open several tabs in the browser and at the same moment look at all exchanges and try to compare exchange rates and also transaction costs because each dex has their own computation and you need to pay gas for this computation. This is how actually one inch aggregation protocol was born in the hackathon in 2019. It was the ethereum global If New York hackathon. And actually what is an aggregator? Aggregator allows to execute the transaction atomically by aggregating between different automated market makers, private market makers and also limit orders. The path just built through several exchanges.
00:02:34.266 - 00:03:11.626, Speaker A: You can split the entire token amount into several DEXes and even you can use connector tokens to catch the deepest liquidity. But anyway, there is a problem with the aggregators. As a user I need to fight with Mevbots because mevbots can front run your transaction. They can sandwich you. And for the ordinary trader it's a bit complicated thing. The second is gas price. I need to know which gas price should I set.
00:03:11.626 - 00:03:46.898, Speaker A: And I don't want to overplay for gas costs as a user. So it's also complex for beginners and there is a price impact. So if you trade some token that has not very good liquidity, then you will lose like tokens on the trade. Next you have failed transactions. If market moves and you don't pass slippage tolerance then your transaction just failed. You pay for nothing. You pay too minor for failure transaction.
00:03:46.898 - 00:04:32.210, Speaker A: And also as a user I need to have native token on a balance to be able to send the transaction. So it's hard to attract new users to defy if we have such problems. This is how we came up with an idea of fusion. So fusion is intent centric orders based on Deutsche auction that filled by professional market makers. And what we have fusion is gas free. You don't need to pay for gas costs. Fusion protected from MEF attacks by design and fusion has limitless liquidity.
00:04:32.210 - 00:06:19.986, Speaker A: Let's look at these things and figure out why it is so, why fusion is gasless? Fusion is simply a structure where you define the token pair and the amount that you would like to swap and you sign this order and send to relayer. So you don't need to send a transaction, you just make a signature of chain and send to the relayer. Next resolvers just catch this order and execute on behalf of the user and the user pay for the transaction and fees included in exchange rate. Because resolvers should execute the transaction on behalf of the user and anyway pay for gas fees but if I'm a user and I don't have either or other native currency on another blockchain then it's okay if token supports permit standard then I can just send the transaction with zero either on a balance. Next, how fusion protected from the MEF attacks? As I said, fusion based on Deutsche Auction. That means that at the specific block the price curve has the fixed price there is no any formula and at the moment the price is fixed and only resolvers can be front run. But they are professionals, they know how to protect themselves and they can be front run, but only for their profit.
00:06:19.986 - 00:07:26.310, Speaker A: For the user at the specific block the price is fixed like in limit orders. And what about liquidity? With aggregators we need to trust that the aggregator integrate all possible liquidity sources into their algorithm. But anyway it's almost impossible because there are different market makers small, big anyway and what is fusion? Fusion is intent based. You just submit some action that I want to swap and for me doesn't matter how this swap will happen and we have resolvers who connected to the network and they can execute orders like arbitraging with the centralized exchanges liquidity they can arbitrage any DEXes they can even match to fusion orders between each other. Yeah, this is cool. And even maybe a cross chain liquidity can be involved in this process. It's up to resolver.
00:07:26.310 - 00:09:22.000, Speaker A: So we have limitless liquidity and let's see how Fusion works in total me as a maker first of all need to give an approval or permit to one inch rotor contract. Then I just sign and send the transaction to relayer and resolvers subscribed for the new orders and each time when resolver see that oh, this price is good for me, I can execute it. Then the resolver just submit the transaction into the network that's it so simple. And regarding the Deutsche Auction, what is it and what defined by the Deutsche Auction? The Deutsche Auction, it's kind of a curve that has the duration you can set any duration of your order when the price will be slightly decreased from the highest price to the minimal acceptable price. The second parameter is minimal return in case of market movements how much you are okay to receive and also initial rate bump. This is the difference between start return amount and min return and also our deutsche curve customized with the additional points like these points change the price speed between two different points let's see what is it? And even fusion price curve can improve the market price for example, either costs 2000 USDT but I swap the large amount and I can even improve the price. Let's see how it happens.
00:09:22.000 - 00:10:08.010, Speaker A: So on the screen you can see the real order that happened on Chain. Some defy traders swapped more than 5000 ether to USDC and he received forty k more compared to the market price. When the order was placed and how it works. We take into account the market liquidity. We try to split, like, to find the price for the smallest amount to disable price impact. And we add additional points on this. Curve to improve the price at the beginning.
00:10:08.010 - 00:11:09.890, Speaker A: So we start from the spot price, we go to the market price two third of the auction time and in the end, in case of market movements, your order can be executed by minimal return or not executed at all. So in this case, you pay nothing if order hasn't been executed. Because you haven't sent any transaction, you don't have failed transaction. And in this case, there was about eleven. Partial fields by the resolvers. And even it happened like about three or four resolvers submit their partial fills in parallel within the single block. And you can see that when auction just started, some resolver filled 10% of the order.
00:11:09.890 - 00:11:52.582, Speaker A: And in one block, in 12 seconds, some other resolvers filled 30%. And this is how the user received more than he expected by the market price. Because when you swap small amount of the order arbitragers come to the market. See that the market is imbalanced and swap back and balance the liquidity price goes back, resolve or fill one more time, et cetera. Repeat, repeat, repeat. Yeah. So what we can build with the Fusion, it's up to you, Hackers.
00:11:52.582 - 00:13:22.430, Speaker A: But we have one inch developer portal that we released recently and you can take an advantage of different APIs, including Fusion API swap, API balances, token prices, et cetera. So you just need to go to Portal one inch dev, log in with your GitHub account, get an API key, and you can go through the docs and learn more. So what you can build with this the Spot price like if you want to place the fiat price, the fiat representation of the token on Ugap, you can use Spot Price API. If you want to scan balances of different wallets, you can use Balances API. If you want to get an access to more than 6 million tokens and sheet tokens, you can use Tokens API and search not only using address but even by symbol or name and all tokens sorted by the rating so you will never lose the right token. By these core codes you can search how to create fusion orders, how to connect to the dev portal and how to become a resolver. If you are a professional market maker.
00:13:22.430 - 00:14:06.778, Speaker A: On the hackathon we have four bounties. The first is about the fusion just built a cool project that makes sense on top of the fusion engine. The second is about Token plugins. It's an ERC 20 based extensions that allows to extend the functionality of Tokenized assets. And actually regarding the dev portal, we would like to see some interesting use cases made that uses the one inch developer portal APIs. And the last is opentrack. Yeah, that's it.
00:14:06.778 - 00:15:15.742, Speaker A: Thank you. If you have any questions, feel free to ask me. Yep. Can we run fusion order from a smart contract? So the question is can we use a limit order from the smart contract? The answer yes, totally. So the fusion orders, they based on one inch limit order protocol. And there is a standard that said that if the maker of the fusion order is smart contract then in time of execution we validate not the signature EDCA you call is valid signature function on the maker address and this function should return the selector of this function. Or in case if something not okay for you then this function throw an error or just return some random bytes.
00:15:15.742 - 00:16:00.460, Speaker A: Yes, it's possible to use but you need to implement on your maker address on the smart contract is valid signature function that has two arguments, it's a hash of the order and some arbitrary data that you provide for validation. Any other questions? Yeah of ABUF you can come ask questions and during the hackathon. Okay, thank you.
