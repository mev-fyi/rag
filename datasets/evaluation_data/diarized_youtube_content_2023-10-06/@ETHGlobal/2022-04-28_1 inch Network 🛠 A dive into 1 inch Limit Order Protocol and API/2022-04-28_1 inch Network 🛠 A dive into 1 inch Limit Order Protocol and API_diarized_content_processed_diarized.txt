00:00:17.520 - 00:00:47.272, Speaker A: Hello. Hello everyone. My name is Nick, I'm from One Inch Network and today I want to talk a bit about our API and our limit orders API as well. So let's start from one inch. I just want to repeat a bit what we are doing and what is our value proposition. So basically oneich is dex aggregator. So we aggregate multiple DEXes when we want to swap a coin to other coin.
00:00:47.272 - 00:01:36.456, Speaker A: So we have much more liquidity than any other dex. And also we have algorithm called Pathfinder. So actually we build specific D app that allows you to swap coins to any other coin based on the path that we calculated and it's pretty good path. So you get much more coins return amount than using any other decks or any other decks or dex aggregator as well. It's like a small example. For example, for example I want to swap 500K ethereum to die which is a lot of money just demo. So basically you can see the path here, so we just allow you to it's just one transaction.
00:01:36.456 - 00:02:35.810, Speaker A: So you can swap through multiple pools in multiple DEXes and all of that will be atomic and the return amount will be the largest one compared to uniswap for example. And basically the awesome thing is that you can access our API that allows you to integrate all the liquidity, all our decks to your app. It's available via our documentation. I already opened this one and I just want to show you the most important two quotes that you need to handles that you need to use if you want to integrate just a router API. The first is called quote you can see that there is a network chain ID here. You can pass any chain ID that we support right now. We support multiple networks, all of them are supported right now and we are working on all other EVM chains right now as well.
00:02:35.810 - 00:03:20.656, Speaker A: So basically the first handle is Quote. This handle allows you to just find the best quote for the specific pair of coins and for the specific amounts. So it's more for preview for your wallet for example to show the quote for user. And let's dive into some specific query params. Here the most important one and there are only three params that you require to pass here. So it's just from token address, it can be any token, ERC 20 token and also you need two token address as well. You can pass any of it but you need to pay attention that some of them can be not.
00:03:20.656 - 00:04:03.420, Speaker A: So don't have so much liquidity than other one so just keep it in mind. And also you need from amount as well. You need to pass from amount as well to this handle and basically it will work. Let's just try to pass default params so that's the response like from ethereum to One Inch. So you can see two token amount from token amount and also you can see the protocols that we are using for this swap and also estimated gas that we need for this transaction in future. Let's talk more about additional query Paraps that we have. It's protocols.
00:04:03.420 - 00:04:55.896, Speaker A: Basically there are about 70 protocols on ethereum chain and if you want to specify specific DEXes that you need for swap sometimes it's very useful you can just pass them via this handle. By default we support all of them. Another param is fee, we support referral fee so you need to pass it's fee percent that will be returned to the referral address of the wallet of the provider of referral. So it can be from zero to 3% and by default it's zero. Also we have a gas limit. I think it's pretty obvious what is it and actually depends on the gas limit. We can have different roads optimizing for low gas limits.
00:04:55.896 - 00:05:45.710, Speaker A: For example if user don't have enough ethereum or native coin for swap. Also we have connector tokens per m. Basically by default we have our own list of connector tokens. It's the most liquid tokens on the market right now. But in some cases connector tokens is tokens like this one during the roadpath. For example during swapping ethereum to Dai my connector tokens are USDT and USDC here. So basically we are trying to handle it on our own but in some cases when we are talking about specific coins with small liquidity it's much more better to provide specific connector tokens for specific pools so you can have much more better return amount.
00:05:45.710 - 00:06:14.890, Speaker A: The maximum amount of it is five and also we have complexity level. Complexity level for the path. Basically let's talk about example here. Current complexity level here is just two. So the swap goes through USDC to die and after that it goes to the Dai. Yeah it can be up to three. Also you need to pay attention that depends on the complexity level.
00:06:14.890 - 00:07:01.408, Speaker A: The gas will be much more high with the higher complexity level. If you will pass zero it will be just direct swap through specific pool. Let's talk about main road parts and the parts params. So it's much more easier to explain it on the picture. So basically parts it's this stuff it's USDC for example USDT part and die part and it's minor parts and parts it's parts inside the main part. For example here it's SushiSwap uniswap part by percentage. So you can pass all of these params for API.
00:07:01.408 - 00:08:09.496, Speaker A: Sometimes it's very important to pass specific amount of them for the gas optimization for example. And also gas price is pretty obvious but if you want to estimate your transaction with another gas price you can pass it and we will build road basing on the gas price that you need but I recommend to use fast. So let's continue with swap. So for example firstly you show user your return amount for the specific token as right now you need to swap to implement a swap for this user basically when you will execute swap handle you will get not only the price, you will get the call data that you need to pass to your transaction for the one inch rotor so user can execute it and make a swap. Basically, we have a bit more required parameters here. Let's talk about additional ones that we can see here. The first one is from address amount token address and from token address are pretty the same as for quote.
00:08:09.496 - 00:08:44.980, Speaker A: So from address is the address of the user who will be calling the one inch contract. Sometimes it can be another contract and there are additional things that you need to pay attention when you are using another contract for the one inch swap. It's also possible, but just pay some additional attention about it. And one of the most important params is slippage. It's also like percentage of amount of the price, how much it can be dropped. It's important to pay attention that on the most liquid part. Mostly to illiquid coins.
00:08:44.980 - 00:09:46.140, Speaker A: You don't need to put very high sleepwich parameter but sometimes if you will pass very small sleepwidge parameter as well, transaction can be failed. So sometimes the best it will be like something like 1% user also can pick this parameter. So basically it's important to give user an option to change slippers for him. But pay attention how users change it during the swap. Also, we have protocols which are the same. Also we have destination receiver so basically you can swap coins and get another destination receiver address for swapping we also have a referral address it's very important to pay attention about this when you are providing fee it must be the same fee percent as for the quote. So if you have a referral address, you can create this one.
00:09:46.140 - 00:10:29.048, Speaker A: You will get additional profit from positive slippage during the swap if user will have positive slippage actually so also we have one interesting parameter. It's called Disable estimate. It's very important to use it when you are trying to build something with another contract on one each when the router will be called through another contract. Sometimes it's useful to pass disable estimate. True. So we will not check that transaction can be executed right now. So you can change it a bit later and run it a bit later if you need it.
00:10:29.048 - 00:11:23.700, Speaker A: We also support permit, so if the token supports E 2612. You can use permit signature and pass it here so it will be instant. Swap during one transaction with a loan with approved. Also want to talk about allow partial field parameter sometimes during swaps. Some of the puffs are outdated and the rate can be changed dramatically. But there are some cases when you want to swap with this rate, at least some amount that you have. For example, in this case, let it be like 60% of the path will be successful and 30% of this path will be unsuccessful.
00:11:23.700 - 00:12:34.240, Speaker A: The prices will be outdated but you still want to get until at least 60% with the rate that you have right now. In this case you can turn allow partial fill to true to true and after that router will route transaction in that way that the transaction can be filled just partially. So all other queries we already discussed before on other handle so we also have much more information about how to integrate Panich API to your app. So I definitely recommend you to take a look at our documentation. And also I want to add something about our limit orders. Basically Vanish supports not only swap direct swaps, instant direct swaps, but allows you to use limit orders. The main difference here is that limit order is not executed instantly.
00:12:34.240 - 00:13:44.424, Speaker A: We don't support black market sell but it's pretty the same vibe and pretty the same logic as classical limit order. So you can specify the price and the rate for the tokens that you want to sell and you also can set up expiration for your order and the most awesome about it is that actually you will not pay for the gas for this transaction. The transaction will be filled automatically and the market taker will pay for the gas. So for users it's free and for market takers it's actually not free. That's how it works. Also actually when you make creating creating order you don't pay for gas because we don't send this order structure to the smart contract, it's just stored on another layer, another network and anyone can get this order, we just need to sign it. So when you send you can actually execute this order via smart contract and fill an amount on a taker side.
00:13:44.424 - 00:14:50.044, Speaker A: That's the point how it works. So because of that actually anyone can execute it at any time if it's okay for this person to pay for the gas and that the person is okay with the return amount that person will get. We also have a lot of additional features of a limit order that I want to share basically one inch limit order is not only limit order, you can build a lot of additional logic over it. There are three main points. Firstly, it's conditional execution. For example, you can specify additional params and it's called permit. And for example, sometimes it's very important it's okay for you to swap because some oracle price of another asset is okay for you and sometimes oracle price of this asset is not okay for you and depends on the price you are okay with swap with executing this order or not.
00:14:50.044 - 00:15:31.530, Speaker A: So basically you can add additional params for your order so the price will be changing and the order will be valid or valid during time. Default example is expiration. You can add expiration for your order and if you're okay that it will be executed like in ten years or like in 10 seconds only you could make it on limit order very fast. Also we have average reprice discovery. I will tell a bit more about it when I will show you the structure of limit order. And also we have a custom callback during execution. It's very awesome thing.
00:15:31.530 - 00:16:28.670, Speaker A: For example, we use this function before funds will be transferred to the Taker address and during this fallback you can implement, for example, you can, for example, farm tokens on some protocol during creating limit order for the maker. And after the moment when order will be filled, you can actually use these tokens and claim them, unstake them from the farming pool and use them in a limit order as a liquidity. Yeah, so let's take a look at the order structure. So I just want to pay attention to some specific params. Most of them are pretty obvious. The most important that I want to start is predicate. It's like the third one on the last predicate actually allows you to it's a structure that allows you to set up some rules for your order.
00:16:28.670 - 00:17:34.160, Speaker A: As I already said, for example expiration time. We also support permit by default on the V two limit orders so you can just make gasless. You don't need to approve token for the one inch limit order contract by separate transaction if this token supports permits, we also have interaction. Interaction is a function that allows you you need to pass data here that will be called before transfer from function that will be called during order execution. So let's talk more about order execution. If you want to execute order, you need to actually use fill order function. So basically most important is about its signature and you also need to verify that this order is correct and to estimate it before executing it on the smart contract.
00:17:34.160 - 00:18:35.590, Speaker A: Also, I want to talk about predicates right now a bit more, we have basic predicates on one inch limit order that you can combine between each other. For example, you can add multiple params during using function add. We use by default some of these predicates. For example, we use nons. One important thing about nons is that each time user create a transaction, create a limit order. We use nons because for example if user wants to cancel all limit orders instantly, user can just adjust nons on his account, on user account and after that all limit orders that have nons less than current nons will be invalidated. So let's talk more about Getmaker and ganttaker amount.
00:18:35.590 - 00:19:17.650, Speaker A: Basically Getmaker can take care amount. It's functions that give you a rate for swap for the order and what is awesome that you can actually build your additional functions this interface, implement this interface on another smart contract and use these functions to have more adjustable price during your limit order execution. For example depends how much it will be swapped. You can actually use any formula for it. It's very important. It can be useful for NFT for example. So actually using our limit orders you can build NFT market.
00:19:17.650 - 00:20:14.470, Speaker A: This is just like small example how this get maker amount get taker amount functions are implemented by default and how they are called. So I also want to add a bit more about how they are called on our Smart Contract. Basically, it's just arbitrary static call so it's secured. Let's talk a bit more about maker address. Sometimes you want to use additional Smart Contract as a maker address. So Smart contract is a creator of this order and if you are using Smart Contract address as a maker address, you need to implement additional function. It's called invalid signature and this function is called before on the check when we fill order.
00:20:14.470 - 00:21:02.180, Speaker A: There are two parameters here. It's orders limit order hash and also field called signature. But basically it can be any data that you need to validate this order on the Smart Contract site. So just don't think about this as signature only signature. It can be any data and let's talk about interaction. It's final function that's called before transfer from during limit order execution and that's how actually you can implement this function. So you just need to implement function called notify fill order and view these parameters that you can see here.
00:21:02.180 - 00:21:50.370, Speaker A: It's message sender, basic parameters actually message sender make your asset take your asset making and taking amount and also interaction data and actually interaction data can be any data. So you need just to parse this data on your own contract and specify the length of this data. So it can be any data that you need for your logic. You can know a bit more about limit orders as well. We have a good documentation and all this stuff is open sourced, it's open on the GitHub. So we are happy to answer all your questions and I hope that you get a bit more information about our API and Limit order. Thank you.
00:21:50.370 - 00:22:09.330, Speaker A: If you will have any questions, I will be nearby. Also you can come to One inch stand. We'll try to be there all the time. You can also contact us on the telegram or ask for Ethereum Global Team if you have any questions as well.
