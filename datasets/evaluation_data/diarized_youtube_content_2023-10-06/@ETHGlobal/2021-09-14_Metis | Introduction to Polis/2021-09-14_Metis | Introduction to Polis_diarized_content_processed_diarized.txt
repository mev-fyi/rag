00:00:00.250 - 00:00:31.842, Speaker A: Hi everyone. Welcome to the guide to use the Polis application and how you can use it to manage your smart contracts as well as user authentication. In this tutorial, you need to have Node, Yarn and hard hat. First, we want to create an account on Polis. When you create an account, you will be provided with zero one test metes tokens for development purposes. If you'd like to get more tokens, navigate to testswap. Metis IO forward slash faucet.
00:00:31.842 - 00:01:15.646, Speaker A: In order to use the development section of Polis, you have to click the button requesting for registration. We will clone the repository and deploy this smart contract. In this project, we have three folders the client, contract, and server. We want to navigate to the contract folder to the example n file. We have two environment variables the Mete's deployment URL and the private key. To get the most updated version of the deployment URL, navigate to forward slash connection details for the private key. When you created your Meteus account, a non custodial wallet was automatically created.
00:01:15.646 - 00:01:52.750, Speaker A: In order to access your Polis private key, navigate to Profile Settings. Click export private key and copy the value. Navigate back to the editor and paste your private key. Once you are finished filling in the variables, make sure to change the name from example NV. To env, open up a terminal and type Yarn Install. Next type in yarn metes. This command should compile and deploy your contract to the Metis main net.
00:01:52.750 - 00:02:37.444, Speaker A: Once deployed, navigate to the Polis dashboard, where we will add your contracts to be managed by Polis. Notice how our balance has changed after we deployed our contract to add our application to Polis, we'll be using both the Create domain section and the Application Management section. Note that in order to use these options, your account has to have developer status as active. Navigate to create a domain and click on Create new domain. Add in your domain name. This name is unique and in my case, my domain name is Testing. Now we need to add in the Abi.
00:02:37.444 - 00:03:05.350, Speaker A: The Abi is generated when we compile the smart contract. Navigate back to our editor. Go to the Contract folder and look at deployments Metis cryptodevs JSON. You can see the contract address and the Abi. Copy the Abi and navigate back to Polis. Paste your abi into the abi section. Next, we want to add the contract address.
00:03:05.350 - 00:03:40.378, Speaker A: Let's navigate back to our editor. You can scroll up to find the contract address, but you can also copy the address from the terminal navigating back to Polis. We can set the chain ID and input the contract address to finally create the domain. Now our smart contract is managed by Polis. Let's create our authentication for our application. For the Polis frontend. Navigate to application management and click Create New App.
00:03:40.378 - 00:04:12.938, Speaker A: Fill in all of your details for the application. Since we'll be using a local development environment for this application, we will type in Localhost Local domain 3000. If you'd like to know more about configuring your host file, see docs metis. IO you should now have created your application. Now we're ready to start. Populating this information into the application. Navigate back to your text editor.
00:04:12.938 - 00:04:43.414, Speaker A: Navigate to the client example N. Fill in the app ID. Next, fill in the contract name. In my case, it is the domain name of testing. Next, enter the chain ID that your contract is deployed on. In this case, the contract is deployed on chain four three five. Once you are finished filling in the variables, make sure to change the name from example NV to Env.
00:04:43.414 - 00:05:23.518, Speaker A: Next, navigate to server example Env. Fill in the app ID and the app Secret. Finally, rename the example env to env. The architecture of this application ensures that the secrets are secret. Now we are ready to launch this application. In a terminal located within the same project directory, type yarn server. In a separate terminal within the same project directory, type yarn client.
00:05:23.518 - 00:05:49.958, Speaker A: This should load and open your ready application. We see. This is our ERC 721 creation application. You should see a login button. Click that. You'll be asked for approval for this application to access your information and request to make transactions. Accept the request and you should be redirected back into your application with your populated credentials.
00:05:49.958 - 00:06:16.290, Speaker A: Next, click on the Create NFT button. Enter the information for the NFT. In my case, it'll be a space themed NFT. I've already found an image. If you copy the image link, you can paste it in the Image URL section. Click Submit and you should see a dialog that pops up to accept the creation of the NFT. If we click Accept, we can see that our NFT was created.
00:06:16.290 - 00:06:41.958, Speaker A: We can click the View button to view our NFT. Congratulations. You have just deployed your first Polis application. This application has some limitations. If you refresh the application, you will lose the access token that you have received when you approved your access to the site. This is fixed. By implementing a cookie service, the contract has a limit of ten NFTs that can be created.
00:06:41.958 - 00:06:59.746, Speaker A: You can adjust this limit in the contract. Deploy ERC 721 deploy JS file. You have to be logged into the application in order to make requests or view your NFTs. Thank you for following along with this tutorial. See you in the next one.
00:06:59.888 - 00:07:16.160, Speaker B: It metis is holding a hackathon from October 2 to 30th with a prize pool of over 1 million USD in Metis. Tokens with tasks that range from building a new DAP to porting an existing DAP to the Metis layer two. So, what are you waiting for? Come register today.
