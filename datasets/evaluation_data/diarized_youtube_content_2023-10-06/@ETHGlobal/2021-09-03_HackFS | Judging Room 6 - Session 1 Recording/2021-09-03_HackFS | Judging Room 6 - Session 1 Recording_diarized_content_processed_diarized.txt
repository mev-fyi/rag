00:00:30.440 - 00:01:06.992, Speaker A: It. So, yeah, I think I'll get started right now. All right, so I just want to welcome everybody. Thank you guys for all coming to your Hack FS judging session, which will start right now. Yeah, so just going over some quick statistics of this event. We've had 650 hackers from 61 countries in 18 time zones, so it's just really great to see every everybody from the theorem community coming out all over the world to come participate at this event. And just for you guys, the attendees, I'll give you guys a quick overview of the judging format.
00:01:06.992 - 00:01:48.820, Speaker A: In total, you have seven minutes per team, four minutes for a demo, and three minutes per Q, and a session with the judges where they'll be able to ask you guys questions about your project and inquire more about it. And then we'll take a ten minute break for every six, eight teams. We don't have that many today, I don't think. So we'll probably take a ten minute break at around five. And the judging criteria is based off of five key points, which is technicality, originality, practicality, UI, UX, DX, as well as the wow factor of your project. And a friendly reminder, it's good to keep in mind that this is not a competition. We are here to learn.
00:01:48.820 - 00:02:17.820, Speaker A: We're here to explore what's possible, and not all of us are aiming to become successful businesses or anything. And the main focus here is just to get feedback and overall, just to create a strong ethereum community here at Hackafest. Yeah. And I'll give a quick introduction to our judges. We have Carson from Textile IO. And we have Vijay from bitscrunch. If you guys could give yourselves a quick introduction.
00:02:17.820 - 00:03:04.350, Speaker A: Hi, Carson here from Textile. This is my second well, it's the second and my second Hack FS Hackathon as a sponsor and pretty, pretty excited to be engaging with everybody in the channels and things like that and looking forward to seeing what y'all have built. Cool. So myself, Vijay, living in Munich, Germany. I'm one of the founders and the CEO of Bitscrunch. So we are currently operating in Germany as well as in India, and we are one of the sponsors for this event as well. So previously, a few events back, I was in the organizing team, but it's good to be on the other side of the event now.
00:03:04.350 - 00:03:14.050, Speaker A: Good to be judging this event. So yeah. Looking forward. Thanks. Right. Fantastic. I'm looking forward to it as well.
00:03:14.050 - 00:04:07.016, Speaker A: So let's just get right into it, I guess. Yeah. So I would like to just ask team Games Vault to come up and present your presentation. So, reminder, seven minutes in total, four minutes for your video presentation, and three minutes of Q and A. So, yes, you'd share your screen real quick. Hello, everyone. Hello.
00:04:07.016 - 00:04:08.890, Speaker A: Hey there. So I'll share my screen.
00:04:16.860 - 00:04:17.930, Speaker B: Is that working?
00:04:20.260 - 00:04:32.710, Speaker A: Looks like it. Yes, we can see. Welcome to Games Vault and your sign in with MetaMask button. Are we supposed to be hearing sound right now?
00:04:36.280 - 00:04:37.636, Speaker B: So you're getting sound through?
00:04:37.818 - 00:04:39.060, Speaker A: No, we're not.
00:04:39.210 - 00:04:39.910, Speaker C: Okay.
00:04:40.760 - 00:05:14.224, Speaker A: Yeah. Pretty common problem. Sure. So get back to the main. Yes. So if you don't know how to do it, I think this should be working. Okay.
00:05:14.422 - 00:05:59.040, Speaker B: Hello and welcome to Games. Can you hear that? A decentralized ecosystem for PC gaming. The problem with the PC game marketplace today is that a handful of massive companies have a monopoly over discoverability content requirements, exclusivity, and take up to 30% of sales revenue for the privilege of using their platforms. Our vision is to create a communityowned game marketplace where developers receive 100% of their sales revenue and consumers have true digital ownership over their games. Let me walk you through the MVP we've developed for Hack FS. First, we need to sign in with MetaMask. Next we need to switch to the Polygon network.
00:05:59.040 - 00:06:40.760, Speaker B: Here you're presented with a store page which lists some games I added earlier for demonstration purposes. All game data is stored using Textile Threaddb. And here on the left you can see we're retrieving tags from the game's database. You'll notice all the games are priced in matic, but technically we can use any currency, even credit cards using Unlocked Protocol. Let's take a look at some of the games. Here you can see the game listing for Cyberpunk. All game assets, marketing images, and even the game builds are stored using IPFS web Three storage technology.
00:06:40.760 - 00:07:29.370, Speaker B: On the right you can see the price, but 60 matic is a bit too expensive for us, so let's find a cheaper option. So here on this game, you'll notice that the price is much cheaper. So let's go ahead and buy this game. So we want to confirm the price, confirm what's actually happening. Here is I'm buying an NFT, which the developer minted when publishing the game. This NFT will give me lifetime access to game update updates, but can also be sold or traded on Open Marketplaces, completed, and it was successful. And that purchase button is now turned into a download button and we're able to download the game.
00:07:29.370 - 00:08:21.400, Speaker B: And this downloads a zip file, or it could be an executable or any sort of file a developer chooses to upload for their game. And this is all stored using Web Three storage. And you can also view your purchase games in your library. Using the graph restore, we're able to retrieve a collection of all the games that the user owns. Next up, we'll go to the developer page. So I'm already registered as a developer, but if you're not, you're presented with a sign up screen and you can pay a small monthly subscription using Unlock Protocol in order to get access to the developer dashboard. Once you've got access to the developer dashboard, you can add your games, you can edit your games, you can publish your games, but you can also update your developer info here which is publicly displayed.
00:08:21.400 - 00:08:24.984, Speaker B: So what we're going to do now is we're going to add a new.
00:08:25.022 - 00:08:44.800, Speaker A: Game and I'll show you how that workshop. Right, let's click publish.
00:08:51.060 - 00:09:11.720, Speaker B: What this is actually doing now is it's minting an NFT, which represents the game using unlock protocol. So as you can see here, this game has now been published. So we can go to the store page and we can see indeed that Red Dead Redemption has been published and it's available to buy for 30 matic.
00:09:15.740 - 00:09:16.260, Speaker A: Cool.
00:09:16.350 - 00:09:17.790, Speaker B: So that's our demo.
00:09:21.360 - 00:09:24.510, Speaker A: Yeah. So you guys can move on to the Q A session now.
00:09:25.760 - 00:09:29.890, Speaker B: Yeah. If you guys have any questions, we're happy to answer anything that you got.
00:09:31.300 - 00:10:00.024, Speaker A: Yeah, I can kick us off and actually, I'll turn my video on here. I noticed that there's no fee for uploading or publishing a game. So the platform, does it effectively, in theory, make money based off of sales of the NFTs. Does it take a cut or something like that, or is it purely cut free and everything just goes straight to the uploaders? Yeah.
00:10:00.062 - 00:10:48.856, Speaker B: So in terms of sort of monetization models for gamesvault itself, one thing that we really want to do is offer developers the opportunity to get 100% of revenue. So in terms of monetization from our end, what we're looking at doing is offering sort of premium placement. So kind of similar to in the UK, there's a site called Gumtree where you can list as many things as you want for free, but you can pay for premium sort of space. So this is kind of a completely different model to what most games platforms are doing at the moment. We want completely free 100% of royalties going to developers and they can even take their games and they can sell them on other platforms because it's completely decentralized. But if they want to use our platform and they want premium sort of placement on the store, they can pay for that. Also, we get 100% of the developer fee as well.
00:10:48.856 - 00:10:53.610, Speaker B: So developers have to pay a monthly subscription using unlocked protocol and that goes to us.
00:10:57.020 - 00:11:03.230, Speaker A: Cool, great. So, first of all, Henry, it's a good project, you did a good job.
00:11:03.680 - 00:11:04.604, Speaker B: Thanks very much.
00:11:04.722 - 00:11:07.484, Speaker A: Doing it alone or you have a team?
00:11:07.522 - 00:11:15.040, Speaker B: Yeah, so we've got Mario in the channel as well, so me and Mario both worked on it, so it's a two man team.
00:11:15.190 - 00:11:21.504, Speaker A: Okay, and what about the future plans? I mean, what about the roadmap? How are you going to proceed from here on?
00:11:21.622 - 00:11:44.250, Speaker B: Yeah, well, this is our first hack FS and actually our first Web three project. We've got a little bit of front end experience, but mostly we're game developers by profession. So now that we've built this, we're aware of some potential funding, sort of game specific funding. So we're going to take this demo and we're going to put together a deck and we're going to pitch it as a potential project and try and secure some funding and build it into a full project.
00:11:44.700 - 00:12:03.904, Speaker A: Great. Yeah. Cool. Nice. Thanks. And just another question from my end maybe is so, in theory, I could upload a game asset for a game I didn't develop. It's a hackathon, so you don't have to have this figured out.
00:12:03.904 - 00:12:11.776, Speaker A: But are there any thoughts about how you might do sort of curation and takedowns and things like that?
00:12:11.958 - 00:12:44.236, Speaker B: Yeah, that's a difficult one. One thing that we want to do is some sort of community moderation. So one thing we were thinking of is that we were going to have a thing called a Games VIP pass, games Vault VIP Pass. And that allows once people own that pass, they get free games monthly. But another benefit of that is they get sort of curator privilege, and they can kind of sort of let Games Pass go through or do like a certification process, and they can help out with that. We're kind of new to that. We're kind of new to sort of community moderation and things like that.
00:12:44.236 - 00:12:52.796, Speaker B: But that's something that we'd like to explore. But in terms of DMCA takedowns and stuff like that, I've got no idea how that sort of stuff is managed.
00:12:52.828 - 00:13:10.196, Speaker A: Usually the gamification of curation is very interesting. That's a cool idea. I like that there's a benefit in addition to having the control of community moderation. I like that. That's a neat idea. Cool. Yeah.
00:13:10.196 - 00:13:16.004, Speaker A: So time's up for the Q A session. That was a great presentation. Thank you, Gamesvault, for presenting your project. Thanks. Games Vault. Brilliant.
00:13:16.052 - 00:13:17.610, Speaker B: Thanks very much. Thanks for having us.
00:13:18.220 - 00:13:53.350, Speaker A: Thanks. Up next, I would like to welcome Team Scholar Dao. If you guys could come up and present your project. Rajdi. Hi. Yeah. You able to see my video? Yes.
00:13:53.350 - 00:14:34.024, Speaker A: I don't think we're hearing audio right now. Yeah. So if you could unshare your screen and then click Share screen again. Just entry, open access. There we go. Start it again, though. Yeah, I don't hear anything right now.
00:14:34.024 - 00:14:47.884, Speaker A: No sound. Yeah. So just stop sharing your screen right now. Exit out. Are you able to see it? We can see it, but we can't hear it. Okay. Yeah.
00:14:47.884 - 00:15:14.630, Speaker A: Stop sharing your screen and then click Share screen again. Don't select your window just yet, but you have to find the option to share sound at the bottom left. Okay. Yeah. And then once you turn that on, we can hear the audio. I'm part of the team at Scholardao, and we're trying to make scientific peer reviewing system more transparent, verifiable and open. We have two front end and two backend developers on our team.
00:15:14.630 - 00:15:41.244, Speaker A: There's a lot of problems right now with the scientific publishing system. Here are just a few. There's a lack of transparency, so peer reviewer matching, which is facilitated by journals, inevitably leads to bias. There are huge barriers to entry because open access journals costly for authors to publish on. And closed access journal is expensive for readers to access in the first place. There's warped incentives because of high processing fees that lead to authors and reviewers being unable to monetize their work. And there's a lack of an open reputation system.
00:15:41.244 - 00:16:13.770, Speaker A: There are several centralized citation indices but no open protocol that indexes all papers together in decentralized fashion. And there are many impact factor formulas, which are formulas that calculate the average number of citations your paper has received. And because there are so many of them and different journals follow different conventions, you never know which paper is making the greatest impact. We solve these issues through utilizing many technologies. We use decentralized storage, open reviews and validation, ownership by default, and an open reputation system. More is detailed in the demo.
00:16:14.780 - 00:16:55.380, Speaker C: Okay, so now I'm going to upload the paper. So I have in the entry for title the field, the specific field, the validator tip in ether and the validator address. So now I'm going to upload the file. So CPU ethereum yellow paper. Okay, submit it, confirm we should have nine papers. Okay, so this paper is still in trust stage. And now I will use a validator Carol, who we add as editor of a journal.
00:16:55.380 - 00:17:40.356, Speaker C: And then I go into paper number nine. I set the validation request and confirm the transaction. Okay, so we reload the page again. Okay, now the paper is in stage reprint. And you can see here there is and then the IPFS needs to work. So we have already submitted into the IPFS and yes, this is the ethereum yellow paper. Okay, so now I'm going to use my review account to add a review here.
00:17:40.356 - 00:17:58.698, Speaker C: So let's say I want to add a review here and then paper review. The decision is accept this paper. Okay, confirm. There should be a review, the new review.
00:17:58.784 - 00:17:59.130, Speaker D: Yes.
00:17:59.200 - 00:18:22.610, Speaker C: So it is reviewed by scholar to asset and yeah, we can review the review. So, let's see, I'm going to use my validator account to publish the paper. Here we go. Now the paper nine is in stage published.
00:18:25.030 - 00:19:18.980, Speaker A: Okay, now let's talk about the reputation system of scholar Dow. So we use a subgraph to fetch different events happening in our smart contracts and then index them on a graph node and then expose them through an API. So as you can see, there are like two papers here and then one scholar that has been indexed so far. And this particular paper references this paper ID four. So that means this paper gets one citations from here and this particular author or scholar improves their number of citations. And we are also computing the edge index, which is a measure of productivity and the number of citations achieved by a scholar in the different publications. Thank you so much for watching.
00:19:18.980 - 00:20:14.474, Speaker A: Yeah, so that's it judges, you guys can go ahead. Okay, cool. Great presentation. Thanks very much. So are you using a service to upload to IPFS or how is the IPFS integration? Yeah, we are using the Web Three storage library for that. Okay, great. And is the H index, is it calculated? Where is that calculated? Yeah, it's done in the Smart contracts as well as in the graph node.
00:20:14.474 - 00:21:06.240, Speaker A: As well. Like in the subgraph, we fetch events from the Smart contracts about, let's say, one paper references another, and then we compute the edge index in a function on the graph. Okay. And obviously the index depends on essentially this being a closed system in which all papers are included in the system. So we did think about onboarding other researchers as well and verifying their identities using an oracle. But then we fell into some errors, and then we skipped that part for now. Yeah, that's a pretty tricky onboarding issue.
00:21:06.240 - 00:22:29.800, Speaker A: Well, okay, I have other questions, but Vijay, if you've got one, go for it. Nice one, Rajib. It's a good work. And what about the business model? I mean, if you are looking to scale up this business? Yeah, so the validators are just like editors in a regular journal system, editors are just journals. And then they would need to stake some amount of tokens into our dow, and then their tokens would be slashed in case they miss the publishing deadlines or if they have a lower reputation, so the reputations are available openly, so there won't be like civil attacks or something. I could just impersonate another scientist, but then my reputation would be low, so then it wouldn't really matter if I have different accounts. And then we also thought about having a funding model in which people can just use quadratic funding to find the reviewers and the authors as well, if they want to get a paper published or research done.
00:22:29.800 - 00:23:09.350, Speaker A: So you mentioned some technical issues. Oh, sorry, Vijay. Did I just interrupt? No worries. Yeah, so the technical issue, one of them was with Chainlink, in which we were having some problem connecting the contract with the chain link Oracle node. So that was one. And then in the graph part, we had some problem, like hosting it on the Graph Explorer. It wasn't indexing, it far, so we just ran it on a local node.
00:23:09.350 - 00:23:40.720, Speaker A: Sorry to interrupt, but I know, Vijay, you had a question, but we don't have time for the Q A session. It's fine. So, yeah, I just want to up next, we have Team Brain Inverse. So I'd like you guys to start. When you're ready, start presenting your presentation. Thank you so much to Scholar Dao for presenting. Let's do this again.
00:23:40.720 - 00:24:15.900, Speaker A: I lost. Can you see my screen? I can see you. Oh, yeah. Well, I'm trying to find the Share button. 1 second. Let's do this again. Okay, I think I got lost there.
00:24:15.900 - 00:24:43.378, Speaker A: Okay, there. Don't forget to select the Share sound option at the bottom left. Mapping the real world. Can you hear me. My space will bring you. Yeah, we can hear you, but we can't see you. Or we can see you.
00:24:43.378 - 00:25:19.002, Speaker A: Not your screen, though. How about now? Just you. How are you trying to share your screen? Are you pressing the green Share button at the bottom share screen? Okay, so I got to do it in here? Yeah. And make sure to select the Shear sound option on the bottom left. Yeah, I think there we go. Too many windows up. I just get confused.
00:25:19.002 - 00:25:58.966, Speaker A: Sorry. Is that it? Mapping the real world pseudo AI to simplify life and its interactions. Crypto and Ethereum. Powerful but complex with all the new terms and systems. This complexity is preventing faster adoption by the public. Keys, private keys, smart contracts, gas, regular folks, all mined nominally. However, crypto's power can be used to simplify its usage.
00:25:58.966 - 00:26:30.530, Speaker A: Our uranium base. Real world objects and entities are mapped into smart contracts. Interactions are handled by executing smart contract functions. All these interactions will create a knowledge base. The pseudo AI can use this knowledge base to learn. Over time, it can perform these transactions or even recommend others. The end result is an automated and simplified stack.
00:26:30.530 - 00:27:09.486, Speaker A: Premium AI. The Dow for governance and economy, for payments, cloud for data storage. And it's built on top of the decentralized centralized systems and systems like Ethereum, IPFS Filecom, Web Three storage. How do we experience Braniumverse teleporting? It's like jumping from one reality into another. It's totally visual. Brainiumverse simplifies life. We know what we want.
00:27:09.486 - 00:27:48.860, Speaker A: Brainiumverse takes care of interactions and crypto complexity. And maybe that is why crypto is complex. It is for machines. The end. We're going to just start bringing an AI. It's going to chug in the background, and we're going to teleport to AC department department. And maybe we can pause the teleport at this, purchase a suit or something.
00:27:48.860 - 00:29:05.826, Speaker A: We can continue teleporting and go to Starbucks and meet a friend or go to museum. You can even go to a random scene, just teleport someone, teleport home, see what's going on, see what's going on locally, make your friends and teleport to different cities and see what's going on. Or even teleport down my street what's going on. So, yeah, you can pause a teleport. Teleport, go back to main screen. So basically, this is the navigation around. But to populate Brain inverse, we'd have to create NFT citizens for your own address, link roads, create stores, companies and real world assets.
00:29:05.826 - 00:29:34.560, Speaker A: And then all the interactions will be what helps create. So it's a different way of looking at things. Very interesting. Thank you very much. All right, thank you so much for your presentation. We'll be moving on to the Q A session. So, judges, take it away.
00:29:34.560 - 00:30:20.218, Speaker A: Cool. That's a very futurism, very exciting sort of presentation. I'm wondering it doesn't have to be all finished or anything like that, but obviously for the hackathon. But how much of this has been implemented. The only parts that were not implemented was like creating the NFT. I did use Think Minty as a test, but the screen, the layout that's done probably needs a better enhancement from a game developer. But I was able to also load the files onto, I think Web Three storage.
00:30:20.218 - 00:31:02.582, Speaker A: I use that and it actually references it in the display. In fact, I was a little surprised that it actually worked just as well as so the first few screens were being referenced within the app itself and I just wanted to make sure that was fast enough. But referencing the files directly on Web Three, it was direct. You couldn't even tell the difference. In fact, there was no difference. So that kind of worked really well and kind of showed the power of the distributed file system. It makes it almost as powerful or more powerful blockchain.
00:31:02.582 - 00:32:04.030, Speaker A: It almost looks like blockchain the distributed file system just as powerful and you could build some interesting apps on the distributed file system that maybe use the blockchain even for something, maybe for persistence, for immutability. But it's so much faster. I was kind of well, I was expecting some kind of lag, but it wasn't right. So you were hosting assets directly off of IPFS gateway. Is that yeah, well, straight on Web Three, well, there's a back end sending the actual file name to the react front end and then that actually references the Web Three. So that entire interaction was done very smoothly. That's why I was kind of a little surprised.
00:32:04.030 - 00:32:41.250, Speaker A: There was no difference between the file, the images being displayed from within the react app versus it being sent from the back end and then being referenced from Web Three. So the Web Three storage, that was pretty interesting. Good. So I see this as maybe like a way of oh, I think vijay, did you have mean we are already running out of time. So just one comment from my side. It's a good project. I mean, good thinking, first of all.
00:32:41.250 - 00:33:08.856, Speaker A: But I see a lot of UI works that is still bending, which is fine because it's just a hackathon we are here to learn. So I wish you make more and more progress and just feel free to contact if you need any help. Sure. Thanks a lot. All right, thank you so much Team Brin Universe for your presentation. That was great. Moving on.
00:33:08.856 - 00:33:57.370, Speaker A: I think we have Team web3 dev tools. If you guys could come up and start whenever you guys are ready, it there you are. All right. Whenever you're ready, you can take it away.
00:34:04.160 - 00:34:41.764, Speaker E: I'm viraj anchan for the hacker first hackathon, I worked on Web Three dev tools. Web Three dev tools consists of DevTools powered by Web Three technologies. As of now, it includes container registry and NFT detection using machine learning models. That is AI hub. Now let me tell you about NFT detection. NFT detection uses TensorFlow Keras to generate a machine learning model to detect similar NFDS based on the uploaded image. The graph protocol is used to generate the data set required for training the machine learning model.
00:34:41.764 - 00:35:22.096, Speaker E: The generated model is then pushed to IPFS filecoin using web3 storage. Once the model server is started then the model is pulled from IPFS and used for the inference. NFT detection model can be used using a UI or using a Rest API. As of now it only supports the crypto punks NFT. The data set can be updated to handle other NFTs too use cases. Search NFT using an image similar NFT detection detect smart contract address and token ID for an NFT using an image counterfeit NFT detection detect NFT owner based on Twitter profile image. That is if cryptopunk's NFT is used as a profile image.
00:35:22.096 - 00:36:02.780, Speaker E: These are the screenshots. Now let me quickly show you a live demo for the same. This is the homepage for the NFD detection. And what I can do is I can select an image over here. Now I'll click on Search. As you can see that it correctly identified that it is NFD number triple 97 and it also shows the previous sale price and a link to buy this item. And along with that it also shows similar related NFDS to this one.
00:36:02.780 - 00:36:41.466, Speaker E: And here is another example for the same. So this concludes the demo for NFT detection. Now we'll move on to the next one. And this is Container registry. Container Registry allows you to push and pull docker images from IPFS and filecoin. It provides a native docker integration via custom docker registry server. It is powered by web3 storage and orbitdb the docker image layers and the manifest file are pushed and pulled from IPFS and filecoin using web3 storage.
00:36:41.466 - 00:37:06.598, Speaker E: The orbit DB is used to maintain the mapping of IPFS hash for the docker image layers and the manifest file. Now these are the screenshots. So this one is for the docker registry server. So in this way you'll start the docker registry server and these are the screenshots for push and pull. And here is the live terminal. So here you can see that the first step is to tag the local image for your docker registry server. So here this is the server address.
00:37:06.598 - 00:37:49.080, Speaker E: And then what you'll do is you'll push the image to your custom docker registry server powered by web3 storage and you will see that each layer is being pushed over here. And finally you can see that the manifest file is pushed. Then to test the further steps, what we do is we delete the local images and then what we do is we try to pull it from the docker registry server and as you can see that it pulled complete layers over here. And finally we downloaded the image locally. And then finally we ran a container using this docker image. And this is the docker registry service is running. And here you can see the records for the various API calls which the docker client made.
00:37:49.080 - 00:37:59.420, Speaker E: Here you can see that it used Web Three storage. This concludes the demo for Web Three dev tools. Thanks.
00:38:05.110 - 00:38:06.900, Speaker A: Go ahead with any questions.
00:38:09.830 - 00:38:10.900, Speaker F: I'm here.
00:38:11.270 - 00:38:30.006, Speaker A: Okay, so you're muted. Okay. So first of all, it's a good one. We at bitscrunch. We are also working on counterfeit NFTs as well. So you can also write me. And my question is so for this demo, I see that you use crypto punks, which is kind of finite.
00:38:30.006 - 00:38:42.640, Speaker A: So there are limited number of crypto punks. But what are your plans? Let's say if you go for an NFT collection that is infinite, that is generated over and over again.
00:38:43.570 - 00:38:46.350, Speaker F: So you'll have to retrain the model periodically.
00:38:47.490 - 00:38:48.240, Speaker A: Okay.
00:38:50.050 - 00:39:16.650, Speaker F: So the way this works is basically initially from the data set, we compute feature vectors from that thing. And then when a new image comes, then you generate the feature vector using the model, and then you come to the distance between those two images. If the distance is very less, then it's similar to that NFT. And then you will sort it based on, say, if you want to see five similar images or one similar image, like the best one, or you want to see more images.
00:39:17.550 - 00:39:33.950, Speaker A: Okay, cool. You did some of the docker stuff in the last hack.
00:39:38.850 - 00:39:53.430, Speaker F: Earlier, I did three different ways. So one was using Powergate, the another one was using Textile Hub, and the third one was using Fleek in the past. So this time I used a combination of Web Three storage and Orbitb.
00:39:55.610 - 00:40:19.726, Speaker A: Got you. Okay. It seems like it could have been enough to just do the image NFT detection stuff or the docker stuff. What made you decide to do like a whole suite of tools? Because they're kind of unrelated, but we.
00:40:19.748 - 00:40:33.554, Speaker F: Wanted to experiment various different ways in which we could make it more popular. Basically the entire web3 thing. So one benefit of Web Three storage is right now, one, TB is free right now. So that is also a powerful use.
00:40:33.592 - 00:40:46.120, Speaker A: Case because of that, right? Yeah, that makes sense. Okay, well, we got 1 minute left. What's the next step here?
00:40:46.490 - 00:41:04.310, Speaker F: So one thing would be to connect with different people who need the NFT detection algorithm. So that is one thing. And say it could be NFT Marketplaces or some other people. And similarly for the docker thing, it would be to participate with various projects who are interested in the solution.
00:41:05.090 - 00:41:05.840, Speaker A: Cool.
00:41:07.970 - 00:41:21.714, Speaker F: And during the hackathon, I also wanted to research more different things also like say, a service like Cloud Front powered by Web Three and things like Backups or Redis, et cetera. But I didn't get time for those things.
00:41:21.912 - 00:42:08.180, Speaker A: Okay, sounds good. So thank you, Team Web Three DevTools for your presentation. I would just like to ask the next team coupart to please come onto. The stage as panelists and present whenever you guys are ready. Hello?
00:42:10.310 - 00:42:12.290, Speaker D: Sorry, just give me a minute.
00:42:14.950 - 00:42:22.200, Speaker A: Can you hear me? Yes. All right, so let me share the screen.
00:42:24.570 - 00:42:25.640, Speaker D: Right away.
00:42:31.530 - 00:42:36.120, Speaker A: All right. Okay.
00:42:40.010 - 00:43:12.070, Speaker D: Gopart is the first ever tile based NFT Art marketplace. Create a canvas and add the first tile. Other artists expand the canvas in any direction and add new tiles. People can vote tiles in or out. Each canvas is its own gio and self governance. Some tiles are voted out and some tiles are voted in to replace them. Canvas is sold and profits distributed to all its contributors.
00:43:12.070 - 00:43:47.550, Speaker D: Hi, I'm Rick. I first got the idea for Copart from looking at the 69 million people's NFT. The piece of art is made from 5000 tiles merged together into a common canvas. I thought it would be great if each tile was made from a different author and so Coop Art was born. Let's try it out. Go to Coop Art and connect your MetaMask wallet. Make sure your wallet is connected to the Matic Mumbai testnet as I've deployed the Smart contract on the Polygon testnet.
00:43:47.550 - 00:44:18.358, Speaker D: Once you are connected, your Ether address should appear in the top right corner. You are now ready to create a new canvas or contribute to existing canvases. Let's start by creating create new canvas. You can see an empty tile and a few options. First, choose a tile size. Note that all tiles in the canvas will have the same size even for other contributors. Let's choose 130 pixel by 340 pixels.
00:44:18.358 - 00:44:53.138, Speaker D: You can also select the time period for other artists to contribute to the canvas. Let's choose a deadline three days from now. After that, the canvas will automatically lock and be put on sale, meaning that no contribution will be possible. Now hover your mouse over the tile to see its coordinates and an upload button. You can click the arrows to expand the canvas on the right side, left side, top side or bottom side. There is no limit to the canvas size. This could technically scale to a million of tiles.
00:44:53.138 - 00:45:35.806, Speaker D: Let's upload the first tile. Note that I am using IPFS with the Insurrer Gateway to store the NFT images and token metadata so it is fully decentralized and tile owners can be reassured that their heart is safely stored forever. Once the image is uploaded, it appears in the tile you chose and a transaction to mint the tile is automatically started. Accept it to mint the tile as a ERC 721 token in the smart contract. You can check out Polygon Scan to confirm that the transaction is indeed successful. This canvas is now officially started. You can add more tiles yourself or wait for others to contribute.
00:45:35.806 - 00:46:15.390, Speaker D: Let's now go to the marketplace. Here you can see ongoing canvases that still have time left in their contribution period and canvases that have expired and have automatically been put on sale. You can see the canvas that we just created with only one tile. Let's say now that I am another artist that want to contribute to this canvas. I can click Contribute and the tile editor will open and fetch the tiles from the Smart contract. Note that I created a custom subgraph to fetch data with GraphQL. Let me now add two new tiles to this canvas.
00:46:15.390 - 00:46:45.142, Speaker D: I am now done contributing. If I reload marketplace, I can see that the canvas does display the new tiles. Let's contribute to another canvas. Here I can see tiles about typical Rage comics. However, there is a tile here that does not seem to fit the hem of the canvas. In that case, I can vote this tile to be removed. Each canvas is its own dao and self governance.
00:46:45.142 - 00:47:37.350, Speaker D: You can click Upvote or Down Vote on each tile and those with more done votes than upvotes will be removed automatically. Now, once the contribution period of a canvas expires, no one can contribute to it anymore and it is automatically put on sale in the marketplace. For now, I've only implemented a simple fixed price sale at one matic as a proof of concept. But I do plan on developing a more complex auction system soon. When a canvas is purchased, all the tile creators, except those that were voted out of course, are paid according to the number of tiles they contributed. For instance, if a canvas has ten tiles and is sold for one matic, each tile creator would receive zero one matic. If someone contributed two tiles to the canvas, he would receive zero two matic.
00:47:37.350 - 00:47:50.720, Speaker D: Copart is a revolutionary way of building NFT art cooperatively. Tile based art will lead to new and exceptional pieces from thousands of artists working together and maybe one day worth million.
00:47:55.580 - 00:48:11.500, Speaker A: Super cool. Very nice presentation. Love the idea. Thanks. And quite original. That's great. Can you tell us a little bit more about the tech stack that you're working with? Yeah, I didn't catch.
00:48:12.240 - 00:48:47.930, Speaker D: Just go ahead. So the front end is made with React and I'm using the Http IPFS client to connect to the infuria gateway to upload the stack. I'm using RDATs to deploy and compile the Smart contracts. I'm deploying everything on polygon. I'm always using a custom subgraph to fetch data with GraphQL and I think that's it. I'm using Typechain because everything is in TypeScript and yeah, that's about it.
00:48:48.940 - 00:49:08.960, Speaker A: Cool. Like Carson said, it's a super cool idea. And then did you already started building community or spread the word around this project or what's the current status?
00:49:10.500 - 00:49:55.040, Speaker D: So I started working on this like three weeks ago. If you look at the description on the ETH online website because I don't have a long time in the video to explain everything, but if you look at the description in the submission, you can see that I have divided the project in three phases. And the first phases is a tile art editor with a simple sale and in phase two that I'm going to start right now until the next akatan will be based on layer cooperative art, which is another form of cooperative art with auctions. And yeah, I'm going to build some more stuff until the next hackathon.
00:49:55.540 - 00:49:56.290, Speaker A: Okay.
00:49:56.820 - 00:50:01.680, Speaker D: And I would like to ideally release it on the main net in September.
00:50:03.620 - 00:50:33.720, Speaker A: Great, cool. Yeah, that's all the time we have for team coupart. So thank you for presenting. Thank you. All right, so actually right now, just going to share my screen real quick because we are going to be taking a quick ten minute break before we go on to the last few teams. So we'll be back, let me just put the time here real quick at 01:43 P.m. Eastern.
00:50:33.720 - 01:01:41.600, Speaker A: Yeah, everybody just take a break, relax and we'll be back by then. Thank you all. It all right, we are back. I'll stop sharing my screen right now. All right, so team enlightened meditation. I would like to give you guys a warm welcome if you guys are ready. Whenever you guys are ready, you guys can start and present your video.
01:01:44.290 - 01:01:45.920, Speaker G: All right? Hello.
01:01:48.450 - 01:02:19.120, Speaker A: All yeah, you can go ahead.
01:02:26.550 - 01:03:22.050, Speaker G: This is INLIGHT meditation. It is a mobile first web app for tracking meditation and creating NFTs for each session. One possible use case could be that you can imagine organizations like NOTFORPROFITS deploying funds into supporting meditation by buying meditation NFTs in a similar fashion as in the present day, individuals donate money to charities for specific causes. The technology stack I used was react JS NextJS tailwind CSS on the front end, NFT storage hard hat and the network polygon. Here is the profile page. You can click to edit the first and last name and the longitude and latitude. And this can be automatically filled in using the browser API.
01:03:22.050 - 01:03:54.180, Speaker G: On the meditation page, you can set the meditation duration and press start. When the meditation completes, you have an opportunity to update the user information or the location. You can see the duration and the start and end timestamps are set. You have an optional description field.
01:03:58.490 - 01:03:58.806, Speaker A: You.
01:03:58.828 - 01:04:57.716, Speaker G: Can update the ethereum price and you have an option of uploading an image or using an automatically generated image. And this image can be of your meditation space or anything you like. The image is uploaded to NFT storage along with all of the other. So now to mint the NFT, press create meditation asset. After the transaction is approved and it is minted, you can see that it is on the marketplace and on the store page. So now to buy one to view all of your meditation NFTs, we go to the list page. You can see all the ones you created, all the ones you bought.
01:04:57.716 - 01:04:58.890, Speaker G: And so.
01:05:11.530 - 01:05:55.350, Speaker A: Cool, thanks for that. Great presentation. Very quick and clean. Additional topics tag bay ermoder thug so can you explain to me what would be like a use case where someone buys someone else's meditation NFT.
01:05:59.850 - 01:06:21.200, Speaker G: It could be to have a souvenir or to support someone's practice or to support like you can maybe restrict it by a geographical area or a certain group. Then you could buy those.
01:06:25.090 - 01:07:40.630, Speaker A: That's almost the same question that I had in my mind, Carson. So, yeah, it's for the niche community. I mean, not everybody is into meditation or exercise, so it's a good one to promote meditation as such and also in a way to bring this NFT community together. I still see some yards to cover, but yeah, good work so far. So in terms because, I mean, I don't know, the meditation like, app space is actually huge, right? Like, there's a lot of features that different meditation apps and things use. I'm not a big meditation person myself, but my wife is quite adamant or does a lot. So in this first implementation, what's missing? What's the next sort of feature? And how might that feature leverage the fact that we have a blockchain here that we're interacting with, like that we have NFTs that's something like you just couldn't have done before.
01:07:40.630 - 01:07:41.320, Speaker A: Right?
01:07:44.030 - 01:08:24.440, Speaker G: I have a couple of general ideas. I am not too focused on taking this further into a business. This is mostly because to learn and write a smart contract and kind of just getting started out in this space. But I was imagining using the unlock protocol and allowing for more of a social media platform where users can follow some meditators and have access to some special content from them that way.
01:08:25.610 - 01:08:27.160, Speaker A: Yeah, that's cool. Nice.
01:08:28.890 - 01:08:31.750, Speaker G: Do you have any other suggestions for improvements?
01:08:37.950 - 01:09:59.810, Speaker A: Well, I think that idea there is pretty powerful, right? Like in fidelity, you have a reputation for someone who maybe leads like really interesting or deep or useful meditations that you might want to buy their NFT from a past meditation, like a past session in order to then revisit it later or something like that. There is certainly a sort of way of a social media application or social application where people could experience meditation that someone else has done or that seems like a pretty powerful it'll be a way for people who lead meditations to monetize their skills. I think that's it. Thank you so much, team Enlightened Meditation for your presentation. Up next I would like to welcome team web3 dark mode. If you guys could please turn on your cameras and share your presentation for us. Hi, I am Chris and this is Web Three Dark mode, a Chrome extension that lets you edit any website CSS and share it over a decentralized storage network.
01:09:59.810 - 01:11:03.386, Speaker A: You can use the extension, for example, to turn your favorite block dark so you can read it at night or really any website. For example, you can invert colors on Google Docs or on Twitter. You can also use it to block ads or block distracting elements on a website. You can also use it to increase font sizes and buttons, for example, on DeFi websites to increase accessibility to people with reading impairments. Finally, you have the Options page where you have an overview of all your changes, where you can log in with Ethereum and sync all your changes in a dedicated ceramic schema. And finally you can view the feed of any changes that other people uploaded. You can follow changes, follow lists, and you can rate them.
01:11:03.386 - 01:12:05.630, Speaker A: And the rating, first of all, helps to sort the list because then you can show the most popular ones on top. But it also attaches kind of reputation to any editor's identity, to any editor's Ethereum address. And that's the motivation behind starting the stack, sort of to have this useful tool that lets Ethereum users help each other without requiring too much technical knowledge and this way bridge reputation from the web Two to the Web three to Ethereum addresses. This is really an alternative approach to, let's say, Legion scores or KYC or any of the civil resistance protocols. And once people use this extension, the information about valued relationships in this new network will help with decentralized governance, retradic voting funding and so on. Thanks for listening. Happy to hear feedback.
01:12:05.630 - 01:12:49.900, Speaker A: Yeah, thanks. Cool. Well, I'm going to start with the same question I start with most teams, which is, can you tell us a bit about the tech stack that you were working with there? Yeah, sure. So basically, the front end is JavaScript and Vue JS and for the backend storage we use ceramic and stored locally. But you could also plug it into AWS or IPFS, for example. And then the identity part also ceramic. So you map your Ethereum addresses to decentralized Identifiers and you could map it as well to your Twitter or GitHub or any Web Two social account.
01:12:49.900 - 01:13:51.322, Speaker A: Does it depend on any browser, like Web Two browsers or Web Three browsers or it is independent of the browser? Oh, yeah, the whole thing is a Chrome extension. So you could use it in Chrome and Brave chromium. And to authenticate you need MetaMask or any other Web Three wallet. Okay, so right now you have it for Chrome and Brave. Yeah, exactly. Okay, maybe you can go through how? So say I come up with a pretty sweet theme set up and how does the sharing work with other peers? Can you just go through that again? Sure. So you start by logging in with your MetaMask and then generate a did in Ceramic.
01:13:51.322 - 01:15:19.420, Speaker A: Like, the first time you actually use Ceramic, and then the other times you just log in with your MetaMask. And after that you use the Chrome extension to make some changes on website, some CSS changes, and then there's a button to upload those changes. And then on the other side, the second user, he sees those changes saved in a list. So different lists could have different names, right? Like Accessibility or minimalism focus or like dark mode or anything and in the next version, you could also do the same thing with JavaScript. So you could do something like an advanced ad blocker or something like Crease Monkey, if you know that the registry where you basically tag your changes, is that indexed with the graph or anything like that? Ceramic? No, I guess you can so use ceramic to sort of standardize the data that you have a standard for these lists and for changes, and then you can really save it anywhere. Like I said, an IPFS, for example, is like decentralized storage network on AWS or just locally, and you share it with a Bluetooth or USB stick and that determines how you can index it. But not with the graph, right? Like it's not on Chain View.
01:15:19.420 - 01:15:21.500, Speaker A: Okay.
01:15:28.910 - 01:15:29.286, Speaker G: Yeah.
01:15:29.328 - 01:15:50.120, Speaker A: If there's nothing else, then I'll assume that all the questions have been asked and we'll move on. So thank you so much, the dark mode for your presentation. Cool. Thanks, guys. All right, then. Up next, we have team pulp. So if you guys could please unmute yourself or turn on your cameras and share your visitations, please.
01:16:03.950 - 01:16:25.630, Speaker H: Hi, everyone. This video is only slides, so I'm going to talk over that if that's so. My name is Dan. Can everyone hear me? All right, my name is Dan. I'm one of the members of the Pulp team. I'm joined today by Brahma Sen. We hail from Boston, Massachusetts and Columbus, Maryland, respectively.
01:16:25.630 - 01:16:59.370, Speaker H: Before we start, I just want to disclose pulp is an existing project. We actually participated in a hackathon last year, and I'd like to emphasize that we're only submitting work completed in the last two weeks for judging this year. And I'll highlight that work in the demo. So, just a little quick background on Pulp. Pulp is a publishing platform, so think substack or medium. And traditionally the publisher sits kind of in between the author and the subscriber, and they intermediate the relationship, which gives them eventual control over the author's revenue stream. But Pulp actually replaces the publisher with an open protocol.
01:16:59.370 - 01:17:43.918, Speaker H: This effectively commoditizes the services of the publisher into easily replicable low margin software nodes. In developing Pulp last year, we anticipated a quality problem. I call this the eight chan problem with no offense to eight chan, but the problem is that a totally free speech platform initially attracts kind of the lowest common denominator posters. And then you get this negative feedback loop that tarnishes the community and drives away any would be high quality content. So our hack this year sets out to solve this problem. With distributed tech, we have the unique opportunity to unbundle the Editorial Board from the publisher. And in traditional media, the Editorial Board acts as kind of a content filter.
01:17:43.918 - 01:18:24.600, Speaker H: This is analogous to the Twitter or Facebook Terms of service. But once you unbundle the editorial Board from the publication, you have the opportunity to implement a market of editorial boards with a many to many review pattern. And this creates a quality filter rooted in pluralism. There's no single authority on what should or should not be propagated, but we end up kind of with quality metadata that can be used by subscribers to make decisions about who or what to read. So we've updated that in the PNLP protocol shown here. And we also decided to use hackfs as an opportunity to integrate with Superfluid to facilitate revenue streams for authors. So I'll demo all of that quickly.
01:18:24.600 - 01:18:57.790, Speaker H: So the reference implementation is a react app, and I'm going to begin here by quickly adding some test content. This is all in our existing app so we can demo the two new features that we built for our hack. Initially, I'm acting as an author. I'm using MetaMask for identity. I'm starting a new publication and I'm writing my first article. So these artifacts are indexed on the Ethereum blockchain and they're persisted on IPFS via Textile. Once this is complete, I'll switch MetaMask accounts to act first as an editor and then as a subscriber so we can demo our two new features.
01:18:57.790 - 01:19:46.906, Speaker H: So here I'm an editor reading this article published by somebody else, and upon reading the article, I can choose to approve it or reject it. This information is persisted to the Ethereum network, and once my transaction completes, all future readers of the article can see my approval. You can see there, and as with any data in Pulp, we can view this information on any block explorer. So here we bounce over to Etherscan and we can see that transaction successfully. Next thing I'm going to do is act as a subscriber so I can go back to the UI, I can read somebody else's article, and I subscribe to their publication. I've set the subscription to be one XDI per month payable directly to the author's address. This opens up a Superfluid stream for a continuous subscription flow.
01:19:46.906 - 01:20:13.910, Speaker H: And again, we can see this information in any block explorer. So I'll bounce back over to the Ether scan, we can see the transaction successfully complete, and then we can also go over to the Superfluid dashboard and we can see our one XDI per month flowing from the subscriber to the author, as we would expect. So that's what we've got. We're happy to answer any questions, and we want to thank the judges and ETH Global for putting on another great ECFS.
01:20:17.310 - 01:20:41.460, Speaker A: Cool. Nice. Well, you kind of went over your tech stack, so my default question has been stolen. Thanks a lot. But that's pretty great. So can you tell me a little bit more about the Superfluid setup? Would you say that's like a biggest component of what you did at this hack FS or bulk of the work for this? Sure.
01:20:42.710 - 01:21:33.410, Speaker H: It was pretty evenly split. We added what I would call the review functionality and then the subscribe functionality. The review functionality was just solidity. There's nothing super magical going on there it's just updates to our solidity contract and then the associated updates on the client to handle the reviews. And then the other, probably even half of the work was we had never used superfluid before we actually were introduced to it through Hackathon. We saw them as a sponsor and we decided that that was actually one candidate technology for implementing subscriptions and we wanted to experiment with that. I should note that the subscribe feature is not gating content at the moment.
01:21:33.410 - 01:21:59.210, Speaker H: So you're paying the author, you're sending money to the author almost pro bono. It's not like we gate the content that is on the publication when you open up a new subscription and obviously that is an important feature that is kind of on the roadmap for us. But at the moment we're just sending value from the subscriber to the author.
01:21:59.710 - 01:22:04.570, Speaker A: Well, for now you could just go ahead.
01:22:04.640 - 01:22:05.706, Speaker D: Vijay, you go ahead.
01:22:05.808 - 01:22:19.454, Speaker A: I'm sorry, I have an emergency in the background so I'm going to have to deal with. Okay, good luck. Daniel. I'm just not clear about the business model that you guys are thinking about. Can you please elaborate on that a bit? Yeah.
01:22:19.492 - 01:23:28.150, Speaker H: Good mean there's a few ways you could potentially monetize a service like this. I think there's room to monetize as the builder of the client where if you end up facilitating at least some large portion of readership then you could ask to take a cut. The whole idea of pulp though is if you think about substac charges 10%, the idea is that those clients end up being kind of commoditized software, very low margin software, so that's not like VC area activity per se, but you hopefully end up being able to make a little bit of money on running a node yourself. I think there's other monetization area around aggregation. So if you end up becoming a destination for subscribers who are looking for authors, you can translate that into a little bit of monetization as well. Two thoughts among many other possibilities.
01:23:29.850 - 01:23:34.840, Speaker A: Good. Okay. Yeah, I guess we are running late, so good.
01:23:35.710 - 01:23:36.698, Speaker H: Thanks guys.
01:23:36.864 - 01:24:03.140, Speaker A: Keep going. Thank you so much Pope, for presenting. Carson, are you fine to move on? Yeah, I think so far I think we're okay. Good, sounds good. That's fine. All right, so I would like to welcome, I think it's Journalist to come and present your project. Everyone last presentation for the day then.
01:24:03.140 - 01:24:12.178, Speaker A: Sounds good. Yeah. I'm going to share my screen real right. All right, live.
01:24:12.264 - 01:24:46.878, Speaker I: This is a submission to Hack FS called Journalist real quick. Our team is myself on the right there Griffin and then Riley on the left there. We're both based in San Francisco, our project. So it aims to address updates and additions made to articles after the time of publication. Online sub publications use a footer or a header to indicate when they've been edited and that's great. However, it relies on the publisher noting what changed and when, which comes with its own problems in tracking. And then there's no easy way to verify and view these changes.
01:24:46.878 - 01:25:20.886, Speaker I: Sort of like a git diff where you can see what changed between article versions. So we aim to tackle this with Smart contracts and IPFS on Ethereum. So the way that it works is an author publishes their first version of an article. We then upload this article via Smart contract to Ethereum's blockchain and store it there. And then the text of the article itself is given to IPFS. And then we get the unique ID associated with that text and via our Smart contract as well. That article now points to an array of all these different CIDs.
01:25:20.886 - 01:25:53.430, Speaker I: So anytime this article is updated on our site, we store a new CID unique identifier to the text of that edit. So now, because we have all these different versions, we're very easily able to diff or feud the changes between these versions via UI. So speaking of the UI, let's go ahead and jump into that. So let's create a new article here. Article name one, two, three. So we can fill it with the default address here. But normally as a publication, you'd approve an author's address, so random people can't just publish to your publication.
01:25:53.430 - 01:26:19.102, Speaker I: Let's go and get some random text here, fill that in and upload to IPFS. Confirm this transaction via MetaMask. Now you can see IPFS. IPFS has been uploaded to IPFS. You can see the unique CID here, and then the text of the article. Great, let's dismiss that. Let's go to our articles here.
01:26:19.102 - 01:26:28.820, Speaker I: You can see this new one, article one, two, three at the bottom. But oh crap, we made a mistake, we need to edit something. So let's delete this first sentence, which is an error, and we can say.
01:26:29.510 - 01:26:31.902, Speaker A: We fixed the error.
01:26:32.046 - 01:27:01.530, Speaker I: Great, let's upload this to IPFS, a new edit, confirm this transaction, and then again this success, and we can view the new version IPFS if we want. Go ahead and dismiss that. Go back to this articles view. And we can see, now that it's been updated, click this new view. Now we're on the Diff view. We can see the version one and two here, and then via our diff here, we can see that in red the change that we made in green, the thing that we added.
01:27:02.190 - 01:27:02.940, Speaker A: Great.
01:27:03.390 - 01:27:31.830, Speaker I: So that's pretty much our app future plans. We didn't get to the full publisher UI, we finished the article or the author UI, but we wanted ability to be able to add authors to our publication, like pre approve them. And then the ability to not only view authors articles, which we currently have, like all the articles that an author has published, but also as well as all the articles published under Async.
01:27:35.050 - 01:28:24.840, Speaker A: But yeah, that's our project. They'll have to cut the video off at the end there. But I think we would also plan to deploy to a layer two scaling solution. So are the smart contracts running on, like, a testnet right now? I didn't catch the yeah, we haven't deployed them to a testnet, so we've just been locally, like, using Ganache, just testing it. You're planning to deploy it in polygon, right? Yeah. Okay. Any main reasons for that or just the cost factor? Yeah, just a cost factor and just, like, probably the layer two solution I'm most familiar with that we've both used.
01:28:24.840 - 01:29:05.700, Speaker A: Okay. Any other questions? Carson? So I saw that your future plans are for maybe some sort of persistence framework or something like that. So is the idea there that you would persist, like, all past copies on filecoin or something like that, in addition to just IPFS? Yeah, that would be the plan. So then you get to maintain the versions, and then you can see any differences that were made.
01:29:07.830 - 01:29:08.290, Speaker D: Cool.
01:29:08.360 - 01:29:56.420, Speaker A: Okay. And then maybe another question would be so in addition to the obvious, you can diff and see what the changes are. Do you envision this being used as a tool for journalists to track, to flag incorrect content as an actual sort of transparency tool? Yeah, I think in my mind there's a couple of things it would be useful for. One, yeah, it's like a transparency tool. Then you get that transparency as a journalist, which could be a benefit for you. And then another thing, too, is just that it's decentralized. You have this censorship resistance if, I don't know, maybe you're a journalist that needs that.
01:29:56.420 - 01:30:36.286, Speaker A: So I think those are the kind of two benefits that I would see for journalists. And yeah, we had the future work was the publisher side, which would kind of solve part of the issue of people just posting whatever they want or bad content. You could go to a specific publisher address and then it would just show articles of the journalists for that publisher. Yeah, kind of similar to Pulp. So funny that we ended up going right after them, right? Yeah. Well, these are all important ideas that people are tackling. So some overlap it's.
01:30:36.286 - 01:31:12.220, Speaker A: Okay, we got 1 minute left. BJ, any questions to finish off with? Even I could see some similarities to Pulp. It is really weird that they were placed right after each other, but it's nice. But still you need to work on the UI part. But I see it's just a couple of weeks of hackathon. So once you get the UI done, then it'll look really definitely, yeah, sounds good. And there's the plan to keep working on the project.
01:31:12.220 - 01:31:31.230, Speaker A: Yeah, I think so. I think it was mainly seen as just like a learning opportunity for us. This is our first hackathon and working with Solidity, but I do think it's pretty interesting. So yeah, we'll probably flesh it out a little more. Cool. That's great. All right, fantastic.
01:31:31.230 - 01:32:08.766, Speaker A: So thank you so much, journalists, for your presentation and that. Was our last theme, so I guess I'll wrap it up really quick. All right, so that's it, everyone. And I just want to say thank you for all of our participants for taking the time to create and present these amazing projects. All very well done and very interesting as well. And of course, I would like to give a big thank you to our two judges, Carson and Vijay, for helping us out today. And again, thank you guys all for coming out, and I hope everybody had a wonderful day.
01:32:08.766 - 01:32:29.862, Speaker A: Take care. Thank you, DJ. And Carson. I'll just give you guys a quick reminder. You guys need to connect back with Kartik for your okay. It's the same link or the same link Karthik already sent, right? Yeah, it should be okay. You sent us a separate link for that? I don't know.
01:32:29.862 - 01:32:41.380, Speaker A: The same link that we used before this call. Oh, yeah. Cool. All right, bye bye. Yeah. So take care. Have a good day.
