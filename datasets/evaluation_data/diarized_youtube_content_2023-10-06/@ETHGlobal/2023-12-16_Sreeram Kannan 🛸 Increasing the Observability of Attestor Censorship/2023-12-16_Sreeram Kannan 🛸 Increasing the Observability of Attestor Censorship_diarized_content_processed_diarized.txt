00:00:07.130 - 00:01:01.358, Speaker A: Today I'm going to talk about Revere. It's the name of a gadget we are proposing for censorship observability in Ethereum. Why is censorship important? Right. I think we all know this, but I'm just going to take a couple of minutes to say this. So censorship is about you want to get transactions included in the blockchain and you want to be protected against all kinds of economic attacks. For example, you are running a liquidation protocol. You may get liquidated if your transactions get censored.
00:01:01.358 - 00:01:31.770, Speaker A: So there is economic reasons to worry about censorship resistance. There is credible neutrality. You want your protocol to not depend on jurisdictional considerations. Different participants may have to adhere to the jurisdictional constraints, but together the protocol should not have to take a dependence on one geographic region. You also want this property. I call meta censorship resistance. What is this? Normally we talk about censorship resistance as though it's a property to only users of the platform.
00:01:31.770 - 00:02:55.874, Speaker A: But I think smart contract platforms like Ethereum have a more generic sense of censorship resistance, which is even more important, maybe, which is that developers building on top of this platform cannot be censored. So imagine somebody is running a social network, and one of the big features of blockchains is immutable open API access to other builders to build composable open innovation on top. And what if the roll up developer or somebody, or the blockchain nodes all censor any new deployments, new smart contract deployments on top, or calls to these new smart contract deployments on top so as to make it unusable for any other developer to build new features? So this is another important property that we need to worry about. So when we're talking about censorship resistance, we think of it as though it's some kind of a binary thing. Is the system censorship resistance or not? But really there is a nuance to this, which is what we call time to censorship resistance, which is what is the timescale at which the system expresses the censorship resistance property. I send an honest transaction into the system, which is paid enough base fee, then am I going to get included in the blockchain? How long is it going to take to get included in the blockchain? Imagine you have things like short term expiring options, or like a fraud proof period, which gets over within the short period. Then even though my transaction gets in afterwards, I don't get any benefit.
00:02:55.874 - 00:03:50.114, Speaker A: So there is a time to censorship resistance, which is what we need to be thinking about. Another reason which one of the things we know from blockchains is when you convert these philosophical things to more measurable economic metrics, there is a lot of incentive for different people to optimize it. One of the important things is, for example, when you think about economic efficiency of, let's say like an optimistic roll up. In an optimistic roll up, there is a settlement lag, maybe a seven days or whatever. And inside the settlement lag, people have to front the capital in order to do any kind of faster transactions. So the capital efficiency of the optimistic roll up system is determined fundamentally by the fraud proof window, and the fraud proof window is determined by the censorship resistance time. So censorship resistance has consequences all across the spectrum, to permissionless innovation, to usability, to credible neutrality, to capital efficiency.
00:03:50.114 - 00:04:23.026, Speaker A: Imagine you're running a stablecoin protocol. What is the over collateralization factor that you need to keep for the protocol? It's dependent on the time to liquidation, the volatility during the time to liquidation. The time to liquidation is dependent on the time to censorship resistance. So there is this temporal aspect of censorship resistance I think we should all think more about. Okay, so the goal of ethereum is to be resilient beyond majority trust. Vitalik just gave a talk explaining where majority trust may break. In the normal model, many blockchains are built on.
00:04:23.026 - 00:05:16.366, Speaker A: You just trust that the majority of validators will be honest. But in a pseudonymous world, it's not robust to assume that a majority of these nodes will be honest, because who knows who they are? So the goal is to build systems that are resilient to the majority of validators not being honest. Okay, so there are really two aspects. When you're building a system in a blockchain, or any distributed system, there is safety, which is that if something gets confirmed, it should not get deconfirmed or reorg. So it's very easy. So ethereum is built on this principle of slashing, which is that if a majority of validators collude to attack the protocol, you can actually attribute them and slash them. So if there is a safety violation, then they sign two conflicting blocks with the same block number, and it's easily attributable, and we can actually slash these nodes.
00:05:16.366 - 00:06:06.510, Speaker A: However, when you think about slashing for censorship, it's much more difficult and intricate. So imagine a majority of validators collude and make sure that transactions are not getting included. How is the protocol going to know in a rigid way that this was actually happened? Because there may be users that claim that, yeah, I submitted my transaction, and the blockchain validators may say, I didn't receive the transaction. So there's a he said, she said kind of a thing which is not there in safety violations. So censorship is difficult to attribute and slash on chain. Okay, so given this context, what are the types of censorship that can actually happen? There are two fundamental types of censorship that we can categorize into. Number one is proposer censorship.
00:06:06.510 - 00:07:02.046, Speaker A: You're a block proposer, and you fail to include transactions that are valid and perfectly good for whatever reasons, for legal reasons, for economic reasons, you took a bribe and you want to censor somebody, whatever the reason may be. So, proposal censorship is one kind of censorship. Another kind of censorship is a tester censorship. A tester censorship means somebody has proposed a block with certain transaction, and I as an attestor. So in ethereum, you have this kind of a protocol where there is a chain of blocks being proposed, and then attesters attest to these blocks. And what you can do is attesters can all kind of collude together and not certify any blocks that contain certain transactions. So if you want to compare these two types of censorship, it's much easier to solve for proposer censorship.
00:07:02.046 - 00:07:57.106, Speaker A: Why is that? It's because proposer censorship can be mitigated by having even a small fraction of honest proposals. Okay, imagine that the network has 5% of honest proposals. They will just follow the protocol, include whatever transactions satisfy basic validity conditions, and include them. That is actually enough to solve for proposal censorship, because if you have 5% of honest proposals, you will get one in 20 blocks be built by them, and the transactions go through. That is a reduction in the throughput of censorship resistant transactions, because only one in 20 blocks can comprise of censorship resistant transactions. But still, the fundamental fact and the time to censorship resistant resistance can be controlled quite significantly, even by having a small fraction of honest proposals. This is one of the important reasons why in the ethereum community, there is an emphasis on home stakers, solo stakers.
00:07:57.106 - 00:08:42.210, Speaker A: Even if they are not in the majority, small percentage still makes a big difference, because proposal censorship can be solved using a small number, a small fraction of honest validators. Okay. But a test of censorship is actually much more difficult to solve. Why is this? Let's say if 33% of the stake is adversarial, 66% is actually honest. Okay, but the 33% of the adversarial stakers are not just failing to include transactions from others. They actually will not build on a block in which those transactions are included. Why are they doing this? Maybe they're doing this for legal reasons.
00:08:42.210 - 00:09:30.360, Speaker A: Maybe they're doing this for economic reasons somebody gave them a bribe to say that, hey, I don't want this guy to refuel his collateral before liquidation occurs. You guys all go and make sure that that transaction never gets included. So this is a significant problem in censorship. Okay, so an example of an attested censorship is when blocks are being built, there is a block, this uncle block that you're seeing here in dotted lines, and nobody builds on top of it and starts attesting only alternative blocks. So now what has happened is there was a proposal which included the transaction. It just never gets into the main chain, and therefore it is as though it didn't exist at all. So this is a big issue.
00:09:30.360 - 00:10:36.394, Speaker A: Okay, so what can we do about this? Can we try to enhance the observability of uncle blocks? How do we do this? So the first thing is, if there is a certain fraction of adversarial stakers and they're actually censoring these blocks, then what happens is, if you are using any standard byzantine fault tolerant protocol, a protocol which just finalizes each block as it comes, what will happen is this block will get proposed and will not get enough certificate, and therefore, there is not even a block in regular BFT protocols. Ethereum actually has a little bit of a different kind of a protocol called gasper. In the consensus layer, which basically has a layer of liveness. Blocks keep getting proposed. They just don't get attested and finalized. It turns out this actually performs a vital function of observability. Okay, so this is one of the kind of core designs behind the Ethereum consensus protocol is that there is a layer of liveness and a layer of safety built on top of it.
00:10:36.394 - 00:11:43.164, Speaker A: And so you can start seeing that there is a pattern of blocks. There's a bunch of blocks, and then you can see this proposed block, which is not on the main chain, and people have not voted it. So actually, this is already very useful. However, there is a problem. The problem is, if you see a pattern like this where there is a bunch of blocks and then there is a forked block, you cannot attribute whether it is because of network latency that this block didn't get included, or it is because of intentional censoring, because both of them look alike. If this block came in and the nodes basically didn't observe the block and then they continued building, or it might be that this block was intentionally censored, how do you disambiguate between the two when you see a pattern like this? So that's what the rest of the talk is going to be about. Okay, so what we propose is this gadget called revere, which is a mechanism to solve for a tester censorship.
00:11:43.164 - 00:12:20.264, Speaker A: So the first point here is a slight change in the inclusion rule. It may already be what most of the consensus notes use. The transaction inclusion rule is when a proposer proposes a block, it must include transactions from recent uncle blocks whose transactions have not been included in the fork. So you see a transaction, and if you're proposing a later block, you must include these transactions. That's a rule. Okay. And you can set some threshold, you say, like, the fork transaction should have at least paid significantly over the base fee or something like that, so that you don't have to force include every transaction.
00:12:20.264 - 00:13:02.916, Speaker A: But somebody who's trying to get their transaction in, we need to give them a certain quality of service that actually they will get included. So this is a transaction inclusion rule. Okay? If you're running a client, you have to follow this. If you're using PBS, you have to make sure that the relays will have to make sure that this is actually the case for the proposed blocks. Okay? So now something powerful starts happening. If you see a pattern like this and you see this transaction, and then eventually in the chain, that transaction gets included, you're like, okay, these guys are not intentionally censoring because this transaction was eventually included. They used the proposed inclusion rule, and eventually you can see that the transaction is included.
00:13:02.916 - 00:14:23.566, Speaker A: So you can infer or assume that it's because of network latency that this block didn't get included in the main chain. However, if you see this pattern where you see a transaction as an uncle block, and then other blocks keep getting proposed, and this transaction is never included anywhere in the future, then you can infer that the cost is a tester, censorship. Okay, so that's the basic idea. You have this mempool rule, which is that take extract the transactions which are paid beyond a certain fee from reason blocks, and then you have to include them in your block if you're a proposer. And this rule basically enforces a social consensus, where by looking at the structure of the blockchain, you can infer socially whether attested censorship is happening or not. Okay, so now how do we propagate this information? So who is observing this and how do we propagate this information? So one of the problems with any of these methods is we need a lot of nodes to be observing the blockchain to see for these patterns in order to establish social consensus that censorship is actually happening. And one way to do it is you can start building sophisticated light clients, which can enhance observability.
00:14:23.566 - 00:15:04.922, Speaker A: So what is the idea here? A slight variant of this light client rule is basically that you download and do sampling, which is just to ensure that the block was available. You download block headers. It should say download headers. You download the block headers and sample blocks, not only blocks that are well attested, but also blocks that are proposed by valid proposers but not attested. You do this. So now what's happening is everybody who's running a light client actually is seeing the pattern of headers. This structure from the previous slide is transparent to anybody who is actually observing the blocks.
00:15:04.922 - 00:16:24.066, Speaker A: Even though they won't see into the blocks and see the transactions, they definitely know the structure of the block headers and at what times these block headers are released. So this actually creates a very significant incentive for not doing a tester censorship, because now light clients can bear testimony to whether censorship is happening or not. So instead of light nodes only being checking validity for their own selfish purpose, which is one way of using light clients, here, what we're doing is using the light client as a technology to enforce and monitor the commons, the Ethereum commons, and make sure that validators are behaving according to the covenants that they signed up for. So once you have light nodes, bad testimony to a tester censorship there is a strong social consensus that has been established on whether censorship is happening or not. All of us know whoever is running a light client has observed the pattern of headers and can later open up the blocks and see that, oh, this transaction was proposed here, it has not had been included in the series of blocks. And immediately you can use this to do slashability for a tester censorship. And there are technical details in how you can use inactivity leaf to perform slashing.
00:16:24.066 - 00:17:38.682, Speaker A: This is already well known in the Ethereum research community. Okay, so what this does, remember, I proposed not only that the concept of censorship resistance is important, but also we need to get the sharp time to censorship resistance. And one way to think about it is if a transaction is censored by our testers beyond a certain time, then you can actually slash these guys. So that's what the observability gadget revere gives you is this information that the testers are actually censoring is now widespread and available to everybody who cares to monitor the Ethereum system via light node. And you can use this to actually then establish strong social consensus to censor nodes. What this does is along with an assumption that certain fraction of proposals are honest and will include transactions which pay a certain fee, you can actually start getting tight economic guarantees on censorship resistance. If transactions get censored beyond a certain point, you can be sure that you see this pattern in the blocks and because you're seeing this pattern in the blocks you will be able to slash a majority of the stakers.
00:17:38.682 - 00:18:20.714, Speaker A: So with that I conclude the talk. I just want to make one point here which is how this idea fits in with the Ethereum roadmap. One of the ideas in the Ethereum roadmap is that even if builders are centralized, block builders are centralized and high power block proposers can remain decentralized. What we're doing here is to take this one step further. We are saying even if block proposers are centralized to some extent, only a small fraction are decentralized. By having like clients to be highly decentralized who are monitoring the comments, we can actually ensure that these bad proposals are held to task via slashing. So that's the idea of the talk.
00:18:20.714 - 00:18:21.480, Speaker A: Thank you so much for the time.
