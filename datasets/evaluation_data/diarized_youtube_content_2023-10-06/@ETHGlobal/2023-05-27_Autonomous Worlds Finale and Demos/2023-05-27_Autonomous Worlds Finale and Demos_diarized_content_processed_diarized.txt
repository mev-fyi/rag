00:02:32.440 - 00:06:51.456, Speaker A: Sam. Sam. Sam. Sam. Sam. Sam. You always feel WAM.
00:06:51.456 - 00:22:10.724, Speaker A: We it. It. Good morning, good afternoon, and good evening, everybody. My name is Kartik. Appreciate all of your patience, and I'm super excited to welcome all of you to Autonomous World's finale. Let's see how we're doing. So all of you are watching this on ETHGlobal TV, and for those of you who are joining us for the first time, this is what we're going to be using to stream everything, which means that you can talk to us, you can talk to all of our demos today and ask any questions.
00:22:10.724 - 00:22:59.430, Speaker A: We'll be able to look at everything and respond to you, but let's quickly get started. Autonomous Worlds is brought to you by Ethg Global. And for those of you who are joining us for the first time, ETH Global is an organization with a very simple mission. Our goal is to onboard thousands of developers into the Web three ecosystem, and we do this primarily by running hackathons and summits, both in person and online. But this event is a hackathon, and we're excited to tell you all that's happened in the last seven days. We've had 435 hackers from 51 different countries participate in building on Autonomous Worlds spanning 22 different time zones. We kind of looked at where people were coming from, and we're super blown away to see representation from six different continents across all these amazing cities and countries across the world.
00:22:59.430 - 00:23:53.544, Speaker A: And on top of that, we had ten incredible mentors who were there to tell everybody what is the most amazing stuff you can do on top of Autonomous Worlds and Mud. And six incredible partners who are going to be announcing all the incredible prizes you've won through all of them. In total, they're giving away $50,000 in prizes, and we're going to talk about everything that came out of this event and who won what prizes. I want to give a quick shout out to our six partners zero X Park Lattice Optimism Filecoin, lithium foundation, and NFT Storage. You'll be learning about all the prizes very soon. Now, before we go into all these things, we just have a quick action item for all of our amazing hackers. After you've submitted your project, you would have seen this prompt on your dashboard, but we really want to understand how we can make all these hackathons even better.
00:23:53.544 - 00:24:18.848, Speaker A: So there should be a quick feedback form on your hacker dashboards. You can also go to this URL directly, which is Ethglobal.com eventsautonomousfeedback. There's about six to seven questions in there. A lot of them are simple. Rate this out of one to ten, and anything that you kind of tell us there will help us make the next one even better for the next thousand people. All right, enough of the intro.
00:24:18.848 - 00:25:08.152, Speaker A: Let's go into what the last few days have been about. We have 435 of these hackers build a lot of incredible projects, and in total 109 things were built on top of Mud and Autonomous Worlds. From those 109 submissions, we picked ten finalist teams. What we'll be doing today is bringing those teams on and they'll be demoing all of you what they built with a live demo of their project. I want to quickly shout out all these ten incredible teams. So our ten finalists are op Craft two coin race, autonomous Game of Life netherscape, Mud, VRF, Realm of Pepe, Isle of Colors, garnett PFP wars and Trade Wars. They are going to be the ten demos we're going to see here in this live stream.
00:25:08.152 - 00:25:52.940, Speaker A: And I want to congratulate to these ten teams for their amazing accomplishment. Now, before we go into the first demo, I also want to take a quick second here to thank the 99 teams listed here for doing something incredible in a very short amount of time. What we can see and do with Autonomous Worlds is very much of a growing idea in a space. Being able to play with all these things as they're being developed help improve how we can standardize anywhere from the SDK to the experience to the possibilities. It's an incredible thing. And just because you were not one of these ten teams does not mean you were not good enough. We want to make sure that you have the recognition and the opportunity to really showcase and be proud of what you built.
00:25:52.940 - 00:26:30.008, Speaker A: And there are a lot of you here who have won prizes who are not also our ten finalists. So stay pretty well. Just be patient. Stay focused on making what you built even better. We really hope that a lot of you will continue pushing code to what you submitted two days ago. And if you need any help with anything from here on, whether it's getting connected with some of our mentors or people in this space, don't hesitate to ping us and we'll be happy to help you with anything that we can from the ETH global community and the ETHGlobal Network. And all of you can now also head over to Ethglobal.com
00:26:30.008 - 00:27:03.364, Speaker A: Showcase to see all the 109 projects that came out of this event and that'll include all the things from what they built, how they built it, and some amazing video demos and some screenshots. Enough of me talking. Let's go into our very first demo. So for our first team that's going to be demoing what they built, I'm excited to bring on Realm of Pepe to show all of you what they created for this event. So without further ado, let's welcome Realm of Pepe. Great. Thank you.
00:27:03.364 - 00:27:36.792, Speaker A: Hey, everyone. We are the realm of Pepe team. For our hack, we built an adventure RPG, taking inspiration from our favorite classics from Super Nintendo and early MMO Era and combined it with our passion for Pepe, memes and composable on chain assets. I'm Vijay and these are my teammates joanna, Nuno and Mick. We all work at superfluid. So game assets are conventionally managed by a single developer and not freely portable by users or composable. But even onchain assets have some hard limitations in terms of the scalability of ongoing payments and transfers.
00:27:36.792 - 00:28:27.680, Speaker A: Every change in balance requires onchain transactions. We wanted to demonstrate that the way game resources are usually represented on chain can be made significantly more powerful by enabling asset streams of superfluid and this consistent multiplayer world state with mud. Moving on to the demo, the player characters are wizard Pepe's, summoned to defeat the evil Pepe at the end of the game. To beat the area in the excerpt, the player has to build five magical soldiers. A three step process involving resource gathering, trading and building. UX here is radically simplified with the use of integrated burner wallets. So first up, the players have to go and locate some resource nodes scattered around the map and receive their resource in ongoing stream.
00:28:27.680 - 00:29:32.688, Speaker A: These resources act like a faucet and the player starts receiving an ongoing stream after accessing them. After receiving some sapphires, the player can head to a trader to swap crystals for blue potions, another interaction which goes ongoing stream. I think we need to switch screens over, sorry, we can only see the slides and checking the inventory in the game the player will be able to see a net inflow basically from these resources as they're being received. The second step is basically trading. Here you go, lovely. Second step here now is trading from those sapphires that have been received to blue potions which are the kind of second stage in this crafting. You can actually see that in the player's inventory that the flow rate of sapphires is reduced because you now have an outflow and there's an inflow now of these blue potions.
00:29:32.688 - 00:30:24.950, Speaker A: And the final stage is the player heading to a summoning area where they can actually start crafting soldiers by sending them a stream. So if the player heads to the right there's actually a summoning stage and by clicking on this one button a transaction is initiated and that stream is started which actually mints an NFT and this is an evolving NFT. So you'll be able to see as the player opens up the inventory that there actually are several stages. Completing these evolving NFTs in each zone will unlock the next zone. There are four zones planned with the final containing the game's final boss and Evil Pepe. And the game ends when enough resources from the final stage have been streamed towards Evil Pepe and players collaborate to complete the round in the shortest time and get on the leaderboard. And now you can see here the NFT in the bottom left hand corner is evolving to its final state.
00:30:24.950 - 00:31:34.832, Speaker A: So explaining the game's resources and economy, we built three different types of stream enabled contracts to power the streaming game mechanics. This hackathon a special case of faucet for the resource nodes traders which enable different input and output flow rate for flowing trades and evolving NFTs, which take a stream to progress over time. And heading back to the presentation, you'll actually be able to see these animated between several different stages. These mechanics are highly scalable, enabling infinitely ongoing value transfers without further intervention required, which is why we think it qualifies as a core building block of autonomous worlds. The surface area for expanding this game is massive with its token mechanics and fully onchain assets. We see these primitives generating resources, trading assets, and potentially infinite token syncs as the building blocks of a new game ecosystem built around openness and interoperability. Massive scale asset flows can be running between a huge number of parties without any additional transactions needed, and merchants could act as the bridges between games with different resources and win conditions.
00:31:34.832 - 00:32:07.962, Speaker A: Ultimately, we hope to see players and game developers adding their own storylines by contributing new loops to the economy and new assets to this canon. Thank you very much. Amazing. Thank you so much for our first amazing demo. This sounds really cool and hopefully we all get to play this very soon. Congrats. All right, on to our second finalist demo for the day.
00:32:07.962 - 00:32:37.178, Speaker A: I want to bring on Team netherscape. Hello everyone. We are netherscape and we are building an onchain RPG world using Mud. So before we dive into the exciting features of the game, let's go with our mental model first. So we started with the three basic elements in a traditional RPG game. Then we refrain them under ECS so that we can map out a list of entity functionality relationship. You guys can go over it later.
00:32:37.178 - 00:33:17.562, Speaker A: I'm going to just pass on the other slide. The first slide. So then with that map, we realized PC playable character actually sits in the middle of the map and has more functionalities than any other entity types. So actually we realize there's actually nothing stopping us from making every non playable character NPC playable. So we call it PC Centric mental model. So with that in mind, we build four features during this hackathon with ease, using only 13 tables and seven systems. So yeah, let's get started.
00:33:17.562 - 00:33:36.430, Speaker A: Let's take a look at those features. Okay, maybe this one. Yeah. Okay, so you guys can see it. So first feature is taurus shaped map. I mean, there's no boundary on this map. The players can literally just crawl to everywhere.
00:33:36.430 - 00:34:20.662, Speaker A: And let's crawl over here. So the second is Loan system. So as you can see from this guy, he got three PC payable characters under his command so he can offer one of them and then which will appear on the loan market. Of course he can resign the offer, but let's not do it right now. So third is he can siege on the map. Click this, let's switch to another player. Okay, so this guy, little guy, he's walking over here and then if he steps on the red zone.
00:34:20.662 - 00:35:02.666, Speaker A: Boom, they goes into combat. Okay, I switch back to the original one. So as you can see, it's two blast away. It's like block based kind of battle mechanism. As you can see, different PCD generate energy differently and each attack kind of using different amount of energy. Okay, so this guy, we just take a little bow on this guy. So switching back on the unfortunate player here.
00:35:02.666 - 00:35:26.114, Speaker A: Remember we have a PC on the loan market right now. So that's when magic happens. Right? So this guy is one man shot so he could call onto the loan market accept and immediately he got a player injected into his team. So yeah, let's blast away. This refreshing is my favorite. That has a lot of damage. Wow.
00:35:26.114 - 00:35:45.658, Speaker A: That's one shot high crit. Very nice. And then we keep cutting open. Okay, I don't have enough energy for the cutting open. Okay. No, I did. Okay, so I won the battle and let's see, I have two PC under my team.
00:35:45.658 - 00:36:01.662, Speaker A: I still have, right. But the other guy, he's the unfortunate loser over here, he's got wipe out from the map. I think I can respond. Yeah. Okay. I can respond. So right now he has zero on his team.
00:36:01.662 - 00:36:46.870, Speaker A: Okay, he has one, but what he can do is he can terminate this contract. Remember, he loaned a PC on the market, so the duration is 150 blocks. So he still need to wait for 90 blocks to give the PC back. So while we wait, let's go back to the slide. Okay, so let's recap what we got, what we built so far, we realized four functionalities. So most important one is the reinforcement. Right? Because it's a cross function concept, when we're putting it on chain, it becomes a loan market for players, PCs, commanding, right? So what we can learn is I think this kind of thinking broadens our perspective of what we can build on chain.
00:36:46.870 - 00:37:17.302, Speaker A: We can piggyback on other rights. There's tons of them. Like remember the map, just like we did with reinforcement or ERC 20 doing with ownership rights. Maybe we can generate something more abstract, more high levels like friendship story or even love with your PC. So our next step is we're going to complete this whole chart and then we finish the game. And hopefully we can do play testing. One month, maybe not, but more exciting things to come.
00:37:17.302 - 00:37:43.050, Speaker A: And stay tuned. Our goal ultimately is we want to bring something real, something true. And so let us know what you think and which game time we should do next. Battleship spaceships or Waifus? Or maybe both. So I'm brief Kendall and this is our amazing team. I'm glad we shipped something really cool. I almost forgot.
00:37:43.050 - 00:38:06.646, Speaker A: We have this guy contract, right? Remember this guy? So let me help him to get his WiFi back. So terminate the contract. Boom, he got it back. Nice. Awesome. Thank you so much. Brief Kendall.
00:38:06.646 - 00:38:30.650, Speaker A: That was a cool way to understand how you can do all these things interactively. And hopefully all of us also get to play this soon. All right, thank you. All right, on to our third finalist demo for today. I want to bring on team autonomous game of Life. Welcome. Hi.
00:38:30.650 - 00:39:02.180, Speaker A: This is Komorebi AW maximalist and building AW house. Hi. I'm Yama P. Smart contract developer of DeFi in Japan. Today we are going to share our project autonomous game of life. What is that is MMO strategy digital biological simulation game. It is based by Conway's Game of Life plus multiplayer rules plus on chain using the mat.
00:39:02.180 - 00:39:54.100, Speaker A: One of the big challenges of the AWS space is that it's very hard to design cool digital physics because we can create anything from scratch. But for beginners like us, we should use some formats to build. That's why we built these products on chain Serra Automaton template for AWS. And we used it for MMO automaton autonomous game of life. So, here is a demo. The rules are simple. Each player can place the starting cells in the initial states.
00:39:54.100 - 00:40:51.570, Speaker A: Each cells in the game can be either alive or dead. And they're just basic for lose. And right now, they're putting AW here as a fast player. So four basic lose are the first one, any live cell with fewer than two live neighbors will die as if by underpopulation. And any live cell with more than three live neighbors will die as if by overpopulation. And any live cell with two or three live neighbors will lives onto the next generation. And any dead cell with exactly three live neighbors will become a live cell as if by reproduction.
00:40:51.570 - 00:41:45.960, Speaker A: And any new player can join anytime. So right now, the prayer two is coming and praying together. Let's pray. Third one AW here again. And if cell came into the contact with a cell replaced by another player, the cell of the prayer that fails many surrounding cells will survive. So right now, blue one is maybe changing. So it's automatically changing the cell following the rule of the game of life.
00:41:45.960 - 00:43:03.762, Speaker A: So here's some arrived of the autonomous game of life fully on chain MMO Conway game of Life. We used it mat two. We also built on chain Terra automaton template for AWS because the game of Life is one of the models of the Serra automaton. So we hope you use this template to build any models of the setup automaton on chain and making new simple digital physics and simple AW quickly. What's next is we need to have an on chain neural setter automaton template for AW. Then we can add randomness and we can build the more complex autonomous world. Yeah, pretty much.
00:43:03.762 - 00:43:23.850, Speaker A: That's all. Let's keep boosting the humans autonomous world immigration plan together. Thank you. Amazing classes. And congrats on the demo. This is great. Bye bye.
00:43:23.850 - 00:43:59.224, Speaker A: All right, on to our fourth demo for today. Welcome coin race. Hello, everyone. We'll have to try this one more time with the audio fix. Okay. Should I play again? You may have to confirm that the audio is being passed. Oh, it's fine.
00:43:59.224 - 00:44:09.864, Speaker A: We tested before, and we're going without audio on this one. All right, let's do it. Okay. Hello, everyone. We're team coin race. My name is Gile. I did the art, and here with me is Fab.
00:44:09.864 - 00:44:35.904, Speaker A: He did the development. So let's get into it, what we have built. So during the hackathon, we're interested in what we'll be capable in doing with the Mud framework. We're particularly interesting in real time and multiplayer gameplay, so that's what we built. It's a real time multiplayer strategy board game. In this game, you can play up to four people. You bring your NFTs into this game, and then you explore this map.
00:44:35.904 - 00:45:10.000, Speaker A: You have five minutes to go around the map and claim different mines. Once you claim the Mine, we're going to start generating coins for you. As you can see the green, red, and blue coins there. The goal of the game is to get as much coin as you can and then exchange those coins to stablecoin. The winner of the game is the one that have more stablecoin at the end. Everything you do in the game, you burn stamina. So we're interesting in seeing how different players will have different strategies to try to win the game by either exploring the map, claiming the mines, or stealing other people's minds.
00:45:10.000 - 00:45:47.608, Speaker A: I know this is a tech hackathon, but I want to just use 1 minute to give some tips about how we built assets that might be helpful for other people. Building similar prototypes like this, we wanted to use AI as a challenge. The first issue is it's hard to keep cohesive all the visuals for the different images you're creating. So we just slap a filter called retro Data on top of it. It looks retro, it looks cool and makes everything cohesive. The second thing is, sometimes you have an image as reference, but you don't know exactly what kind of prompt you need to use to generate similar image. Use describe upload that image on midjourney, and midjourney will give you the prompts to generate similar images.
00:45:47.608 - 00:46:11.990, Speaker A: The other thing is style you put at the end of a prompt. That's how we build the map. It makes the image stylable, as you can see very easily to create a map. And we just use a Spot healing brush tool on Photoshop, and that makes the map more organic so you don't see the repetitions there. Last is remix mode. It just generates keep the assets of the image, but generate different assets. That's how we build the mines and exchange houses in the game.
00:46:11.990 - 00:46:53.008, Speaker A: Hope that was helpful for some folks over there, but let's get into the demo. Cool, thanks. Yeah. So for the demo, what we have is the technologies we used were Mud Two with the react template and NFC storage. Also in this demo we're going to have two windows for two different contexts in the browser and to simulate two different players here as players join. So let's say like player one here is going to join the game. The client side, there is a burner wallet that's already featured from Mud and of course in a real application we link this burner wallet together with MetaMask where the players would bring in their NFTs and do the special effects the NFTs would do.
00:46:53.008 - 00:47:34.496, Speaker A: But since it's a demo, we're just using the preset of CryptoKitties for the second player you can see almost exactly the same screen as the player one. There was no extra network code to make it all happen, which is really cool also meaning anyone can spectate in this world and it's permissionless to join. So anyone with NFTs would be able to join as long as there are still players lots available here. So let's go ahead and do it for player two. Now the game timer will start. As long as the players agree to start, they're ready. So let's go ahead and do that as well.
00:47:34.496 - 00:48:24.188, Speaker A: Now the game started and in our game the players have to balance their stamina with their actions. Since the stamina as noted here regenerates, but very slowly, we want the players to develop their own strategies and at the same time react to the other player strategies. So let's see an example here. For example, our player one comes and they want to claim the Mine. They have to choose between one of the coins. So let's say they think red, they're a red maximalist, but then player two comes along and they might choose green. So in that sense, player one spent 20 stamina to get the Mine but didn't get much benefit out of it because player two just came along and started mining.
00:48:24.188 - 00:49:26.268, Speaker A: So the coins go up and hopefully they moon it in terms of stable coins and they win the game. So sadly, that's all the features we have for this demo, all the time we have for this demo. But to summarize, I already had a lot of development experience before on Ethereum and this framework did feel a lot faster to prototype and create a multiplayer game from scratch. For next steps, what we see coming is that we want to finish the gameplay mechanics. So we want to have challenges, we want to have the exchange with the key part to finish the game and then actually a screen for game end. Next one is that we want to run an internal gameplay and deploy on optimism. Right now we have a bit of an embarrassing hack that every block the players are sending ticks to the server to update their stamina and mines and stuff but we want to experiment with ticking optimism layer.
00:49:26.268 - 00:49:58.684, Speaker A: So pretty excited to try that out and see how a really autonomous world would behave in that way. I think it's going to allow for more stuff as well. And lastly and that's a bit more future, but Gillia and I are very excited to try with Zike's Narc. So similar mechanics to Dark Forest game and it allows for a lot of cool mechanics like Hidden Hands and Fog of War and all this kind of stuff. Yeah. Lastly, you guys can follow us at Rugger Games on Twitter as well for updates. That's all.
00:49:58.684 - 00:50:14.588, Speaker A: Yeah. Thank you. Awesome. Congrats. And that was a great demo. All right, thank you. All right, next up is our demo aisle of colors.
00:50:14.588 - 00:50:48.204, Speaker A: Welcome Al of Colors team. Feel free to get whenever you started. All right, thank you. So hey guys, I'm Saurabh, and the project I'm very excited to show is Isle of Colors. It is a 3D Isometric multiplayer game that aims to offer sort of a unique blend between social experiment, color strategy, and color theory. So here's a little sneak peek around the game like the best it looks in the MVP. But before entering into the game, let's talk about the main code loop of the game.
00:50:48.204 - 00:51:30.090, Speaker A: So when you enter the game, it will be a blank canvas. You will start with nothing. So you will sort of in this time wander around in the world to explore other player towns, other player buildings, and other forests. So after you wander around, gather some resources, you can start creating your own towns and buildings. But the catch is that none of the buildings or your town buildings will have colors. So the game revolves around this concept is that you will have to fight to gather color resources together, different unique colors to get color inventories so you can color your own buildings. We want the experience to something like minecraft and we want to create the attachment to the world.
00:51:30.090 - 00:52:06.292, Speaker A: Let's enter into the game. So when you enter into the game, it is a blank canvas. So you will sort of wander around, gather the resources. But for the sake of this demo, there's already things that you can sort of place around. So you can place a hut, some other building resources can rotate around. Then when you click on Save, all these objects will be stored on the mud, on the on chain using mud and also for the colors. It's already colors in this demo as well.
00:52:06.292 - 00:52:40.240, Speaker A: So there seems to be a little small bug, but it's also unique, interesting that you can blend colors to create another interesting colors. And then you will have to color different parts of the buildings differently. So that creates a real sort of fun experience. And then you can also color sort of buildings. You can lighten up the buildings and then color a bit of orange. As I said, you will color through nothing. So you will have to wander around the world to color your building.
00:52:40.240 - 00:53:18.124, Speaker A: So you will go and end up in places like this. This is called Tree Spirit, where if you get close to it, you will get some colors, maybe like unique color, maybe a common color. So these places create a very interesting point of interest for other players. So fight around to gather as much colors resources as they can, so they have bigger color inventory. And you'll also see now there's also a D night cycle in this game. So you will see that it turns darker and you'll see that the color of the building is now gone. So it creates another interesting dynamic into this game.
00:53:18.124 - 00:54:16.956, Speaker A: Like you have to get close to the building to see what they are colored, so you can scoop the colors out of those buildings, which creates another interesting dynamic. You can hide behind the buildings from other players, from other counts there, like you can see on the on chain using Mer, the building's position rotation has been stored, and for the character, their positions has been stored around the caveats. In the future, we really love beautiful graphics. We want to make sure we go to the edge of the graphics on the web. So we will be, in the coming months, porting this to a new Wgpu framework and then add some cool array shaders so it looks way more beautiful. We do acknowledge that the current game loop is kind of like somewhat uninteresting. So our goal is to make sure to have the attached so players have the attachment to their word to their terms that they have created.
00:54:16.956 - 00:54:44.104, Speaker A: And they have really fun experience with the other players, like stealing colors, managing their color shoshes and using the powers of the web three. We can create some interesting dynamics in this game. Like, for example, some players will have very unique colors, and using ERC line 55 and SFTS, they can sell those colors. Like it can create a real interesting tournament. Sam, thank you for that. My name is Serb. I worked on this front end of this game.
00:54:44.104 - 00:55:05.760, Speaker A: Shubham worked on this packaging of this game. If you want to check out how the game is built, all the languages it uses, all the libraries, so you can check out the GitHub and the ETH Wobbling. That's it. I hope you enjoy this experience. Thanks, Sarv. This was a really cool demo and a really good way to think about a new geometric game. Congrats.
00:55:05.760 - 00:55:25.172, Speaker A: All right, with this, we are halfway at our finalist demos. So up next, demo number six, PFP War. Welcome, Vincent. Hello. Hello. I'm going to present PFP War. I'm very happy.
00:55:25.172 - 00:55:50.780, Speaker A: Just a quick introduction about us. We are four developers. We work at Comet IO. We create blockchain infrastructure, tools and web three games. We are French and we are based in Paris. So what is Pfpy? Pfpy is a collaborative game where players use their layer one Ethereum mainnet NFTs on layer two via Met framework and. Storage proof.
00:55:50.780 - 00:56:47.424, Speaker A: This project is very inspired by Reddit PIXELA and this project was a huge success. Let's go for a demo. As you can see, other players can drop their NFTs and take the control of the map in real time. And I want to play, so I have to connect my wallet, I have to prove I own the burner wallet generated by Medframwork. And let's go here. This is all my NFTs I own on the layer one and I can drop this one here. And I can try to replace this ash mask by my ash mask and we have a cooldown so I can drop it again during one minutes.
00:56:47.424 - 00:57:20.990, Speaker A: And we develop panel to test to drop some NFTs I don't own. And because the storage proof is not valid, this transaction will fail on Gen. So that's it for the demo. Let's go back to my presentation. Why is this project for this hackathon? This is our interpretation of an autonomous world. It is trustless, collaborative and user generated. This is in real time and our ID is very easy to understand.
00:57:20.990 - 00:58:03.080, Speaker A: We don't have any graphic designer on our team. So we decided to build an existing asset. And we are trying to use the Network effect by targeting web three community who like to flex their NFT. And there is a lot of technical motivation proving the ownership of that layer one NFTs on layer two is very powerful. We don't need any bridge or any oracle. This is a big challenge to make this Verifier as precompiled in Op get. And the last technical motivation was to discover and stress test the mute framework.
00:58:03.080 - 00:58:38.870, Speaker A: What have we done precisely? We have developed an ethereum merkel patricia, tree proof, verifier and solidity. And we wrote a big article. If you want to use storage proof on your project on layer two, you can follow this article. We also developed web games that use our Verifier. And finally we develop a pre compile of this Verifier and the code is available here. And that's it. This hackathon was amazing.
00:58:38.870 - 00:59:08.572, Speaker A: We improved a lot of our understanding of EVM pre compile and all the ethereum state is stored and the binding features of Med framework is very cool and the organization was cool. So that's it. Thank you. Awesome. Well, congrats on a really cool demo. And yeah, this is one of those things where we also get to see composability for Autonomous Worlds. Thank you.
00:59:08.572 - 00:59:32.532, Speaker A: Amazing. All right, next up is Tradewars. So without further ado, let's welcome the Trade Wars team. Hi, this is Tradewars, our project. My name is William. My name is Cameron and Comment wasn't able to make it today. So first we're going to go a little bit over our world.
00:59:32.532 - 01:00:18.388, Speaker A: The world is entirely on chain and procedurally generated using perlun noise. To do this, we've created a two layer system of terrain and objects. The terrain includes various steps of ocean as well as varying heights of land. So this includes shallow and deep oceans, as well as sand, grass and mountains. Objects sit on top of this terrain with applied restrictions for their particular location. Our true objects currently include reefs and ports, where reefs may only spawn in shallow oceans, and ports may only spawn bordering water. To enable player movement on this on chain world, since we can't use a fixed update function like in traditional game development, we need to get creative on how to determine where the player is.
01:00:18.388 - 01:01:12.592, Speaker A: So we made a positioning system based on chunks, much like Op craft. Upon entering and leaving a chunk, a transaction is made. This world's onchain quote unquote physics requires that you take a certain amount of time to sail across a chunk as a function of distance, speed and time. Further restrictions are added to ensure that players can only move on water adhering to the onchain world. This provides both security to prevent players from cheating while playing directly through the command line and a seamless experience from the front end. So, for the economy, we've implemented multi asset balancer pools, and the idea is that each port has continuous generation and consumption of various different assets. Now, naturally, this opens up the opportunity for arbitrage, as you have one port that maybe has more iron and another port that needs a bunch of sugar.
01:01:12.592 - 01:02:00.754, Speaker A: And the resources that we have in the game are iron, salt, sugar, spices and coins. For the gameplay, we have a few different options. So there is attacking, which also appears on chain physics. These require that the players are in certain chunks and they may not be in a port. So a port is deemed as a safe location for when you are not quote unquote online looting. Once you've attacked a player and they have died, you may loot their goods. So this adds a game element of danger to the game, where the high seas may experience some robbery trading, where trading between the different ports.
01:02:00.754 - 01:03:02.330, Speaker A: So you can either trade what you've just purchased at a different port, or what you just looted the deaf functionality from attacking, from trading, you may earn coins. And these coins can be used to purchase upgrades which include your cargo capacity, the speed, the firepower and fire rate, and health regen, which is also bound to onchain physics, where you must stay in a port for your ship to rebuild over time. So for our AMM, I think this is one of the first, at least constant function AMM, constant product AMMS in Mud. One of the issues is that there's no ERC 20s native to Mud. So we have to have a lot of this, like, rote logic right over here, which makes it a little bit of a pain to build. But we also added the ability to do LPs within this AMM, and the AMM contract funneling up also manages the token logic. So being able to do transfers approvals.
01:03:02.330 - 01:04:04.922, Speaker A: For Tech Stack, we're using Mud, and then obviously for a front end, we're using Beat and then optimism. We deployed the optimism testnet for your quick demo. Over here there's a quick description of the game. Then over here you can see the train that's been generated along with some of the perlin noise. There's no ports on the map right over here, but if there were to be a port, we'd be able to click on the swap button, sell for coins, buy for coins, add the LP tokens, move LP tokens, and then swap from one asset to the other. So maybe iron to spices, just put like a random amount. So in terms of next steps, I think there's a lot of really interesting areas for new DeFi primitives.
01:04:04.922 - 01:04:56.210, Speaker A: So like lending, port ownership, maybe you can even have tokens reports in the same way that each AMM has a token that represents maybe the claim to the cash flows. What would also be really interesting is the fact that given that we have an AMM and it's an integration with broader blockchains, if we deployed an optimism for instance, might be able to have like an ETH coins pair. Where people can directly cash out their earnings via the in game AMM without having to rely on maybe some external AMM and some other clunkiness and a more refined UI. That was it. It was a really fun experience building with Mud and excited to really see Mud develop out further. William and Cam, congrats. And hopefully we get to see a lot more of these AMM related primitives be used into a lot of these autonomous games.
01:04:56.210 - 01:05:14.802, Speaker A: Sweet. All right, three more demos to go and then we'll get to all the amazing prizes. Our third last demo is hello. Hello. I'm Isharmon. I'm going to present Garnet. Garnet consists mainly in two parts.
01:05:14.802 - 01:05:55.380, Speaker A: We have Garnet, that is a backend. It's the game backend, a transaction indexer, a Fowser, a transaction generator. It's everything that needs for it's going to take care of everything that the client should or it's currently doing in mal. But we are delaying everything to the backend. And then I created a game, a simple game, a term based game called Ethernet Relations, to demonstrate that the back end is working fine. So for this demo, we are going to run Garnet. Here is the debugging tool, where you can see the chain height, the chain ID, the latest events, and the current tables for these words.
01:05:55.380 - 01:06:29.886, Speaker A: So I make a small script that is just a generator. It's going to create ten different words so we can see in real time that the tables are being updated. So it's really nice to have a tool like this when you are trying to understand what is happening on the EVM side of the game. So, yeah, I decided to create this small CLI. This Garnet process is also running the game server based on WebSocket. So we are going to run a client. This is the player one.
01:06:29.886 - 01:06:57.350, Speaker A: Here we can see that there is a lot of matches already created. This one was the result of the script that I previously run. But for the sake of this demo, I'm going to create a new game with player one. This one is the it's just a simple CLI game. You can see the current card information, the game status on the left side. And then you can see the bower. You have your base and the enemy base.
01:06:57.350 - 01:07:34.814, Speaker A: And here is on the bottom screen. You can see EAD is the ID of the current match. So let's create a new player. Player two that's showing this match is the here, this one. So as soon as the player two joins, we can see that the player one gets all the information updated. Everything is being processed by the back end, but all the game logic and the tables are being created using map two. So for example, we can summon a unit.
01:07:34.814 - 01:07:55.386, Speaker A: If we click on the unit, we can summon it. You can see that the current manner reduces to two. Two is the cost of movement. So we're going to move. Yellow square are signaling that you can move to that square. It's based on the movement of each of the cards. So I can enter.
01:07:55.386 - 01:08:14.000, Speaker A: Then this is red because it's no longer my turn. It's the enemy turn. So I can move to the player two. Summon a couple of cards. You can see here all the UI is being automatically updated. I have no more mana. Let's enter.
01:08:14.000 - 01:08:45.738, Speaker A: Let's move again. I'm just going to attack the player. So you can see that the health points RV are getting reduced when you attack. So the way that I created the attack is you can attack units that are nearby, your current selected unit. So it's red. You can click Attack and the health points gets reduced and you can do the same here. And the unit dies and gets removed from the board.
01:08:45.738 - 01:09:30.866, Speaker A: The game ends when the health of any of the bases reaches zero. Health point. So this is like a quick demo of what I built. If you want to learn more about everything that was built, everything was written using Golang. You can check the repo. You're going to get the information on the indexer database backend, the CLI, the logging tool, the transaction builder, and the CLI. The idea of why I created this project is for the future plans where my intent is to move all the optimistic predictions that currently Matt is doing on the client to the backend and having like a smooth way to play the games.
01:09:30.866 - 01:10:14.278, Speaker A: Instead of just predicting for the player that is currently sending a transaction, we can send the predictions to all the players and maybe reduce the latency instead of 1 second to maybe 100 milliseconds. And it's going to smooth all the games and it's going to be much smoother experience. Then I want to improve the game, adding abilities active and passive. And then I want to finish refactoring the CLI client and maybe create a Unity client in the future. If you have any doubts or want to try it out, feel free to reach out on Twitter or at GitHub and we can chat. Yeah, that's garnet. Thank you.
01:10:14.278 - 01:10:28.300, Speaker A: This is super cool. And people can also try this out right now. This is great. All right, two more demos to go. So without further ado, let's welcome John from Mudvrf for our second last finalist demo of the day. Feel free to get started.
01:10:28.830 - 01:11:13.038, Speaker B: Hey, everyone. Thanks for inviting me here. Today I'm going to present on Mudvrf, which is a secure, fast, and easy to use RNG for on chain games built using Mud. So today, when you're developing apps with Mud, it's like, pretty hard to access secure randomness. One short term solution is to use pseudorandimous, such as the Block hash. However, in the long run, this is sort of unsustainable for most applications, as it allows malicious parties who aren't even that powerful to predict outcomes of certain transactions which can affect the fairness of the game. The traditional solution for this is to use sort of a randomness service, and a lot of these random services exist on other chains, such as Optimism and Arbitrum.
01:11:13.038 - 01:11:55.218, Speaker B: However, because a lot of these Mud built games rely on the fact that Gas is really cheap on these chains, a lot of these randomness services don't exist. And even if they did, it's really hard to simulate receiving this randomness in development today when you're building your Mud game. So it really needs to be optimized for the current Mud development stack. It needs to be super easy and quick to install once you bring your game to production. So, first of all, I want to give you some context as to what a verifiable random function is. So basically, a verifiable random function is sort of like a pseudorandom function that provides proof, proofs that its outputs were completed correctly. And this is a really good way, basically, to get randomness on chain.
01:11:55.218 - 01:12:35.026, Speaker B: And basically, if you use it within a smart contract, it gives you like three properties. One is that it's unpredictable by the user who is requesting for randomness. It's fair, as in all the numbers are equally likely to be used. And also, it's very random because we use some on chain randomness that's very hard to predict. So the solution I came up with to solve the problems I mentioned before is to basically build a VRF plugin for Mud. It's basically a module that automatically installs certain tables and systems into your Mud app so that other systems can query for secure randomness. And the magic of Mud modules are that they can be installed within minutes.
01:12:35.026 - 01:13:12.430, Speaker B: So I'm hoping to make it as easy to set up as possible. And basically to make it super easy to deploy and to optimize it for the Mud use case, I optimize for two properties. So one is that it's reasonably secure. So in particular I designed it so it requires the collision of the chain itself or the person who's operating the chain and also the VRF operator. And then furthermore, I really optimized to make the VRF as low latency as possible. Like a lot of the VRFs that are in production today take like up to 30 seconds to get randomness. But I really made it so it's super low latency and requests can be often met within a second or within seconds.
01:13:12.430 - 01:14:03.038, Speaker B: So the design of my system is quite simple. So basically, let's say you're a developer and you want to build some sort of card game where you want to deal the cards randomly. Well, whenever you're dealing cards from the deck, you need a request for randomness. So basically your system will query my VRS system which is automatically installed by my module for randomness. And then automatically this relayer will basically be running in the background listening for requests for randomness from an event. And basically it'll generate the VRF proof, relay it back to the VRF system and basically the VRF system will call back into a certain function inside your blackjack system and present it with some random numbers it can use to deal cards. So inside the code it's naturally based on a callback model basically where you'll have a function which is like the entry point where you'll make a request for randomness to my VRF service.
01:14:03.038 - 01:14:38.822, Speaker B: And then basically my VRF service will call back into a handler where I'll have a request ID and some random words you can use to deal cards and stuff. So now I'll give you a quick demo of how my system works with a simple game of Blackjack. I built on mud. So over here you can see that I have my standard Mud client here. On the left here I have like a simple game UI, and on the right I have the Mud debugger. So when I click Start Game, you can see that it sends a transaction here for Start Game. And you can see here actually that it makes basically this request.
01:14:38.822 - 01:15:16.550, Speaker B: It adds this request into a Mud table, basically requesting for some randomness. And basically it happened so fast that maybe it was hard to notice, but basically my relayer actually called back into the handler for Start Game. And you can actually see that the request was handled here because I delete the VRF request record from the database. So actually you might have not noticed it, but if I press Start Game here, these cards get redelt by my VRF and let's see what happens when I try to play this game of blackjack. So I got to 19. That's a pretty good hand. So then I'll stand and it looks like I won because the dealer only got 17 points, and I have 19 points.
01:15:16.550 - 01:15:59.314, Speaker B: And yeah. So basically, as you can see, all the numbers here were generated by my Verifiable random function. And furthermore, the requests are met with my relayer within a second. So in terms of some future work, I plan to improve the security of the protocol. So right now, it's sort of like a one out of two honesty assumption, but we can improve that significantly by relying on some sort of MPC or using VDFS. The one trade off here is that both of these methods have a lot more latency, which might ruin the user experience, which seems like really important in a lot of these Mud games. And furthermore, right now, my VRF plugin makes it really easy to install the contracts, but it's not necessarily so easy to deploy the relayer system, so I need to put more work into that.
01:15:59.314 - 01:16:11.750, Speaker B: In the future, I really hope to make this, like, an open source piece of software that any Mud game can use when they need to access randomness. Thank you. And yeah, I had a super fun time at the hackathon.
01:16:14.650 - 01:16:35.760, Speaker A: Awesome. Thanks, John. This was super cool as well, being able to actually now leverage off chain data and making really cool games possible with VRF. Congrats. All right, our last and our 10th finalist demo for today. Without further ado, let's welcome Op Craft Two. Bonnie, we'll better get started.
01:16:35.760 - 01:17:06.918, Speaker A: All right. Hey, everyone. I'm Devoni from Team Tenet, showing what we hacked on the last couple of days, op Craft Two Redstone edition. So all three of us are recent Uwaru grads, and we're interested in unlocking Internet native work. We think that autonomous worlds are the ideal medium for player creation. This is because the simulator Verifiably runs forever, ensuring creations never deteriorate and always function as intended. Also, creators have the option to keep their creations private, and that markets organically emerge or register them on chain.
01:17:06.918 - 01:17:45.826, Speaker A: For Providence, we decided to start with Blockbased Creations because they allow players to create anything by stacking specific blocks together and leveraging Voxel based physics. Simulation. Blocks provide a low floor to start stacking blocks and high ceiling. A block physics based world also allows for various game modes to be easily created. So for the hackathon, we chose to build on top of Opcraft, which Opcraft is by the Lattice team, and they solve synchronization between a Noa client, which is a Voxel based game engine, and smart contracts using Mud. So for our hack, we added a way to let players easily add their own physics with player defined blocks. So for our demo, we implemented redstone from the popular game Minecraft.
01:17:45.826 - 01:18:17.870, Speaker A: So for those unfamiliar, think of redstone as a component in an electrical circuit, like wires, energy source, et cetera. And by adding redstone, players can create circuits using redstone blocks and then submit them to specific tests on those circuits. So for the live demo, we didn't add any custom graphics because of time and just enabled creative mode. And here's a quick legend before I go into the demo. All the sand blocks are redstone blocks, they're the energy source. The blue and red flowers are the actual wires. So red is on, blue is off, and the orange green flowers are the redstone torches, which is an inverted knot gate.
01:18:17.870 - 01:18:51.020, Speaker A: So let's go ahead into our Op craft world and we can go ahead and build an and gate. First, let's put some blocks down. I'll put some inverted gates, I'll put a wire here, wire here. And so this is our and gate. Now we have two input signals which are both off, and output signal, which is also off because it's an and gate. When I activate one of the input signals, the output signal is still off. Only when I activate both of them is the output signal turned on.
01:18:51.020 - 01:19:26.146, Speaker A: As you can see, we have built an and gate now, and as a user, now what I can do is I can actually save this creation as mine and then use it to pass specific tests. If I just select the two corners of my creation, I can go ahead and register my creation. Now that's registered, I can submit it to specific tests. So we have an Ant test already built. So if I just select my two inputs and then my third output, and then over here on the side, I have an Ant test and a NAND test. If I submit to the Antest, you'll see we passed the test. If I submit to the NAND test, you see we failed.
01:19:26.146 - 01:20:12.468, Speaker A: And it's because we haven't built a NAND Gate. But what we allow for is composability, right? So if another player comes in this world and wants to pass the NAND test, because there's some reward for it, they can go to a separate part of the world and then spawn the and gate to be able to use it. First in building the NAND Gate, because the NAND is just an and gate with a not gate. So here I'll spawn the and gate into the world. What I'll do now is extend the and gate by just inverting it at the very bottom. Over here, as you can see, I have two inputs that are turned off and my output is on, which is the opposite of an and gate. And similarly, if I activate any of these two signals, the output is still on, but once both are activated, the output is off.
01:20:12.468 - 01:20:56.896, Speaker A: And so again, in the same way, the second player can go ahead and register this creation and pass it to specific tests to pass them, and you'll see that they pass the NAND test, but not the and test. Over here, I'll go back to the slide. Here's a quick diagram if you weren't familiar with and. In that case, this is a high level architecture diagram of how we actually implemented the extendable block physics, because Opcraft itself has no block interaction. Water doesn't flow, sand doesn't fall. We came up with a general way to allow users to add block interactions. So each time an event occurs, like a block place or a block break, we let users run their own systems, and these systems receive the center block that changed, and all the neighbors, and they can decide which components to update.
01:20:56.896 - 01:21:37.520, Speaker A: So, for concrete example, with redstone, there's a system that checks every time someone places or mines a block. Is a redstone wire surrounded by a source? If it is, it should be turned on. Otherwise, if it was previously active and there is no longer a source, it should turn off. So it's simple as that. Players can extend the physics of the world by adding their own systems that get run on these events. Two interesting feature directions we plan on exploring now that we have extendable physics is one, private creations, because creators can make their machines private hiding the specific block arrangement. So, for example, the And Gate could have been private, but a second player could know verifiably that it works and then purchase the right to use it and build on top of it.
01:21:37.520 - 01:22:04.876, Speaker A: And second provenance, this will allow us to enforce things like retroactively rewarding players who first create unique designs which inspire others. So the creative the And Gate could get paid a portion every time a creation that uses it, a Nang Gate, or a more complex circuit like a computer gets used. So that's it. We'll be continuing to develop this into a fully autonomous world. So get in touch if you're interested in being one of the first to play test. Thank you. Amazing.
01:22:04.876 - 01:22:42.952, Speaker A: Well, congrats. And I think you finally found a way for people to understand boolean algebra that actually sticks. So this is super cool. Thanks for extending Op, craft the original, and looking forward to having more things being built on this. Congrats. All right, those were our ten incredible finalists for Autonomous Worlds. To summarize, this was Team Op craft Two Coin Race autonomous Team Of Life netherscape Mudvrf Realm Of Pepe Isle Of Colors Garnet PFP War and Trade Wars If you came in a bit late and you didn't see all of them, don't worry.
01:22:42.952 - 01:23:09.032, Speaker A: This video you can rewind back anytime. But also, all the projects are available now on Ethglobal.com Showcase, where you can see all 109 projects that came from this event. All right, on to what everybody I know is definitely waiting for it's all the prizes. So let's get started. The first one is the Zero X Park set of prizes. So the best use of Advanced Cryptography goes to Mud VRF for $2,500.
01:23:09.032 - 01:23:33.320, Speaker A: PFP War will be taking in the second place one $500 prize. And Top G Chess is going to be the third place $1,000 prize winner. Congratulations to all three of these teams. Next up is the Latice prizes. netherscape is the most creative use of mud with $2,500. Swashbuckler will be taking in 1500 for the second place. And Trade Wars is the third place recipient for the $1,000.
01:23:33.320 - 01:23:55.464, Speaker A: Most creative use of mud. Congrats to all three of these teams. Onto optimism. So Optimism was giving prizes for modding the Op stack. Mud Tendo was the best and the most creative use of doing so with $5,000. In case you haven't checked this out, this is a really nice way to have a state version added to the Nintendo games. And this was super cool.
01:23:55.464 - 01:24:44.216, Speaker A: Second place goes to among Op for $3,000 and PFP war is taking in third place $2,000. Again, congrats. And the last one is NFT Storage. The team is still deliberating all those prizes, so you'll hear back on who won the NFT Storage prizes in the next 48 hours, so please be a little bit more patient. And also now all these prizes are also available on your own dashboard, so you can just refresh your project page or your internal dashboards to see what you've won and how much you've won. Congratulations to all these teams. And as a quick note on how these things get delivered, keep in mind that all these are sensitive and not final, which means that we will be looking through all of your source code and making sure that nobody cheated or everything was actually used as described in your submission.
01:24:44.216 - 01:25:28.700, Speaker A: And after that is done, then the prices will be released on June 2, 2023. So it'll be another week or so for all of this. And for some of you, there may be some KYC requirements for compliance related issues that we have to address. So if you are in those categories, you also get a separate note about making sure that we have some other information to deliver your prizes to you. So keep all that in mind, all that will be delivered to you over email very soon. And before we end this thing, I want to make sure that we get a chance to say some amazing thank yous to making sure that everybody who made this event possible was recognized. Obviously, there's a lot of people that go help make this event possible.
01:25:28.700 - 01:26:08.212, Speaker A: Our judges are volunteer speakers and partners, but mostly all of you. As hackers, it's 435 of you who made really cool things with Autonomous Worlds. This is something that we know will be a lot more bigger in the next six to twelve months, and you are the forefront of experimenting with what others will assume is normal. And that's amazing and exciting. So congratulations. I also want to thank all of our amazing judges for spending all of their Tuesdays making sure or Wednesdays making sure all the projects that submitted got the right amount of feedback and the excitement and sharing their thoughts on some of the interesting things and themes and projects that they saw were very. High potential.
01:26:08.212 - 01:27:04.028, Speaker A: So thank you to all of our judges. Also, there's a lot of volunteers that help make sure everything is running smoothly in the background. Coordinating this thing across 22 time zones in 50 countries is not easy, and these are our volunteers that make all of this possible. And of course, because so much of it is unexplored, all of these speakers made it easy for us to understand what could be possible with Tana's World. I want to thank all of our speakers for doing really cool talks and workshops throughout the last week to help understand, all of us how to take the best advantage of all these things. And lastly, from our six partners, a lot of them here again, who were constantly helping address any questions and comments and clarifying things on discord and making sure that you are not blocked on doing what you want to do with Mud and the rest of AW theme related things. And last but not the least, I want to give a massive shout out to the ETH Global Team who puts together all these things and makes sure that you have the best consistent experience across the world.
01:27:04.028 - 01:28:08.320, Speaker A: So massive shout out to Shari andrew Chan, maggie Nuno oyan Taylor Fred, Polly, Rory, Chloe, Kevin Witchy, Minnie, Anna, Moaz, Emily, Andrew and Jacob These are all the people that you've constantly seen. Address all of your questions and concerns, and they deserve a massive amount of recognition and shout out. All right, so we saw ten amazing finalists, and you may be wondering, what else could they have won and why are they called our finalists? If this is your first time purchasing an E Global event, you may not know that we don't want these events to be like competitions. Our goal is to highlight really interesting themes that people are excited about and showcase some really cool potential, impressive talent and projects. So as a result, there's no 1st, 2nd, 3rd for all these events. And if you were a finalist, you officially came first for this hackathon. And as part of being a finalist, in addition to any prizes you may have won, the ETH Global Team will be also giving 500 USDC per team member to all ten of these teams.
01:28:08.320 - 01:28:50.184, Speaker A: But that's not it. On top of all of that, every team member will also be getting ten Sepolia ETH. We know these things are super rare. Every team member will also be getting an ENS domain of their choice, not the four letter ones. If you are around for any of our in person events, you are allowed to come into any 2023 Pragma conference that we're hosting in any of the cities for the rest of the year. You will also get $100 off your Grit Latice wallet if you are interested in purchasing another hardware wallet. If you are not already a Lens Protocol handle holder, you will get your username reserved on Lens and access to the protocol.
01:28:50.184 - 01:29:22.744, Speaker A: And to top it all off, you will also be receiving individually one event entry and a $500 flight reimbursement to any of our upcoming in person events. That is in Waterloo next month. Paris in July, September, New York or DevConnect in Istanbul in November. So all that in addition to anything else you may have won from the ETH Global team. So congratulations to everybody here. This officially concludes Autonomous Worlds. But before we sign off, this would not be an ETH Global event if we don't tell you what's next.
01:29:22.744 - 01:29:55.024, Speaker A: So, without further ado, this is what the calendar looks like. Next Friday we'll be starting our online events hack FS. So we'll be talking about all the incredible things you can do with storage, the Falcon virtual machine, and also things like autonomous roles that rely on a large amount of off chain information to be leveraged and still remain decentralized. So if you're still interested in this one, check out Hackfs by going to Hackfs.com and this event starts next Friday. Then we have ETH global Waterloo. This is the event where ETH Global got started.
01:29:55.024 - 01:30:42.496, Speaker A: And we're doing this thing for the third time this year in Canada. For all of you Canadians, I saw already a few of them here. We're looking forward to seeing all of you in just about four weeks. Then we'll be going to Paris at the end of July with ETH Global Paris. Then in September we'll be ETH global New York on 22nd to 24th. And we'll conclude the year with a last in person events in Istanbul from November 17 to 19th. All these events are now public and you can head over to any of these events websites to apply, get information about signing up as a hacker, mentor, volunteer, sponsor, you name it, all that is accessible to all of you.
01:30:42.496 - 01:30:53.580, Speaker A: So congratulations to everybody. This officially concludes Autonomous Worlds, and in the meantime, enjoy some lo fi beats and we'll see you next week for Hack FS. Take care everybody. Goodbye.
