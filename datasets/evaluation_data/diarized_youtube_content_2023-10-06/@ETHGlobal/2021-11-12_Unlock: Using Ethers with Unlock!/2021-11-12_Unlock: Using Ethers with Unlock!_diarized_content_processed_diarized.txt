00:00:00.170 - 00:00:43.894, Speaker A: Give them a quick intro in a second, but I think we're going to let people file in for a minute or two, give them a fair chance to view the content. I know I've seen a few of you at the brainstorming sessions already, so thanks for coming back and thanks for participating. There will be another one at 430 today, that is Eastern time, just so you're aware. Cool. I think we are ready to go. I just got the OK if you're ready, Julian, I think we should get started. Thank you everyone who is joining us.
00:00:43.894 - 00:00:56.934, Speaker A: Thanks again and thank you specifically to Julian for gracing us with his presence. Really excited to hear what he has using Ethers with Unlock. Julian, I'll let you introduce yourself a little bit better than I ever could.
00:00:57.052 - 00:00:57.458, Speaker B: Of course.
00:00:57.484 - 00:00:58.202, Speaker A: Take it away.
00:00:58.336 - 00:01:28.462, Speaker B: Nice. Well, thank you very much for having me. Luke, thanks for organizing this. All of the global team, we're very excited to be back sponsoring and seeing what you all end up building with Unlock. So maybe I'll start with a quick introduction about unlock and then we'll move into a more specific, more actionable thing with Ethers. Unlock at a high level is a simple protocol for memberships that uses NFTs to represent these memberships. It is the idea that every creator on the web should be able to have their own little membership.
00:01:28.462 - 00:02:30.870, Speaker B: Basically people already paying access, sorry, paying to access their content, their work, their communities, their software in any way that would make sense in a permissionless decentralized way. So not using any of the existing infrastructure. Unlock has been around for about three years and we built a bunch of cool stuff, but we definitely look forward to seeing more cool stuff. Maybe as a matter of intro on my blog and I'll post the link in the chat, I don't know if that's kosher and you guys don't necessarily need to buy the membership, but on my blog I've added a little membership and only my members can read my stories. And what I did, which I think is pretty unique because creating a paywall is not that different, but pretty unique, is like I'm actually bringing all of my blog members who are people that have an NFT on chain, it's using the Xi chain to my video call. So I don't know if you see at the bottom of my screen here, it's not my screen of my camera, you see a little bar with a bunch of icons. If anyone can give me a thumbs up if they can see that, just to confirm that it's visible.
00:02:30.870 - 00:03:11.954, Speaker B: So this little bar of people here are just MyBlocks members. So that's to give you an example of what can be done very easily with Unlocked is again selling NFTs that represent memberships and then bring these memberships to any kind of application. And here I'm bringing them to a virtual webcam application that allows me to kind of overlay their faces as I chat here. So get a little bit of a gimmick but that's pretty cool. I hope this makes sense. So unlock, as I said, protocol for membership. When creator deploys their lock and we'll do that in a couple of seconds, people can then purchase a membership like mint a membership in the form of an NFT that matches this.
00:03:11.954 - 00:03:59.422, Speaker B: We're deployed on Mainnet, obviously even though that's pretty clinicy these days so I wouldn't necessarily go there. But also on polygon Xdai binance chain as of earlier this week. By the end of the hackathon we'll be on some other L two s such as optimism. It's kind of a little nugget that I give you here because it's not public yet but we'll be there and as I said, we deploy on these networks. We work with any wallet out there, MetaMask to get started, but I mean to start but anything that supposed wallet connects coinbase wallets as well. We have a bunch of APIs that allow people to do certain things on top of the core protocol such as for example, sell memberships with credit cards. So it's the only platform that allows people to purchase an NFT with a credit card in a safe way because you might imagine people could run away with the funds.
00:03:59.422 - 00:04:42.242, Speaker B: I'm more than happy to explain how that works in detail on the chat. We have also a pretty interesting support for metadata so ways to customize how each NFT looks like but also more metadata that can be collected as part of the NFT so that for example, some creator might ask their members email addresses. We support that natively. It's actually pretty easy to do and I'm more than happy to point you in the docs on how to do that with that. I think that's pretty much it for the high level intro. I think the next step for me is to share my screen and show you a little bit of how to use unlock. So I'm just going to share my screen and you see here that I was earlier on the channel or maybe actually before I start, a couple of places where you can find some help.
00:04:42.242 - 00:05:38.162, Speaker B: Obviously docs unlock protocol.com we have a bunch of docs, specifically the developer section that explains what is your high level architecture. A bunch of things about the smart contracts unlock JS which is the JavaScript library that we wrote, the subgraphs, we are using the graph and have a bunch of subgraphs as well as a couple applications. The Paywall which is the thing that allows you to embed on different applications on different websites, sorry, locksmith which is the backend. I mean, all of this explains you don't necessarily have to follow and then maybe one interesting portion and actually we'll go deeper into that specific tutorial, but a bunch of ways that you can use unlock into existing application. On the front end to lock access to media stuff like I did on my blog specifically or basically to create an Express JS application that requires users to have a membership before they can access some of the routes that the Exprs application supports. There is also a governance section that you're more than welcome to look at.
00:05:38.162 - 00:06:06.006, Speaker B: We are all on GitHub, everything's open source. None of the code that we wrote is not available for you all to inspect and see. And we have a discord. Even though the global Discord is a good place to ask for feedback or ask for help, we also have a discord specifically to unlock that you are more than welcome to join. All right, let's move on to actually deploying a lock. As I said earlier, we're deploying on multiple networks. So actually, way to go there, unlock.
00:06:06.006 - 00:06:30.302, Speaker B: You know what, let's do this. No, not the right unlockportocol.com. You would go there and then you click on App and that brings you to our dashboard. And the dashboard is what I'm seeing here. Let me actually get rid of that. Dashboard is what I'm seeing here as well, that first asks you to connect. I'm just going to connect with my in browser wallet.
00:06:30.302 - 00:06:55.654, Speaker B: As I said. Again. We support Wallet Connect Coinbase and I'm connected here. You can see that I already can switch between multiple networks. The one that are currently supported, Rinkabee, is a good one for tests and we'll just use that in a second. So by default yours is going to be empty. I have a lot of locks, which are the smart contract that original membership deployed already, but yours will be empty to get started and you can just easily deploy your first block.
00:06:55.654 - 00:07:37.526, Speaker B: So let's do the web3 gem membership here. So we'll just give it a name, sorry, membership, the duration of each membership. So here we'll pick, I think it's twelve days. If I'm correct the Akathon durations, you can pick anything between it's actually in seconds. The UI doesn't show this, but between 1 second and a million years. If that's interesting and useful for your application, then the key quantity is the number of members that you want to have so you can create artificial scarcity to say, hey, I want at best to exist. Ten members, ten NFTs of that kind, or any kind of number between again, zero, actually, which makes sense.
00:07:37.526 - 00:07:58.714, Speaker B: And I'll explain why later to an unlimited number. So just let's pick unlimited here. And the price, what's interesting about unlock is like we support any ERC 20. So you could price your membership in obviously ether or the native currency on the chain that you're on. So if it's on Polygon, it would be Matic. If it's on XDA, it would be XDI. But you can also use any ERC 20 on that specific chain.
00:07:58.714 - 00:08:45.694, Speaker B: So you could do die on main net, you could do die on polygon, you could do UDT, which is our own governance token on any chain that supports it. And that really yields really interesting application around combining say, social tokens with memberships. Say, hey, if I've got my own social money, I can charge people in that social money for accessing my content. And what I'm going to do next is obviously hit submit, which is something I'm probably familiar with. MetaMask pops up and say, hey, do you want to send a create lock transaction? Pay a little bit of gas here, I'm just going to hit confirm. And then the next step is to wait for that transaction to go through. I usually click on the mail, ask UI for that to go inspect this.
00:08:45.694 - 00:09:32.110, Speaker B: We'll wait a couple seconds. Usually is not very slow on ring to be, but let's give it a couple seconds. What's happening here, as you understand, is like a new smart contract is being deployed. What's interesting about this is like this smart contract is going to be fully owned by you, the person who deployed it. So in this one by me and Unlock Inc or me or anybody else doesn't have any right on that contract. It is really your contract. That's actually very different from a lot of NFT platforms where in practice you deploy their contract or not just their code, they still have kind of administrative access to the smart contract, which is not as decentralized as I think things should be, at least in this ecosystem.
00:09:32.110 - 00:09:49.780, Speaker B: Looks like it's a bit slow. Oh, it was mine. I just had to refresh it was mine 33 seconds ago. And again, nothing too fancy here. You can inspect the actual transaction data sent, as I said earlier, the duration, I think I picked eleven days. That's in seconds. Token address is the ERC, 20 address.
00:09:49.780 - 00:09:57.874, Speaker B: The key price is the amount of money that people have to pay. Number of keys is I picked unlimited. This is literally max.
00:09:57.922 - 00:09:58.758, Speaker A: You int.
00:09:58.924 - 00:10:44.002, Speaker B: So it's the largest number you can do and the name is the web3 jam membership. Let's go inspect the contract. All of our contracts are verified on all of the chains. So here what did I do? Oh, yes, I clicked on not the contract was deployed, the contract that was used to deploy it. We use a factory pattern, but you can actually inspect look at the contract here by clicking on this thing. This is an event for new lock and you see that the contract obviously has not seen any transactions yet. But you can inspect the code, you can access the abi, which I assume some of you at least understand, or is it at the bottom? More and more stuff in here abi that you can use and we'll use that to import in Ethers in a couple minutes.
00:10:44.002 - 00:11:12.618, Speaker B: And I need to get faster because time is running out. You can obviously interact with the smart contract using Etherscan and I'm sure all of you are familiar with this. So let's go to the next step. We provide a little what we call demo, which is a way to kind of sell or try to see what selling a membership is. So this is a fake website similar to what you can find on any news or media site. And I'm just going to click join us, which is the way to become a member to that site. It's on the brink of a network.
00:11:12.618 - 00:11:35.154, Speaker B: It's loading all of the information, the web, three Jam membership. By the way, this little UI is completely optional. You can build anything, I mean everything without it, or you can use it and customize it in ways that would make sense. I'm just going to click here because I want to purchase this and connect my crypto wallet, connect MetaMask here. I'm being prompted to pay basically 0.1 E, which is the price that we cited. It is valid for twelve days.
00:11:35.154 - 00:12:08.126, Speaker B: Click here to pay with my wallet. My wallet pops up, say, hey, you want to pay for that amount? I'm going to say yes. And then immediately we do this thing called optimistic unlocking, where we just look at the transaction and assess how likely it is to go through. We unlock the content so I can close this and I can read the rest of the article. If we go back to go back to our friends here at Etherscan, we'll have to wait for a couple of seconds, I guess. The transaction to be mined and appear. Yeah, it has been mined, so interesting, but EcoScan doesn't show it.
00:12:08.126 - 00:12:22.082, Speaker B: Let's wait a couple more seconds. I assume it's just a caching. Yeah, EcoScan has not indexed it. Yes, now it's indexed. And so we'll look here. Yes, we'll see. That transaction has been sent mine 28 seconds ago.
00:12:22.082 - 00:12:39.686, Speaker B: Let's go quickly through what happened here. Me. This is my address sent to the contract purchase transaction. So it's called purchase. There's a bunch of parameters that are there. Maybe we'll discuss this, but one of them is the value that I've sent to the lock to purchase the membership. Another one is the recipient.
00:12:39.686 - 00:13:14.210, Speaker B: And you'll see that it's actually my address. It's because I can purchase a membership on behalf of another address here I purchased on my behalf. You see, I purchased an address for myself. We also have a referral address, which is also said to be me, which is useful here because Unlock, as I said earlier, has its own governance token, its own governance mechanism. And basically governance token are assigned to the users of the protocol. So that's a way to kind of if you use unlock, you should become a stakeholder and should have a table at the governance table, sorry, a space at the governance table. And so that's what's happening here.
00:13:14.210 - 00:13:39.178, Speaker B: So let's now look at the tokens. Basically some UDT, the governance token was minted and assigned to the purchaser here. Another bunch of UDT was minted and assigned to the Protocol Maintainers, which is this address for now. And then another token was transferred. This is an NFT. You can see here USC seven to one, which is NFD number one for the web. Three Jam membership was sent and was mined out of to my address.
00:13:39.178 - 00:14:18.886, Speaker B: So that's what we have. And now I have just 15 minutes left to show you. Actually, we need one final thing. If I refresh this page, connect my wallets, you'll see that? Yes, there is one membership and the lock has received, which means that there's money on it and I can withdraw that money because I'm the beneficiary of that lock. There's a couple more things, but I don't want to go in details too quickly. You'll see that we have a bunch of integration that were built by other people doing hackathons and others in WordPress, in Discord which is using a bot in cloudflare. So you can really gate lock any website in the world, webflow Discourse, Firebase.
00:14:18.886 - 00:14:50.610, Speaker B: So you can build kind of pretty rich application using Google Firebase and allow only members to access certain of the features. We have also a couple of tutorials to integrate this to create tickets to collect memberships, donation on GitHub and things like cool. So let's move quickly to the tutorial section. So using Unlock with Ethers, we actually have a whole document here. I assume most of you are familiar with Ethers. Ethers is probably the most popular. Ethereum library.
00:14:50.610 - 00:15:20.054, Speaker B: JavaScript ethereum library. We have a package called Unlock Protocol Contract that you're more than welcome to install. That includes all of the APIs. You can also copy the APIs manually from Etherscan or from our source code if you're interested in this. And so let's build a very basic example. And again, nothing too fancy. If you've used Ethers in the past, that should be all pretty clear here we're wrapping everything in a run function so that you can use async format of JavaScript.
00:15:20.054 - 00:15:44.774, Speaker B: So basically the first thing to do is to connect a provider. We're using one of the default public EQ providers here on Rinkerb. Obviously, if you use a different network, you would use a different provider. I assume you know this. The address is the lock address. So here actually I didn't show you this, but on the dashboard, which is here, you can see the lock address here. So XB 58 is the one that we're dealing with here.
00:15:44.774 - 00:16:25.294, Speaker B: And then you can just basically instantiate a contract from the Abi. Actually, that's a good thing to add. We have multiple versions or we have had multiple versions of Unlock over the years. The current version is version V eight. You can easily see what version your lock is by just going to read Contract here and check the public lock version. Yes, here it is and you'll see that it's version eight. So you load the API eight and after this, basically you instantiate that contract with, again, address API provider, like you would do for any other Ethers library.
00:16:25.294 - 00:16:56.954, Speaker B: And then you can call a bunch of function like read the symbol, which is part of the ERC seven spec. We use key by default, the lock name. So here would be Web three Gem membership instead of test, October 20, which is something that I did a couple of weeks ago, actually. The lock version. As I said, you can go retrieve it from EcoScan. You can also manually build kind of an abi string that would allow you to retrieve this from the contract by just implementing the public log version here. And this is literally what we do.
00:16:56.954 - 00:17:24.150, Speaker B: We just create this abi object, plug into a provider and then set the address, initialize the contract and then read the log version from this. And that yields actually a big number in Ether's space that we convert to string. It's a bit more readable, at least for me. I know some people are very good at reading big numbers. That's not my case. So it's an eight. So this is reading stuff.
00:17:24.150 - 00:17:45.206, Speaker B: With Ethers, you can also obviously send transaction and modify things. So here, pretty much same structure. We're connecting to a provider, but this time now we need a wallet. So we have this fake and it's not a real one. It's a real one, but there's no real money there. You don't have to steal it if you don't want to. So basically connect with the seed phrase.
00:17:45.206 - 00:18:21.362, Speaker B: There's multiple ways to do that. Twitters, I'm going to let you look at this on your own. And then you create a signer by connecting the wallet to the provider. After this, basically you're pretty much all set. It works the same as above, have the address and then you instantiate the lock contract by creating a new contract that you point to the right address with the right API. And this time, instead of using the provider, the naked provider, you just use the signer and that will allow you to send transactions that modify the state of the lock, basically. So what we're doing here, we're going to purchase a membership, exactly what I did through the unlock times UI.
00:18:21.362 - 00:18:48.302, Speaker B: We're going to do the same thing here. So the first step is to retrieve the price. This way we know how much we have to pay. And we're constructing this little object which is called purchase params. That includes a couple of things, the amount which was producing the price and that makes sense, the recipient. So again, the address that's going to have the membership attached to it, it is most of the time the purchaser will purchase for themselves. But again, you can put somebody else's address there and you purchase a membership for them.
00:18:48.302 - 00:19:41.630, Speaker B: The refer, which is again, the address that's going to get the UDC token, the governance token of the network. And we have an optional object called Data and I'll explain maybe what that is a bit later, that by default here, we leave empty. We wanted to show an important thing is you can actually get the gas price sorry, the gas estimate, how much gas is going to be spent by this transaction. So we retrieve the gas price, we pass it through a little object that includes the amount. What's interesting about the amount, it's like what is being purchased here because this lock and the one that I deployed a couple of minutes ago actually use the default currency, Ethers, you need to actually pass the value as part of the transaction. You need to actually send that amount. If it was an ERC 20 lock, you could set that to zero as long as you have the right amount in the purchase params.
00:19:41.630 - 00:20:30.254, Speaker B: We're running the estimate by just basically using Ether's function to do this, which is basically contract estimategas method. So that's what we're doing this and we're passing the estimate as the limit. You could bump this a little bit if you wanted to be safe, but that should work right out the box. And then basically, simply this time we're going to send the real purchase by just calling contract name. So lock method, purchase in that example where all of the params are required plus the options. And the options do include the gas price, the value here because again, it's an Ether lock and the limit, once we get the transaction, we wait a couple of seconds to get the receipt and you can do anything you want with the receipt. It will include the token ID, the NFT ID that the person has purchased and things like this.
00:20:30.254 - 00:20:58.742, Speaker B: So if you're familiar with Ethers, all of this should be pretty straightforward maybe. You know what, I'm going to take a couple of seconds to actually run that with the lock that we just deployed. So I'm going to move to the terminal that I think some of you might be familiar with. And I don't know if you can see my screen, but I'm going to make this a bit bigger. Hopefully not too big here again. And let's actually go here. Tutorials.
00:20:58.742 - 00:21:31.170, Speaker B: Actually, no, let's I thought I had an example, but okay, that's cool. Let's actually make one actually. Yes, I have it here. Cool. Okay. So using a pretty standard JavaScript project approach here and let's look at this one. Well, that's the one we just looked at a couple of minutes ago.
00:21:31.170 - 00:22:00.410, Speaker B: So we're going to use the infuria provider here. We'll use the seed phrase, please don't go steal the fake east that's on there for now. And I'm going to just replace this address with the one that we just deployed, which is this one with Vuejam membership. Cool. We're going to instantiate the lock, as I said earlier, and pass this. We're going to pass somebody else's address here. Maybe we can pass you know what, we'll pass my I'm going to be on Rinkabee.
00:22:00.410 - 00:22:35.898, Speaker B: You can't actually pass Ethereum address, a random address here, that is. But they're going to get a free membership here. Let's say we'll keep me as the referral descender here and then we'll just do this. But we'll console log this time, the receipt. I think that's it so pretty straightforward here. I'm just going to code node index and I say node here because I'm doing this from the back end. But you could definitely use Ethers on the front end.
00:22:35.898 - 00:22:54.074, Speaker B: With libraries like React and others. Again, not specific to unlock very much how things normally work in the space. It is taking a couple of seconds. I assume it's because it's waiting. The transaction has been sent. I should have logged something before. And we're waiting for it to be mined at this point, hopefully.
00:22:54.074 - 00:23:12.238, Speaker B: Yes, that was mined. So this is actually the receipt. So you'll see that this is two. And this is the address of the contract from the status of the sender that's US yes, used. It's a big number. I'm not able to read this, but let's actually go look at the transaction. Hash on Rinkp Scan.
00:23:12.238 - 00:23:36.406, Speaker B: Yes, well, it wasn't the next yet, but basically all of the permission is here. So log there's three different events that are being triggered. We'll look at them in a couple of seconds. On Ether scan, obviously one confirmation the full gas used events are here and that's it. So let's go refresh. Yes, everything is here. So it's similar to the one that I sent a couple of minutes ago from the UI, where this time this address has purchased a membership.
00:23:36.406 - 00:24:08.790, Speaker B: And the funny part here is like that NFT was sent to this address, which we just picked on EcoScan a couple of minutes ago. So that person just got the membership number two for the web3 gem, some governance tokens were minted again and assigned to the sender's address. So this little address here, to this governance token. But if you go look here, I assume we can go inspect this address. That's not what we should do. Inspect this address and you'll see that they've made a couple of purchase. I use this to build a tutorial describing here.
00:24:08.790 - 00:24:44.820, Speaker B: But they have received some governance token, which is pretty cool in that scenario. Some governance token for them, some governance token for the maintainer of the protocol. Here the developer reward. Again, the NFT was minted and given to this address here, so we can go inspect it. There is two membership, web two Gem one for the one that I purchased via the content, and the second one that you can find here. Let's click briefly here and you'll see that this address that was used for a bunch of things now has a new C 71 token. The web3 Jam membership that we just purchased for them.
00:24:44.820 - 00:25:13.478, Speaker B: And I think that's pretty much it. And that's good because I'm running out of time. So I am more than happy to provide again. If you need any help, join us on Discord the Hackathons. Discord is a good place. We have team members coming look at this over the next few days, pretty much every few hours at first. I am more than happy personally to help you send I did earlier send a little bit of fake rink fee.
00:25:13.478 - 00:25:46.294, Speaker B: I did that a couple of minutes ago for some of the participants in the hackathon. Please go build funny things. That's maybe the last little hint. Oh, yes, we have prices. I don't fully remember the numbers, but I think it's about $4,000 worth of UDT token, our governance token on main net this time. So real one, not just fake one from rinkov that you can use then to join our governance, our dow and vote on what to do with treasury upgrades to the protocol and things like this. Yes.
00:25:46.294 - 00:26:08.326, Speaker B: Thank you Emily, for posting this and I'm really looking forward to see what you end up building. Maybe one little piece of advice. Don't build Frankenstein thing that tried to capture all of the rewards from all of the protocols. Like try to build something unique it doesn't use. Unlock it's. Okay. I'd much rather see fun stuff that the same project that tries to check all of the boxes.
00:26:08.326 - 00:26:22.958, Speaker B: And I know Emily and Luke are going to make faces when I say this, but please build cool stuff. Even if it's just using one protocol. It's better than ugly stuff that use everything cool. Yeah.
00:26:23.124 - 00:26:26.030, Speaker A: Would you like I can funnel you some of the questions? We have a few in the chat.
00:26:26.110 - 00:26:28.034, Speaker B: Oh, yeah, definitely. I missed these completely. Sorry.
00:26:28.072 - 00:26:34.866, Speaker A: Yes, no worries. Just came up. Any way to use NFTs that have already been minted and have communities around them?
00:26:35.048 - 00:27:05.310, Speaker B: Unfortunately not quite yet. A month from now. Yes, that's definitely on the roadmap and we have an engineer working this, so unfortunately not right now. If we do another hackathon in a month, I think that's going to be possible by then. For now, the only way to do that would be to I didn't show you this, but the locks themselves have two functions for minting. There's the purchase which the one that we use in the example, and there's one called grant key, the NFT, we call them keys because the contract is called lock. Grant key is a way to give away membership, a key for free to someone.
00:27:05.310 - 00:27:31.910, Speaker B: So you would use grant key to grant keys to the people that have another NFT. So a board ape or something like this? Absolutely free. I mean, pay gas, that's the only thing. And if you use the credit card, there's going to be credit card fees associated with this. Kevin, I'm more than happy to point you to the docs for grant keys. Please join the discord and I'll do that in a couple of minutes because. I want to be conscious of the time here.
00:27:31.910 - 00:28:05.096, Speaker B: Yes. Only seven to one. For now, we are thinking about 1155. Honestly, for now, we didn't see a lot of value in adding 1155 because each of the locks is its own contract. Like, it's really important for us that each creator has their contract and is not using somebody else's contract or they remain in control. Maddox is supported only. We're supported on Ethereum, main Net, Xi, Polygon and then on each of these chain, pretty much any, ERC, 20 or the native token.
00:28:05.096 - 00:28:18.390, Speaker B: So Maddox on xi is possible. Maddox on Polygon is the default. I guess Maddox on Main Net is possible as well. We are also on Binance chain, which again, I don't know if this is interesting to anyone, but we're there.
00:28:21.910 - 00:28:39.654, Speaker A: Excellent. Thank you so much for your presentation. That was really incredible. I'm really looking forward to seeing how things grow and I'm really looking forward to seeing how the hackers utilize this tech throughout the rest of the hackathon. Really appreciate you joining us today and everyone else for joining us from their homes all around the world, of course.
00:28:39.692 - 00:28:50.066, Speaker B: Thank you very much. Have a good afternoon. Morning. I mean, GM. I guess that's the thing that people are supposed to say these days. So GM, everyone, and have fun. Really enjoy your enjoy your time with the hackathon.
00:28:50.066 - 00:28:51.662, Speaker B: This is the best thing.
00:28:51.836 - 00:29:07.440, Speaker A: Right on. Well, everyone, like you said, feel free to continue the conversation in discord. It's a great opportunity, a lot of great resources there. But other than that, I think we'll be closing the session here. Thank you for your participation. We look forward to seeing you at the next one, I think. 330.
00:29:07.440 - 00:29:09.740, Speaker A: All right, take care.
