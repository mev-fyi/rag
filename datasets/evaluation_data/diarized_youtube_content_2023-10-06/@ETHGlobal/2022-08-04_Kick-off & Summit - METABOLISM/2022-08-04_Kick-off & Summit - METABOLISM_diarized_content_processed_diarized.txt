00:00:29.190 - 00:04:13.950, Speaker A: Sam sam sam. Ram. WAM. Sam. Ram. Ram. Ram.
00:04:13.950 - 00:14:19.060, Speaker A: Sam sam sam. WAM. Sam sam sam sam. Ram. Sam sam. SA sam. Sam sam sam sam sam sam.
00:14:19.060 - 00:22:13.920, Speaker A: Ram sam. Ram sam. Ram. Ram. Sam sam sam sam. Ram sam. SA sam sam sam.
00:22:13.920 - 00:31:00.982, Speaker A: Jam here's. SA. Ram. Ram sam sam. Hi there. It's me, no. Have you missed us? There's so many more of us now.
00:31:00.982 - 00:31:24.214, Speaker A: And we have missed you. Where have you been? So much has changed since the last time we saw each other. So many new things, so many new opportunities. So many ways to be. It's exciting, but also a little bit frightening because you are here. We're together. We want to play a game with you.
00:31:24.214 - 00:31:36.170, Speaker A: It'll be fun. Promised. Bring your friends. We invited all of ours. They are really looking forward to meet you. It's a very easy game. There's only one rule.
00:31:36.170 - 00:31:59.080, Speaker A: You do what you want, what you always dreamt of. Do what hasn't been done before. Create what is missing. The best thing is that you get to do it with your friends, old ones and all the friends you might make while playing the game. No be fear. Even if you feel you already won the game because you play it. The only missing move is not to play.
00:31:59.080 - 00:32:10.300, Speaker A: Are you excited? We are so excited. Not only to play with you, but to see what you will come up with. Let's create together.
00:32:14.940 - 00:32:15.464, Speaker B: Good morning.
00:32:15.502 - 00:32:36.736, Speaker C: Good afternoon. Good evening, everybody. My name is Karthik, one of the co founders of ETH Global, and I'm super excited to welcome all of you to metabolism. I want to quickly thank Yuri for that amazing piano performance. We just took so many requests from the audience. I just had a really amazing intro into getting started with what the next week is going to look like. So thank you so much, Yuri, for doing this thing.
00:32:36.736 - 00:33:14.120, Speaker C: We hope to bring you back. All right, so to everybody that's joining us for the first time, we're doing all of this today on Eatglobal TV. This is the platform we'll be using for the rest of this summit as well as this hackathon. So for all the talks that are going to happen for the rest of today, you can ask any questions in the chat. You can sign in and talk to everybody, including us and the speakers and anything that you want to know. We can relay those questions and comments back to everybody on the live stream. Also, for everybody that signs in, we will be giving NFT co ops to you for participation.
00:33:14.120 - 00:33:42.144, Speaker C: So thank you so much and excited to get this going. So this event is brought to you by Eve Global. And for those of you who don't know, eve Global is an organization with a very simple mission. Our goal is to onboard thousands of developers into the web3 ecosystem. And we do this primarily by running hackathons and summits. And this week is no different. So, want to first quickly talk about what we have planned for the next six days in terms of summits.
00:33:42.144 - 00:34:12.636, Speaker C: There's going to be two summits. Today is the Zora Technical summit. We're going to be talking about a lot of things around what's happening in the Zora ecosystem as well as how you can enhance all of your NFT experiences. And then we have a creative summit on Tuesday. So next Tuesday, five days from now, and we'll be talking about all the amazing things that are happening in the rest of this broader ecosystem. So stay tuned for all of that shortly after this. But first, the next 25 minutes are about what is happening with the metabolism hackathon.
00:34:12.636 - 00:34:57.660, Speaker C: So the hackathon is off to an amazing start. We have over 380 hackers from 61 different countries participating in this event and they're spanning over 16 time zones. So we're going to be talking and interacting with so many people from so many parts of the world. We kind of put everybody on a map to see where they're all joining from. And it's still incredible to see so many countries, continents and regions represented. And we can't wait to welcome and talk to all of you. Not only that, we also have 28 ecosystem partners and 55 ecosystem mentors that are going to be here on Discord, all on the summits, on the chats, and doing workshops, talks, answering questions, and helping you succeed in accomplishing your projects for this Sunday deadline.
00:34:57.660 - 00:35:38.356, Speaker C: And all in all, we have over $100,000 in prizes that are going to be given away as part of this hackathon. So I'm going to cover what all of that is about. But before that, I want to quickly thank some of our amazing partners that without their support, this event would not be possible. So of course, Zora is an amazing partner we've been working with. And I want to thank Zora for making this event come to life. On top of that, I want to thank Live Here NFT Storage Polygon and Lit Protocol and then Spin Amp Artiva Juice Box Refraction Make Fun African NFT Community sound obsessed Developer dow and Noom. I also want to thank Zein.
00:35:38.356 - 00:36:40.876, Speaker C: Spores eat Pass mutual love felt sign heat tech, she said so friends with benefits and star union and mochi float alta anchor and artpelabs. So thank you so much to our amazing partners and we can't wait for all of you to see what comes out of this and have so many incredible projects use all of the work that you've been doing and building upon. So I want to cover a lot about what this weekend and the next few days are going to be about. The goal here is to talk about logistics. I want to talk about anywhere from team formation, how you can get help, all the prizes, all the talks and workshops, judging and submission, how that's going to work, and of course, we're going to then jump right into the summit, which should be beginning right after this, in 20 minutes. So the first and the most important piece here is communication. Everything that we're going to be doing as part of this hackathon is going to be on discord for all of you that have been confirmed as a hacker.
00:36:40.876 - 00:37:35.116, Speaker C: From your dashboard you will be able to connect your discord and you'll be seeing this discord metabolism header on your sidebar. So please make sure that you're able to see all these channels that are in the screenshot because that is controlled by our internal dashboard that gives you access based on what your role is at the event, whether you're a sponsor or a hacker or a mentor or any of the partners. So everything that we're doing is only open to the hackathon participants, which means that only people who are in one of those 380 to 400 group are going to be able to chat. So you can talk to everybody there, you can talk to all of our partners, you can learn more about any of the prizes and ask questions if you're stuck on using specific APIs and SDKs. And that's also where you can get direct help. So if you have any questions, you can ask any of the mentors in the mentorship and help channel. On top of that, we're also sharing and sending out calendar invites for talks and workshops.
00:37:35.116 - 00:38:28.610, Speaker C: So you can be informed of some key dates like submission deadline or some of the summits and the kickoff and the finale are starting, where we're going to be talking about everything that comes out of this event. On top of all that, everything that is going to happen over the course of this event is going to be published on the website, which means that anytime you go to the website, what you see there will be the source of truth. So all talks, times, workshops, speakers, everything that's going to be happening will be relayed on the event website and really want this thing to be asynchronous. There's 61 countries already participating at this event and we really understand that not everybody's available at the same time to do all these things. So everything is designed to be discord first and recorded. And for a quick reminder, the website is metabolism eglobal.com. So let's get into how the hackathon itself works.
00:38:28.610 - 00:39:13.120, Speaker C: So officially the hackathon begins now, which means you can start working on your projects now, and you can work on your projects with up to five members in a team. You have the next few days to hack. So this gives you until Sunday and the submission deadline is 03:00 P.m. Eastern on August 7. It's a quick note on how everything is structured on the team. You can have up to five members, but it's not required for you to have a team, which means that if you are interested in working on something on your own or you are just using this as an opportunity to get better at something that is totally okay. You are more than welcome to submit individually and participate at your own pace.
00:39:13.120 - 00:40:00.070, Speaker C: We'll also keep the rules and the criteria for the event simple. Everything that we're going to be doing from the submission standpoint and what you're going to be working on as a project is and should be done from scratch. Which means you cannot build on a preexisting personal project and you cannot continue adding features of something you have done before or submit something that you did not start as of today. This is meant to be a place for us to keep everything fair and we want to really make sure that everybody that's participating in submitting something has been part of the exact same rules, which is starting today and ending on Sunday. On top of all of that.
00:40:02.300 - 00:40:02.808, Speaker A: Every.
00:40:02.894 - 00:41:13.790, Speaker C: Submission must use something in the Zora ecosystem or the APIs or the SDKs or the Craft API to be eligible to compete and win in the projects or win any prizes. So please make sure that you are meeting those two requirements. And on top of all of those things, only RSVP hackers are eligible to win the prizes. Which means that if you are working on a team and your team members are not listed under the team section on your dashboard and they are not confirmed and RSVP at submission time, and you win a prize, we will only be honoring the delivery of prizes to the members that were listed on the team and not anybody else that was officially not registered. So if you still have a friend or team member that is outstanding or has an RSVP from their dashboard, please make sure that they are confirmed and ready to attend by end of today. Of course, this means there's also going to be a couple of edge cases and we're more than welcome to help out and answer any of those questions or clarify certain things. So if you have any questions, please reach out to us on discord or email and ping anyone on the global team and we'll be happy to clarify anything that you have they'd like to know.
00:41:13.790 - 00:41:33.060, Speaker C: Next up is judging. So this is the most critical piece on how everything is structured. So judging begins after submissions end. Submissions are going to be due on Sunday at 03:00 P.m. Eastern. So Sunday, August 7. It gives you a few more days to kind of work on everything.
00:41:33.060 - 00:42:14.972, Speaker C: And the way everything is structured is that at submission time, when you submit and finish filling out all the fields that you need to specify whether what you're building, screenshots, prizes and everything else, those submissions will be locked in. And everything that you submit at that deadline will be used to evaluate everything from our partners and for any of the prices. Then the next day is when judging officially begins. Starts on Monday. The Eigth and judging is going to be split into two streams. One of them is the main judging if you are trying to be a finalist for this hackathon. And then one of them is the Sponsor Prize judging, which is going to be Asynchronous and Run, also in parallel.
00:42:14.972 - 00:43:35.676, Speaker C: For the main judging, it's going to be a live call where you, as a team, are going to come on and present your projects to our judges and they're going to come on and ask questions and give feedback and do that directly synchronously on a zoom call in parallel. If you are trying to win a prize from any of our partners, your project will be given to them to look at and evaluate. And they'll be going through all of your details for the prize and whether it's your demo or your video or anything that you submit asynchronously and if and only if they have any questions, they'll be reaching out to you directly to clarify or answer and go deeper into anything they'd like to know. From there, they'll be announcing and picking who the winners are and all of that comes together on Wednesday, which is the finale where we're going to be talking about who won what prizes and in the middle of that is Tuesday, which is going to be our creative summit. So while we kind of compute everything, you get to enjoy some incredible speakers talking about everything that they're excited about. So the main judging is structured as follows you will have four minutes to demo what you built. This will be up to four minutes, which is a max limit, but you can also obviously do something that's less than a four minute demo.
00:43:35.676 - 00:44:25.972, Speaker C: And to simplify this process for everybody and make it really easy for us to review everything and make sure there are no technical difficulties. Every submission will be required to do a every team will be required to do a video submission, which means you're recording an up to four minute video of what you built, which is a live demo introduction to who you are, what you built, and why. And that's what you upload on Sunday. Having kind of gone through this thing a handful of times, we really recommend that you do not leave this thing to last minute because you will run into situations where you can't fit everything that you want to show off in four minutes. So please make sure you have at least 2 hours blocked to be able to work on the submission video as well as all the fields that you to fill out on describing what you did and how it works. So please don't leave this till last minute. And all that happens through your dashboard, which means that right now you see the ability to create and update your project.
00:44:25.972 - 00:45:31.936, Speaker C: But you'll then see a proper submission flow that lets you specify all these things and upload that video and talk about all the prizes that you would like to qualify for and all the details that are needed accordingly. And of course the next piece is what if I'm new to all of this? This is the most kind of common question we've gotten and we want to make sure that this event is beginner friendly. And the way we have structured this is that we are making sure that we have content structured for every type of audience and skill set. So there's going to be a lot of work being done and content being ready for beginners intermediate experts. And obviously there's a lot of talks, panels and workshops and also interactive sessions so you can meet other members for the hackathon and go anywhere from form teams to share ideas. We're also obviously doing a summary right after this thing that goes deeper into how Zora Protocol works and all that information is also going to be listed on the Metabolism Info Center. But also if you can't attend all these things, don't worry, everything is recorded as well.
00:45:31.936 - 00:46:27.644, Speaker C: So as soon as it ends it will be immediately available on YouTube and you can find out all these things onglobal. And to find out what's going on, whether it's the submission deadlines or the speakers or the talks or any workshops, you can head over to Metabolism Ethglobal.com to find the latest. And of course if you have any questions, please feel free to ask them on the chat and I'd be more than happy to answer them here live. But of course, the second this live stream ends you can watch this video again or if you are on Eepglobal TV right now, you can just hover over the video and drag it back and watch the replay on demand. All right, let's talk about prizes. So there's a lot of amazing prizes that are being given out and I want to spend most of the time on talking about all the things that you can win in the Zora ecosystem.
00:46:27.644 - 00:47:09.396, Speaker C: So Zora is going to be giving away five ETH in four of these categories. So the first category is the best use of Zora Protocol and API. The second one is going to be on the best integrations and projects that look into on chain music ecosystems. There's also a lot of prizes to be won or a lot of ETH to be won for integrations and projects tackling Dow tooling. And we also want to make sure this attracts developers equally as well as creatives. And if you have interesting NFT experiments you are also able to qualify for specifically winning a lot of ETH in that category. So these are the four places where you can qualify to win sort of prizes.
00:47:09.396 - 00:48:12.960, Speaker C: On top of all that we have of course a few ecosystem partners. So Polygon will be giving $10,000 in prizes for best integrations that also interact with the Polygon ecosystem and to make all of your lives simpler in terms of uploading and managing your NFTs. NFT Storage is also giving 7.5K in prizes to use the NFT storage platform and we have Lit Protocol Live peter, if you are interested in building things around permissioning and live streaming, you can also win five k each from them in prizes. And I won't go into the details of all of these things here, but to find out specifics about what these prizes are, the documentation to learn about links on what it means to use them, get sample code, all these things are available on metabolism, ethcopa.com, prizes. And of course, as we end this and run into or get ready for our summit, I want to make sure that you are pacing yourself as part of this event.
00:48:12.960 - 00:48:51.836, Speaker C: I know four days is not a lot of time to kind of spend all the time working and building your projects, but we really don't want this thing to be exhausting for you. We really want you to have fun. This is very much about experimentation and learning and largely just being able to meet really incredible, passionate people who also are interested in the same things as you. So please take your time and make sure that you are using this as an opportunity to really understand what's happening. Learn more about what Zora is doing, and you are meeting people with different ideas and interesting backgrounds and interesting stories and finding a way to collaborate with them to work on something that all of you can be excited about. So that concludes all of our logistics. I want to wish all of you happy hacking.
00:48:51.836 - 00:49:32.184, Speaker C: We'll see all of you on Discord and of course if you have any questions, we can happily answer them here or on Discord. So thanks again to the hackers and with this we are ready to start our incredible summit. So the next few hours are jampacked with a lot of technical content. So I want to quickly jump into what is going on with the rest of the day. So before we introduce our first speaker, I want to just quickly give an overview of the schedule. So we're going to have six amazing talks we're going to kick off today with bringing on Jacob from Zora, talking about the Zora playbook and learning a little bit more about hyperstructures. We're going to have Max who's going to be talking about how you actually build with Zora directly as a developer.
00:49:32.184 - 00:50:15.148, Speaker C: It'll be more of an interactive and technical workshop. Then Ian is going to talk about Zora's create tools and how you can leverage all that work that they've been doing. And we're going to have Jen talk about custom interface for ERC 721 drop extension and using that to build a profit. And then Isabella is going to be talking about Zora's API. It's something that will simplify your life so much, especially as you are looking to explore the projects this week. And then Dave is going to talk about how do you actually build great user experiences and how you can leverage some of these best practices to really make sure that your hack submission is perfect. So without further ado, I'd like to start a little bit early and bring on Jacob from the Zora team.
00:50:15.148 - 00:50:22.700, Speaker C: And yes, well, I'll let you turn on the video and get started with your presentation.
00:50:25.200 - 00:50:28.350, Speaker D: All right, I'll just share my screen.
00:50:30.400 - 00:50:34.384, Speaker B: Okay, cool.
00:50:34.422 - 00:50:37.970, Speaker D: Can you see the big white slide here?
00:50:38.280 - 00:50:43.620, Speaker C: Not yet. I think we're seeing, but not the slide. So maybe the window pane must switch.
00:50:45.640 - 00:50:46.292, Speaker D: Okay.
00:50:46.426 - 00:50:48.016, Speaker C: You see the full desktop?
00:50:48.208 - 00:50:49.988, Speaker D: Yeah. I'm going to play around with it.
00:50:49.994 - 00:50:51.030, Speaker E: Sound 1 second.
00:50:53.180 - 00:50:54.250, Speaker B: Here we go.
00:50:56.300 - 00:50:56.936, Speaker A: We're all set.
00:50:56.958 - 00:50:59.032, Speaker B: How about that? Cool.
00:50:59.166 - 00:51:00.170, Speaker D: That working.
00:51:01.020 - 00:51:02.344, Speaker C: Everything's good?
00:51:02.542 - 00:51:04.072, Speaker B: Sweet. Cool.
00:51:04.206 - 00:51:48.840, Speaker D: Hey, everyone. My name is Jacob. I'm one of the co founders of Zora. Really excited to be kicking off the hackathon today with a presentation kind of going deep on the concept of hyperstructures. So I'm going to be speaking about what hyperstructures are, why they're important, and then some of the implications of what they mean in terms of how you build on the blockchain, how you build in web3, and then some of the cool and weird circumstances that I think kind of arise from this new paradigm. Okay, so what is a hyperstructure? Very simple definition. So hyperstructures are crypto protocols that run for free forever without maintenance, interruption, or intermediaries.
00:51:48.840 - 00:53:40.524, Speaker D: This sounds very simple, but is a very powerful idea that is native and kind of a net new form of infrastructure that is made possible by Trussell's blockchains. Like ethereum and hyperstructures exhibit a number of characteristics, and you can kind of use these characteristics as a checklist to kind of pick a protocol run through each of these characteristics. And you can kind of have an objective measure of like, does this satisfy the hyperstructure definition or not? So I'm going to go through each of these individually, starting with unstoppable. Okay, so if we think about traditional infrastructure, so, like power grids, highways, railroads, any form of infrastructure to keep these things running and operating, they require consistent maintenance by a trusted operator and they require a trusted operator to make sure that the power is still on, the roads aren't falling apart, trains can still operate and go where they're supposed to. Which kind of introduces this kind of dynamic we're used to with infrastructure, which is you typically see a single entity that runs the entire thing and then an economic system, which often means that that single entity gets monopolistic control and the ability to seek rent from those systems. And that's not inherently bad, it's just the nature of that type of infrastructure because we have not yet figured out a way for these things to magically operate themselves in perpetuity. But with blockchains, when you deploy a protocol on a blockchain, you can actually do exactly that you can deploy once and then your protocol can run for as long as the blockchain does.
00:53:40.524 - 00:55:25.230, Speaker D: So this means that if you look at the Uniswap protocol, for example, deployed once and then that team could disappear off the face of the earth, their website would go down, but their protocol will run for as long as the blockchain does with no ability to stop it. So, unstoppability is kind of this very core and unique superpower to deploying protocols on a blockchain which kind of unlocks a huge amount of new possibilities for how we think about the economics of the system and how to basically build these things. And it's just to kind of give some examples as well to help understand the difference between something that's unstoppable or not unstoppable. If you think about Exchange, for example, Coinbase operates off chain, the market kind of whips and operates on trusted servers, which gives it great features like being kind of free to interact with and very fast. But it means that sometimes that service goes down versus Uniswap, by nature of running on chain, does not stop, runs as long as the blockchain does. And the website may go down, but you'll always be able to interact with it through etherscan or through a node directly or maybe other websites that are built on that very same protocol and then same thing, the NFT side too. So for Openc, the market runs off chain in their servers and databases, which gives the superpower feature of being free but also prone to stopping sometimes because running large scale systems like that is very difficult versus something like Azora protocol which runs on chain and gives you all the benefits of running on chain which is it does not stop.
00:55:25.230 - 00:56:25.472, Speaker D: Our website may go down, but there are many other websites built on that same protocol. So if you really need to interact with it, you always can. So what this means is that there is really no further labor or capital required to keep a protocol running. So, as I was saying, if a team did disappear, that after deploying a protocol, that isn't necessarily bad because the protocol will run exactly as designed for as long as the blockchain will. So this unlocks a whole bunch of new superpowers as a developer when you're building a protocol like this and then importantly changes, I think, the economic nature of how these pieces of infrastructure run on the internet. So let's talk about kind of the first thing, which is the level of freeness of these protocols. So, because there is no operating cost, I think the default natural state for these protocols over the long term is that they will always default to running exactly at cost.
00:56:25.472 - 00:57:14.160, Speaker D: So there will be no like you basically just pay the gas costs required to interact with and utilize that protocol. And I think it'd be very difficult for protocol wide fees to be added on top because the cost to fork is negligible. All of these protocols are deployed on public blockchains. It can be quite simple to fork. And if you introduce a fee, you introduce the incentive to fork in a low cost environment. But there are fees in these protocols and there are fees that are very crucial, I would say, to the success of these protocols. And I like to kind of make a distinction between protocol wide extractive fees and then protocol wide expansive fees.
00:57:14.160 - 00:58:14.404, Speaker D: And expansive fees are basically built in business models or incentives that can be utilized by anyone adding value on top of the protocol. So these fees are transparent, anyone can see them, anyone can use them, which kind of incentivizes third parties, independent parties, to build on top of your protocol because they have a built in incentive to do so. And examples of fees like this, I think the most notable is probably the uniswap LP fee. So this is the built in incentive for LPs to provide liquidity directly to the protocol. And importantly, those fees go directly to the LPs themselves, not to the uniswap protocol. And then similarly, in the Zoro marketplace protocol, we have a notion of finders fees where it's like any developer with their own front end or application or their own protocol themselves. If they're finding bidders and buyers or people listing, they earn fees directly from that.
00:58:14.404 - 00:59:03.744, Speaker D: And that goes to those developers. It does not go to Zoro. So what this means is that there is an incentive to basically propagate and proliferate this protocol or the hyperstructure as far and wide as possible because there's a direct incentive to do so, which expands the hyperstructure. Hence the term expansive here. Okay, another really important characteristic is permissionlessness. It's probably a word you hear all the time in crypto and web Three, and it's widely associated with a lot of the chaos and adversarial nature of web Three too. But permissionlessness is important because it means that the protocol is universally accessible to everyone and anyone can utilize it without prejudice.
00:59:03.744 - 01:00:12.612, Speaker D: There is no way to stop anyone from using that protocol. And then importantly, it also means that the protocol itself cannot be changed. So this is kind of directly related to unstoppability in a sense, too, but it's that once deployed, the operating functionality cannot be warped or changed or augmented, which is again, kind of like a net new capability that comes with deploying something on a blockchain that creates very important conditions that allow for these hyperstructures to kind of thrive and be adopted. And from a developer standpoint, if you think about a lot of the pain points of web Two, there's no API keys required to utilize or build on a hyperstructure. There's no deplatforming, there's no censorship, there's no ability to be rubbed. Or if you're building a business on top of this thing, you basically get the blockchain guarantee itself that it cannot be ripped out from under you. Which is huge if you think about, like, early social networks or Twitter API keys getting turned off or Facebook platform getting changed and ruining entire companies on a whim.
01:00:12.612 - 01:01:19.616, Speaker D: That is not possible in this environment, which kind of leads to this kind of state of credible neutrality, which is, if you haven't read this essay by Vitalik, would highly recommend it. But kind of harvest at this point, which is hyperstructures are credibly neutral because they provably do not discriminate for or against any specific people or developers who are building on top of this infrastructure. So the sum total of all of these things leads to this kind of positive sum environment, which means that you basically can see competitive actors utilizing the same shared system instead of everyone trying to do it themselves. We do not see LPs all trying to create their own uniswaps. We see all LPs trying to use the same uniswap because there is this collective benefit liquidity effect and network effect that comes from building on that same environment and the fact that there's no protocol wide expansion. There's incentives for them to do so. And then they get the blockchain guarantee that, hey, this thing isn't going to go down or you're not going to get kicked off.
01:01:19.616 - 01:01:42.936, Speaker D: It means that there's really no reason for competitive actors to fork that system unless they have some new or novel addition or improvement to the underlying system itself. Which, yeah, again, positive some environment means you're going to see this continually expanding network of people who are competing against each other, which is kind of a.
01:01:42.958 - 01:01:44.250, Speaker B: Cool property to see.
01:01:45.260 - 01:02:15.250, Speaker D: And then I guess the kind of big open question and a very timely debate right now is that okay if you have these protocols that are deployed only once, there's no further labor cost to maintain or operate the thing and there's no protocol wide extraction, is this valuable or not? I think if you look to kind of like the uniswap fee switch debates right now, I think there's like.
01:02:17.460 - 01:02:17.728, Speaker B: I.
01:02:17.734 - 01:03:30.664, Speaker D: Think there's two sides. There's the side that's like, well, maybe uniswap protocol can turn on a fee and that there is enough stickiness to that volume that there can be protocol wide extraction that is defensible and although that there will be an incentive to create a fork that perhaps that the current implementation could survive that. And then there's the other cab which is like, well, the switching costs are very low and it's very trivial for someone to redeploy a version of this protocol and LPs can easily move across. Like this is something that should remain free. But obviously there are other governance controls of that protocol that sit outside of just fees that are important and contentious to control and that's where a lot of value is being derived. And then I guess the reason the nouns goggles are here, the nouns glasses, is that there are now new dow constructions that earn value and treasury outside of any fee extraction or revenue extraction at all. It's purely brand based ownership and governance control, which may be conducive to actually governing public protocols themselves.
01:03:30.664 - 01:04:51.616, Speaker D: So it could be the case that the Uniswap protocol may be better governed by a Dao that follows a similar economic structure to nouns, if not nouns itself. So we're at a really interesting time, which is we have a new type of infrastructure that is kind of live, working and operational that changes a lot of the established models of both operation and then also value capture. So we're heading into this whole big period of the unknown and experimentation, which is like, well, these things clearly work. These things clearly power a huge amount of value exchange on the Internet and very important and increasingly going to be so how do we value and relate to these things? And what does it mean to build around the edges? Which is why we're heading into this very exciting phase right now. So, yeah, to summarize like hyperstructures, they kind of exhibit the following characteristics. They're unstoppable, they're free, they're expansive, permissionless, incredibly neutral, positive sum, and then valuable, maybe with a PBD right here. So when building hyperstructures, I think there's a few things to keep in mind and I kind of copy pasted this from the original essay I wrote, but I think they're important to call out, especially as we're in a hackathon.
01:04:51.616 - 01:06:17.424, Speaker D: So if you're planning on building a protocol, these are some great things to keep in mind. I think one of the core, I think the thing at the top here is probably most important, which is like when you are building a hyperstructure like this, you need to be thinking about millions of interfaces, not just your own. So any design trade off or implementation trade off that may make it easier for you individually or as a single platform may come up with a trade off of compromising the easiness of other platforms building on top of you. So to the extent you can keep the protocol as generic and as simple as possible is kind of one of the core decisions you should be making the whole time because your hyperstructure will only be successful if there are multiple platforms and competing platforms built on it, not just a single one. Think about Fees as a way to expand and incentivize adoption of your protocol, not extract from it. It may be the case that there could be protocol wide extraction in the future, but that's not something that you should be thinking about in the short term. In the short term, you should be thinking about how can you convert as many platforms and competing platforms as possible to build on this shared infrastructure? Maybe somewhat obvious, but if you're building a hyperstructure, the hyperstructure is the thing to focus on.
01:06:17.424 - 01:07:16.892, Speaker D: So developer adoption is crucial, maximizing integrations and then build that network effect that can kind of cement your protocol as the neutral thing and the default. And then, yeah, liquidity is kind of like a core network effect that I think a lot of people and developers obviously look to. You may find that there's always an early subset of developers and platforms that want to take the leap because there's no other great option which is good. But as you become more established, liquidity will kind of be a core measure that the ecosystem will look to decide if they build on a protocol or not. And then you think about governance. I would say that the most important thing here is remove as much governance as possible. If you don't need an admin for a thing or you don't require an upgrade for a thing, just remove the option entirely.
01:07:16.892 - 01:08:34.444, Speaker D: Because the lesser amount of governance, the lesser amount of surface area for things to change, the more confidence that platforms and developers in the ecosystem have that they're not going to be deplatformed or rugged or run into any critical errors or flaws in the protocol. And then I guess the general approach for deploying protocols, although it's software, it kind of feels more like a hardware development cycle. Just because you see these large deploys, it can take a lot of energy to migrate the ecosystem from one version to another. And then you need to go through because you're deploying things one way, any mistakes will live on forever. So it's very important to test and audit and go through public review and those things all add a lot of time into the build cycle compared to shipping something onto a website and be able to deploy a hot fix minutes later. You can't do that in this context, it's important to acknowledge that there's a longer build cycle here and the general state of mind is you're building a thing to be built on. So it's just like that's kind of like a simple phrase and thing to keep in your mind as you're building protocols like this.
01:08:34.444 - 01:09:32.060, Speaker D: You're building something to be built on, it will be eventually used and precipitate up into user interfaces and apps and platforms, but you're building for builders. And why does any of this matter? Well, it's like, well, if Web Three is going to achieve its ambitions of being a new Internet, then the protocols that are being built right now will eventually be powering most, if not all of society's value exchange. So if crypto is giving us the opportunity to create this public infrastructure that can be free of monopolistic control, that's an opportunity that we should probably take. And then that is something that we can aspire to and measure against. And I think the hyperstructures essay definition is meant to illuminate that. One, this thing is possible. And then two, let's create a shared kind of checklist to actually make sure that we're holding ourselves to those ideals.
01:09:32.060 - 01:10:25.310, Speaker D: And yeah, I guess given their immutable and impermanent nature, we do have that opportunity to create essentially civilizational scale infrastructure that can outlast even our own lifetimes given the permanent nature and the unstoppability, all of which is native to the Internet. So we just happen to be the lucky people that get to do it first and experiment it, which is kind of wild, but a lot of fun and exciting. So as you're building through this hackathon, it's good to always remember that it's like, well, damn, yes, there is a lot of complexity. I think there's still rough edges in developer tooling generally and most of the things that are to be built are yet to be discovered and understood yet. So yeah, take the opportunity for hackathons like this to think about the most out there version of what you're trying to do and put it out there and you might find people who want to help you do that very thing.
01:10:26.000 - 01:10:26.960, Speaker B: Cool with that.
01:10:27.030 - 01:10:37.520, Speaker D: I will end it and then we can go out there and the hackathon and time to start building. But yeah, I'll pause there and thanks for listening.
01:10:42.070 - 01:10:42.820, Speaker F: Awesome.
01:10:43.670 - 01:11:32.500, Speaker C: Thank you so much. This was a super awesome intro and I'm glad that you covered so many interesting things. And also just the framing around how do you actually apply that for this hackathon was really good. I'm going to quickly see if well, the good news is that we're actually ahead of schedule, which usually doesn't happen often, but we'll see if there's any questions from the audience. But if you have anything, we'll kind of ask them and for people that are the kind of common request you're coming in is like, it'll be great if we can get the slide deck to be made available for the attendees so we can just kind of share that. But of course, for those of you watching this, if the video exists, you can scroll back on the video and see the next. Just catch up on everything I was talked about, but we'll try to get the slides to you soon.
01:11:32.500 - 01:11:48.300, Speaker C: Maybe the most obvious kind of question is indirectly answered this thing too, but are you able to answer that directly for how Zora is applying all these principles and sort of what does that look like in terms of how you improve the protocol moving forward?
01:11:50.110 - 01:12:24.386, Speaker D: Yeah, I guess we kind of use this as our launch checklist. We one way deploy everything. We do not have protocol wide fees that are turned on. Any upgrade has to go through basically a new deploy. So yeah, I think that we kind of hold ourselves to a pretty high standard which can make our build process pretty painful sometimes. But yeah, we basically use this hyperstructure checklist as part of our launch checklist in the essay as well, which I can give a link. I kind of use Zora as like.
01:12:24.408 - 01:12:25.894, Speaker B: An example against each of these things.
01:12:25.932 - 01:12:32.440, Speaker D: As well as uniswap as well because I think that's the most prominent and working example of one of these types of infrastructure today.
01:12:34.810 - 01:13:11.878, Speaker C: Well, I don't think I have anything else. It'd be great if we can get a copy of the slides and what we'll do is that because we are a little bit ahead of schedule, we will take a short break and we'll just kind of turn on some of the amazing glofi beats for everybody to enjoy. And then as we're ready with the next speaker, we can resume with the rest of the summit. So that means we have about 25 minutes to go. So please enjoy and take a quick break and then we'll be back with Max's technical workshop on how to build directly with Zora. So thanks, Jacob. And thanks.
01:13:11.964 - 01:13:12.802, Speaker B: See ya.
01:13:12.946 - 01:13:13.910, Speaker C: See ya.
01:43:23.010 - 01:44:08.270, Speaker G: Everybody. Welcome back to the metabolism summit. Hope you enjoyed some wide beats as we took a little bit of break there and looking forward to having you all back with us for another awesome set of talks with the Zora team. So just as a quick intro, clearly I'm not Kartik, my name is Jacob, I'm also from the Youth Global team and I'm going to be Mceeing for the rest of this summit. Yeah, I mean, I'm going to get out of the way because we have a really exciting talk coming up with Max from the Zora team and basically we're going to be chatting about how to build with Zora. So obviously a lot of people over the next week or so or a weekend or so are going to be building on top of Zora, so this is going to be the talk for you. So without further ado, I'll introduce Max from the team.
01:44:08.270 - 01:44:16.100, Speaker G: Max, feel free to unmute and share your video and I will get my screen share out of the way in just a second. How are you doing?
01:44:16.710 - 01:44:18.994, Speaker F: I'm good, how's it going? Cool to be here.
01:44:19.032 - 01:44:20.114, Speaker E: Good, yeah.
01:44:20.152 - 01:44:20.450, Speaker B: Awesome.
01:44:20.520 - 01:44:30.214, Speaker G: Well, we're thankful to have you here and like I said, I'll stop sharing my screen now in case you have something to share, but otherwise the floor is yours. And yeah, looking forward to your talk.
01:44:30.412 - 01:44:51.914, Speaker F: Awesome. Okay, well, sweet. First, quick shout out to just the whole Youth Global team. They've set up all this infrastructure for sharing all the videos and all the resources and plan a lot of the sort of logistical stuff with the hackathon, so couldn't have done this without them. So, yeah, quick intro. My name is Max. You might know me by Tronki ETH on Twitter.
01:44:51.914 - 01:45:43.230, Speaker F: In this whole digital world we live in, I am relatively new to coding and development in general. Quick context. I graduated two years ago, was working in the renewable energy industry. Long story short, ended up quitting my job about six months ago to just dive full into full stack Web three development I'd never coded before, so had to do the whole thing. Learning HTML, CSS, JavaScript, react, solidity graph, all that stuff, ended up interacting with the Zora team along the way, building some cool projects, and then just started as a community developer advocate Zora, about three, four weeks ago. So my position is all about building out integrations and making it more easy for people to interact with the various pieces of the Zora sort of toolkit in general. So, yeah, let me get started getting into this stuff.
01:45:43.230 - 01:47:08.540, Speaker F: I have a screen over here with some notes just in case you see me peeping over there. All right, here we go. So I just wanted to start off with this, and I know Jacob just gave this talk about hyperstructures essay, but just so to sort of give you an idea of my context on the type of stuff, I'm doing this line right here taking a protocol first building approach, focusing on developer adoption. The Work I Do in The Way I Think My Time At Zora Is while We Are still Currently in the Central Small Team that is focused on Building out this protocol and Hyperstructure in General, I Try To Remind myself that this is actually like a much longer term thing and that the longer term vision of all of this is the sort of like, dow fication of everything. You see? So with that being the case, developer adoption and making it as easy for people to add integrations, add custom platforms, create value in the protocol by adding liquidity and just user interaction and attention to it is kind of like, of the utmost importance. So I try to keep that long view because that's what we're really trying to build there. So, just wanted to say that as sort of like a context to all the stuff I'm doing.
01:47:08.540 - 01:47:57.302, Speaker F: So, yeah, now I'm going to go through the Twitter thread that I posted yesterday. It's pinned on my account. It's also pinned on the Zora engineering account. But this has just, like, every resource you could ever want for getting started with building on the Zora API, the Zora creator contracts, and the protocol. So I'm just going to go through all that and explain sort of like, how to best access each of the resources, what you can do with all of them, how to integrate stuff. And, yeah, I'll end with a little live demo of getting something running on your own site and then some Q and A. So the first thing I want to do is show the Zora starter kit repo, which I just updated a little bit so that the code is a little bit better.
01:47:57.302 - 01:48:27.202, Speaker F: It was pretty a little janky before. There's a lot of unused code and stuff. But this is a repo for interacting with the Zora API, the creator toolkit, and just the marketplace hyperstructure protocol. It's pretty basic, but it provides that core functionality to each of those pieces. And I would say my favorite, actually. Let me get this open so you have a better visual so this is what it is. This is what if you fork this thing locally and open it, this is what you would see.
01:48:27.202 - 01:48:38.626, Speaker F: It has this sort of like API page which shows like a brief sort of like what could you do with the ZDK and let me actually switch.
01:48:38.658 - 01:48:41.320, Speaker B: This to no, I don't want to do that.
01:48:42.330 - 01:49:52.078, Speaker F: What you could do with the ZDK and the indexer, that's what I want to do. What you could do with the ZDK and the indexer, what you could do with the Create tools, how to create your own custom create interface and how to create your own kind of protocol interaction. So this just does something really basic fetches all the NFTs in the user's wallet, sorts them from highest to lowest balance. That gives you the top ten here you can put in any collection you want. That's just like a very basic implementation of how to get started with the ZDK and integrating with the API, you have this Create interface which so this is kind of like a different version of Create Zora co where you can interact with our contract factories and deploy any contract, whether it's like an addition style where the metadata or like, the image is the same for each of the tokens or a different sort of kind of more. Like the typically used in the Ten K PFP thing, but not reserved for that in any way. Just as a source of reference where you would have different images or metadata for each piece.
01:49:52.078 - 01:50:49.422, Speaker F: You can use this deployer over here to let you create contracts like that. And this is all at the Zora starter kit. And then the final piece is what I personally find the most useful out of this is sort of like a protocol interaction page where with all of the different modules we have the Ask module which lets you list and buy NFTs for specific price offer module which lets you make and receive unsolicited bids on NFTs. And then the Auctions module which lets you host sort of on chain auctions. You have all of the different read and write calls that you would want for each of those modules of our marketplace protocol which is really nice because I componentized all of them. I don't know if that's a word for each of these little things you see. So if you open this up Ask module writes this is like you can create an Ask with any token you throw in here.
01:50:49.422 - 01:51:45.470, Speaker F: You'd have to own it for it actually to go through to create a new listing. But you can go into the source article kit, go into the components, go into the ask, and then you can just grab this. You can just copy paste this in or sorry, what you would want to do is actually just let me go back to this page protocol. You can just put in the whole ask component, which we're calling ask write disclosure. So you can just put ask write disclosure in and you would get this whole section of functionality. Now obviously, you can take out bits and pieces you want, you can change all the styling. The whole starter kit is like the really basic TypeScript react wagme rainbow kit CSS tailwind.
01:51:45.470 - 01:52:21.670, Speaker F: So you can put in your own styling if you need, but you can also use the stuff that's already there. So kind of just like a simple opinionated user interface for getting started with any of this stuff. And yeah, just something really helpful you can fork. And this is like a very early version of it, but it will grow over time as we add new functionality. This will kind of just be like where you can always go to to find the latest Zora functionality with reference implementations and docs to get started with all of it. So I was really excited to do this. This was like the first thing I made when I started Zora.
01:52:21.670 - 01:53:02.602, Speaker F: And yeah, we'll just keep going on from there. So that is the Zora Starter Kit really helpful for if you're trying to just get started with some basic functionality for the hackathon, start building out an app. It leverages things like this NFT Components library. So Zora has a lot of kind of UI focused or react hook packages just for easy data manipulation or some basic functionality that you would want out of. Like when you're interacting with NFTs, you do a lot of the same thing a lot of time. Like you want to get the user address, you want to get the owner address, you want to get maybe the current listing status. You want to show the image, or you want to show the provenance history.
01:53:02.602 - 01:53:18.138, Speaker F: And there's things like that. So things like NFT Components, which is this package right here. It's in the arzor GitHub. It's also installed. It's like a dependency in the Zora. Starter kit. So pretty much like all of the Zora packages are dependencies in the Zora Starter Kit.
01:53:18.138 - 01:54:09.534, Speaker F: So if you fork the Zora Starter Kit, you'll automatically get access to all of these. But there's one component in here that I've used in every project I've ever made, which is this NFT preview component. It's really cool because the way it's set up is it can automatically respond to whatever media file you're passing in. So if you're passing in like a strict MP4 file or like a video file or like an HTML file, because we do kind of like HTML rendering, it has logic in it where it can just pick the Mime type and then render whatever it is. So right now this is actually showing the Feldzine Garden of Delights project that I actually built before I started with Zora. Or I did the front end development with their team and just as a little shout out to them. But you can put in anything here and then you can interact with anything.
01:54:09.534 - 01:55:05.502, Speaker F: But yeah, this NFT preview component super helpful. So if you're looking for sort of just out of the box NFT rendering, that is a good place to start. The NFT components package is built on top of NFT hooks, which are kind of like more specific granular hooks that can get at different information you want. So when you do the NFT components and if you insert NFT preview, it's kind of just grabbing all the information that we're indexing about an NFT or all the relevant information for rendering it and rendering some of its history. But you don't necessarily always need that. Maybe you just want to grab the IPFS link or whatever the metadata URL path is. Because you want to put in your own custom rendering component, you can use the NFT hooks package and hooks like the Use NFT hook specifically to just grab specific pieces of information that you want.
01:55:05.502 - 01:55:41.002, Speaker F: So this is the repo for that. Again, it's a dependency in the Zora starter kits. If you download that, you're already there. Or you can just install this right away and then you can use this to just fetch, like I said, kind of just like more specific information. It's similar ish to the ZDK. I got this question the other day where they're both providing just like abstractions of interacting and grabbing different information about NFTs. I'd say the ZDK has way more and I'll get into that, but way more information and accessibility of other just on chain data and off chain data.
01:55:41.002 - 01:56:03.170, Speaker F: But this is more for getting stuff for using NFTs in a website. So this is really cool. The Use NFT hook specifically is really nice. And then other interesting stuff is you can actually put in like a custom backend solution. Like, let's say you wanted to use a different API. For whatever reason, you can configure the backend strategy that you're doing. So these are the ones that are provided to ZDK fetch strategy.
01:56:03.170 - 01:56:35.902, Speaker F: This is like the old one, but you can throw in like a graph backend. Ether actor is something that one of our devs named Ian built. And then you can put in the OpenSea API if you wanted to for some reason. So, yeah, that is NFT hooks really useful hook packages for interacting with NFT data. And again, this is all in this big thread that I posted before the hackathon. It's pinned in my account and it's also pinned on the Zora engineering account. So next thing I'll do is little deep dive into the ZDK stuff and let me see exactly what I want to show here.
01:56:35.902 - 01:57:03.960, Speaker F: So there's this repo, which is really nice. I mean, this is where you can fork, again, another dependency of these or a starter kit. So it gives you some basic implementations of how to get it started. You sort of get the API input going and then sort of general things you can ask for and it describes the settings. But I would actually say a better place to start is this.
01:57:04.730 - 01:57:08.940, Speaker B: Where is this? Boom. Here we go.
01:57:11.870 - 01:57:35.854, Speaker F: This provides full code references of doing different things. So this is the Docs zora co. There's like a ZDK section and there's a lot of sort of full reference implementations for how to get started doing different things. So you want to get aggregate attributes. This is how you do it. Like getting NFTs for an address. This would be not using the ZDK.
01:57:35.854 - 01:58:02.922, Speaker F: That would be sending full GraphQL queries yourself. So I guess that is the difference. The ZDK abstracts, having to know GraphQL and knowing how to send those fetches. And it just does everything for you. So it's really nice. It just passes you back sort of like objects of JSON data and then you just grab whatever bits and pieces you want. So let me show you some stuff you can actually build with the ZDK because this is just like super cool.
01:58:02.922 - 01:58:29.074, Speaker F: So this is a NFT Historical Data Explorer provenance tracker, whatever you want to call it, that Daiwat built. Daiwat is a really cool dev. He works at Anchor and he will be doing a talk on how he built this, actually. But this is fully using the ZDK to fetch information and then obviously adding a UI to render that information in an interesting way. But stuff like this where, let's see if we can find mine. Yeah.
01:58:29.112 - 01:58:29.314, Speaker B: Okay.
01:58:29.352 - 01:59:11.826, Speaker F: So this is mine really easy, super fast. Like, you just saw how quickly that just rerendered when I put in the new Token ID. So there's stuff like this that you can build and I'll show just actually, we showed the code example already, so that's fine. And I'll show this as well. So what the ZDK is actually doing is abstracting those GraphQL queries I explained. And if you want to sort of test queries first to see what the returns will be before you implement a ZDK strategy, you can use this playground API Zora Co tool to build out any of these queries that you want. So like floor price, NFT owner count, there's all of these options for stuff you can do.
01:59:11.826 - 01:59:49.434, Speaker F: So this is a good way if like, okay, I want to implement the ZDK. Let me test out some queries, let me see exactly what I'm asking for and then let me see if I can implement that. With the ZDK, most things you can put just directly there will just be like straight ZDK hooks. You can do more complicated queries you will have to implement with GraphQL. But if you have questions there, you can always reach out to us. So is that everything? I want to talk about the ZDK? Oh, no, there's a couple more things. The ZDK and just like, the API indexer is really cool in general because it just unlocks so much ability in terms of you can just now fetch almost.
01:59:49.434 - 02:00:16.414, Speaker F: Any information about anything that you could ever want in terms of anything related to ERC 721. So yeah, this is a list. This is also in the Twitter thread. Everything I'm showing you by the way, is in that Twitter thread. So this is kind of me just like giving you a map to where you can start if you're looking for ideas or looking for help building certain things. So this is a link to all of the hackathon submissions from the last hackathon. If you need sort of inspiration for what to build, boom.
02:00:16.414 - 02:00:49.994, Speaker F: Go here. Ton of stuff. This is really good. And then I'll just drop a couple of pieces of you call alpha, maybe a little bit. Rinkby Testnet Indexing is now live as of like last night or early this morning. And it should be picking up all new ERC 721 deployed. So if you are deploying new collections using the Rinkbee drop contracts by either using Testnet Createzar Co or using that starter kit interface I showed you, you should now be able to open up Rinkby.
02:00:49.994 - 02:00:54.110, Speaker F: So actually, let's do a live check. Networks chain, main net.
02:00:54.180 - 02:00:54.974, Speaker B: Oh, look at that.
02:00:55.012 - 02:00:57.314, Speaker F: That's so cool. Okay, so we have Rinkbe going.
02:00:57.512 - 02:00:58.258, Speaker A: That's awesome.
02:00:58.344 - 02:01:28.986, Speaker F: So that is cool. That's a new thing that the indexer is doing. And another new thing is that V three auction event indexing is also live. So up until now, the only Zor market module that we've been indexing is the V Three Ask module which is for buying and selling at specific prices. But now we got auctions going. So just another a couple of things that are new to the API indexer and we'd love help testing and finding problems with. So if you want to do something cool related to those, that'd be great and let us know if you run into any issues.
02:01:28.986 - 02:02:06.358, Speaker F: So that is the ZDK for you. The drops contracts. The Drops contracts are our kind of like full contract factory architecture that currently are powering Create Zora Co which maybe you've seen before. They also power Testnet Create Zora Co which is kind of like the Rinkby version of this. So before you deploy stuff on mainnet, you can use Testnet Create Zora Co. They also power that thing I showed you before. And the reason I'm showing you all these things is to show that these contracts can be used by anyone.
02:02:06.358 - 02:02:59.062, Speaker F: They're like fully permissionless. You can just send in kind of like contract inputs and you get a fully new NFT contract out of it that you own. So Zora doesn't own the contracts that you're producing out of our contract factory, which is really cool. They're also extremely modular and extensible like just the way they're all set up. I would encourage you to dig into kind of like the solidity on how all this works, but Ian and JeM are actually going to be doing kind of deep dives into all of this and how you can make a lot of custom updates to them because they seem maybe kind of limited if you don't actually understand the full architecture. But actually the way they're set up, you can make any NFT collection with any attribute, with any type of logic. They're really interesting.
02:02:59.062 - 02:03:06.874, Speaker F: So I will leave it at that and I'll let them talk more about that after. Let's go. When did I start?
02:03:06.912 - 02:03:08.090, Speaker B: I started out at 115.
02:03:08.240 - 02:03:31.266, Speaker F: Okay, here we go. I need to speed up a little bit. So we got the v three protocol. This is where you can find all the solidity for the V Three marketplace modules which are Asks, Offers and Auctions. That is what you can interact with here. Reference implementations here. And this is if you actually want to dig into the contracts, they are right here.
02:03:31.266 - 02:03:49.462, Speaker F: And I would also just call out that in this Tweet thread I put a link to the deployment, the list of deployments of everything. So if you're trying to find like oh, what is the ERC 721 transfer helper address on main net?
02:03:49.516 - 02:03:49.890, Speaker B: Boom.
02:03:49.970 - 02:04:29.078, Speaker F: There you go. So this is really helpful if you're trying to integrate some of the protocol. All right, next thing is the Finders fee finder app and let me clean up some tabs before this gets too crazy. So this is an app that provides a reference for integrating a finder's fee. So if you're not familiar with the finders fee, it's an expansive incentive that is core piece of a hyperstructure that Jacob talked about that incentivizes curation using the marketplace. So let's say you put up an NFT for sale, you list it at a certain price and you say, hey, I'll give someone 5% of that final sale if you can match me with a buyer. So that's great.
02:04:29.078 - 02:04:50.602, Speaker F: But actually in order to make that useful, you need interfaces that are servicing that functionality. So the Finders view finder is one of them. This is currently indexing every active listing on the V Three. Like version 1.1 asks module. It's every active listing that has a finder fee greater than zero. So you can go through everything.
02:04:50.602 - 02:05:41.222, Speaker F: Like you can see there's tons of different stuff. And then what you can do, and this is what's so cool about it is you can create share and if you create Share, it generates this custom link. And that you see down here says curated by, curated by and then that's my address. So if someone buys, I can send this link to someone. And then if someone buys this NFT using my link, I automatically receive the finders fee. It gets passed in in the contract call to my address and then I receive that fee. So this is a basic, but I think important thing that can be expanded upon to sort of make more use of the finders fee in general because I think that's sort of an underutilized aspect of the Zoro protocol in current situation because it requires a lot of curation and community outreach and people being bought into using your platform and not others.
02:05:41.222 - 02:06:07.686, Speaker F: So it's not actually that easy to set up and drive a lot of liquidity and attention towards it. Open call for requests on this. Let me show the repo. There's a lot of stuff that this could become better. Currently it's only doing Ask modules, but like I said, we are now indexing the Reserve module. There's the reserve auction finders ETH module which allows you to do finders fee with reserve auctions. So I'd love to get those added in.
02:06:07.686 - 02:06:45.138, Speaker F: It also uses the old indexer. I haven't transferred it over because I made this before I joined Zora, which is bad. So if anyone wants to add anything, add in the new indexing strategy, like move it over to the new indexer adding Reserve Auctions. I personally think that would be a great hackathon. Sort of like if you're looking for a topic or something to build, make this way better, make the UI cooler and everything, I would appreciate it. But also I think this is currently one of the better references in terms of how to integrate finders fees and incentivize creation and stuff. So enough of that.
02:06:45.138 - 02:07:28.686, Speaker F: That is cool. But I want to show something that one of our residents, community engineer technologist people named Dane built, which is this template Zora Mint House, which lets you kind of insert any active addition or collection using the Zora contracts because they all use the same underlying Abi and Mints on them. So this is amazing. If you're trying to set up your own Minting interface for people, this is a great place to start. You can spin it up really easily as here. There's like a nice whole getting started thing. So this is really cool.
02:07:28.686 - 02:08:18.814, Speaker F: And while it's currently set up to only Mint erta interface perfectly with all the Zora additions, you can obviously change the Minting strategy, change the target APIs and stuff like that. But also just like great UI, great interface for building stuff, which is if you're not like a front end designer or like a front end developer, then having all this stuff provided out of the box can be really useful, like for myself. So that's that. Another thing is again, just want to call out all of this stuff is in this thread. So I just am trying to highlight all of these things so that if you need templates references, you're curious on how to do certain things. This thread can I'm adding to it over time as we get new submissions, but this thread can be a place to get everything and I think my talk is my talk done in five minutes. Wow, it is.
02:08:18.814 - 02:08:50.034, Speaker F: Okay, I'm just going to get through these last few things then. So this is a marketplace example built fully on the Zora protocol by my friend Javier down in Buenos Aires. This is a place where unlike the previous example I just showed Dane's Thing, which is like a mint house. This is I would call it like a buy now house or just like a secondary marketplace for buying and selling NFTs for a specific price using the Zora protocol. So you can see this is like super clean UI. It's a really simple repo too. So it's actually very good for navigating.
02:08:50.034 - 02:09:31.510, Speaker F: If you're kind of new into development, you can just fork this pretty quickly and then get going. Change all the UI and now you just have a custom marketplace, change the NFT collection that you want everything to be indexing and then boom. So another great place if you're trying to build your own interface. And the last thing I'll just call out are some of these partner dev tools that we got in recently. So we have a ton of really cool partners building stuff and doing presentations that you'll continue to hear more about. Sporesdao just dropped the Spores kit which is a repo for integrating spores. It's really interesting.
02:09:31.510 - 02:10:26.130, Speaker F: It's like a music on chain, music remixing, royalty sending just like contracts plus UI, plus interesting ways to actually save that metadata to IPFS and then sustain that so you can always access it. So this is a really cool thing if you're interested in building kind of in that music category. That's one of the core categories of the hackathon. Similarly, spin amp just put out their kind of spin what did they call it? The spin amp SDK. So easy ways to integrating with their API, their indexer hooks for getting playlists and stuff like that. So would also point you there if you're trying to build things ready to playlisting or just like indexing music or adding curation and also noom network. They're kind of like the open source version.
02:10:26.130 - 02:10:38.506, Speaker F: They're the open source data focus of hi fi labs and they have a ton of stuff related to metadata and indexing as well. That is really cool. All open source. So if you're interested in getting involved in music metadata, I would hop in.
02:10:38.528 - 02:10:39.100, Speaker A: There.
02:10:40.910 - 02:11:54.674, Speaker F: And then I want to call out this because if there's anything that gets built during this hackathon, this is what I want to see built, which is this app called ETH Pass. I'm not going to run the live demo right now, but if you open it and go here, it's pretty much just like the best way I've ever seen for it grabs all the NFTs in your wallet and it lets you generate an Apple Wallet or a Google Pass in like 30 seconds. Like I swear, go to this website, try this demo, you can get a fully functional Apple Wallet, Google Wallet pass on your phone super quickly and then Ethpass has Docs and an SDK to integrate with to actually build a marketplace on top of that and allows for authenticating in person. So I would love to see a full stack, just marketplace built on this because that to me still feels like it's missing. Yes, there's people doing ticketing, but why isn't there, like, an open source thing where you just throw in your contract address and boom. Now you can just have that market, like a secondary marketplace for buying and selling tickets that then people can download and use in person. Right there with Ethpass and with Zora and the indexer, you can do all of that.
02:11:54.674 - 02:12:25.358, Speaker F: So kind of just like a call for that. And I called for someone to build that because I just want that personally. And that I think I'm at 30 minutes, I was going to show a demo for how to fork the starter kit locally, but I don't think I had that. So let me pause for a second. I'm going to stop sharing and mute myself. Jacob, what is good? Do I stop now? Did I just go over or what's the deal?
02:12:25.524 - 02:12:45.586, Speaker G: No, you're right on mean, I think we can definitely pause here. If it's a good natural place to pause, we have Ian ready to go. But yeah, that was awesome. It was a quick overview. I shared the link to the Tweet in the Eagles Global chat as well on eGlobal TV. So if you're looking through the Tweet, that's where to find it. Yeah, I think that was an awesome think.
02:12:45.586 - 02:12:50.450, Speaker G: I think you covered as much as I think you possibly could, honestly.
02:12:50.530 - 02:13:19.520, Speaker F: Yeah, that was the whole thread and I'll be adding to that thread over time. Also, if you've built stuff with Zora before, I know there's all of you people from the previous hackathon probably on this call, and you've built cool stuff, go to that thread and drop it below, because that's just a place, ideally, where anyone in this hackathon and in the future can just like, okay, I'm trying to start building on Zora. Where do I start? Here's. All the resources go crazy. So please, if you've built cool stuff before, share your knowledge, share your resources in that thread as well. Awesome.
02:13:20.050 - 02:13:21.070, Speaker E: Very cool.
02:13:21.220 - 02:13:45.030, Speaker G: Okay, well, thank you, Max, I appreciate that. Of course, everybody who's watching this, I know that was a lot to cover. It's already recorded, so it's going to be available afterwards as well. And we'll put it right on the prize page for a lot of the partners that Max was mentioning at the end as well. They're also on that prize page. So just prizes and you'll see all those resources there as well. But again, the thread also has all of so amazing.
02:13:45.180 - 02:13:45.974, Speaker B: Okay, cool.
02:13:46.012 - 02:13:51.302, Speaker G: Well, thank you so much, Max. Appreciate your time and yeah, we're going to jump into the next chat.
02:13:51.446 - 02:13:56.250, Speaker F: Sounds good. I'm going to peace out and we'll sink into the background and watch the rest of it. See you everybody.
02:13:56.320 - 02:13:56.746, Speaker B: Awesome.
02:13:56.848 - 02:14:30.326, Speaker G: Yep, see you on the discord chat. Okay, great. So, yeah, up next we've got another awesome talk by another member of the Zora team. We've got Ian here with us to chat about create tools. As Max mentioned, they're going to kind of go a little bit deeper into what can be done with all the tools that Zora has. So without further ado, I'll invite Ian to come up onto the stage here and share his video, share his audio, do all those good things, and I will also stop sharing my screen so that you can take over as well. So, Ian, whenever you're ready.
02:14:30.348 - 02:15:17.640, Speaker E: Yeah, thanks for the introduction, Jacob. Yeah, so what I'm going to talk about today is adding on new user interfaces for creating custom addition content types and how the Zora Drops tooling works for both the additions and the drops. So the idea here is creating a Zora Drop contract with our creator factories and all the on chain infrastructure, and all you need to build is another front end. So there's no solidity involved. And this really just uses what solidity we've already deployed on chain and kind of how some of it works behind the scenes. Just going to make sure I have the chat open for you guys and start sharing my screen. Give me 1 second.
02:15:17.640 - 02:16:55.660, Speaker E: There it is. All right, so we'll start off with some of the official Zora documentation because it's a pretty great way to understand how our smart contracts work. So if you go to Smart Contracts and then create an NFT collection, this does a pretty good overview of all the different NFT contracts that are a part of our drops tooling. The way the contracts are structured is there's a Zora NFT creator, and it's a factory that creates the ERC 721 Drop and it's a template NFT contract that creates a new addition. The idea with the ERC 721 Drop is that the metadata that is generated from the drop contract is generic. So an example of that is in, for instance, an addition. You want to have the metadata pretty much the same except for just the addition ID that changes.
02:16:55.660 - 02:17:45.398, Speaker E: However, with a Drop, you want to go into a folder either on a server or on an IPFS or areweave instance and grab the specific token ID because each different token is a completely unique artwork. And those are the two main distinctions. We actually have a repository open sourcing soon that provides more interesting renderer approaches. One of them allows for products and redemptions, one of them allows for creating groups of additions. So if you have 100 that want to be one another, hundred that want to be another, so there are a lot of fun things you can do with that, but it's solidity. And I wanted to keep this talk really into how the JavaScript interface works. So if we go to the Zora NFT creator here, you can see these are the arguments for creating a contract.
02:17:45.398 - 02:18:44.334, Speaker E: And here there's a function to create an addition and a function to create a drop. Now, this function does the creation in one go, so a lot of things get done at once and we can break down a little bit more specifically how this works and what the JavaScript interface is in this Create addition function. So an interface you guys might be more familiar with, that I'm going to jump to is the Ether scan interface just to show how this is not really proprietary Zora, but it's just general web3. We can have the Create drop here that takes a name, symbol, admin, addition size, royalty Bps, all these different arguments. We'll talk about it in a little bit. And then one for addition and then there's another one that's for generic stuff. So this is if you're doing solidity extensions, you can utilize that going here.
02:18:44.334 - 02:19:35.918, Speaker E: So the first argument is the name. It's the ERC 721 NFT standard we all know and love and it's actually for additions, the name of the NFT. So if we go to test to create Zora co we pick this Zorogenesis hackathon NFT and then we go to Etherscan for that address. You can see that the title here matches the title here and the metadata for the NFT is informed by the contract title. Now, one thing to think that's a little problematic with this is that typically indexers don't support changing the name and the symbol of an NFT contract. Meaning that a lot of this stuff you can edit after the fact, but name and symbol are two that you just can't really edit, unfortunately. Next is the addition size.
02:19:35.918 - 02:20:04.562, Speaker E: Addition size is interesting. It is the maximum number that can be minted. And this is a level of creating scarcity. It's a useful way to sell NFTs. If I told somebody that they could buy 100 and then I actually could have sold 1000, those hundred would be worth less in some ways because there are more people willing to sell the same item. If you set the addition size to one, you're creating a one of one NFT. And this is actually a nice way to use these contracts.
02:20:04.562 - 02:20:54.050, Speaker E: If you want to just mint a bunch of specific NFTs on a front end that are yours and they're not being sold in large amounts. The other thing is we have a concept of open additions with this tooling. And open additions is an addition that can be minted to any size, but it has the ability to be closed. So after the addition is closed, see Open addition here. The addition size is marked as the number that were minted in the sales period. So this would be 18,546 and then there could be no more minted after that point. So it takes the full set possible number of mints from the Ethereum blockchain and then shrinks it down to the number that are minted.
02:20:54.050 - 02:21:24.718, Speaker E: And there's a contract function to do that. The next is royalty Bps. This is the on chain royalties and bits per share and Bps essentially is a hundredth of a percent. So if you want 1%, you put in 100. If you want 10%, you put in 1000. If you want 10.1%, you put in 1001.
02:21:24.718 - 02:21:57.260, Speaker E: The reason this is not just a percentage is that solidity doesn't support a decimal point and it's a pretty respected financial way of setting the percentage. So you can see here I'm doing a 10% royalty. That's 1000 bps. A thing to do too is if you're unsure how this works, you can just do Bps from percent into Google and you get a nice little calculator here and a chart. And this calculator is quite nice. So I can type in 10%. It will give me the basis points.
02:21:57.260 - 02:22:35.010, Speaker E: Continuing onward, we have a default admin. So the admin address is the address that manages the entire contract. Can do anything that the contract has ability to do. Funds recipient is the address that gets the funds. Now, the reason these are split between two different addresses is if you wanted the funds recipient to be a split. Another way is if you wanted to fund Juicebox or you wanted to fund a Dow from your NFT sales, or you wanted to put the funds in a multi SIG but your personal wallet would manage the drop, so it allows for some flexibility. The next is sales config.
02:22:35.010 - 02:23:05.214, Speaker E: Sales config is complex. We'll talk about that in a little bit. This determines when the NFT is for sale, who is it allowed to be sold to, how much it costs and all those sorts of things. It's the arguments for the Lazy Minting description. It's a string that you can see in here. It's just this string. Now, one thing to note about descriptions for additions is that they're stored on chain.
02:23:05.214 - 02:24:00.606, Speaker E: And we can actually see that by going to this contract here. And then since it's a factory, each NFT is its own independent wholly owned contract. And then I get to the metrenderer and then I can ask for the information associated with that token and then boom. We have this whole description stored on chain. Now it's stored on chain, which means that the cost goes up with the more content that you put in the description. The reason we didn't use off chain media for the description on additions is that it would require a server. And Zora is really trying to be decentralized and wholly owned by the individuals that are creating the media.
02:24:00.606 - 02:24:31.240, Speaker E: And a great way of doing that is to put as much data as possible in the contract that the NFT ownership is held by. And most people don't really mind the increased cost because this one description is used for tons of different NFTs. So it's pretty efficient in the end. For instance, this NFT was minted 165,000 times. So copying this description once for this many NFTs totally makes sense. If you're minting 1000 individual unique NFTs with 1000 different descriptions. That doesn't make any sense.
02:24:31.240 - 02:25:02.946, Speaker E: And then we have the animation Uri and the image Uri. These are a part of the ERC 721 or the image Uri is a part of the ERC 721 spec. It defines the image shown for the NFT. In this case, just this image. And you can go down here in the Zora interface and you can see that image URL. This loads the full size image. Animation is an extension that's pretty well accepted, made by Openc and it's used for any non image content.
02:25:02.946 - 02:25:39.742, Speaker E: Animation being web page, audio, video, even 3D objects are supported in animation Uri. And this is kind of what we're going to be getting into with our little demo after this. The demonstration project will create a web page using this animation Uri field. If we go down here's, how you might call this in JavaScript, we'll talk about the sales config in a minute. But my essay, so this is going to be my name symbol essay ten. It's an addition of ten. So after ten minutes there can be no more made.
02:25:39.742 - 02:26:14.170, Speaker E: It shuts down sales, even me as an admin, I can't increase that number ten. The only time you can change the addition size is when you do an Open addition and then you close it. So there's no way to increase the addition size, there's only a way to decrease it really in a very specific case here, we next have the royalty Bps default admin funds recipient for small projects. It's worth just setting to the address of the Minter. So it's set to the address of the Minter here. Sales config. You can pass in a default sales config and that'll just disable sales.
02:26:14.170 - 02:26:55.480, Speaker E: And then you can go ahead and use the Zora, create tools to set your sale settings, or you can go and set a sale to start right when somebody mints. It's really up to your use case. Here we have the IPFS URLs. Now if you're familiar with typical Http, what is IPFS? It's just a way to specify that the asset lives in the IPFS system rather than on the web. HTP, HTPs. You can totally replace these URLs with HTP and Https, but it's not recommended because it's not a decentralized thing. If your server goes away, the NFT image becomes broken, but it's really up to you.
02:26:55.480 - 02:27:41.930, Speaker E: Okay, now we're going to talk a little bit about the sales configuration. The sales configuration is one thing to notice is this is a solidity extension that takes in a different size compared to a full number. A full number in solidity is typically defined as 256 bits. This clamps down those numbers quite a bit into 100 and 432 64 bits in order to save space. And this saves deployment costs, which saves you ether. First is the public sales price. It's in the number of ether and you are going to specify that to ten to the 18th easy way to get that is Ethconverter.com.
02:27:41.930 - 02:28:18.514, Speaker E: So if I pass in one E, it'll be one to the ten to the 18th way, and this is a way field. So you would put the way into your public sales price. Max sale, purchase per address. This is how many you can purchase per each address. And if you set it to zero, that means you get unlimited mints per address. But let's say you only wanted one address to mint four or five, so they couldn't buy up all of the NFTs in one go, or even just one. You could set that to that number.
02:28:18.514 - 02:29:13.394, Speaker E: Now, the thing to be cautioned about, or to be cautionary about with this per address field is that somebody could always just spin up more addresses, but it's a little bit annoying and it does slow people down, so it can hopefully encourage people to have more unique buyers. But it's very easy to get around if somebody wants to. The public sales start is in UN 64 and it's stored as a block timestamp. So that is a Unix time. It's the number of seconds since 1970. If you want to get the current Unix time, you can just type Unix time in DuckDuck go and it'll tell you the current time. I can do 2022 T actually for drops.
02:29:13.394 - 02:29:28.380, Speaker E: What I typically use for Unix time is Wolfram Alpha. So if I go to Wolfram alpha and I say Unix time yesterday, 12:00 p.m. CET central European time.
02:29:31.470 - 02:29:31.946, Speaker F: It will.
02:29:31.968 - 02:29:56.402, Speaker E: Say convert yesterday at twelve EDT. Okay, this is not working. Unix time 12:00 p.m. August 2 Cet. So convert 12:00 p.m. C est. August 2 to Unix time.
02:29:56.456 - 02:29:56.686, Speaker F: Boom.
02:29:56.718 - 02:30:33.310, Speaker E: We get the timestamp right there and then we can just take that and put that into the contract. It's a nice trick, especially when you're dealing with drops across many different time zones, to just quickly get that number for your sales start and sales end. If you're building a UI, you probably will use some sort of calendar, so it's not a big deal. If you don't want to start with a public sale or a private sale, that's a pre sale. You can just set the value of all of these timestamps to zero. If a sale starts at the beginning of time and ends at the beginning of time, it never happened. Pre sales start, so pre sale is determined by this merkel route.
02:30:33.310 - 02:31:07.126, Speaker E: The merkel route is a predefined way of determining all of these different users if they exist within the set. And if a mint matches the merkel route, then it can be minted under pre sale. And the merkel route includes the variables for sale price and max purchase per address and address. So there's no settings for that in the contract. It's taken directly from the merkel route. If you're not using the merkel route, it's safe to set a merkle route of zeros. And the reason you choose zeros as opposed.
02:31:07.126 - 02:31:35.140, Speaker E: To anything else is that zeros are cheaper to store on the blockchain. So when you're making an empty merkel root, just set it to be a bunch of zeros. Don't choose something like EEEE or It's. It's all the same thing as zero. The chances that there's a valid merkel root resolving to that is basically zero. So you wouldn't have that concern. But the concern you would have is just saving storage space.
02:31:35.140 - 02:32:42.680, Speaker E: And this is how you would import a type and TypeScript from the Zoralabs NFT Drops contracts package. So you don't have to manually check every field. You can have TypeScript check it for you as well. And we'll get to what that looks like in the example. The docs links are here and then I can share the slides in the chat. Okay, let's go through some code. So I made a little demo project for this that allows you to mint markdown essays with the Zora edition tool.
02:32:42.680 - 02:33:49.820, Speaker E: And we can actually take a little look at the current version at this link here. It's hackathon quality code, so don't judge me too much. Jacob, are people able to see the chat? And I believe there's one environment variable this Minter needs to set up. So I'm going to go and set that really quickly and show you how it works.
02:34:25.790 - 02:34:26.540, Speaker A: Okay.
02:34:29.970 - 02:35:54.860, Speaker E: I don't really have great ideas for this essay, but I can give you a quick demo on my local host. So let's do that. And then I'm actually going to take some of my presentation code and put it in the markdown editor markdown. You can do this to create a code block and then we can add a header. And then we can add another section for sales configuration. And I've already connected my wallet to the website, so you can see I'm on the Rinkib test network and I'm connected to this website. And we can add in the sales configuration slide.
02:35:54.860 - 02:36:41.680, Speaker E: And then I'm also going to add in a GitHub repo and let's make the link pretty. So here I can just take this GitHub repo and I want to make it a link. And if we look at the preview this is wrong.
02:36:43.410 - 02:36:44.720, Speaker B: Get every code.
02:36:46.450 - 02:36:48.480, Speaker E: I think it goes the other way.
02:36:48.850 - 02:36:50.350, Speaker A: Got a love markdown?
02:36:56.640 - 02:37:50.270, Speaker E: Yes. And then we just delete this line here and then I can go ahead and publish. So here it's posting to my local server to the publish route. And then the publish route is returning a response here with the Sacid and the image CID. And if we take a look and see what these are, this should be an HTML web page of the essay I just wrote. So looks good to me. Create an addition.
02:37:50.270 - 02:38:56.442, Speaker E: There's some code and you can take a look here. And this is a rendered HTML from that markdown editor and it says publishing. So if I go over here, there's a contract interaction and I can go ahead and take a look at the hex data for it. And if I turn this into we can just see if this works. I've never gotten the metamass data parser to work. All right, it doesn't work. We will confirm the transaction and then the easiest way to determine where the new Drop address is is to look at the events on Etherscan.
02:38:56.442 - 02:39:22.010, Speaker E: And you're going to do the same thing in JavaScript. We can actually add that in if there's a little bit of time, because right now it does nothing. It should redirect to a page where you can view your essay. When you're done making your essay and create Drop, the second address would be the addition contract address. This is our new contract we just made. And if we look at the contract, we can do read. See, I think I need to set it as a proxy.
02:39:22.010 - 02:40:18.970, Speaker E: And we can take a look at our name of the token and the description. That would be in name metabolism. And then there's no description, but we can then go over to our metadata tool to pull out the description. The metadata contract is generic across each of these additions, which means that you pass in as an argument your contract address, and it'll give you your information. So we have our description. Creating a Drop presentation looks great. We have an image Uri.
02:40:18.970 - 02:40:27.370, Speaker E: So if we go to Zora IPFS and we look at that image boom, it's exactly what we just saw. And then our animation.
02:40:27.450 - 02:40:28.560, Speaker A: See if this works.
02:40:31.410 - 02:41:37.906, Speaker E: Yep. Okay, so what does this look like on OpenSea? Well, we can take a look after we mint something. So since I'm currently the admin of the drop, I am going to mint myself anFT myself two, we can pull this addition up on our testnet, view the right address. This did come through. Maybe it takes a few minutes, maybe. Let's see. And then the mints went through.
02:41:37.906 - 02:42:02.264, Speaker E: Perfect. Then right here we have our essay metabolism. The image is used as the preview. That's why we have to create an SVG. You could also upgrade this to allow somebody to upload a preview image. And then I open up the essay and boom, I have the essay here. Something to note is in the sandbox.
02:42:02.264 - 02:42:32.804, Speaker E: View GitHub will not allow blah, blah, blah. So I need to go and open the site in a new window. But yeah, you can render markdown, you can add some styling. You could even add themes in the editor. So if you were to go to this here, you could choose a theme, and then it would update this preview over here. And then that same theme would apply to this site right here. And you can actually fork this and do whatever you wish with it.
02:42:32.804 - 02:43:02.428, Speaker E: And there's a nice little GUI editor here for those that like that. Something to note is if you link in an image, it should work, but it would be best to link in an image from something like IPFS. And you might have to go and work with your favorite markdown editor to add that option in. Now that I've created this addition, though, and I can see on the OpenSea, which is awesome, and I can actually probably see it soon on the Create tool, I think it's just cached.
02:43:02.524 - 02:43:03.490, Speaker B: Let's see.
02:43:07.360 - 02:43:08.110, Speaker A: No.
02:43:12.960 - 02:44:14.130, Speaker E: How would we view this information locally and actually let's back up a bit and go through. How does this upload flow work and how is this app working behind the scenes? The main page here is the Create page. And the sale starts off at zero and ends in one week. And the reason is seven. Let's start 60. So it's seconds, seconds minute, then 60 minutes in an hour and then 24 hours in a day, and then 7 hours in seven days in a week. So this sets the sale to last a week.
02:44:14.130 - 02:44:36.920, Speaker E: Disables presale sets 100 purchases per address and a 0.1 E sales price can go ahead and see that works by going to our Drop and calling Purchase.
02:44:39.020 - 02:44:39.956, Speaker A: Where is it?
02:44:39.998 - 02:45:14.290, Speaker E: Purchase 0.1. I want one of them. No, that'll fail. One that's successful. And then this is all pretty standard react. So this here is used to disable the button when publishing. Here is content for essay, title and description.
02:45:14.290 - 02:45:56.124, Speaker E: And then this is stuff with Wagme, which is a Hooks library for interacting with Ethereum. And then this allows us to connect the Zora contracts with Wagme. Here we have a fairly simple form. It takes in a title, description and essay. I'm using a third party markdown editor. It acts in react just as a standard text input. And then a button for publishing.
02:45:56.124 - 02:46:31.432, Speaker E: I decided to use the ggen toolkit, but you can use any type of front end or your own component library to build out the components. When you push the upload button, the first thing that happens is it sets the publishing to True and then it gets the Sahtml from the editor preview. It's a bit hacky, but it works. I didn't really want to rerender myself. And then it calls API. Publish. Now, a lot of times you might think, why doesn't it just call Pinata right here? Well, two reasons.
02:46:31.432 - 02:46:58.740, Speaker E: One is mainly for security. I don't want to expose my Pinata Uri. And then two, it's just a little bit easier to get those API calls done on the server. You can batch it into one request and add in better error handling on the client. And you can also render things on the server side. The response then comes back as JSON. We grab the IPFS hash from both the image and the essay.
02:46:58.740 - 02:47:25.820, Speaker E: This is just for debugging. And then it calls contract createdition. The Abi is pulled in from the node package of the Zora contracts. All the Zora contracts have node packages with typechain and Abis published. And you can take a look and see what that syntax is in the Node Modules package. It's a pretty easy way. You're not going to find it directly in the repo since it's compiled automatically down.
02:47:25.820 - 02:48:16.840, Speaker E: But you have deployments folder and you can choose the specific version of the deployment you want to use in your application disk folder, which includes the artifacts. Now these are the JSON files with the Abis in them and also Typechain. And these are TypeScript definitions and JavaScript files interact directly. There was a conflict between the markdown editor and our typechain builds. So I was not able to use Typechain with this project and I just instead used the direct abi files. Can take a little bit of a look into how the API works. I've found Pinata publishing from a string to be quite annoying, but this seems to be working pretty well.
02:48:16.840 - 02:48:42.634, Speaker E: This is a very simple HTML web page. Given the essay content and the title, it just spits out a web page. Could probably improve on this quite a bit. Then I'm doing a request to Pinata directly. I'm not using any of Pinata's tooling, I'm just doing a standard HTP request. So I set the CID version. I added the Type essay from Pinata metadata.
02:48:42.634 - 02:49:19.770, Speaker E: Not necessary, but nice. When you're in the Dashboard, it'll show all the essay types in one section. And then I'm just using the Isomorphic fetch library, which I believe is included as a part of the next JS framework, to then send the response to Pinata with the form data. Now, the reason you would use form data is to allow for adding on a file. JSON can't really encapsulate files very well. So solution here is to just append a file onto the request and then it splits it up into multiple chunks for you and you don't have to do anything for that. It's all automatic.
02:49:19.770 - 02:49:58.290, Speaker E: Passing an authorization header. So this is coming in from NextJS as the Pinata key. And then it calls the HTP response and then returns. JSON probably needs to have better error handling, but this is the rupload to Pinata function, short and sweet. Then this is the handler. This is the NextJS function that gets executed. When this API route is called first, it checks if the request is a post, it's going to ignore Get request and then it parses the JSON body to grab the title, description and essay fields.
02:49:58.290 - 02:50:39.054, Speaker E: And you can see that we pass those in right here. JSON stringify imagecid. So this just uploads to pinata a function make SVG card with the title and description, the content type shtml make HTML page same as making SVG card. It's just here the Make SVG card is used both the same on the server and the client. So it's in another file. And I exported an SVG from Illustrator and drew in the text. That's why the scaling is a bit weird.
02:50:39.054 - 02:51:14.986, Speaker E: It's probably better to manually write your SVG, but time the next step is to upload the pinata, the essay. And then I just returned the image and the essay CID. And the CID is the content ID field. It describes the file on IPFS. So when your URL looks like slash, this is where the CID is put. If you're addressing a folder, you just add the folder after that and a bunch of files can fit in a CID. But these are just simple CIDs that include only one file directly.
02:51:14.986 - 02:51:26.850, Speaker E: There's no folders involved here. This is a bit of a hack to create our symbol field. We can take a look at that here. So the symbol of the NFT.
02:51:31.350 - 02:51:32.354, Speaker A: Fresh here.
02:51:32.472 - 02:52:02.940, Speaker E: Now it knows. So three tabolism. I don't know why Meta got removed. Oh, substring one through ten, it should be substring zero through ten, maybe eight. So it just takes the first eight uppercase letters that are A through Z, zero through nine, and makes that the symbol. And you can see our purchase went through here. And let's see if it shows up on the Zora creator testnet should at this point.
02:52:02.940 - 02:52:21.460, Speaker E: Yes, it's doing something. There we go. Metabolism 22, hackathon, creating a Drop presentation. And right here is the Mint button. And then here's the treasury. So I can run a withdraw here. Now I want a better preview page than this.
02:52:21.460 - 02:53:07.842, Speaker E: So now that we've covered how the upload works and how the CID is then added to how the CID is added, we can then now look at how we retrieve this published contract. So if I go to additions ID, I wrote a web page that does a call using use contract reads and has an index page. So if we go to Additions, the addition I want, let's see what happens. Loading, loading right there. Metabolism 22, creating a drop presentation. And then we got our IPFS, another IPFS. So let's do this.
02:53:07.842 - 02:53:18.980, Speaker E: Data. It would be data zero one and 2012. So data.
02:53:39.020 - 02:53:42.110, Speaker B: Under Info or nothing.
02:53:42.720 - 02:54:45.780, Speaker E: And then our data field. And we know data's got to exist. So now we can do title image essay equals data. And then we can return header heading, title one. Make it real big. We can embed the web page. Since this is a full web page, I'll just pass in iframe source, replace this with an HTP gateway.
02:54:45.780 - 02:56:22.220, Speaker E: This is all react D stuff. Maybe we swap the image and the essay. There we go. Create an NFT edition. And then it looks like there was an issue loading the essay. Not sure what's happening there, but I think that's time. So to play with this repo and to continue on, you can take a look at how all this works in the code in my GitHub.
02:56:22.220 - 02:56:59.010, Speaker E: Just mark this down and I will publish the latest changes to GitHub. Ian Nash zorasa Editionmintor. Thank you so much. And I hope somebody makes some cool weird p five JS HTML interactive SVG generated. I don't know there's some really cool things you can do with this. So have a good rest of your day.
02:57:02.040 - 02:57:02.692, Speaker H: Amazing.
02:57:02.826 - 02:57:09.024, Speaker G: Thank you so much. That was sick. I think just being able to go through all of that in one fell.
02:57:09.072 - 02:57:11.752, Speaker D: Swoop and wow, that's awesome.
02:57:11.806 - 02:57:19.132, Speaker G: Yeah, I think that's going to be an amazing resource for people as they build over the next weekend. Thank you so much for taking the time to roll over that with us.
02:57:19.186 - 02:57:20.350, Speaker B: Really appreciate it.
02:57:20.720 - 02:57:21.710, Speaker E: Of course.
02:57:22.640 - 02:57:23.100, Speaker A: Awesome.
02:57:23.170 - 02:57:48.420, Speaker G: Thanks, Ian. Okay, well, we're going to keep the talks going. So up next, we've got another awesome talk. This one by Jim Gold, also on the Zoro team, titled beyond the edition custom EiE R C 721 drop extensions for fun and profit. So, yeah, really looking forward to this one, Jim. Thank you so much for the time as well. And, yeah, feel free to unmute.
02:57:48.420 - 02:57:53.652, Speaker G: I'll get out of the way so you can share your screen, share your video. Yeah, you're already on it. So awesome.
02:57:53.706 - 02:58:07.610, Speaker B: Thanks so much for being here, Jim. Sweet. Thank you so much, Jacob. And thank you, Ian. And I hope that these two talks will pair with each other quite nicely. We didn't plan this, so we'll see how it goes. Let me just share my screen.
02:58:08.220 - 02:58:09.352, Speaker A: Awesome. Perfect.
02:58:09.406 - 02:58:11.224, Speaker B: Looks good. Thank you. See my screen get away?
02:58:11.342 - 02:58:11.624, Speaker A: Yes.
02:58:11.662 - 02:58:33.904, Speaker B: Sweet. Cool. Beyond the edition. Custom Yassi 721 drops extensions for fun and profit. This might be a tongue twister of a talk. Okay, so we recently launched Zora creator. Zora Creator is the simplest way to create additioned ERC 721 tokens on artist owned contracts.
02:58:33.904 - 02:59:09.932, Speaker B: It has a super simple interface and it's the most user friendly way, we think, to create additions for images, for videos, for audio files, things like that. At its core, creator is an interface for managing an underlying contract. ERC 721 drop. It's a really good contract. It strikes the balance between being fully featured and customizable. And it's also extremely gas efficient. When I say gas efficient, obviously price fluctuates based on gas prices, ETH prices and things like that.
02:59:09.932 - 02:59:38.024, Speaker B: But earlier this week, it was in the ballpark of me spending maybe $50 to deploy my own contract and mints for collectors on that contract. Somewhere in the ballpark of $3. This is on ethereum. L One. There's no price savings from being on L2, nothing like that. This is full fat ethereum. L One.
02:59:38.024 - 03:00:36.324, Speaker B: As an artist, I'm old enough to remember February 2020, where minting, even single tokens on other platforms, shared contracts cost hundreds and hundreds of dollars. So, needless to say, this is a really great contract. This isn't a talk hyping up how efficient our contract is. Out of the box, ian has already showed you some amazing things you can do with this contract, building your own websites for these contracts. And I want to take us in a different direction. What if, out of the box, ERC 721 Drop doesn't actually do everything that you need it to do. What if you want to go beyond the functionality available? ESC 721 Drop, for example, has a robust system for managing public sales, with options for sales that are timed or open ended, for sales that are free or paid, available in fixed quantities, or maybe unlimited runs.
03:00:36.324 - 03:01:24.436, Speaker B: We have lots of options baked into it, but we also have no assumption that this is the only way that you might wish to distribute your NFTs. As an artist, as a creator, as a community, perhaps you might want to gate access to a presale based on holding a threshold of your dow's ERC 20. Perhaps you want to give a discounted mint to collectors of a previous ERC 721 token. If you want to do batch pricing or bundles, things like that, you might want to experiment with pricing on a bonding curve. You might want to prevent people from minting tokens on the Sabbath. These are all good use cases. The same is true for the content of your tokens.
03:01:24.436 - 03:02:10.920, Speaker B: Additions as you've seen them on Creator are pretty simple. They store a reference to one piece of media on IPFS that's whatever it is that goes I can draw one screen, whatever it is that goes in here, they store a reference to a piece of media and that is one piece of media the same for every token in an addition. And this is great. We use this and we use this ourselves for our drops. And many, many successful drops have come out using this exact methodology. This is great. But obviously that's not everything that you might want to do with an NFT.
03:02:10.920 - 03:03:26.690, Speaker B: Maybe you're a musician and you want to store meaningful metadata on chain with each token. Maybe you've designed a tarot card deck and from an array of images from the whole deck, maybe you just want to pull one card that was upside down for each mint on the platform, right, sorry. Maybe you want to pull one randomized image for each token that is minted. Maybe you're a generative artist and you want to do a project with a live code based renderer and a randomized seed per token along the lines of platforms like Artblocks or FX Hash or our favorite drops like Solvency and Salt Road. You know, the type of drop. Thoughtful handling of metadata is at the heart of every NFT project, and having full creator control of it is absolutely pivotal for creators doing the paradigm pushing work that we are obsessed with at Zora and as individuals. So if you're running into any of these scenarios, you might be tempted to say oh my God, Zora's contract sucks because it didn't consider my niche and didn't mean specific use case.
03:03:26.690 - 03:04:00.490, Speaker B: You might write a new contract from scratch, maybe using base templates from Open Zeppelin or Soulmate, you might fork our contracts, tweaking the code so they work as you like and deploying your own version. This is a hackathon. These are all completely valid. These are all completely valid approaches, right? Our contracts are on GitHub. They're open source. You can find them and go wild. But we think there's a better way to go about it.
03:04:00.490 - 03:04:26.080, Speaker B: A way to keep the majority of ERC 721 drop as it is and to be able to rely on knowing that you're using the exact same base contract as we do. It's optimized, it's efficient, and it's loaded with features that we think are really useful for creators who are doing industry leading work. It turns out that our additions, contracts as you've seen them on Creator.
03:04:27.780 - 03:04:28.108, Speaker A: Are.
03:04:28.134 - 03:05:33.544, Speaker B: Kind of just the tip of the iceberg, really. The features that you see on Creator, the ways you can instantiate an addition on this screen is just one option for configurating an extremely customizable architecture of contracts, modular contracts. Rather than forking ERC 721 and tripping over yourself trying to keep your own domain specific customizations separate from the majority of the Zora contract logic. Instead, we have a way that you can extend them with discrete, reasonable chunks of logic. These can even be designed in reasonable ways so that when you deploy them to mainnet, your internet friends can use them for their projects as well. We've seen a handful of drops using these techniques already, but it's definitely not immediately intuitive going to say it. While the contracts are well designed and easy to read, and honestly they have really sick ASCII diagrams in the comments that Ian made.
03:05:33.544 - 03:06:14.596, Speaker B: Should check them out if you haven't seen them. There's still a lot of moving pieces and I know from my personal experience that it can be kind of overwhelming trying to figure out which places to poke around in first. Don't worry, we've got you. For the rest of this talk, we're going to show you how you might get started with two of my favorite pathways for customizing our drops contracts making custom metadata renderers and making custom minting modules. Before I get into it, I want to stress that this is kind of advanced stuff. You might not need anything more than our Standard Editions contract deployed straight from Zora Creator. If that's the case for you, that's great.
03:06:14.596 - 03:07:09.060, Speaker B: This is just an option available to people who want to push things further than they can get with the out of the box contracts. It's not an insinuation that you have to do things this way or this is what Zora wants you to do. These are just options available to you. With that said, I think these techniques are really exciting and if you do something based on this, I'm going to be stoked to see it. So bit of both. This is also going to be a pretty solidity heavy talk. You don't need to be a solidity galaxy brain for this talk, but you should probably have done an intro to solidity course, you should probably have understood at least like the basics of how an ERC 721 drop works at its core.
03:07:09.060 - 03:08:16.844, Speaker B: If, if you listen to some of the examples that I shared a few minutes ago and you're like, yes, I want to do that, but maybe you don't have the solidity skills to implement it, that's completely cool. And I think hackathons are really good opportunities for you to pair up with people who do have that experience and maybe get together and learn a little bit from each other. So I just wanted to share that because this might be a little bit this is kind of Zora 201 or 301 maybe. Okay. Also, as Max shared earlier, we have a suite of composable tools that you can use kind of whatever level of abstraction that you are comfortable with. So if you don't want to dive in to playing with Zora toys at the contract level, well, you can tap into whatever feels best for you and your level of programming experience. And that might be using our TypeScript client, that might be using the Protocols GraphQL API, that might be using our React hooks, that might just be using Create Zora Co, kind of as it is.
03:08:16.844 - 03:09:00.632, Speaker B: And so I just wanted to share that. Okay, so let's start with custom metadata renderers. As Ian kind of touched upon earlier, the best place to start for this really is looking at how these contracts are created. Now, the heart of this system is a factory contract called Zura NFT Creator v One. As I get into these code leaning slides, I also want to say my slides aren't online just yet. I'm going to format them a little bit more after this talk and I'll publish them probably sometime this afternoon. So you'll be able to find those on the Zora Engineering Twitter account.
03:09:00.632 - 03:09:53.420, Speaker B: I'll post those there. So I just wanted to say that before I get into filling the screen with code. So we have Zora NFT creator v One, and if you look through that, you might see a function called Create Addition, which I believe Ian was talking about. It contains some pretty standard stuff for instantiating an ERC 721, a name, a symbol, details about the addition size and about the sales configuration. And then down here at the bottom, I don't know how to change the color of my marker, but that's okay. Down here at the bottom, we have the details that you might expect from if you've created an addition on our website. Basically an animation Uri, an image Uri, and a description.
03:09:53.420 - 03:10:46.284, Speaker B: There's a sibling function in this contract called Create Drop. Similarly, you have all your kind of standard ERC 721 bits and pieces here. Instead, what it does is it asks you for a metadata Uri base and a contract Uri. This is really useful if you have your metadata that lives on a server somewhere, or you have metadata that lives on IPFS based on a Uri base. So you can configure it these ways. You can interact with both of these contracts however you like, whether that's in Etherscan, whether that's in Foundry, whether that's ethers. Personally, I've been deep diving into Foundry recently and I got over the hurdle and I love it now.
03:10:46.284 - 03:11:37.870, Speaker B: So shout out foundry team. It's my favorite way to play with contracts from my text editor. But if Create Drop or Create Addition don't suit the needs of your project, well, I promised you would go deeper. So let's go a little bit deeper under the hood. Each of these contracts call setup drops contract yet again, it's a publicly callable function in Zora NFT creator. And instead of passing in an Image Uri, animation Uri, et cetera, to it, what you pass in I wish this highlighter was a different color, is an Imetadata renderer and a metadata initializer. So let's figure out what Imetadata renderer is because it's kind of at the heart of all of this.
03:11:37.870 - 03:12:09.960, Speaker B: Imetada renderer is a really simple interface that we created, has three methods. It returns the Token Uri for a given token, it returns the contract Uri, the general contract information for a given contract, and it has a little function that we'll get into a little bit later that allows you to pass in some data from it, from the factory, or from wherever you initialize it. So looking at Addition Metadata renderer.
03:12:12.300 - 03:12:12.616, Speaker A: This.
03:12:12.638 - 03:13:00.580, Speaker B: Is the standard thing that we're all kind of familiar with at this point. Maybe the Addition Metadata renderer is just one possible metadata renderer that can be used by any ERC 721 drop. It just so happens that on the Zora Create website, we have currently only implemented Addition metadata renderer. There are more coming soon you can create your own, which is, I guess what I'm talking about right now, how Addition Metadata renderer works. It's pretty simple. All we're doing is we have a struct called Token Edition Info, and we pass it a description, an image Uri, and an animation Uri. And then this renderer is shared between different contracts.
03:13:00.580 - 03:13:15.950, Speaker B: So multiple drops can use the same renderer without having to deploy it over and over again. And this is really nice that it's nice and gas efficient. 1 second.
03:13:19.520 - 03:13:20.270, Speaker A: Okay.
03:13:22.020 - 03:14:12.432, Speaker B: We store this in a mapping from the address, the address per the address of the ERC 721 drop to the token info. And then in Token Uri, if you've done any ERC 721 project before, if you've used Open Zeppelin, if you've done solidity for zombies like anything like that, you've probably kind of seen something like this before. You've seen your Token Uri function that gets passed a Token Uri and returns I need my pointer back and returns a string. The string is the JSON of the metadata, right? So a simplified version of this contract is that it gets the address of the drop from message sender. Oh. The thing that I should explain is that these drops basically. The drop contract will farm out.
03:14:12.432 - 03:15:25.572, Speaker B: It's called tokenuri to the underlying metadata renderer. So all it's saying is instead of having this tokenuri logic in my drop, I'm just going to store it somewhere else in a different metadata renderer and delegate to that. So we get the address of the drop from message sender, we find our token info struct from that address here and then like I said, this is just an addition that has the same it has the same information per token ID. So that's what we do and then we return it however you like to concatenate. JSON so Addition Metadata Renderer, if you take a look at the code, it's all in GitHub and Azora addition Metadata Renderer, it implements a couple of other functions. It has some helpers that let for example, like the contract administrator to update some of the information and it has some bits and pieces, it has some events that it admits and such like. But under the hood it's pretty much this it's relatively easy to follow.
03:15:25.572 - 03:16:25.492, Speaker B: So you might want to start by taking a look into that. And with that said, it also means that if we want to create our own metadata renderer, we really just have to follow this pattern of implementing the if Metadata Renderer interface. This thing going back, we would pass it in when we're calling setup drops contract, we would have a deployed Imedada renderer and we would pass it in here. So I just want to take a look at some patterns that might be useful. Guess there's no syntax highlighting here. Take a look at some patterns that might be useful if you're creating your own metadata renderer. So one thing is that you might wish to make a metadata renderer that can work with multiple drops.
03:16:25.492 - 03:17:34.960, Speaker B: So instead of having one metadata renderer for one drop, one metadata renderer for another drop deployed, that gets pretty heavy. You might want to say there is a common set of reusable logic that different contracts can use different drops contracts. So what you might want to do is store this is exactly what Addition Metadata Renderer does is we store a mapping from an address of a drop to some data type. That could be a primitive, it could be a string or a boolean or whatever. It could also be a struct like we do in Token edition in a flow. You might also want to store some data that is mapped both to the drop contract and also token IDs. In that case I would probably do something like a mapping of a mapping or whatever data structure feels good to you in that case to store data on a per token basis.
03:17:34.960 - 03:18:40.836, Speaker B: It also might be the case that you have an extremely niche metadata renderer and you don't want anyone else to be able to reuse it without redeploying it, in which case go wild. You do you I'm just saying these are some patterns that might be useful if you're implementing a Metadata Renderer this weekend and you're looking at our code and you're like, basically what is this first address parameter? So with that said, let's say you're making a music NFT Metadata Renderer. Hope someone does. And let's say you have some data that is useful to be stored on a per drop basis, but you also want to have data that can be initialized one time just when the contract is deployed. This is something that we do. We have a library that you're free to use, you're free to not use called Shared NFT Logic, which handles things like has our JSON helpers and things like that. You're free to use it.
03:18:40.836 - 03:19:36.170, Speaker B: You're also free to use a constructor. You can pass that into the constructor and you're free to use a constructor kind of wherever you like. And this is at the Global Metadata Renderer level, kind of a sibling pattern to this. It's like cool, okay, well, let's say you have your one deployed renderer and you want some custom data to be set for each drop that calls it. Again, we do this in the Addition, Metadata Renderer and a couple of others. So in that case, the way that we handle this to keep the function signature of Imetadata Renderer kind of consistent is to say instead of parameterizing it based on different variables. What we actually do is we abi encode those variables, whatever shape they are, whatever type they are.
03:19:36.170 - 03:20:05.700, Speaker B: I've tried it with like strings and booleans and numbers and such things like that. I presume it works with other things that can be API encoded. We call initialize the data. And this is the other parameter that we pass to Setup Drops Contract. So we'd pass in our initialization data. Top tip, if you don't need to do this pattern at all, that's great. You can just pass in an empty string when you call this function supercharger.
03:20:05.700 - 03:20:32.100, Speaker B: You don't need to do this. This is just an option. But this is really great. This is exactly how we'd implement. In this case, we want to set a custom image Uri, description animation Uri on a per drop basis so we would pass this in bytes data. We API decode it. It's kind of like destructuring JavaScript.
03:20:32.100 - 03:21:26.904, Speaker B: If you haven't done this pattern in solidity before, set whatever data type it is and then we're free to use it helpful. We want another sibling pattern that might be useful is well, this kind of got long is using Metadata Render admin check. So in the case that you have a contract that is owned by a particular account and you wish to have some protected functions in there. So in this case, we're just storing mapping from an address to a string called Token Data. See, we only want our admin to be able to update this. We have some little helpers that if you just poke around in the Aurora drops contracts, repo. You see this? This one's called metadata render admin check.
03:21:26.904 - 03:21:43.550, Speaker B: And you just import that and then you have a modifier that you can add to your function here. I think that's section. Yeah. Cool. Okay. Onto custom minters. So this is actually really simple.
03:21:43.550 - 03:22:23.336, Speaker B: The other one was like kind of complex, also kind of relatively hard to do anything dangerous custom Minters. I'm just going to say be careful doing this in terms of the code to implement it. It's a relatively simple thing. You also have the potential to rug your whole project. So with great power comes great responsibility, I guess. Okay, so with that said, all we're going to do to create a custom Minter is from our drop. So this is our drop that we've already deployed.
03:22:23.336 - 03:23:06.970, Speaker B: And again, this can be a drop that you've deployed from Etherscan. This can be a drop that you've deployed from UI on create Zora Co really kind of however you want to do your drop, we have a drop. And we just want to grant it a role of mentor. Grant it a role of mentor to the mentor contract. Now, these roles, just using the Open Zapplan permissions model, these roles can be granted to other externally owned accounts. So you can give this to your friends on the team, then they can ROG the project as well to other humans. And you can also say.
03:23:09.920 - 03:23:10.396, Speaker A: You can.
03:23:10.418 - 03:23:56.484, Speaker B: Also grant this to a smart contract. So that's what we're doing when we make a custom Minter. So all that you have to do if you've granted a Minter contract, this role, whether you've done that in Ether scan or whether you've done that in I do it in Foundry just because I don't like typing the same thing over and over again later. This is in your Minter contract. You can just call Admin Mint and it's like a backdoor to Mint into the contract that bypasses all of the traditional sales logic. And again, the nice thing about this is you can reuse them between all different drops. So many different drops can just add these different Minting modules without having to change their underlying ERC.
03:23:56.484 - 03:24:26.950, Speaker B: 721 drop implementation. You just grant one of these a specific role and then you're good to go. I'm going to leave the implementation of these up to you because it's extremely domain specific, I guess. And again, I'm just going to say it. You probably want to be testing these functions. We've been using Foundry, writing a load of testing, buzz testing for things like checking prices and stuff that's beyond the scope of this talk. Happy to help you later.
03:24:26.950 - 03:24:53.960, Speaker B: But this is basically it. Now, this contract doesn't implement any particular interface. There's no particular signature that it needs to inherit or anything like that. All we're saying is that we have a function. Doesn't have to be called purchase either. By the way, this is just what I've called it. So we have a function called purchase that implements our custom logic.
03:24:53.960 - 03:25:27.252, Speaker B: Now again, this is the skeleton you want to fill in the blanks here yourself. So let's just look at the signature for what I've done. The signature takes a target and again, this is an address of a drops contract. You could also pass in the target in the constructor, but again, just store it on the contract. But it's kind of nice again to have these modular drops or work with anything where your contract is an approved Minter. So you can't call it on any contract. This contract has to be approved.
03:25:27.252 - 03:25:54.480, Speaker B: But there you go. And all we're saying here is exactly like it was in the last slide. Try admin minting to the message sender. Doesn't have to be message sender. It can be whatever you want it to be. Quantity. Is that's part of the signature of Admin Mint here? This line up here or the missing lines, this is the fill in the blanks.
03:25:54.480 - 03:26:18.180, Speaker B: You want to be checking the price that you're letting people Mint for. You want to be checking any logic. If you're token gating something, this is where you token gate. I know. Last weekend for zorotopia in Oakland, we implemented signature minting. So that's where we do our signature checks. Again, all of this is kind of out of the scope of what I have time for in 1 minute or maybe 30 seconds.
03:26:18.180 - 03:27:04.708, Speaker B: But we're happy to help you if you have specific details. But this is kind of the fill in the blanks. It's also the kind of hippie dragons. The other thing that's kind of useful, I think is this little snippet that we have here, which again, I'm going to publish these slides later. All we're doing here is saying if the value that you're purchasing for is greater than zero, basically if we're sending money into our Minter contract, we should just forward that to our dropped contract. Otherwise you're just going to end up with money spread between different contracts and that's kind of messy. So yeah, really implementing Minters is pretty simple and also kind of dangerous, I guess.
03:27:04.708 - 03:27:45.590, Speaker B: Be really careful, write your tests, make sure you're only granting that role to contracts you trust, et cetera, et cetera. But that is kind of the modular Zora way of creating these reusable chunks of logic that you can use across all of your projects that you can configure in different ways, you can share with your friends. And then again, to recap, if you want a custom metadata scheme that doesn't really work with our Drops metadata renderer or our Addition metadata renderer, we're just implementing I metadata renderer and I think that is even more than I have time for right now. Thank you so much.
03:27:49.410 - 03:27:50.234, Speaker F: Thank you, Jim.
03:27:50.282 - 03:27:57.886, Speaker G: This is awesome. Yeah, simple and dangerous. Those are two words that blend together can lead to amazing things and also.
03:27:57.988 - 03:28:03.374, Speaker B: Very explosive things that's all got to live on the edge.
03:28:03.502 - 03:28:26.620, Speaker G: Got to live on the edge. Well, thank you so much for the talk and for the intro. Again, like, I think another just back to back awesome talks from the Zara team so far. So lots of amazing resources for people as they build. I love that this one went even deeper than the last talk. So, yeah, I think we did a 101, a 201, and now a 301. So thank you so much for being here.
03:28:26.990 - 03:28:42.320, Speaker B: Thank you. Looking forward to seeing what everyone builds. And sorry, the last postscript is that if you run into issues with this, please reach out to us, Zora Engineering on Twitter. We're not just shit posts and memes. Please ask us for help doing that stuff. So looking forward to seeing what everyone builds. Thank you.
03:28:43.090 - 03:29:13.062, Speaker G: Thanks so much. Okay, well, excited to announce our next talk, which I think is maybe even the newest product that Zora has put out for developers out there, which is the Zora API. So, going to introduce Isabella from the Zora team. Feel free to come on up and unmute and share your video. Who's going to do an intro to the new API that they put out recently. And it's super powerful. So I think I am really excited to see what people build with this.
03:29:13.062 - 03:29:22.282, Speaker G: And without further ado, I'll stop my screen share here so that Isabella can share hers if she'd like. And, yeah, welcome to the show, Isabella. Thank you so much for being here.
03:29:22.416 - 03:29:27.280, Speaker I: Yeah, thank you for inviting me. I'm excited to kick this off. Let me share my screen.
03:29:29.090 - 03:29:29.840, Speaker A: Cool.
03:29:30.850 - 03:29:35.534, Speaker I: Just going to present and yeah, just checking. Cool.
03:29:35.652 - 03:29:36.366, Speaker A: Okay, cool.
03:29:36.468 - 03:30:00.310, Speaker I: Yeah. So I'm Isabella, I work on the backend team at Zora. And today I'm going to be giving a brief intro to the Zora API. So what does the API do? I know API sounds scary, but I promise you it's not. And if you've never used an API before, it can be a little intimidating. But we're going to walk through it together and break it down. So it's super simple.
03:30:00.310 - 03:30:33.696, Speaker I: And so you can get started. At its simplest, it indexes ethereum events, and it turns this into readable data. And you can access this readable data via GraphQL through something such as our API playground. So what data can I find in the API? We're always adding new data, so every time you check the API, there might be some new stuff. It's like a little treasure chest. Every time you check, we'll just go through the list. Some of the things you can find are sales.
03:30:33.696 - 03:31:06.148, Speaker I: So we have sales events from different marketplaces, such as Seaport Foundation, super Rare, et cetera. Mint events. So if there's like, a new token project that has been minted, you can pick up those mint events. So for a collection, if you want to query all the recent tokens that have been minted, that's possible. We also support multi chain. So currently we're mainly supporting Ethereum Mainnet, but as of right now, we have Rinkbee tip of chain going. So by tip of chain I mean it's pulling like the most recent blocks of Rinkbee.
03:31:06.148 - 03:31:36.740, Speaker I: We haven't done a complete Rinkbee backfill of all the Rinkbee data history, but you can start playing with that. We have events. So events are basically every event signature that we want to index. We emit an event, not emit event. We pick up emitted events and we index this into our API. So for example, if you wanted an auction bid, an auction settled, an auction created event, those are types of events you could find in the events endpoint. And for markets, markets is kind of the final state.
03:31:36.740 - 03:32:29.910, Speaker I: So for example, if an auction was created and then an auction was bid and then an auction was settled, if you create the market endpoint, you would see that the auction settled event and you would see the auction in its final state. We also support search, so if you wanted to query across different collections and tokens and you wanted to search, say something like Zorbs, you would see a bunch of collections and tokens populate that are Zorb related. We also support Token Queries. So if you wanted to query for different tokens based off of transaction hashes, know, like Token IDs across multiple collections, that's possible as well. We're also starting to support off chain orders, so if you use our API, you can go see that we're supporting Cport off chain orders. So these are orders that are not on chain. So if someone's put a listing up and you're able to execute these orders through the call data.
03:32:29.910 - 03:33:00.284, Speaker I: And we also support media encoding. So media encoding is really useful. For example, if you find a collection and all of the tokens are say, 4K images and you want to load this on your website, your website is probably not going to have a good time and it's going to be very slow. But if you use something like media encoding, you can create performant images. So we can basically convert the images into a different size. So we support things like SVGs JPEGs PNGs videos and gifs. And there's a whole bunch of different media encoding types that we support.
03:33:00.284 - 03:33:41.736, Speaker I: But I think the best place to find more information on that would be our docs. So what are some of the contracts we index? We index a lot of contracts and this is always changing as well. And if there are contracts that we're not currently supporting that you want to see supported, like DM, Me, DM, anyone on Zora backend and we'll try and get it in. But some of the contracts we support are seaport sales. Seaport off chain orders, foundation Sales, wyvern Sales nouns. We actually support all Nouns events such like a bid, a settle, auction created, et cetera. And we support that for little Nouns as well.
03:33:41.736 - 03:34:03.804, Speaker I: So you can get really data rich nouns and little Nouns auction event history super rare. We support super rare sales CryptoPunks. We support CryptoPunks sales across the marketplace. We obviously support Zora. We V one, zora V two and Zora V three. We also support Looks Rare sales and loads more. And we're continuing to add new contracts every day.
03:34:03.804 - 03:34:43.132, Speaker I: So if there's something you want and you're not seeing it here, let us know. How do we index events? So this is an example of going from something you'd see on Etherscan to the actual data in the API. So, as you can see, this is a Nouns auction event and it's a bid. So you can see that the sender has placed a bid of this is the raw Ethereum value and you can see it here as well. And you can see the sender and you can see that it was extended. So here what we would do to get it into the state is we would be picking up recent blocks on Ethereum. We would say, oh, this matches our event signatures that we want to track.
03:34:43.132 - 03:35:31.238, Speaker I: We would label it through our classification process, which we basically know when we're attaching a label, it's basically saying like, oh, this is interesting and this is something we want to extract and get into the API later. And then we would extract it, which means converting the raw bytecode into something that is readable and something you can actually query in the API. So there's a bunch of steps, but essentially we're taking all these raw event logs on Ethereum and getting it into the API, into something that you can query using GraphQL. So together we're going to build a query. So I'm going to walk you through our API playground and we're going to build a query together. So, as you can see, we're going to head to Strawberry and we're going to do so to do the same thing. If you wanted to follow along, you.
03:35:31.244 - 03:35:32.040, Speaker A: Can go to.
03:35:33.870 - 03:36:10.674, Speaker I: GraphQL. And this is our playground. So together I thought it'd be fun if we did a little sales query. So there's all sorts of filters and things you can do and I'm just going to show you how easy it is to build a query really fast. So, sales types, I want to do a Nouns auction sale and I would like to get information about the Token ID. I always like transaction hashes for me because I can put up on Ether scan as well. I'd like the price.
03:36:10.674 - 03:36:45.298, Speaker I: I want to know for prices, we support a lot of pricing data. So such as like chain token price, which is the Ethereum native price, UCSD price at the time of the event. So you can get a lot of really specialized data. So if we query this, you can see cool. So we can see a bunch of Nouns auctions that are populating. So these are auction completed, so we can see that nouns ID 325. This is the raw value.
03:36:45.298 - 03:36:47.090, Speaker I: This is the price in USD.
03:36:48.710 - 03:36:49.122, Speaker A: Yeah.
03:36:49.176 - 03:37:03.480, Speaker I: That's how you build a sales query really fast. And you can quickly change this for different collections, different contracts, and it's really easy to build something that's super powerful very quickly.
03:37:05.450 - 03:37:06.200, Speaker A: Cool.
03:37:10.880 - 03:37:56.350, Speaker I: So, ideas for building with the API? I think the API is really fun and it's fun to just I love playing around with it on GraphQL just to get a feel of what's out there. I am finding new bits of data every day that I didn't even realize was happening on the blockchain. So I really encourage you guys to just even just get started by playing with it. Some ideas to help with your brainstorm are something like sales bots collection, dashboards, auction marketplaces, NFT art galleries, even trending collections, and Minted token trackers. The possibilities are really endless. And I think the thing I'd like to nail is just get started with the API, just start playing around. I'm sure as you're querying data, these ideas are going to come to you.
03:37:56.800 - 03:37:57.550, Speaker A: Yeah.
03:37:58.720 - 03:38:37.770, Speaker I: Where can you find more information? So API Zora co is the best place to go. That's where our API landing page is. And if you do backslash GraphQL, that's where you're going to find the playgrounds. And Docs Zora Co is where you're going to find all of our docs, which has really detailed information on queries you can make, how to make a query with curl, what types of media encoding we support, what contracts we support, and more. So if you're lost or you just want to learn how to get started, I would head to Docs as the first thing to do.
03:38:38.960 - 03:38:39.710, Speaker A: Yeah.
03:38:40.080 - 03:38:58.000, Speaker I: Other than that, I think if there are things that you want to see and you have feedback or you want to help index, I'd say hit us up. My DMs are always open and yeah, we'd love to get feedback and continue improving.
03:39:02.980 - 03:39:03.632, Speaker A: Yeah.
03:39:03.766 - 03:39:06.870, Speaker I: With that, do we want to go through questions?
03:39:09.320 - 03:39:10.580, Speaker B: Yeah, let's see.
03:39:10.730 - 03:39:19.056, Speaker G: If anybody has any questions, feel free to drop them in the chat. While we kind of wait for that, I think it would be maybe helpful.
03:39:19.088 - 03:39:22.104, Speaker E: To just go through on the maybe.
03:39:22.142 - 03:39:28.964, Speaker G: Just explore a little bit more as we have a decent amount of extra time. Just like explore sort of what's possible on the playground.
03:39:29.012 - 03:39:29.272, Speaker B: Yeah.
03:39:29.326 - 03:39:35.390, Speaker G: If that works for you, maybe make sure to just sort of jump through some of the different options and what's available there.
03:39:35.920 - 03:40:23.500, Speaker I: Yeah. So we can head back to the playground. So what I love, it's really easy to just take away queries and start pulling new queries really quickly. So if you wanted to search for a token and you wanted to see all event types for a token that's possible for Mints, we could do a Mint query. So you can see collection address, you can see here, you can get into images as well. So you can do a lot of different fun queries. So if you just wanted to see like, recent mints doing some upgrades at the moment, so the queries might be a little slow.
03:40:23.500 - 03:40:45.144, Speaker I: You can see a bunch of tokens that have been recently minted and we could actually continue to expand upon that. We could look into transaction info, see if you wanted to look at block.
03:40:45.192 - 03:40:45.790, Speaker A: Number.
03:41:00.690 - 03:41:55.560, Speaker I: So you can see all of the recent transactions. We can order this in different directions as well, so there's different filters for ordering, so you could sort in different directions. There's ways to do aggregate stats across collections as well, so you could do across floor price across a collection. So if we had a collection address, I don't have one off the top of my head, but if we had one, we could do a aggregate stat with the floor price for a collection as well. And you could do similarly, you can do NFT count. You could do owners by count sales volume as well. So if you want to do sales volume across a collection, that's possible too.
03:41:55.560 - 03:42:09.822, Speaker I: Aggregate attributes, you're able to do different aggregations here search, this is where we're able to do different search queries. So if you wanted to search for.
03:42:09.956 - 03:42:15.390, Speaker A: Zorb with an entity.
03:42:20.800 - 03:42:22.030, Speaker I: Too many things.
03:42:28.870 - 03:42:29.186, Speaker A: Yeah.
03:42:29.208 - 03:42:40.494, Speaker G: Frida Rico in the chat actually has a specific question about Search and basically what fields we can search on, basically. So what fields does Search use to find matches?
03:42:40.542 - 03:42:41.880, Speaker B: This is a specific question.
03:42:42.890 - 03:42:43.302, Speaker A: Yeah.
03:42:43.356 - 03:43:06.030, Speaker I: So Search is continually still being developed, and this is, I think, V, one of search we do matching, I believe, off description and collection address names. And I think this is still growing in development, but yeah, it's still being developed, essentially.
03:43:07.810 - 03:43:08.560, Speaker B: Cool.
03:43:09.970 - 03:43:11.966, Speaker G: Sorry, I didn't mean to cut you off there.
03:43:12.148 - 03:44:21.870, Speaker I: Oh, no, that's okay. Yeah, I mean, I can keep going through queries. Like, we could see all approval events. So if you want to do different event types, so we could do Nouns event types. So you can see these are all Nouns auction events. Forgot a bracket, but yeah, you can get really detailed queries very fast with the playground versus just writing a curl request. Cool.
03:44:21.870 - 03:44:23.870, Speaker I: Are there any more questions?
03:44:29.050 - 03:44:31.720, Speaker B: Doesn't look like any are coming through right now.
03:44:33.930 - 03:44:43.306, Speaker G: But yeah, I think we can probably take a quick break just before Dane's next talk, if that makes sense. Unless there's anything else you wanted to.
03:44:43.488 - 03:44:45.420, Speaker B: Chat about before we wrap up.
03:44:45.790 - 03:44:47.340, Speaker I: That's it for me.
03:44:48.350 - 03:44:48.906, Speaker A: Awesome.
03:44:49.008 - 03:44:50.662, Speaker G: Okay, well, thank you so much, Isabella.
03:44:50.726 - 03:44:52.140, Speaker B: Appreciate you taking the time.
03:44:52.590 - 03:44:54.234, Speaker I: Thank you for having me.
03:44:54.432 - 03:44:55.082, Speaker F: No problem.
03:44:55.136 - 03:45:00.686, Speaker G: Awesome. And then, yeah, for everybody in the audience, we have one more talk left for today. It's going to be coming up in.
03:45:00.708 - 03:45:01.374, Speaker B: Just a few minutes.
03:45:01.412 - 03:45:17.874, Speaker G: We're just going to get Dane up on the stage, so we'll probably take about a five minute break and we'll come back at around 03:22 p.m.. Eastern in the meantime, feel free to play around with the playground yourselves. It's really easy to play around with. So, yeah.
03:45:17.912 - 03:45:21.080, Speaker B: And thank you again, Isabella, for joining us today.
03:45:22.570 - 03:45:23.990, Speaker I: Thanks. Bye.
03:48:46.360 - 03:48:47.110, Speaker B: Hello?
03:48:47.880 - 03:48:49.168, Speaker G: Hey, Dan.
03:48:49.344 - 03:48:49.984, Speaker A: Hey, Jacob.
03:48:50.032 - 03:48:52.552, Speaker G: Thank you for being a little bit earlier. Appreciate that.
03:48:52.686 - 03:48:54.650, Speaker H: Yeah, sure, no problem.
03:48:55.020 - 03:48:56.170, Speaker F: Am I live.
03:48:56.540 - 03:48:58.852, Speaker G: You are live, yes. Welcome to the stage.
03:48:58.996 - 03:48:59.752, Speaker F: Okay, cool.
03:48:59.806 - 03:49:00.410, Speaker H: Awesome.
03:49:01.660 - 03:49:03.016, Speaker F: Yeah, get out of the way for.
03:49:03.038 - 03:49:23.904, Speaker G: You just in a second. But yeah, excited to hear kind of about building great user experience and everything from you. This is our last talk of the whole set. So we've seen Zora. 101, 102, 103 zora API. And obviously it's one thing to build everything, but then it's another thing to make it usable and make it for humans. So excited to hear about where to go from there.
03:49:23.904 - 03:49:28.464, Speaker G: So I'll get out of the way here, I'll stop sharing my screen, I'll let you take over. But yeah, thanks again for doing this.
03:49:28.502 - 03:49:30.180, Speaker F: Jane Sweet.
03:49:39.270 - 03:49:40.020, Speaker A: Hello.
03:49:40.950 - 03:50:45.850, Speaker H: I think I'm live here. My name is Stane, and I am a product engineer at Zora. So I guess what does that mean in the larger scheme of things? I'm doing this presentation today called how to Build Engaging or Fun or whatever you want to call it, user experiences. And at Aura, in my time there, we've crafted an amazing stack of technology to build really whatever you can imagine on top of it. And I've been fortunate to build a lot of interesting projects over the last year. So, yeah, I just wanted to talk about those first and sort of the context that I've been working in as a product engineer.
03:50:46.750 - 03:50:47.114, Speaker G: Yeah.
03:50:47.152 - 03:51:03.360, Speaker H: I come from a design and development background, so I've been sort of building websites, if you will, for quite a long time. And one thing that really excites me about the medium is that.
03:51:05.890 - 03:51:06.542, Speaker A: You'Re building.
03:51:06.596 - 03:52:38.398, Speaker H: Things on a computer for the computer for this network. And yeah, I think having a heavy influence with design has kind of helped guide me towards what I think is interesting to build as a front end. So I just want to sort of step through some different projects. First up, I embarked on this sort of fun personal project, I guess, but we've been obviously iterating over this notion of the decentralized marketplace for quite some time. When I came to Zora, I worked on quite a few auction houses, the first project being this doge auction house. And then soon after that, we sort of took this concept and iterated further on it by collaborating with Holly Herndon and Matt Drehurst to create this auction house for a project, a fascinating project that they've been working on, creating a voice model of Holly's voice and opening that up for the public to use to create audio tracks. And so it's a really interesting project.
03:52:38.398 - 03:54:28.106, Speaker H: We started off auctioning the voice model itself and then just some of the data around that. And then there. Was an open call to the community to create tracks and eventually we built out this experience to showcase them and also to auction them off to raise funds for the Dow to further their research. So, yeah, this was super exciting because for me, because it represented this intersection of something that I've been passionate about for a long time, which is design, specifically an artwork that contextualizes music. I was probably, like many other people, attracted to graphic design at a really young age because I got into record collecting and I thought that I really formed this opinion that it was fascinating how the album packaging could really add this extra layer to the music that it was presenting. And I feel like now that we've moved into certainly a more culture of hypermedia and everything's online, we have this really exciting opportunity to kind of think back on that materiality of music packaging and translate that over to interactive experiences that provide context for artists, release releases that labels, labels, whatever you want to call it. And so I think that, again, what's fascinating about especially the music NFT ecosystem is that more or less the media is available from any client.
03:54:28.106 - 03:55:56.870, Speaker H: And so this gives a really cool opportunity to really kind of push the idea of what is a music client and how do we contextualize digital this, this Holly Plus project really, I think, leaned into that on multiple axes that were really fascinating. And of course, at the end of the know, you can listen to the music and you can listen to it in all other different contexts as well. You can listen to it at Zora co you can listen to it, I don't know, from wherever it's being rendered. And so that sort of segues into this notion that we have this amazing data registry. We have these possibilities for all of these interactions that can happen on chain. And we also have this layer of being able to I guess I'll just use the word publish to publish media to the blockchain as an immutable sort of content referencing system. And so, yeah, I think that when the interactions happen, for instance, when these auctions are taking place and there's a lot of activity around them like we saw in the Doge auction and other sort of like high profile auctions, you really get the sense of this buzzing network of activity.
03:55:56.870 - 03:57:13.130, Speaker H: And again, I might be saying the obvious to everybody here, but again, I think that that really presents a unique way to think about how do we render this, how do we present this type of activity and how do we present the media that's associated with it. So another project that I did at Zora, and again, all of this work is like collaboration with our team. It's just amazing, all of the hard work that goes into every different aspect that every team member here that sort of contributes. And it's really exciting to be able to kind of play with all of this stuff at the very most user facing level. So this project was a lot of fun. This was a big Mint drop, like the sort of 10,000 TFP archetype. And again, we just wanted to sort of really lean into giving the artwork context and just creating a real white label experience for this media because again, the media is decentralized.
03:57:13.130 - 03:57:32.700, Speaker H: You can view it anywhere that there's a render. These large marketplaces like OpenSea, for example, foundation, whatever, they serve a wonderful purpose as an aggregate and being able to sort of display large amounts of everything.
03:57:34.030 - 03:57:35.980, Speaker F: But what's important is to kind of.
03:57:37.490 - 03:59:01.078, Speaker H: Separate the actual artwork, the music, and just again, contextualize it and package it in a more unique sort of experience. And so while this mint was happening, again, it was exciting to sort of see a lot of the activity. We iterated further on this auction house concept with Whip maps, just taking various high profile collections and creating auction houses around them. Board apes of know and little design ideas like referencing the Christie's logo know decentralized auctions are very different from auctions that happen in large sort of auction houses, if you will. Yeah, and then we build another one for crypto punks. And this sort of led to some interesting things where when the war broke out in Ukraine, we were contacted and I broke off and worked on this sort of individually. But we helped build out, using some of the tools that we've built at Source Tools, a fundraising auction and to raise funds to help out people trying to defend themselves in that country.
03:59:01.078 - 04:00:42.274, Speaker H: So this was yet again, another fascinating sort of example of this global network activity coming together and interacting on a platform that is displaying and also allowing you to interact with something that's happening at that moment. Let's see. Yeah, so that leads me to the next phase, which we've been iterating on sort of like larger marketplace concepts. And something that we've been developing in the last few months is a marketplace specific for nouns and nouns derivatives. And again, this is another example of taking this idea of a sort of limited aggregate of various contracts and highlighting them in a way that feels like more attuned to not only like the brand, but also the attitude of a particular grouping of artwork or concepts, et cetera. So what's fun about this is that, again, you can go to this marketplace, you can get a larger bird's eye view of all of the tokens. We can look at auction history, which again is really fascinating for the primary auctions.
04:00:42.274 - 04:02:14.930, Speaker H: And yeah, if you own a few, you can list them if you like and you can buy them if they're being sold on chain with our V Three Ask module. And this is a work in progress, definitely we will be folding a lot more features into it, but it's also been an exciting project for me in the sense that I've used it to iterate on a template, if you will, that I've been cooking up that attempts to generalize a lot of the functionality and componentry that we've been developing. And so this repo will be linked. I'm building it as an example, more so than a de facto white labeled template or starter kit, if you will. So I just really invite and I'm going to be working on it while this hackathon is running and adding features that I think are interesting, building them in ways that seem to make sense. I project that for other developers might be handy, really focusing on making a lot of the functionality. I'll just go over the code base, a lot of the sort of the groupings of functionality.
04:02:14.930 - 04:04:42.126, Speaker H: For instance, if I go here and go to a collection, something like filtering, we see this on a lot of marketplaces. How do we make these filters available for developers to kind of SWAT into their projects without having to build the whole thing themselves? And so a lot of what's going on in this repo is just exploring that notion of if you're going to include a filter sidebar or something like that into some view that you're building in your application, how does that slot in and how many sensible defaults can be included in building out that component tree? How much user configuration do we want to offer? Do we want to keep this in the context of a template? Do we want this to be an NPM package that people can easily include into their projects, like a plugin, for example? A lot of these sort of open questions are it's a work in progress and a lot of these ideas are being sort of iterated on and worked through as exemplified in this repo. I'll just spin around and kind of talk to what I've been building over the last couple of days. One interesting development is the additions contracts that we've deployed and the super amazing app to create them. And I've been having fun creating some for myself. I've been making some music and putting some tracks out. And yeah, it's a really exciting and really interesting way to sort of interact with this concept and clearly it is because a lot of individuals have been and groups of people have been using it for many different purposes.
04:04:42.126 - 04:04:44.806, Speaker H: But I think for myself, I was.
04:04:44.828 - 04:04:45.590, Speaker B: Wondering.
04:04:47.530 - 04:06:27.862, Speaker H: How do we contextualize these additions in the context of a sort of general purpose marketplace or a marketplace that you could build yourself? And one interesting thing, obviously, is that every token is exactly the same. And so while if you go to like a collection, these are all one ones, but whether they're generative or hand carved, each NFT, if you go to a view like this, they're not all the same. Inversely, if you're looking at an addition, for example, they are all the same. And so I've been playing around with this notion of how do I render the contract metadata. I've got this little debug button here I'm pulling down, like, contract metadata and a lot of the props associated with the Minting contract. How do I represent that in a way that's interesting, that sort of leans a little bit more into just building portable UI around this notion that, yes, all of these tokens on this contract are identical. So maybe I don't want to just look at a grid of four or 500 or however many have been minted, unless I kind of want to know who's been minting them, and I want to see the ENS names or et cetera, if the Mint is out.
04:06:27.862 - 04:07:19.782, Speaker H: Somebody started listing a few on the secondary market with our Ask module. I'm kind of, like, knee deep in this right now. I just took this cap on as an opportunity to kind of jam a little bit and specifically focusing on a music player. And so I'm going to incorporate some ideas from this embed product that we released a little while back that has a music player in it and apply that. And then, of course, add the mint button so you can go to this platform, whatever it is, for whomever it is, and go ahead and mint one of the additions, if Minting is still.
04:07:19.836 - 04:07:20.440, Speaker I: Open.
04:07:23.370 - 04:08:29.150, Speaker H: My method of working is I make a new folder up here. I'm trying to keep everything a little segregated so that perhaps it's a little bit more, a little bit easier to make that connection between what this is meant to do, how it slots into the application. Again, trying to make things portable. I feel like many developers, if you start building certain types of projects just to jump back to this contextualizing. Music, for example. If I were to start making a bunch of projects for musicians again or labels or whatever, I'd really just want to have a good place to start so I can really spend a lot of my energy and time focusing on how do I differentiate this experience visually, how do I differentiate it with perhaps, like, an interesting approach to the user interface. How do I add new features that might be exciting to open source, like a music player? I don't know, whatever.
04:08:29.150 - 04:08:47.220, Speaker H: Sky's the limit. But we're building all of this on top of, of course, our protocol layer and then also the API that we constructed, which is just fascinating. So.
04:08:52.470 - 04:08:53.220, Speaker A: Yeah.
04:08:55.910 - 04:09:17.580, Speaker H: So sorry. Just checking to make sure I have not rambled on indefinitely. I started a little bit early, so kind of lost track of time here. Clearly, I enjoy talking about this stuff. So, yeah, I mean, maybe I'll just continue to go through the.
04:09:23.760 - 04:09:24.284, Speaker B: I'll just.
04:09:24.322 - 04:11:00.090, Speaker H: Continue to kind of, like, go through the repo, walk through it, and then AB with what you're seeing on my Blocksinker XYZ site and sorry, excuse me. Yeah, so where to start? I created a fairly detailed README, I think, but if nothing is very clear, you tell me. One of the sort of interesting concepts behind this approach, and this was informed by the Nouns marketplace, is that by default, if you go to collections and then the address, for example, is a route. If you don't white label certain contracts, this user interface that you're building really could just render any NFT collection or NFT out there that exists. And so I think that while that is an extremely fascinating concept, a fascinating reality that one could build around, you don't want that for everything, I guess, unless you're really curious. If you come up with some really funny design, I don't know what and you just want to see, what do all these tokens look like. And I've tried that.
04:11:00.090 - 04:11:51.996, Speaker H: I started collecting some pretty interesting NFTs on the free mints that this super cool site, mint Fun exposed under the pseudonymcrunkcollector E. And so there's a wallet that has just a bunch of goblins and things like that. And I plan to make something kind of fun to represent that at some point. It's super easy with the API that just demoed to do stuff like this. So, yeah, it's just like one more layer that's kind of solved and then you get to play around. But at any rate, back to this. So, here's the landing page.
04:11:51.996 - 04:12:58.590, Speaker H: Let's look at the ages. This is the Next JS app, which is the de facto framework for these types of projects. If you're working in some other framework, kudos to you, but a lot of this work just is sort of built in the context of Next JS. So, yeah, I'll go to my index page and I have my Landing composition here and go to Compositions Landing. Here's my layout. And I am using my Collection filter module filter provider, and I'm essentially hiding everything. So it just functions as a lazy loading grid or table all of the contract NFTs that I thrown at it.
04:12:58.590 - 04:14:15.080, Speaker H: And then within that, I have my little landing NFT grid. And I've created another component called NFT grid, and it's right here. And another pattern that I like to use is just taking advantage of the provider hook pattern that is so common in React, I think, especially when you're building a lot of apps and you want flexibility, you want to insert a custom renderer. For example, if you use a provider for all the NFT data, then of course you don't have to do prop drilling. You don't have to drop a bunch of props and map them all out, type them, et cetera, et cetera. It just makes things a little bit more flexible. So as you can see, if I jump back to this, there's like a lot of code in this repo.
04:14:15.080 - 04:15:20.140, Speaker H: A lot of people have contributed to it. So have fun looking through it. If I go back here to my landing FPS, I can see that I actually created, like, a custom little render, and this was to render the NFT data as I wanted to on the landing page here in this kind of so if I go there, you can see that I'm using my NFT provider data. And then I'm just going ahead and slapping all this stuff together and adding some unique styles that are possible. Now, another cool thing that's going on in this repo is that we've been working on a UI library. Essentially we've built it called Zord.
04:15:20.880 - 04:15:21.870, Speaker A: It's cool.
04:15:22.580 - 04:16:32.148, Speaker H: We've built it on top of Vanilla extract, which is a really interesting JavaScript and CSS and JS library. What it does is it actually extracts and compiles static, like a style sheet essentially. So if you've been around a while, you've probably used like SAS or less or one of these CSS preprocessors. Vanilla Extract works very much the same way, yet the interface is such that it allows you to essentially write all of this styling as you would expect in JavaScript. And one of the really cool innovations that is exposed in this Zorob Zord package, which is now public, it is in beta. We have not created pieces of documentation for it yet. So really here's an example of it in use.
04:16:32.148 - 04:17:42.764, Speaker H: But there is not a formal reading or anything like that. But I think if you're familiar with CSS, then you might be able to explore this relatively quickly. And also it's important to read the Neural extract document because that takes a little bit of time to get your bearings with, especially if you want to start writing custom classes and things like that. But what's super cool about this is that all of your sort of very basic CSS, I guess rules are typed in the components themselves. And so if you look here Stack, this is essentially a div that is a flex column and I say gap margin, top padding, x padding, et cetera. This sort of model and pattern might be familiar if you've used utility CSS libraries like tailwind or bootstrap or whatever. The speed that you can compose with this is pretty amazing once you get the hang of it.
04:17:42.764 - 04:19:13.392, Speaker H: Just feels so intuitive to just start building out components and then you can start to think about ways to sort of add your own spice on the top, if you will. And we have been conceptualizing and sort of strategizing around what a Theming interface would look like and I think that that is something that we're excited to kind of know what users would like. To what extent do you want to be able to theme versus if you're comfortable writing CSS, you can just go in here to you can just create like a global CSS file, make some CSS variables super powerful. It's CSS at the end of the day. And you can create classes, you can swap those classes into your Zord vanilla extract elements. You can use this global style approach, which will make many people cringe if they see this little flag at the end of the style. But all I will say to that is that, again, if you're like me and I enjoy sort of designing and coding together, it's kind of like, by whatever means necessary until there's some alternatives that you can I don't know.
04:19:13.392 - 04:19:15.892, Speaker H: Here I'm just playing around with colors.
04:19:15.956 - 04:19:16.570, Speaker B: And.
04:19:18.300 - 04:19:35.490, Speaker H: The way things are organized. I thought I would make a slide out menu instead of a pop over menu like this. But the repo is set up in such a way that you can just.
04:19:36.020 - 04:19:37.628, Speaker D: Let me go to the menu.
04:19:37.804 - 04:19:38.770, Speaker H: You can.
04:19:40.820 - 04:19:41.570, Speaker A: Wait.
04:19:45.060 - 04:20:44.150, Speaker H: Yeah, you can pass a prop in. You can say pop over or pop out. So again, who knows? Maybe I want this to be a pop up on mobile and a slide out on desktop or something. Yeah, just constantly trying to think about how to, when you're building something, use configuration as a mode of sort of exploring different layouts, composition, design ideas, et cetera. These were some NFTs that I created for the last E global hackathon. I've been minting my kids art. I hope that's okay with him, but I think it's pretty cool.
04:20:44.150 - 04:21:21.010, Speaker H: Yeah, I guess I'm kind of coming up on my formal time. I am wondering maybe if it is appropriate to open this up for questions. Having no audience feedback, I feel like I'm talking at a wall, but I know I'm not. And I see Jacob dialing in here. Okay, you're here. Was I even being recorded?
04:21:23.140 - 04:21:24.960, Speaker G: There's like, 200 people watching it.
04:21:25.030 - 04:21:25.744, Speaker B: Don't worry.
04:21:25.862 - 04:21:31.664, Speaker G: Well, we'll see if anybody has any questions. I did see your exclamation point important sins.
04:21:31.712 - 04:21:33.220, Speaker B: Don't worry. I'm paying attention.
04:21:35.080 - 04:21:52.060, Speaker G: So, yeah, we'll just open it up, see if anybody has any questions over on the live chat. But since I know we just had a bunch of calls or a bunch of talks back to back, it's possible that people are more in the consume than necessarily the engage mode.
04:21:52.400 - 04:22:14.290, Speaker H: Their eyes are just kind know it's just so much information. I mean, I will never be able know. Isabella's a powerhouse, and I know what she shared with everybody. Probably got people's brains. Just, you know, if anybody's anybody. If I can answer any questions, I'm happy to.
04:22:15.860 - 04:22:16.416, Speaker B: Awesome.
04:22:16.518 - 04:22:39.064, Speaker G: Well, I'm not seeing too much come through on our end, so it might be that people are sort of happy with what was presented. But I think this was awesome. I mean, it was fun to kind of explore what was possible. I think somebody asks, can we use these in our hack? And I think the answer to that is probably yes, because everything you used is sort of just out there anyway.
04:22:39.182 - 04:22:39.656, Speaker A: Basically.
04:22:39.758 - 04:22:41.020, Speaker F: Yes, it is now.
04:22:41.090 - 04:22:43.150, Speaker H: So yes, absolutely.
04:22:44.640 - 04:22:45.630, Speaker E: Go ahead.
04:22:46.480 - 04:22:47.230, Speaker A: Awesome.
04:22:47.840 - 04:22:59.730, Speaker G: All right, great. Well, maybe we'll maybe we'll leave it there. Well, thank you so much, Dana. I really appreciate you rolling through that with us and yeah, really awesome to kind of see the journey as well and kind of what's possible.
04:23:00.100 - 04:23:01.376, Speaker B: Yeah. Cool.
04:23:01.478 - 04:23:03.808, Speaker H: All right, well, thank you. Thanks for having me.
04:23:03.974 - 04:23:06.324, Speaker G: Thank you. You too.
04:23:06.362 - 04:23:08.276, Speaker E: Cheers. All right.
04:23:08.378 - 04:23:38.284, Speaker G: And thank you, everybody, for tuning in. Brings us to the end of our metabolism kickoff, which is, of course, just day one, so keep in mind you could start hacking if you're not already hacking, so please get building and you have a whole weekend to do it. The actual projects will be due on Sunday afternoon, so 03:00 P.m. Eastern time. That's the same time zone as New York. So, yeah, really looking forward to seeing what you build. And yeah.
04:23:38.284 - 04:24:02.716, Speaker G: With that being said, happy hacking. I'll see you on the discord. If you're not already on the discord, there's the link to join. And then once you author your hacker dashboard, you'll be able to see all the metabolism channels and yeah, happy hacking. If you have any questions or you want to review this, of course this is all recorded. You can head to our YouTube channel. We're also going to cut up all these videos by the end of today, so it'll be available for your easy perusing.
04:24:02.716 - 04:24:08.116, Speaker G: But yeah, otherwise, I guess we're officially kicking off metabolism, and we're really excited.
04:24:08.148 - 04:24:11.300, Speaker D: To have you here and happy hacking. Bye.
