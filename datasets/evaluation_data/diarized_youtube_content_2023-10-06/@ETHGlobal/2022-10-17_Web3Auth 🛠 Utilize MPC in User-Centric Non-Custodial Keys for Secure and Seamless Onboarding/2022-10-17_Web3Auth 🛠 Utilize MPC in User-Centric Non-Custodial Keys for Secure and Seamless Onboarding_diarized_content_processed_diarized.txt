00:00:06.090 - 00:00:44.374, Speaker A: Ola Bogota. Como ESTAS? So that's all the Spanish I know. So, yeah. My name is Chai. I'm the head of engineering at Web Three Auth. So today's session will be about how we simplify blockchain and Web Three access for everyone. And how do you enable these most seamless experiences for your users using Web Three auth? Okay, so for people who don't know about Web Three auth, what we do is we simplify Web Three for everyone, and it's where passwordless auth meets MPC enabled noncustodial key management for wallets and apps.
00:00:44.374 - 00:01:25.334, Speaker A: So that's like a mouthful. But the idea there is like, we allow you to do key management, but we allow you to do in a noncustodial way, and we enable familiar web to login experiences for Web Three users. So it's like you can use your social logins, like Google login, Facebook login, and so on, and get access to a blockchain wallet, and we do it in a fully noncustodial way. Okay, so let me just go through about what a typical Web Three user experience is like and what are the typical problems associated with that. So if you look at a typical web to login flow, how does it look like? Okay, user enters an app, they log in via SSO, and then they simply use the app.
00:01:25.372 - 00:01:25.670, Speaker B: Okay?
00:01:25.740 - 00:02:09.602, Speaker A: So this is what happens with the millions of applications out there in the wild. And this is the typical flow, which everyone is familiar with, like more mainstream audiences like my dad and everyone. But if you look at Web Three wallet login flow, it's a bit different, right? So it's dramatically a bit more complex. So whereas user needs to enter an app and needs to install like a mobile app, wallet or an extension, I need to set up the seed phrase and we need to educate the users about securing those seed phrases, need to connect the confirmation with wallet and app and need to talk about the extensions and all. And also after that, the user will start using the app. So this leads to multiple problems, obviously, the first of which is bad. UX.
00:02:09.602 - 00:02:50.546, Speaker A: Okay, so let's say if you're developing a small game, right, you want the users to focus actually on your game rather than installing and setting up Chrome extension. A couple of other problems are, like, there are some unfamiliar flows. So these are all unfamiliar flows for mainstream users, and there is no easy recoverability. So if the user basically forgets the seed phrase or doesn't secure it for whatever reason, so a lot of keys are lost. So nearly 3.6 million bitcoins are lost from misplaced private keys. And seed phrases are like the single point of failure in this case.
00:02:50.546 - 00:03:45.298, Speaker A: And for many applications which are built on Web Three, there is a very high drop off rate. Okay, so nearly 70,000 daily DApps users are lost from the Web Three ecosystem due to the long onboarding time. So typical setup takes around like ten minutes, right? So this is time better. And in the day and age of like TikTok where people's attention span is very low, getting them to spend ten minutes just to use your blockchain game is like super hard. Okay, so how do some of the enterprises solve this key management problem? Okay, so they use this concept called as multiparty computation. So these are some of the enterprise companies like Fireblocks, BitCo, Anchorage and Paxos who use MPC solutions or some custodial solutions in order to manage the keys. But what we do at Web Three authors, we are trying to democratize this enterprise grade security for everyone.
00:03:45.384 - 00:03:45.778, Speaker B: Okay?
00:03:45.864 - 00:04:24.658, Speaker A: So we bring these personal multifactor keys for any application and any wallet. So let's say if you want to build a wallet, you can use our authentication service to build the multifactor authentication for your users. So let me just talk about the way Web Three smoothens the user's journey into Web Three. Okay, so what we offer is the familiar white labeled login flow. So users can use the social logins, which they are very familiar with in the Web Two apps. It helps reduce the onboarding time, it improves the conversion rate up to 74%. And we also provide like the passwordless and other social logins as well.
00:04:24.658 - 00:05:06.030, Speaker A: So we have a very good UX team which has done a lot of research on this space. And we have actually seen several applications move from traditional Chrome extension flows to using Web Three auth and they have seen dramatic improvements in terms of user retention. This is especially true in terms of the native apps and other mobile applications as well, like the mobile web browsers where the extension flows are much more complex to use. Next we can connect to any blockchain with any wallet. So we provide interoperability across the chains, platforms, frameworks, wallets and logins. So we are blockchain agnostic. We are platform agnostic as well.
00:05:06.030 - 00:05:44.218, Speaker A: So whatever platform you're building on, whatever chain you want to target, you can use our SDK to basically get keys for that platform. Next, what we offer is the non custodial MPC enabled enterprise grade security. So it allows applications to legally operate without AML because the key management is non custodial. So you are not subject to the same KYC AML regulations which other companies are subject to. And it future proves the company's liability to safekeep user funds. Because of the non custodial nature, the user is actually responsible for his own funds. And we have some really amazing UX flows which make sure that the user never loses their account.
00:05:44.218 - 00:06:02.526, Speaker A: And usual has actually very good access, the secure access to all his different types of shares. So you can experience this yourself. As you can see now on the screen, the video is playing. So you just log in with your Google and then boom, you're actually in.
00:06:02.548 - 00:06:02.782, Speaker B: Okay?
00:06:02.836 - 00:06:26.934, Speaker A: That's literally all you have to do. So the rest of the magic is done in the browser. I'll just go through on how this magic is done later on. But as you can see, there is no difference between a traditional Web Two login flow and the Web Three login flow using Web Three auth, okay? So users feel very comfortable, they feel at home and then that's it. And they're able to connect to their wallet using this.
00:06:26.972 - 00:06:27.270, Speaker B: Okay?
00:06:27.340 - 00:06:59.026, Speaker A: So some of the top integrations look like Laddercasters, Skyviewer and Chess.com. So all of these companies have integrated us. We'll share this PPT. Later on you can actually go to the sites of all of these companies and then experience the login flow for yourself. Web Three authority is actually trusted by the best and over 3000 applications. So we are currently integrated into all of these applications. As you can see, there are several wallets and exchanges, there are several games, social applications, Enterprises, Marketplaces, NFDS, Finance and everything.
00:06:59.026 - 00:07:51.666, Speaker A: So Web Three companies in every space basically integrate us and they try to offer the seamless experience to their users. Okay, so at this point I would like to just pause the presentation and then go through our documentation. Yeah, so we have really good documentation in terms of how to integrate our SDK. So our team has actually spent months curating this and we have received rave reviews regarding the ease of use for our documentation. So if you guys go through and integrate our application using our documentation, we would love the feedback which you guys can offer. Okay, so we have a booth in the upstairs and our team will always be there, so please feel free to reach out to us. We also have Discord and Telegram channels as well.
00:07:51.666 - 00:07:54.402, Speaker A: Feel free to reach out to us and then you can comment about anything.
00:07:54.456 - 00:07:54.674, Speaker B: Okay?
00:07:54.712 - 00:08:00.214, Speaker A: So if you feel some concept is harder to understand, we'll be glad to improve documentation regarding that.
00:08:00.332 - 00:08:00.854, Speaker B: Yes.
00:08:00.972 - 00:08:34.826, Speaker A: So coming back, let me just go through what a quick start on how it looks like. So you can basically start by integrating a basic Web Three model into your application and then you can customize it according to your needs. We also have a really good integration builder like this. So you can choose your language framework and then you can choose the blockchain you're targeting. You can also talk about whether you want to use custom authentication or you want to white label our modal. I'll just show a demo of how this looks like as well. But custom authentication basically is one of the key features which Web Three also offers.
00:08:34.826 - 00:09:06.506, Speaker A: So let's say your application already has a login mechanism, okay? So you have an email password, login or whatever in your application. You can bring that and you can bring those users over to Web Three. So which basically means that we create noncustodial wallets for your existing users as well. So that is something which is possible with custom authentication and the typical web3 auth react quick start guide, which because many people use react. So yeah, that's the default here. And the blockchain is ethereum. So you can just use NPX create react app and then NPM start.
00:09:06.506 - 00:09:39.320, Speaker A: So webpack phi basically said we are not going to support the node module, so we need to add this, fix the webpack issues. Then you can install web3 or Ethers, and then you install a couple of dependencies of web3 auth. After that you import our dependencies. And then at this point, we would like that you guys register for a new client ID on our developer dashboard. So our developer dashboard looks like this. It internally uses the web3 authentic, as you can see. So we believe in our products that much.
00:09:39.320 - 00:10:12.830, Speaker A: So the typical login flow looks like this. I just clicked on login with Google and then, oh, I have biometrics enabled, so I just clicked Biometrics. So that's also something we offer, by the way. And it goes through the typical login flows where the shares are reconstructed from the social login nodes. And also I have one backup share on my device. So all of that is being reconstructed at this point and then any minute now it'll be done. I mean, the network is a bit slow here, so it's taking a bit of time, but normally it's much faster.
00:10:12.830 - 00:10:19.854, Speaker A: Yeah, and I just select an account. I think I'll just get into my admin portal.
00:10:19.902 - 00:10:20.500, Speaker B: So.
00:10:23.510 - 00:10:24.900, Speaker A: Whenever you're ready.
00:10:25.590 - 00:10:26.146, Speaker B: There you go.
00:10:26.168 - 00:10:53.034, Speaker A: Okay, so I'll just turn off my admin portal. So this is how the typical dashboard looks like. And you go to the plug and play section and you can just create a new project. So this can be any project. You can select the environment which you want, typically prefer the sign main net for building over here because the sign mainnet is present in the US. And then it's closer to this geographical region. And yeah, you can also select the chains you're building on top of.
00:10:53.034 - 00:11:31.782, Speaker A: And you can also select whether you want this web key to be shown in the taurus wallet. So Taurus is the previous name of the company. We have a couple of wallet services as well. So if you are building an app using web3 auth, the key can be shown in the taurus wallet so that it can be used within different marketplaces, basically like OpenSea or something like that. Okay, now once you create a project, you can actually whitelist the URLs here. It's a typical OAuth flow, right? You create a project, get a client ID, you whitelist your URLs basically, and so on and so forth. So we also show you the typical usage of how it looks like on the dashboard itself.
00:11:31.782 - 00:12:06.222, Speaker A: And then you can also read the docs and go to the integration guide. So let me just go back to the integration builder. So once you get your client ID, you can create the Web Three instance like this. So here I'm targeting the Ethereum mainnet so that's the chain ID and the RPC target, and you can initialize the modal. So at this point it actually shows you the modal. You can log the user in using Web Three connect. And after the user is done, the connect resolves and gives you back a provider.
00:12:06.222 - 00:12:27.130, Speaker A: You can also get the user info using Web Three Getuserinfo. You can interact with any EVM compatible blockchain because I selected Ethereum at the top. So the way it works is like the Web Three connect returns you a provider. So you can use that to initiate Web Three or Ethers. And you can do all the methods which you are familiar with using Web Three.
00:12:27.200 - 00:12:27.578, Speaker B: Right.
00:12:27.664 - 00:12:33.370, Speaker A: So you can just get your Accounts, web Three, get Accounts and so on and so forth. Again, sign transactions, send transactions and everything.
00:12:33.440 - 00:12:34.458, Speaker B: Okay, yeah.
00:12:34.544 - 00:13:13.682, Speaker A: You can also log the user out when he's done using avaid Web Three logout. And that will basically require the user to log in again when they come back to the app. Okay, so how does a typical integration look like? Okay, so I'll just go through that first. So this is a demo app which we built for some. It basically demonstrates all the different types of mechanisms which are possible. Yeah, there you go. I'll just select Mainnet for now and I click on Submit and then yeah, that's fine.
00:13:13.682 - 00:13:43.250, Speaker A: So I'll just click on connect. So it shows me the modal. So at this point, when you see the model, it basically means that Webtol Connect was called and I just click on Login. With Google, I go through the same flow which I showed you on the developer dashboard. I select an account, my shares from the taurus network, the Auth network, are being brought into the front end. It's combined with the device share, which I have on the device, and then that forms my private key. And you get an app scope key for your application from that private key.
00:13:43.250 - 00:13:46.900, Speaker A: And any second now that will be done.
00:13:49.030 - 00:13:50.242, Speaker B: Yeah, there you go.
00:13:50.376 - 00:14:13.660, Speaker A: Okay, so your application, this is the demo application. So this gets back the Appscope private key and you can do everything with it. Okay, so I can get the user info, that's my user info. I can sign some transactions. Okay, so this is a typical transaction signature, how it looks like I can sign messages. So we support all the EIP 1193. Yeah.
00:14:13.660 - 00:14:20.974, Speaker A: So you can also get accounts, get chain ID, get balance. Do I have balance on this?
00:14:21.012 - 00:14:22.014, Speaker B: No. Okay. Yeah.
00:14:22.052 - 00:14:51.766, Speaker A: And we support all the other Ethereum provider stuff as well. Okay, this is how the typical integration looks like. Now, you can also refer to our examplesamples, GitHub repo. So we have examples for all kinds of different combinations which you're looking for. So we have some important links here, as you can see. And if you want a react EVM example or NextView angular common JS. So depending on the SDK you choose, we have an example for it.
00:14:51.766 - 00:15:18.130, Speaker A: And if you really want an example for a different platform, please reach out to our team. We'll definitely be adding that example here as well. So you can target different blockchains, different types of authentications, and the mobile SDKs as well, even the gaming SDKs. So we have gaming SDKs for unity and unreal as well. So we have documentations guides and everything for that. So once you have the integration builder, we also have the SDK API reference. So, as you can see.
00:15:18.130 - 00:15:58.858, Speaker A: So we have the API reference for all the platforms, as you can see there. And yeah, you can integrate our SDK using the integration builder, the SDK API reference, and we also have some guides. So if you have some custom authentication, like firebase, OD, zero, or any other type of authentication provider authentication mechanism, we have some really nice guides for that. So, yeah, you can easily use all of that to provide the seamless experience for your users in the apps. Okay, so now, coming back to the presentation. So we have something new, which you're going to announce today. So this is our early access alpha MPC SDK.
00:15:58.858 - 00:16:02.926, Speaker A: So in the previous flows, as you can see, we reconstruct the private key on the front end.
00:16:02.948 - 00:16:03.278, Speaker B: Okay?
00:16:03.364 - 00:16:07.714, Speaker A: So with the alpha MPC SDK, we never reconstruct the private key.
00:16:07.752 - 00:16:07.906, Speaker B: Okay?
00:16:07.928 - 00:16:38.540, Speaker A: So it's all done via threshold signatures. So this is basically like Fireblocks, but for consumers. So you can just scan this QR code to access our alpha MPC SDK, and I'll just talk more about it. This is a very new SDK which we are launching just today. This is a typical demo of how it looks like. Okay, so as you saw that this is a typical same Web three login. I'll just still log in with my Google account.
00:16:38.540 - 00:17:15.554, Speaker A: It just takes a SEC. Yeah, so the difference here is that the private key is never reconstructed anymore. I'll show you how that works. And also the way we sign transactions is quite different because the transaction is sent to all of the different MPC nodes, and all of the nodes basically partial sign. And as I said, I also have a share on my device, so I partial sign with that share on the device as well. And once all the partial signatures are combined, it forms your actual signed transaction, which you can then submit to the blockchain. Okay, so the MPC has two phases, like pre computation and signing.
00:17:15.554 - 00:17:37.002, Speaker A: So the pre compute phase already happens when you just simply load the page, as you can see, and it's very fast, by the way, as you can see, even with this Internet. So I can just sign a typical message like hello, Bokota. And as you can see, that signing was done. Okay, it's less than a SEC for MPC signing. And this, I would say is like the best in the industry.
00:17:37.066 - 00:17:37.534, Speaker B: Okay.
00:17:37.652 - 00:18:19.770, Speaker A: And yeah, you can also verify that the signature is valid by going to the scan and then verifying this. Okay, so this website is live. You guys can play around with it and then if you face any issues, you can feel free to reach out to us. So there is some small comparison I would like to do, comparing the web3 Auth MPC versus the typical competitors. So I'll just use a cluster in South America for whatever reason. And see, GG 20 is the current standard which the rest of the enterprises are using and you will basically see the speed comparison between the two scenarios. Okay, maybe I can open the developer console.
00:18:20.110 - 00:18:20.666, Speaker B: Yeah.
00:18:20.768 - 00:18:46.370, Speaker A: So this is all the things which are happening. Okay, so the green is the DKLS, which is web3 Auth. It was done, the pre compute was done in 10 seconds. The signing time is like 1 second, whereas the GG 20 is still not done. Okay, so I can basically change to North America, run one more, maybe then the GG 20 will be done. Let's see. Okay, so this basically shows that our solution is like miles faster than the competition.
00:18:46.370 - 00:18:49.874, Speaker A: And yeah, this is all the console logs which are happening.
00:18:49.912 - 00:18:50.066, Speaker B: Okay.
00:18:50.088 - 00:18:51.522, Speaker A: This is all the things which are happening in the background.
00:18:51.586 - 00:18:51.814, Speaker B: Yeah.
00:18:51.852 - 00:19:01.126, Speaker A: As you can see, the competitors solution takes around 27 seconds for the pre compute and the signing takes 2.7 seconds. So we are like much, much faster.
00:19:01.158 - 00:19:02.074, Speaker B: Okay? Yeah.
00:19:02.192 - 00:19:18.334, Speaker A: And this is the documentation for our alpha SDK. So if you guys want to use the MPC, which I was just showcasing here and here the threshold signatures, we have a new SDK for that. So the only difference between the new SDK and the old SDK is the way you initialize it.
00:19:18.372 - 00:19:18.622, Speaker B: Okay?
00:19:18.676 - 00:19:49.894, Speaker A: So the older ones basically use Edrade web3 web3 Auth. And this uses edrade web3 MPC. Web three auth. And the way you use it is exactly the same as the typical web3 Auth integration, except the open login adapter the way you write it. So you just use the iframe URL as mpcbeta openlogin.com. This is our alpha site where we have the TSS signing and you use the TSS settings like this. And then you can just copy paste all of this logic and it'll just work.
00:19:49.894 - 00:20:35.430, Speaker A: Okay, so as you can see, the typical login logout flows, the quick starts, all of them are exactly the same and you can use it with any blockchain. And the flow is also exactly the same. So there is no difference or extra complexity which you need to do in order to integrate the MPC flows. Okay, so we also have a very nice code for the demo. So I was showing you this demo, right? This is a different demo which basically shows you how to integrate the MPC SDK. And yeah, this is a simple repo which showcases that integration and I can just show you the run through the code very quickly. So it's a typical react app as we talked about.
00:20:35.430 - 00:21:22.278, Speaker A: You just install at the rate Web Three out Mpcbase and at rate Web Three out MPC, web Three out. These are the new SDKs for the MPC as I was talking about. And the rest of it is like the typical react app, you just need to do the config overrides the same with any Web Three application nowadays. And when you go to app TSX, which is where everything is, you can initialize Web Three Auth. You can initialize Open Login adapter, pass these TSS settings to enable the MPC for you. And you init the modal, basically initialize the modal in the back end, configures the different adapters which we have, and so on and so forth. And then when the user wants to log in, the user basically can click a button and then we call Web Three Connect.
00:21:22.278 - 00:22:02.500, Speaker A: So once the user is connected, we get back a provider and then that's it. You can use that provider to do all the transactions. Okay, so I'll just do NPM install here or no, it's yarn actually. I'll just do yarn and yeah, I don't think the Internet speed is that great, but no worries. So you can do the typical things which I was talking about before, getting the user info, logging the user out, getting the chain ID, getting the accounts balance, signing and sending transactions and everything. Okay, so the flow remains exactly the same, it's just you need to use a different package. Okay, that is all.
00:22:02.500 - 00:22:27.514, Speaker A: And our team will be always here so you can reach out to us if you face any issues while integrating the new MPC or the old Web Three typical SDK. Okay, let me just get back to the PPT now. So thinking about what to build. Okay, so you guys might be having different ideas already and you guys might be already forming a team regarding if you have an idea you want to build.
00:22:27.552 - 00:22:27.962, Speaker B: That right.
00:22:28.016 - 00:23:10.774, Speaker A: But we also have some suggestions for some of the ideas which you can build on top of Web Three Auth. So we offer around 20,000 total in the bounty tracks. The best overall app gets 7000, the security track has two items, the best in Track gets 4000 and the run up gets thousand. And we have other tracks like Identity and Data and then use Case and UX as well. So we think UX is a very serious problem to solve in case of blockchain and then we prioritize that by actually giving a very good bounty for the use Case and UX as well. So here are some of the ideas regarding what to build. So the top idea basically is like the building the security policies on the MPC engine.
00:23:10.774 - 00:23:32.042, Speaker A: So I was just talking about the MPC engine, right? So where we have the threshold signatures and all. So in that case, a DAP can basically choose to have a policy engine in the sense that let's say all the users of its DAP should not spend more than 0.1 E a day or even user can configure this. Users can configure like I do not want to spend more than 0.1 E a day or any kind of limits.
00:23:32.106 - 00:23:32.334, Speaker B: Okay?
00:23:32.372 - 00:24:13.190, Speaker A: So you can also have some sort of scam detection or transaction uniqueness or something like that. So all kinds of security policies can be built on top of the MPC engine. So we have some really good code for this in the demo which I was showing you earlier. So we would love to see more security policies built on the top of this MPC engine. And yeah, the best price usually goes to the best security policy to be honest. And we also have combining the MPC with smart contract or multi SIG capabilities. So if you're building on top of other multi SIG or some smart contract wallets, you can use the MPC solution to integrate this as the default key for those smart contract wallets or the multi SIG cases.
00:24:13.190 - 00:24:49.900, Speaker A: So how do you introduce the time based security on MPC? Or what are some of the IAM systems that people would appreciate? Like you can integrate no Safe plus MPC or something of that sort? Next, there are some ideas around encryption and decryption as well. So could we build a messaging layer between the wallets and apps based on the user public private key pairs? And what are some of the UX friendly permission systems for users when talking about their data? So these are some of the ideas which you are thinking about in terms of the encryption decryption side and some of the ideas regarding the Web Two and Web Three identities are like.
00:24:51.710 - 00:24:52.026, Speaker B: How.
00:24:52.048 - 00:25:48.986, Speaker A: Can we help apps identify what users would be into ahead of time? So Web Three Auth has this concept of derived addresses where you can know what the address of a user will be before they actually log into your application. Okay, so in that case as well, you can use Web Three to actually identify the identity and we can also manage the back end systems for Web Two and Web Three for server resources. And can we share the reCAPTCHA or KYC for multiple users using this Next because we link Web Two and Web Three identities, right? So it makes real sense to have some of that. Next for payments. How can we make crypto payments more friendly? What stack or markets would appreciate crypto payment adoption? And the most important one, the silky smooth UX. So UX that we just can't trust is like if you are building some application with a very slick UX that basically qualifies for a really good price. And what are some of the gasless abstractions you can do on top of the e two.
00:25:48.986 - 00:26:25.302, Speaker A: Okay, so these are some of the ideas which we have and yeah, that brings us to the end of the idea. So this is our Mpcsdk, so you can scan this QR code and then you can keep in touch with us on the Twitter at dreadwebtioth. Discord DG web3 auth. This is our telegram and you can also mail us anytime. So please feel free to reach out to us and we'll be available on all these platforms throughout the hackathon. Our team will also have a couple of mentors at our booth, so please feel free to reach out on either the telegram or by coming over to our booth. So we'll be happy to help you in any sort of way.
00:26:25.302 - 00:27:36.504, Speaker A: We can also brainstorm a couple of ideas which you would want to discuss as well. Okay, so yeah, that's the end of presentation. Okay, does it, does anyone have any questions? Hello. So the question was that if you sign using Web Three Auth into different applications using the same social login, would you get the same wallet address or a different one? So the answer for that is you can configure it. Okay, so let's say if you own both the DApps, if you use the same client ID, you get the same address. If you use a different client ID, you get a different address. So the way it works is even though the social account creates only one private key, if you use it in an app, you get an app scoped key derived from that root private key.
00:27:36.504 - 00:27:44.252, Speaker A: Okay, so the keys which apps receive are basically app scoped keys. Yeah, they are scoped to your app.
00:27:44.306 - 00:27:44.910, Speaker B: Yeah.
00:27:53.390 - 00:28:30.300, Speaker A: No other questions? Would you export? You can always export the private key. So users can export the root private key by visiting App Openlogin.com or the DAP. Appscope private key is also available for the DAP and DApps can create the UI to export it. Or users can also download all their Appscope keys on App Openloggin.com as well. Okay, so we have configured the entire UX around this to be very seamless both for the users and the DApps as well.
00:28:30.300 - 00:28:39.216, Speaker A: So the DApps can basically automate all of this programmatically in order to help users understand and export their accounts as well.
00:28:39.238 - 00:28:39.810, Speaker B: Yeah.
00:28:45.700 - 00:28:50.800, Speaker A: Not really. So as I said, the private key consists of multiple parts.
00:28:51.220 - 00:28:51.836, Speaker B: Okay?
00:28:51.958 - 00:29:30.332, Speaker A: The private key consists of multiple parts. So the social login basically share is split into multiple subshares across the auth network and you also have a second share on your device. You can also have one more share on your backup trace and so on. You require two out of these N shares to actually create your private key, which basically means that it's noncustodial kind of or self custodial, I would say for the end user. Because let's say even if the auth network gets hacked for whatever reason, right, the attacker cannot get access to the. User's private key unless they have their device or the backup, whatever. So in that way it's self custodial login or noncustodial login.
00:29:30.332 - 00:29:37.220, Speaker A: The way you see it, that's kind of our USP in terms of comparing to our competitors.
00:29:42.280 - 00:29:42.788, Speaker B: Yes.
00:29:42.874 - 00:29:51.248, Speaker A: So while the user sets up the MFA, we also offer different types of setups.
00:29:51.264 - 00:29:51.444, Speaker B: Okay?
00:29:51.482 - 00:30:16.976, Speaker A: So like user can start with two out of two, two out of three, two out of four, and so on. You can add multiple devices, you can add a password, you can add security questions, backup phrase, you can also do N number of things. So we have generated our own user flows after multiple years of UX research to make sure that users never actually lose their account, even if they lose a device, or even if they forget their password or lost their backup phrase as well.
00:30:16.998 - 00:30:17.424, Speaker B: Okay.
00:30:17.542 - 00:30:48.040, Speaker A: And we also have this solution called as Web Three self host, which basically means that you can build all of the UX flows which I'm showcasing. So in that scenario, our team can work with you in order to provide the best Uxflow for your application as well. Okay, that's available as a separate feature. Yes. Pricing. Yeah, you can go to web3 IO pricing. To be honest, we are cheaper than Cognito or Okta.
00:30:48.040 - 00:31:18.900, Speaker A: The pricing is basically based on mau monthly active users. So depending on how your application gets how many monthly active users your application has, the price scales, okay. It's free up to the first thousand monthly active users. And we have different tiers based on the number of mau you have. The typical would be like I'm not sharing screen, but for 1000 logins it's like 70 something, I guess.
00:31:18.970 - 00:31:19.590, Speaker B: Yeah.
00:31:19.960 - 00:31:26.964, Speaker A: So it's like 0.6 cents per user for a million logins per month.
00:31:27.002 - 00:31:27.156, Speaker B: Okay.
00:31:27.178 - 00:31:46.364, Speaker A: It's mau per month. It's like rock bottom. So you can actually check the slider. Oh my God, my mouse is not working. Okay, so that's the slider we have. And if you cross more than 1 million, you can upgrade to Enterprise and then you can have a custom rate for your application.
00:31:46.482 - 00:32:06.706, Speaker B: Yeah. Yes.
00:32:06.808 - 00:32:12.450, Speaker A: So one good example I would showcase is basically like Cache IO.
00:32:15.830 - 00:32:17.220, Speaker B: Yeah, there you go.
00:32:18.790 - 00:32:34.026, Speaker A: So, Cache IO is a typical example of a multi chain application. So they are present on both Tezos chain and Ethereum mainnet. So how it works is you can simply log in with your Google account. I keep using Google for no reason. You can use other social logins as well.
00:32:34.048 - 00:32:34.234, Speaker B: Okay.
00:32:34.272 - 00:32:36.122, Speaker A: You can also use the passwordless, by the way.
00:32:36.256 - 00:32:36.940, Speaker B: Yeah.
00:32:38.270 - 00:32:45.998, Speaker A: So on and so on and so forth. Basically, the app gets an Appscope private key and then they derive the tezos key from the same private key.
00:32:46.084 - 00:32:46.478, Speaker B: Okay.
00:32:46.564 - 00:32:55.582, Speaker A: So that way the keys are compatible with both SCCP and Ed 2519 chains. So you can typically literally use it with any blockchain.
00:32:55.646 - 00:32:56.018, Speaker B: Okay?
00:32:56.104 - 00:32:59.682, Speaker A: So all blockchains basically use SCCP or Ed two five nine keys, right?
00:32:59.736 - 00:33:00.340, Speaker B: Yeah.
00:33:01.190 - 00:33:07.510, Speaker A: So, as you can see, I have an account on Terra. I have an account on Ethereum as well.
00:33:07.660 - 00:33:08.360, Speaker B: Okay.
00:33:09.610 - 00:33:11.510, Speaker A: Using the same login mechanism.
00:33:12.410 - 00:33:12.966, Speaker B: Yeah.
00:33:13.068 - 00:33:19.322, Speaker A: My time is up almost. So if anyone has any extra questions, we'll be right outside. Okay, last question, maybe?
00:33:19.376 - 00:33:19.980, Speaker B: Yeah.
00:33:26.150 - 00:33:30.674, Speaker A: Not really. So it depends on the DAP. To actually configure it because the DAP. Gets the Appscope private key.
00:33:30.712 - 00:33:31.202, Speaker B: Right? Okay.
00:33:31.256 - 00:33:52.978, Speaker A: So they can sign transactions on your behalf. So the DAP. Can show the models depending on their use case. But let's say if you're building some kind of application which does not want the private key, we offer another integration called as Taurus Wallet. So, Taurus Wallet is also our product, and in this case, the DAP. Never gets the private key. It lives in an iframe.
00:33:52.978 - 00:34:12.318, Speaker A: It's basically a web based wallet, and it's the one which is integrated into OpenSea and other marketplaces. Okay, so that's it, guys, we're out of time. So our team will be right outside. You can reach out to us. And we also have a booth on third floor. Please feel free to drop by. And then if you have any questions, please ask us.
00:34:12.318 - 00:34:13.520, Speaker A: Thank you very much.
