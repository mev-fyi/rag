00:00:46.530 - 00:01:37.906, Speaker A: All right, I'm going to get started. Thanks everyone, for joining me tonight. My name is Yonden Fu and I am one of the co founders of the Livepeer Project. So Live Peer is a decentralized video streaming and processing network and I'm going to talk to you today about unleashing Web three video experience experiences with Live Peer Studio. But before I dive into Live Peer Studio and all the different video experiences that you can build with it, I want to talk a little bit about open video infrastructure and what we've been building at Live Peer and how that enables Live Peer Studio in the first place. So just to kick things off, today 80% of all Internet bandwidth is consumed by video streaming. And this shouldn't be too surprising to many of the folks in this room that are used to consuming content online on various social platforms.
00:01:37.906 - 00:02:24.230, Speaker A: And this number is really only going to increase in the future. So 80% is really just the start of this trend. However, if we take a look at the status quo and the landscape of how Internet video works today, it looks a little something like this. So we have this closed box that's powered by web two applications and Web two infrastructure. And many of these names on this slide should look familiar to folks. So in Internet video we have dominant players like YouTube for on demand video, we have Twitch for Live Streams. And increasingly, as of late, we have Instagram around short form video with their Reels feature.
00:02:24.230 - 00:02:54.842, Speaker A: So TikTok is also in that category as well. At the same time, when we think about the infrastructure that powers all of these experiences, we have some familiar names. We have AWS. We have Google Cloud. We have Azure. So a lot of these hyperscalers and cloud service providers. And you might ask the question, well, why highlight this? Is this really a problem? And I would make this claim, which is closed infrastructure.
00:02:54.842 - 00:04:07.442, Speaker A: So that box that I just showed on that last slide leads to closed walled gardens. And this is particularly important when it comes to video. I would state that because video only exists and can be experienced within the boundaries dictated by whoever controls the infrastructure. So imagine the scenario where you do have portability around all the video data on Instagram or all the video data on all these different platforms. If you can't actually play back that video and you can't actually distribute that video effectively to a global audience, then you're still hamstrung, right? And it's really only these small number of giants and these small number of cloud service providers that are effectively able to provide that infrastructure at scale. So your ability for your content to exist and be experienced by the rest of the world is dictated by the terms that they set. And some of the implications that I think are interesting here are one, developers are unable to freely experiment with building new video experiences without either one of the following exorbitant costs.
00:04:07.442 - 00:05:06.206, Speaker A: So this infrastructure is really expensive to run, so either you pay a gatekeeper for access to it or you build it yourself. But in both cases, you're paying a lot of money. Or in the case where you're reliant on a gatekeeper for access to said infrastructure, you're subject to the threat of a single party that may or may not have any accountability mechanisms to flip a kill switch in order to make your content available and accessible to the rest of the world. Or not. And second, what I think is interesting is video creators are actually defined by the platforms that they use instead of being self sovereign. So I have a colleague that likes saying that he wouldn't want to be a Twitch streamer or wouldn't want to be a YouTube streamer, but he would just want to be a streamer and he's defined by the act that he performs and the content that he creates. But that's really not possible today, right? Because you can only be a streamer if a platform like Twitch allows you to be a streamer.
00:05:06.206 - 00:06:00.634, Speaker A: You can only be a streamer on YouTube if YouTube allows you to be a streamer. So the situation that we're currently in is because infrastructure is not particularly accessible, you have to play on the terms and the playing field dictated by whoever controls said infrastructure. So we think a lot about this at Livepeer and what we think the path forward is, is open video data and open video infrastructure. And an example that I like going through of the possibility of what the future could look like in terms of unlocking new and rich video experiences. I often cite a pair of applications from the Lens ecosystem actually. So for those that are not familiar with Lens, lens is a decentralized social graph protocol that's built on the polygon blockchain. And what's interesting about their approach is that they've created portable social graph data.
00:06:00.634 - 00:06:59.390, Speaker A: And I'll get to why this is relevant for video momentarily. But before getting to that, what I have on this first slide is a screenshot of an application called Lens Tube. So you can think of it as a decentralized YouTube where the social graph data and all the social post data is portable and shared as common infrastructure amongst the same set of applications. And we can see here that we have this video experience that looks very much like YouTube except it's built in Lens Tube. But if we look into this next slide we have another application from the same ecosystem called Lenster and this is actually the same exact social post data and it's surfaced in just a slightly different way. So it's the same video content, it's the same text content, but it's presented in different user interface. And the reason this is interesting is because we have the advantage of data portability which allows developers now to build specifically for custom preferences depending on a user base.
00:06:59.390 - 00:08:06.770, Speaker A: So it could be the case that in scenario number one, it makes more sense to build this video consumption centric application experience. So something like Lens Tube might fit that user type a little bit better, but something like Lenster, if you're less focused on consuming, say, long form video content, you're probably not going to want that video to be taking up the entirety of your screen. If you want to scroll through a feed really quickly, that's really not optimal for that. So something more along the lines of what Leinster has built might be a better fit for that. So what's really cool here is that this is the same social post data that's shared and interoperable. And now these developers can be really creative around how they build custom experiences and new experiences for different audiences, instead of a single monolithic application, having a single developer team trying to cater towards many different audiences simultaneously, but never truly fulfilling the needs of any of the audiences particularly well. So where does video come into play? The reason that I like highlighting this example is that in both of these cases, video is still featured prominently here.
00:08:06.770 - 00:09:12.530, Speaker A: And imagine a scenario where you're unable to watch the video in Leninster, as well as you can watch the video on Lens Tube, and that would detract a lot from the experience, right? So even though you've created this new interesting product experience for Lenster, you're kind of hamstrung because someone tries watching the video content for your social post and it just doesn't work particularly well. Maybe it looks a little bit squished, maybe it keeps buffering. You're not really going to paint a very compelling picture of your product if that's the case. So this is where a guarantee of experience and portability of experience comes into play, where we think that the future of rich media applications is going to be the combination of these two things. One is data portability. So this is something provided by projects like Lens where you can share social graph data. But second is this guarantee of experience and this portability of experience where you can go to these different applications and you can be guaranteed the same high quality video consumption experience as some other application in that ecosystem.
00:09:12.530 - 00:10:47.110, Speaker A: And we think that really the only way that you can do that is with shared public open video infrastructure to provide these guarantees to more developers so they can spend less time worrying about, well, is my video going to buffer? And more time on how unique can I make my product experience? So many of the people in this room might already be familiar with decentralized storage, and you might be asking the question, well, if I already have decentralized storage and I'm able to upload, say, an MP4 file to IPFS, Rweave, so on and so forth, isn't that enough? We've already seen examples of applications that upload MP4 files to these systems and then play back in the browser. Don't get me wrong, you can get pretty far with that approach. However, the reason that I'm choosing to highlight this right now is that if you take a look at the existing web, two experiences that consumers know and love, there's a lot going under the hood and a lot of complex plumbing that makes that YouTube experience, that Netflix experience, that twitch experience so seamless, that low latency, that interaction that you can have in a chat box because the latency is so low. There's so much that's happening in order to make that work. And while decentralized storage is certainly going to be a part of the picture when it comes to building these applications, we think we need more. And why do we need more? Because we want to avoid this. We want to avoid this constant loading indicator because this is what kills product experiences.
00:10:47.110 - 00:11:24.398, Speaker A: And to just illustrate the flow of how this buffering and this loading indicator might manifest itself is let's just say we have three people, and person one wants to play a particular video. And let's say that they're just using IPFS or they're just using some decentralized storage system. They're going to have some CID, they're going to have a hash to reference the video and that provides data integrity. That's great. But let's say person A, person one wants to watch it on their iPhone. Person two wants to watch it on their Android, different shape, different form factor. Person three wants to watch that same video on a low bandwidth connection.
00:11:24.398 - 00:12:07.102, Speaker A: And everyone in their household is also simultaneously watching Netflix, so they don't exactly have a lot of bandwidth to spare. So the basic approach here would be your device would send a request to said storage system, fetch the file back, and try to start playing it. This is probably what's going to happen. Someone is going to say that the video keeps buffering. Someone's going to say that the video takes so long to start playing. You press Play and seconds might pass by and nothing happens. And then it starts and someone might say that the video looks really squished and it just doesn't look right because the video that you're playing back wasn't created for the particular device type and the format that you're playing back on.
00:12:07.102 - 00:13:07.602, Speaker A: So all of these are just examples of how that experience isn't just quite right in that scenario. And this is particularly problematic when we think about what the experiences of the future are going to look like, where if we want to be truly creative with how we can leverage media on the Internet, we want to encourage people to experiment with new ways of consuming that content. So regardless of what you think about, say, TikTok or the recent trends around recommended algorithmic video feeds, what was particularly novel was this vertical scroll autoplay mechanism. And that was one of the first times. That when people started using that in TikTok where they experienced this product, where videos just continuously played one after another short form and it was pretty seamless. And because of the recommendation algorithms, it was also really engaging. But the only reason that format works is because you can watch those videos seamlessly, one after the other.
00:13:07.602 - 00:13:58.242, Speaker A: Just imagine a scenario where you watch video one, video two, and then all of a sudden video three just halts. You're instantly removed from that product experience. You're instantly losing engagement there. And I highlight this because it's going to be challenging to create these new product experiences if you can't guarantee the experience of any individual video at the same time. So just to round things out here, I highlight all these things because why not just upload and playback MP4 files? Well, some of the things that we want here, we want support for short time to playback that can be hard to achieve with big MP4 files. We want to support things like adaptive bitrate streaming. So this is actually a term that refers to what services like YouTube, Netflix, and all these web two platforms that we're accustomed to use.
00:13:58.242 - 00:14:53.880, Speaker A: It basically means that I'm going to take a video that you upload and I'm going to create all these different versions of it so that no matter what device you're on, and no matter what internet connection speed you're on, you're going to get the best possible version of this video. You can only do that if you have some level of processing involved. The next one, I think, is pretty forward looking and interesting and actually not too far off. But we want support for things like video enhancements. So I don't know if anyone follows kind of like the latest trends in artificial intelligence, but OpenAI, a major R D lab in this space, released their whisper model recently, which is really effective at automatically transcribing the audio contents of a given video or generally a media asset. And then what you can do with that transcription is now you can also insert that as metadata into your video and now you have automatic closed captioning. You didn't have to do anything yourself and that just works.
00:14:53.880 - 00:15:45.014, Speaker A: Once again, that's not going to work unless you do some level of processing. And lastly, if we want to support things like live streaming, unlike static file content, live streaming, it's dynamic files being constantly generated. So that's why the industry has specific protocols to support this, such as RTMP and HLS and lower latency variants such as Llhls. And all of these things need to be supported in order to truly create a good live streaming experience. So in summary, you can just upload and playback MP4 files, but you probably want a little bit more. So I mention all this because what we've been working on at Livepeer is what we refer to as the Open Video Protocol. And what this open video protocol enables is tying it back to some of the things that I was just talking about.
00:15:45.014 - 00:16:20.020, Speaker A: It allows anyone to generate videos with the best codec selection for a desired video experience. So going back to adaptive bitrate streaming, it allows anyone to generate the best possible quality versions of videos. So doesn't matter where you are in the world, you can get a good playback experience. Allows anyone to generate videos with the best container selection for a desired video experience. Without getting into the nitty gritty details. Videos are often packaged up into different containers depending on how they're going to be consumed. So this is enabled on the network by media servers that provide this service.
00:16:20.020 - 00:17:28.402, Speaker A: And lastly, it allows anyone to deliver these generated live streams and or generated on demand videos with low, latency and short time to playback for viewers. And this is all supported by media servers that participate in this protocol and in this network. So, putting this all together, we have this video infrastructure network, and this is a screenshot from our Explorer application that just gives us a snapshot of some of the relevant stats that you might care about around this network. Such as how many fees are being paid in in order to access all these services, how much actual minutes of video are flowing in in order to access these services. And that brings me to live peer Studio. So Live Peer Studio, which I think is going to be most relevant for anyone hacking this weekend, is what we refer to as your gateway into the Live Peer Protocol and the network and is also the video toolkit for web3 applications that want to build these rich video experiences that I mentioned. Some of the features that Studio gives you includes end to end live streaming.
00:17:28.402 - 00:18:20.742, Speaker A: So starting from ingestion, so you have a streamer that wants to stream that video, you can ingest it, you can transcode it on the fly on the network in order to generate all those different renditions that I mentioned. And then you can also play back all those renditions seamlessly in your browser in your application. We support video on demand, also referred to as VOD, similar to live streaming. This is end to end. So you can upload a file, have it be transcoded into all these generated versions and then play it back seamlessly in your application. And then a couple other cool things that we support here that hackers might be interested include viewership metrics. Have you ever wondered how many people are actually watching the content that I put out there? How engaged are they? Can I use that information to update how I build my product experience? And lastly, video.
00:18:20.742 - 00:19:25.142, Speaker A: NFT minting. So today we've seen this explosion of activity around NFT Marketplaces and people using NFTs as an interesting monetization tool for creators. And a lot of these NFTs have been linked with interesting text assets, image assets and we think that the next wave is going to be around video, similar to how in Web Two, we went from image only sharing to this explosion of video sharing. So what we've built are a set of SDKs and tools that allow you to easily go through the Video NFT Minting process without a lot of pre existing knowledge. So just to walk through some of the things that you'll be able to do with live streaming, with a single curl command that looks something like this on the left, you can create a stream so that you're ready to actually start live streaming. And then from there, you can use any standard broadcasting tool, maybe OBS, which is a pretty popular tool. All you need to do is enter the RTMP URL supported by Studio.
00:19:25.142 - 00:20:38.078, Speaker A: You enter a stream key that's generated for you. When you start using the API and you're off to the races, you can start streaming. We've built this dashboard into Studio, which gives you a lot of high level information about your stream. So this includes the health of your stream, what the metrics look like. It includes a preview of the actual playback of the stream so you can actually determine for yourself, is this working properly? Is this actually being presented properly to the viewers? For VOD, for VOD, we wanted to make it really easy to have you take your existing assets, regardless where they are, and have them be transcoded via Live Peer so that you can get the best possible quality of experience in as few lines of code as possible. So if you have an asset that's already, say, on decentralized storage, whether it's an Rweave gateway or an IPFS gateway, doesn't really matter. If your asset is already there, you can submit a single simple JavaScript query to one of the API endpoints for Studio, and have Studio pull that data in, transcode it, and make it available for seamless playback.
00:20:38.078 - 00:21:21.822, Speaker A: If you don't have the asset living in another storage system already, you can do direct upload as well. You can simply upload and have one of your users paste in a file, and then that will be uploaded to Studio for transcoding and playback. Viewership metrics, simple JavaScript query to an API endpoint for Studio, and given the Identifier for an asset that you've already uploaded, you'll be able to get viewership information. You'll get a sense of what engagement looks like. And lastly, video. NFT minting. So for Video NFT Minting, we've created an SDK and tooling that will simplify this process so that given an asset that you want to create a Video NFT for, it can be exported to IPFS.
00:21:21.822 - 00:22:14.926, Speaker A: It'll be uploaded and transcoded and made available for playback. With Live Peer, all of that metadata information can be packaged up into ERC 721 compatible metadata objects. And then at the very end, once all of that is ready, we also provide a really simple template for you to try out Minting, that video NFT on polygon. So this is a template, right? So this is really just meant for you to get started and play around with the NFT Minting feature. Of course you're likely going to want to customize this experience for yourself and you can do that using the SDK and tools that I mentioned. But this template can help get you started just so that you can go through the flow, get accustomed to what the flow looks like. So going into this weekend, we have a bunch of features in studio that we think will be really helpful to hackers that want to embed video in their applications.
00:22:14.926 - 00:23:31.338, Speaker A: And there's a lot of hacks that we're excited about and some of the things that I'll mention here really are just guidance and for inspiration. Of course we look forward to seeing what everyone will build on their own. But just some of the things that we think would be cool for people to explore and think a little bit about include live stream experiences around NFT drops. So NFT drops today oftentimes are kind of individual experiences where an NFT drops and you might participate in the drop, you might try to get a particular NFT in a collection. What if you can actually have a live stream experience where people can participate in that drop together in a live fashion and create a more social and communal experience around that live streams around NFT pack openings. So I don't know if anyone here is familiar with the concept of an NFT pack. If you're not, you might be familiar with this other genre of videos or content that you might have found on YouTube or elsewhere, which is, I think it's called like unboxings, where these content creators will have mystery boxes that they'll open live or in the content that they share and then they don't know what's going to be in that box.
00:23:31.338 - 00:24:26.506, Speaker A: But it ends up being this really entertaining and interesting experience for their audience because their audience gets to watch them go through the process of opening that box. It might seem a little bit silly if you've never kind of dove into that rabbit hole of content yourself, but it is really interesting how engaged people are with those types of experience. And the reason that I mentioned that is because, well, physical unboxings make sense. You have a physical box, you'll open it up, you don't know what's inside. What's the digitally native version of that? What's the web3 native version of that? And we've already seen a lot of experimentation with NFTs and some interesting concepts around being able to create an NFT and then call a smart contract function in order to generate additional NFTs that you don't know what they will be ahead of time. And once again, this is very easy to be an individual experience. But what if you can make it a social and communal experience? What if you can live stream that.
00:24:26.506 - 00:25:02.946, Speaker A: What if you can have people participate live? An extension of that would be what if you had people say live bid and participate in the pack opening process so that you can see a content creator that you really enjoy. You can support them by bidding on the packs that they're opening. And that's part of the experience for everyone. A couple of others to round out the list. Video messaging apps. Messaging apps that use video as the native content form factor in order to communicate with either another individual or in a group. Video recording tools.
00:25:02.946 - 00:26:44.914, Speaker A: So think something like Loom except Web Three native, allowing you to record and own the content that you create and then monetize that directly with your audience. Something else that might be interesting is Web three video newsletter subscription apps. So we've seen this huge explosion of newsletter writers on platforms like Substack in the past year, two years, and text is a great form for that, right? But we also know that Vloggers on platforms like YouTube or Streamers on Twitch, video is their native content form. So they might not be the most well suited to write a written newsletter, but they can create really interesting video content on a recurring basis. And what if we created Web three native video newsletter subscription apps for them so that they can regularly schedule content to be released to their audience and have a direct monetization relationship with their users, with their audience? And lastly, just coming back to the theme around NFTs, we've predominantly focused on static content for NFTs, but live streams are a great example of dynamic content. So what would it look like when we start embedding live streams into NFTs and having collection of live stream NFTs? And once you start exploring that, having an explorer that can surface all of these live stream NFTs? So that what's interesting, is that I can go on Twitch today and see what streams are live there, I can go to YouTube Live today and see what streams are live there, but there's not a very easy and good way to have a composition of the two and to have those two services be interoperable. But what's interesting about NFTs is that they can be a shared data layer across all these different applications.
00:26:44.914 - 00:27:29.926, Speaker A: So what if you built an Explorer that allows you to surface all these live streams across different applications, and then you could build experiences around that. So those are just some of the things that might be interesting for people to think about and hack on this weekend. But of course, everyone here is probably way more creative than I am. So I'm sure that there are much better ideas out there than what I listed. So encourage people to just poke around. So to round things out for ETH Bogota this weekend, we have a set of prizes for people that integrate the Lipier Studio API. First place, $5,000 2nd place $3,000 3rd Place $2,000 we have this hacker Quick start guide, so feel free to scan the QR code and that'll take you to this notion page.
00:27:29.926 - 00:28:13.060, Speaker A: That should contain all the relevant resources for you to get started poking around with Studio and also exploring some of these other hack ideas. And last but not least, join our community. So once again, scan the QR code and that will take you to a portal that will give you access to the various community channels that we use. And this is a community where we're not only technical and we're building out this protocol and network. And if that's what you're interested in, of course we welcome that. But it's also a community that's exploring this question of what are the rich media and video experiences of the future going to look like not only for Web Three, but for the Internet as a whole. And if that's interesting to you, definitely jump into the conversation there.
00:28:13.060 - 00:28:40.756, Speaker A: So that's all that I have for today. Thanks for your time. And if we have time, I can take some questions, but I'm not sure how much time we have left. I don't know. Yeah, we'll start with him and we'll come back here. Yeah.
00:28:40.858 - 00:28:46.980, Speaker B: Do you have any samples that are now real life samples?
00:28:49.560 - 00:29:13.310, Speaker A: Yeah, great question. So I think the first example that I would cite is the one that I already cited in the slides. This application called Lens Tube, which is built in the lens ecosystem. So that application is live. You can use it today. I think it's at like Lenstube XYZ. If you go to the Livepeer Studio page and scroll down a little bit, there should be a few other references to applications that are live using Livepeer today.
00:29:13.310 - 00:29:58.444, Speaker A: A lot of them, you'll see the trend is user generated content. So we have applications building user generated content platforms focused on filmmakers or Lens Tube, I already mentioned, so a lot of user generated content. So I would start there. You had a question? Yes. So the Studio, Lipier Studio also supports recording, so you can automatically record the live streams so that they're available afterwards. And I believe you can choose the storage location of your choice. So if you want to use centralized storage, go for it.
00:29:58.444 - 00:30:08.830, Speaker A: If you want to use something more decentralized, you can do that as well. But that is supported in the service. Yeah, can I.
00:30:10.560 - 00:30:12.830, Speaker B: Use, for example.
00:30:15.220 - 00:30:16.850, Speaker A: Sorry, could you repeat the question?
00:30:17.300 - 00:30:25.510, Speaker B: Can I store platform link, for example, to access the video?
00:30:27.080 - 00:31:00.120, Speaker A: Okay, custom link. So I believe that short answer, yes, I believe that you can do that today already, but it might require a little bit additional development work on your end. Something that actually one of the team members that is here this weekend is playing around with is making that easier. So you can easily create, say, like subdomain URLs. So let's say that you have. A domain that you want the playback URL to be hosted at right now, you can do that, but you have to do more work yourself. And I think there's a couple of things that we can do to make that easier.
00:31:00.120 - 00:31:18.420, Speaker A: If you have a particular use case that's important for, definitely come find us. Talk to me or someone on the team because we'd love to hear what you need for that. All right, well, if that's it, thanks so much for your time and happy hacking.
00:33:12.880 - 00:33:43.804, Speaker C: All right, it I'm going to jump into this. You guys honestly, feel free to chat and chit chat. We're going to keep this super casual and just I will do a few slides and then go into a demo that will hopefully work live and won't break on me. And we're just going to showcase how we can bring real world events off chain data on chain using Uma's Optimistic Oracle. And again, kind of late at night. So we're going to keep it loose. Anyone have any questions? Just interrupt me.
00:33:43.804 - 00:34:17.076, Speaker C: We're just going to have some so okay. I bet most of you have been by our booth already. And for people that are either watching the stream or not, I'll keep this quick. So what is, uma we are what we call an Optimistic Oracle. We look at this as a mechanism that can in a truly trustless and decentralized way, provide and verify arbitrary off chain data. So we're trying to ask things about the world. We're trying to ask events that happened.
00:34:17.076 - 00:35:11.380, Speaker C: It could be price data. It could also be event data. Who won a football game? Did this protocol get hacked? What happened on this other chain? Those are all events that we want to record on chain, validate as them being truthful or not, and then let them be used by smart contracts and smart contracts applications. So, yeah, the Optimistic Oracle we look at as this primitive concept in the blockchain space, just a simple way that we can use to validate statements of truth. And to walk you through this at a really high level, how this works. The concepts are pretty simple. We let anyone propose a statement as true so they could say, hey, the jets won the football game last weekend.
00:35:11.380 - 00:35:46.596, Speaker C: Someone made a joke because the jets never win, but I don't know anything about football. So jets won football game last weekend. This is true. Someone proposes that anyone on the network then has the opportunity to dispute it during a challenge window. If there are no disputes, that statement gets taken as truth and it gets written on the blockchain for protocols to use in their applications. If there is a dispute, those disputes get escalated to the Uma token holders for them to resolve. That resolution process uses a really fun crypto economic game that actually vitalik invented back in 2014.
00:35:46.596 - 00:36:51.688, Speaker C: And that crypto economic game has a commit period and a reveal period. And we can prove with game theory that you will get a truthful answer provided no one controls more than half of our token supply. So, all told, you can really think of the Optimistic Oracle as a method that prevents us from having to do the hard work of asking our token holders what the right answer is. Rather, we are trying to stay in the optimistic path where we say, hey, do you agree with this? And provided people agree we stay in the happy path, very little work needs to be done. Okay, so what goes in opt in Scoricals, we have these requesters that request data, proposers that propose data and disputers that say, hey, that's not right. We have the dispute resolution process already figured out and we need our voters to ultimately, our, uma, token holders to ultimately understand what the concept of truth here is. And that's the limiting factor, that's the only limiting factor in the types of questions we can ask of this system.
00:36:51.688 - 00:37:29.796, Speaker C: As long as a reasonable group of human beings can decide what an answer is, whether this thing happened or not, we're set. And then all of on our side. What we've spent a lot of time energy doing is inserting economic guarantees around how secure this protocol is. How much value can it secure and at what point could this thing be attacked. Okay, so these Oracles can answer many, many types of questions. Polymarket is a prediction market that's a heavy user of our Oracle. They use it to ask all sorts of real world questions.
00:37:29.796 - 00:38:51.756, Speaker C: Some of them are related to sports, some of them are related to elections, some are related to COVID data, anything of that sort of sort. Sherlock is an insurance protocol that uses our Optimistic Oracle to ask effectively the question, was this protocol hacked across? Is a cross chain bridge that uses the Optimistic Oracle to validate actions that happened on other chains because essentially other chains data is like off chain data to the destination chain. Then we've used this protocol to create a variety of synthetic tokens or fundraising products, things we call success tokens or KPI options. These are ERC, 20 tokens that resolve to a payout based on what the optimus Scorical reports. So we've got a couple of slides in here that I'm going to skip over and we can come back to at the end of using events in your contract to trigger Oracles. We'll come back if there's interest in those, and I'm going to keep jumping ahead until we kind of get to our demo and then start to get into questions that you all may have. This I will focus on because I think it's useful.
00:38:51.756 - 00:39:51.152, Speaker C: A common design pattern we've seen used by our Optimistic Oracle is making assertions, and this is no different than asking a question and answering it yourself all at the same time. But we've seen it to be a really useful pattern when developers are actually building on this optimist Oracle. So essentially you're going to say, hey, I assert this to be true, and then you use the optimist scorecard to verify it, provided no one disputes that that statement, I think this is true, gets taken as fact. Yeah. So this assertion pattern and I'll show you guys a little bit of code snippets here and then we're going to go into like a real demo and just ask questions and we'll have fun. This function that I think can be quite useful in many of the hacks happening this weekend. I want to make an assertion in a trustless or decentralized way.
00:39:51.152 - 00:40:13.284, Speaker C: And so I'm going to request here price. I'll just level with you guys. We use the word price in here because we used to be focused on price data. The Oracle is now much more than that. This should really be request data, but it's an artifact of our older code base. So we want to request data. We're going to set a custom liveness period.
00:40:13.284 - 00:40:48.916, Speaker C: This is the length of the challenge period. And we're also going to propose an answer to the same question we asked. And effectively, we're making an assertion here that if nobody disputes it within that given liveness period, it will get taken as truth. And so this is something we can use to assert, hey, this action happened on this other chain. Hey, this contract was fulfilled. If we go back to this concept of real world data, this event happened in the real world. I'm asserting that to be true and I've decentralized it because anybody can disagree with me.
00:40:48.916 - 00:41:41.750, Speaker C: But provided there's no disagreement, we're all good. I can use that as statement or assertion to do interesting and useful things, any actually questions on that. So the way that I prefer this depends on your use case, and sorry, the question was, what happens if you do dispute it? How do you unwind this assertion you made? And there's a few ways to approach this depending on your use case. The most common pattern we've seen is that as soon as an assertion is disputed, you basically throw that out. So the application that's inserted this will just say, okay, that assertion is not true. If you want to do it again, go ahead and make that assertion again. And the person would have to dispute it a second time.
00:41:41.750 - 00:42:25.750, Speaker C: So in that way and there's edge cases you can talk about, about what if you had a whole bunch of disputes and you kind of spam things that way? We can talk about that offline because I think we have reasonable solutions to that. But generally speaking, the simplest pattern is, I'm going to assert this to be true. If somebody wants to dispute it, fine. We'll still use the, UMO, token holders to see who's right. The person that proposed it or the disputer will use that and those will kind of go to war, and they'll earn each other's bonds in that, but we won't block the protocol or the application from doing useful things. Does that make sense? All right. Yeah.
00:42:29.720 - 00:42:31.220, Speaker B: In this scenario.
00:42:34.920 - 00:43:07.564, Speaker C: So there is still a bond. You'll see, there's a bond currency here, too. The idea in this assertion is I think there's many use cases where you are here's one mental model. I was talking to a guy who's thinking about, like, a fantasy football game here too. He wants to build, like, a decentralized fantasy football game. And I was telling him if he was doing this in a centralized way, this guy and I'm blanking on his name would just he himself would say, here are the scores. Here are the scores.
00:43:07.564 - 00:43:32.100, Speaker C: Here are the scores. Right. What you can do here is you can decentralize that process by instead asserting, here are the scores, like, I'm the guy doing this work. Here's the answer. But anyone can tell me I'm wrong and I don't need a reward. I don't need to reward myself for doing this. Like, I want to be providing this service, but I've decentralized it by opening up this pathway where somebody can say, hey, you're lying.
00:43:32.100 - 00:44:02.604, Speaker C: You're cheating. That's not right. Does that kind of make sense if you did incorrectly? So, as a proposer, if I'm making this assertion, I post a bond. If someone disputes me and it turns out that they were right, yes, I lose my bond, right? But if I was right, I actually earned the disputer's bond, so I double my money. Makes sense. Cool. I like this, this question's.
00:44:02.604 - 00:44:25.130, Speaker C: Good. So we're going to keep going here. All right. You can use the Options Oracle to ask questions about past events, subscribe to updates about future events. This is a very cool way to actually frame it. I want to use the Options Oracle to tell me if this protocol ever gets hacked or to tell me if this action ever happens. And then I want my smart contract to do something else.
00:44:25.130 - 00:45:16.104, Speaker C: Trigger callback functions when an event happens, make an assertion about the state of the know, this sort of stuff. And this wasn't my presentation that I put together, but John added this picture of Field of Green at the end, and I quite like it. So here you guys go. Okay, I'm going to do a demo right now, but we are hiring QR code for our Jobs page. I always got to put the we're hiring thing out there because it's a hackathon with brilliant minds, and we want to hire you. So let's go into the fun stuff where we're going to just do a little demo and walk through this code. None of this is particularly fancy, and it's all pretty well documented, but sometimes it's fun to just see people click buttons and maybe see me mess up.
00:45:16.104 - 00:45:46.230, Speaker C: Hopefully not. But if you guys go to Docs, umaproject.org, the first page will be like, go to our getting started section. And we have here what we call our minimal viable optimistic Oracle integration. And what we're going to do here is ask the question, did the temperature in New York City on July 25 exceed 90 degrees Fahrenheit? An American wrote this tutorial. I would use centigrade. It's okay.
00:45:46.230 - 00:46:22.764, Speaker C: But you guys just weather. So we are going to go ahead and jump into remix here. And I'm doing this all live. So what do we have here? See if I can make this a bit bigger. We have a very simple contract that is creating an instance of the optimistic Oracle interface. By the way, guys, I am technical in the sense that I studied computer science, but I haven't written code in a decade. So I'm doing this.
00:46:22.764 - 00:46:40.320, Speaker C: It's not that hard. This is doable. We are asking what we call a yes or no question. And we're inserting the question here of what's the temperature did. The temperature oh, this one's in centigrade. Now that's funny. Okay? Not in fahrenheit.
00:46:40.320 - 00:47:25.920, Speaker C: Is it above 35 degrees Celsius? We are setting some parameters of the system, including setting a reward in this case to zero, which we could change and we make a price request. We're also setting the liveness period here to 30 seconds. This is for demo purposes so that we don't have to sit here waiting for a liveness period to tick by. And then we've got our other functions to settle this. So what do I need to do? I need to compile this, and then I need to go select MetaMask, make sure I'm on girly, which I am. Also. Folks, it's quite difficult getting girly ETH right now.
00:47:25.920 - 00:47:57.096, Speaker C: I just looked at trying to I don't know if anyone else has seen it's, like, kind of hilarious. We do have some girly ETH that if you ask very nicely, we might be able to send it to people because it's a very difficult thing to get. So I got this. I should be doing my transactions while I'm chatting. We are going to deploy this. Great. And this will take a second for it to deploy.
00:47:57.096 - 00:48:29.656, Speaker C: And, yeah, I shall tell you that you should in our discord, if anyone needs girly ETH, just ping us and we'll try our best to send you something. Ping us with an address you don't mind getting doxxed on because it is a public channel. All right, so that was successful. Cool. Deployed contracts. So I have deployed this Oo contract. I followed the instructions here by memory, but they're pretty simple.
00:48:29.656 - 00:49:22.710, Speaker C: And they just did what I talked about to actually deploy this Optimistic Oracle contract. And now what we're going to do is we're going to actually propose this question. Now that the contract is deployed, we're going to go and actually call this request data function. And if we go back and we look at this, what is Request Data doing? This is the one that's actually making the requesting the price, requesting the data with those custom liveness period of 30 seconds. So this transaction is taking a second to mine. And when it does mine, what we are going to then do is go into our interface. This is a front end interface we have where yeah, this is it.
00:49:22.710 - 00:49:49.744, Speaker C: We're able to see the question we just asked. Okay. And here is where connect my wallet. Here is where anyone can propose an answer. I'm going to propose zero here. Doesn't really matter what the testing purposes is, I'm going to propose this. So this is someone is saying no, the temperature wasn't above 35 degrees on this date.
00:49:49.744 - 00:50:23.630, Speaker C: This could be anyone. Or if you're using the assertion pattern I was talking about earlier, you could propose this yourself when you are asking the question. So this goes in and you see we've got I don't know if you guys can see this. We've got this countdown window of the time left in which people could challenge this assertion or challenge this fact that someone's saying no here. And we are going to let that tick down. I'm not going to demonstrate like the dispute case right now. We let that tick down and we're done.
00:50:23.630 - 00:50:41.520, Speaker C: So now if I'm doing this right, I can go back and actually settle the transaction, which is going to now confirm that. Hey, okay. Yeah, go ahead.
00:50:41.670 - 00:50:56.070, Speaker B: Yeah, I guess protocol do for like four questions. Somebody says, what color is my pants? And then do voters say.
00:50:59.480 - 00:51:48.890, Speaker C: Yeah, that is a very good question. So the question is, what do people do if the question is poorly worded? And what we do if we look back here, we have this what we call our Identifier, which we call yes or no query. And this corresponds to effectively a rule set we've written off chain that everybody agrees to follow. And in that rule set, we try to have rules for the circumstance you're talking about. Like what do we do if it's a shitty question? And generally speaking that the rule set should specify that it's like, okay, if it's a bad question, just always respond no would be one answer. If it's a bad question, respond 0.5. Like between one and zero, respond something where you kind of split the answer.
00:51:48.890 - 00:52:45.856, Speaker C: We have that kind of agreement there too. And in that case, again, if the consensus is that this is a badly worded question, that would be the response and the DAP that's implementing it or the protocol that's implementing the Optimist Oracle should handle that use case. Does that make sense? So let's see. So now if I call get settled, did that work, Chris, or did I do something wrong? Yeah, hold on, I gotta why am I getting all this stuff? Yeah, this is my debt data that says zero right here. So my decoded output, I got back my response. So it worked. We got our answer.
00:52:45.856 - 00:53:11.640, Speaker C: Simple lifecycle pretty simple demo. We're not doing anything rocket science here. We're asking a question. There's a challenge period. We've got an interface where people can respond to it. This interface, this whole thing here, where we have this response period. You could imagine this being done by bots or some automated process off chain.
00:53:11.640 - 00:53:58.260, Speaker C: This is still like an interface where people could manually dispute things if they're like. That's not right. And so there's a lot of flexibility. It's a very generalized or flexible system to let us accomplish those things. All right, so I went through this settling the final answer and that's it in our tutorial. At the bottom we have some more advanced examples that go into doing more things. But for the most part, this remix package gives you the basic building blocks of what you need to do to actually use the optimum scorical to get a piece of data and to kind of ask this generalized question in terms of other resources.
00:53:58.260 - 00:55:03.870, Speaker C: First of all, anyone hacking this weekend, please do use our Discord Channel to ping us and ask us questions. We're going to be up at our booth a lot, but the Discord Channel is just good for us to answer quick and dirty things in case we're like back in our hotel rooms or something like that. There is also a very useful video that I'm not going to play right now because it's going to play ads, which we don't want. But there's an awesome video of John on our team walking through this tutorial. Think. And then if we go back into our Discord Channel, this is maybe a little bit small, but lots of links and resources to our doc site, our website, some ideas of things we can build with the optimistic Oracle and a blog post with, again, more ideas of hacks we're interested in. And with that, I think I might just spend the next four minutes answering any questions anybody might have.
00:55:03.870 - 00:55:05.470, Speaker C: Yeah.
00:55:11.280 - 00:55:12.572, Speaker B: Talk an hour ago.
00:55:12.626 - 00:55:13.084, Speaker C: Okay.
00:55:13.202 - 00:55:21.276, Speaker B: And they're using 1271, which is a new ERC built in a smart contract validate that a signature is valid.
00:55:21.468 - 00:55:21.872, Speaker C: Okay.
00:55:21.926 - 00:55:52.970, Speaker B: So they're going to use that to create orders, more sophisticated logic to buy sell orders and then route. So if I wanted to do example, I wanted to do a buy order based on the jets winning because that's a positive sign that jets token. Could I use Oracle in that instance? Because that's where I was asking earlier, the timing of request because I want to submit a buy order and it's going into their buy sell.
00:55:54.240 - 00:56:55.612, Speaker C: So I think there's actually like a whole suite of interesting, call it like trade automation tools you could build here where I could imagine you basically have a trading strategy. Like if this then that in a trading strategy and you want that to be executed. It's based on real world data, but you want that to be executed on chain and something like the optus Gorkle could be very effective at actually doing that. Like, you could just have those orders be automatically submitted and have other people dispute them if they're fraudulent or not following the rule set. The trade off is that unless we do sort of sort of some fancy things, you'd have to wait this challenge period here, too. And I think in some use cases, that might be okay. If you want to rebalance your portfolio based on events and it's not super high frequency time sensitive, that's probably okay.
00:56:55.612 - 00:57:15.190, Speaker C: If when my portfolio gets I want to keep my portfolio 60 40 balanced between ETH and WBTC or something like that, and when it gets out of Whack, I rebalance it, then something like that could work really well. If it's something that's super time sensitive, the challenge period does matter or does have an effect.
00:57:18.700 - 00:57:20.200, Speaker B: Who are the voters?
00:57:22.060 - 00:58:06.230, Speaker C: So I should be really specific, really precise with the language. So the people proposing answers and the actors, the entities that are proposing answers and the actors that are disputing answers, those people are either bots or humans, depending on the context. So across this crosschain bridge, we use has a bot that proposes repayments to relayers, and then there's a disputer bot that disputes that if it's incorrect, Polymarket that uses us for all sorts of prediction market stuff. It's actually all done by people. People propose an answer, and people dispute it if they think it's incorrect. And so it really depends on the use case here.
00:58:07.720 - 00:58:16.080, Speaker B: I saw that you were putting, will this protocol be hacked at some point?
00:58:16.150 - 00:58:16.624, Speaker C: Yeah.
00:58:16.742 - 00:58:18.292, Speaker A: So what happens if, like I say.
00:58:18.346 - 00:58:27.990, Speaker B: Will uniswap be hacked and then doesn't happen for five years? What happens? Almost.
00:58:29.740 - 00:59:43.010, Speaker C: Again, the idea would be there's different ways of architecting this, right? You could design your protocol that says anyone can make an assertion, so there isn't actually an outstanding optimistic oracle request, but if a protocol gets hacked, I can assert uniswap got hacked at that point in time, and then, and only then, it's like a fresh request, if that makes sense. So there's different ways you could architect this, depending on exactly what you're trying to get around, but you shouldn't just have. Seems like bad architecture, in my opinion. Yeah. All right, guys, we are perfectly on time, which doesn't mean we have to end here. But if anyone has any other questions, hit me up, get me now, or discord on Twitter. Right? We should have not wrong thing, but we're on Twitter at Uma Project.
00:59:43.010 - 00:59:54.060, Speaker C: You can find me on Twitter at hal 2001 and discord in our sponsor Uma channel is the best way to get in touch with us right now. And happy hacking.
