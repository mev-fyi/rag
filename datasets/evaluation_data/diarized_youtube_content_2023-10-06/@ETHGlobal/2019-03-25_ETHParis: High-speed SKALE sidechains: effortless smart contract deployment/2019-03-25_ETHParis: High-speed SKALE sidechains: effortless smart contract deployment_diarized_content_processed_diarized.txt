00:00:04.790 - 00:00:40.612, Speaker A: Wow. Yeah. So my name is Stan Kletko. I'm the CTO of scale labs. Yeah. So probably every one of you guys knows how to program Solidity, right? That's why all of you are here, hopefully making this lot of money. But solidity.
00:00:40.612 - 00:01:07.696, Speaker A: Truffle MetaMask remix. So there is a number of tools people love and people kind of keep on trying to create DApps. And at every hackathon there are so many of these DApps, but the problem is that none of them actually getting so much of traction. We don't really have D apps that have like millions of users. So definitely there's a problem. And the major problem about ETH is scalability. So as you guys probably know, transactions cost lots of money.
00:01:07.696 - 00:01:26.964, Speaker A: You pay at least like $0.10 or more per transaction. And then you also pay to store things, pay like ten cents to store 256 bytes, which is pretty much very expensive. So the scalability is something which is really making it hard for DApps to propagate and to get lots of users right.
00:01:27.002 - 00:01:46.092, Speaker B: And if that's not bad enough, the other limiting factor is speed. So it's crazy to think that today the best we can do is wait 40 blocks or ten minutes to finalize a transaction. And so through layer two solutions, we're hoping to find ways to speed that up. But Stan, can you first tell us about some of the current solutions available today?
00:01:46.226 - 00:02:18.608, Speaker A: Yeah, so several solutions people tried in the past to solve the scalability problem. Many people do just computations on a centralized server. Or you do use a network like proof of authority, which is pretty much like a centralized server. It's something which is controlled by a particular party. So you can actually do lots of computation on a centralized thing, but it actually doesn't really address the spirit of blockchain because blockchain means that the computational system is independent of everyone. Right. It's trusted and dependent.
00:02:18.608 - 00:02:59.040, Speaker A: The code runs everywhere and runs forever. That's really not something which happens for centralized server. Another possibility is you cannot offload storage, in particular to a storage network. So there is like IPFS, there is filecoin which is supposed to be a secure storage network, but this storage network storage networks are not there yet, although some people are working on different kinds of storage networks, but they're not yet to use. And then you can always wait for ETH 2.0. You probably know that ETH 2.0 is going to have like 1000 transactions per second, and it's actually going to speed up a lot, the main net, the Ethereum main chain.
00:02:59.040 - 00:03:21.130, Speaker A: But you still have to wait for probably two or three years until Ethereum main net goes to the thousand transactions per second. Finally, what you can do, you can use layer two side chains. That's something that we obviously do at scale, and I'm going to tell you in a second what actually the side chain is, how it works and what it does.
00:03:22.940 - 00:03:26.088, Speaker B: So then how does it work using a layer two solution?
00:03:26.184 - 00:03:54.864, Speaker A: Yeah, so sidechain is actually something very simple. It's pretty much like a blockchain. So it's a blockchain like ethereum, like bitcoin. The only thing, it's not using proof of work, it's using proof of stake. So instead of using lots of computations and number crunching, it uses cryptography and then still fully decentralized. It's run by miners or validators, however you want to call them. And then when you come to us with a DAP, some of these miners are going to run your DAP, it's going to be still fully decentralized.
00:03:54.864 - 00:04:00.360, Speaker A: And these blockchains, there will be lots of them, they're going to use this proof of stake protocol.
00:04:02.060 - 00:04:05.796, Speaker B: And can we get into a little bit more about how to deploy smart contracts?
00:04:05.908 - 00:04:43.904, Speaker A: Yeah, so our side chains are fully compatible with ETH, compatible with Solidity Remix, Truffle MetaMask, all of the stuff you guys have been using, they're just working faster. So when you come to us, we actually give you a chain, a blockchain, which is totally yours, although you don't control it. It's run by independent people. And on this blockchain you can deploy lots of smart contracts. They work really fast, they work really cheaply and you can do most of the computations there. And then in your browser, you literally run two versions, web3 JS. You probably guys know what Webster JS is, it's a library that you use to connect to blockchain.
00:04:43.904 - 00:05:31.876, Speaker A: So you have one instance of Web Three JS that connects to the side chain, another one connects to the main net. And really most of the computations you do on the side chain, like if you have a game, all of the game dynamics you do on the side chain, if you have a decentralized exchange, all of the bidding and asking you do on the side chain. And really you only need to use main net when you deposit money. So you deposit money into the side chain on the main net, your money is actually frozen on the main net and the clones are created on the side chain. And then you operate in these clones and when you want to exit, you actually destroy the clones and go back to the main net. But all of this functionality going back and forth is secure and provided by us to you. So literally you just have to use several lines of code.
00:05:31.876 - 00:05:43.850, Speaker A: It's a ready library, which you can use in JavaScript, you can use it in Python. It's a very simple thing for you guys because we do all of the secure dynamics of interaction of the side chain with the main net.
00:05:44.460 - 00:06:27.748, Speaker B: Thanks Stan. So the next part we want to get into is how do we actually make the changes in code at this hackathon? We understand that you might not need scalability to its full potential, but doesn't mean you still can't use it here. And I'm going to show you through a live demo of how easy it is to change two lines of code within your Truffle config to deploy to the main net. Well, deploy to scale. So I have this DAP, and this DAP currently references two smart contracts, one for Authenticating and one to play Rock Paper, Scissors, which will all play together soon. But first, let's see what that process looks like on Rinkobee. So if I interact with my authentication smart contract here, the process you're familiar with, MetaMask comes up.
00:06:27.748 - 00:07:08.050, Speaker B: You're able to confirm that transaction, but what you're experiencing now is the waiting period, waiting for that transaction to be finalized by Ringabee before you can actually move on and actually have the users use the rest of your DAP. That took a really long time just to sign a person up. So let's log out and see what this process would look like using scale. So here at the hackathon, if you go to our discord, you'll be connected with one of us and we'll give you an S chain that you can use for this hackathon. That S chain also is going to be accompanied by documentation. I'm going to copy this here because I'm going to need that later. And click into this documentation so you can see what we have developed for you guys.
00:07:08.050 - 00:07:50.908, Speaker B: So it really is a quick one, two, three step for getting up and running with scale. Essentially, we need you to connect to MetaMask and tomorrow I'll show you how to do it without MetaMask. We can give you tests ETH to play around with, and then you simply deploy your smart contracts using a Truffle config or whatever configuration you are currently familiar with. But that really is it. So if I go to the code samples here, there's also code samples for understanding how to actually make the changes in Truffle or in just web3 JS and node JS. So if I go over to my program here, what you'll notice is a Truffle config file that you've probably seen before. I've tested already locally on Ganache.
00:07:50.908 - 00:08:40.400, Speaker B: I've then migrated to Rinkobe. And so to make the change in scale, it's going to be pretty much following the exact same pattern. So the two lines of code that I was telling you about you will have to change is simply pointing to that endpoint here that we'll give to you via our discord channel. Simply copying an existing config that you already have for Rinkby or whatever else you're using, and then changing the names to actually map to that specific endpoint that we want to use. And really, that's all you have to do. So those boundaries that we have, they're pretty easy to achieve. Now, if I go over to my terminal similar to deploying to Rinkby, the process is going to be the same Truffle deploy.
00:08:40.400 - 00:09:16.728, Speaker B: I'm going to go ahead and do a reset because I've deployed this contract before. I'm going to choose the network for scale. And then I'm just going to compile all. But really, that's all you have to do to deploy to scale. Now, I won't bore you and have you watch this running. Instead, what I'm going to do is go back to the app where I already have my smart contract deployed and we're going to go through this again, but this time using scale. Now, I want you to remember how long it took for that transaction to come back on Rinkby and just see the difference in scale.
00:09:16.728 - 00:09:45.990, Speaker B: So if I start the demo again, I'm going to select my name, sign up, similar process we're all used to confirm. And just like that, in near real time, I'm within the application. So let's try a different smart contract. Call and play the game. Rock, paper, scissors. So who wants to play with me? All right, what move? Yeah, rock, paper or scissors? Scissors. All right, let's see.
00:09:45.990 - 00:10:42.384, Speaker B: So again, this is referencing a smart contract that we deployed to scale and then near real time, you're not waiting and you won. So again, all I have to say is it really is just changing two lines of code to deploy to scale. And then you can start to run your smart contracts written and solidity directly on our network without any changes on your side. But to finalize this, of course, we're offering six bounties here, five prizes for €500.01 for 1000. And then if you just want to play around with a scale chain while you're here, please log on to our discord and we'll give you one. Any questions? Yeah, that's a good question.
00:10:42.384 - 00:11:34.312, Speaker B: So to reiterate for the live stream, what he was asking is, if we give him a chain, is it going to be shared by other people or is it going to be solely for his DAP? And the answer is the latter. It is going to be your S chain and you won't have to share that. Any other questions? That's a good question. So to reiterate the question again for the live stream, the question was, if you're using the side chain, do users have to go in MetaMask and change it to reference the sidechain URL? The answer is, it depends. It depends on how you implement it. For the purpose of this test and ease of demoing, I simply switched to the S chain within the MetaMask. But as you can imagine, in production, that's not going to be the case.
00:11:34.312 - 00:12:33.450, Speaker B: The side chain is meant to operate in the background and so ideally, you want to use mainly just web3 methods to be able to interact with that S chain. So you'll sign the contracts before sending it. And I have a workshop tomorrow with a demo explaining other methods for thinking about the architecture around deploying for a side chain. And I'll be joined with Chadwick over here in the corner. So, yeah, I'll explain how to actually do that without having to switch within MetaMask? That's a good question. I'll repeat it and then I think Stan to take that question. So the question is, if you have an S chain that's going to be dedicated to you, who are the actual validators that are running that consensus for your application?
00:12:34.220 - 00:13:11.344, Speaker A: I think it's a very important question. When you come to us, to the network, right, and you create the chain, we don't want you to control the chain because we need to keep the fine balance of blockchain where no one has power. Right on bitcoin. You cannot control Bitcoin network. So even though you are the creator of this chain, you have no power over it. And the chain is run on independent validators or miners, very much like Bitcoin or ETH mainnet. So these guys are picked randomly from a ledger network and they are actually assigned to your chain.
00:13:11.344 - 00:13:48.976, Speaker A: And then you don't control it. It becomes an independent blockchain. And from time to time these guys are also rotated so they don't stay there forever. And that's really a fine balance that we are trying to reach, because our most important goal is to keep the level of decentralization high. Because the entire premise of blockchain is have a computational engine which doesn't depend on any parties, so it can be trusted. And your smart contracts can run for a long time. And once you put the smart contract over there, even you won't be able to control it.
00:13:48.976 - 00:14:44.754, Speaker A: So we're really focused on this particular issue. That's a great question. So the validators are compensated by the services they provide to the network. So there's going to be a standard stake that everyone will be able to put a server on the network. And starting sometime this summer, all of you guys can become validators. And then we need to measure quality of service for the validators. So we introduced this notion of decentralized quality of service or decentralized SLA service level agreement, where if you put your server on the network, there are some randomly assigned people or actually nodes that measure your performance metrics on you and you're measuring metrics on someone else.
00:14:44.754 - 00:15:41.714, Speaker A: So the actual metrics measurement is also decentralized. So imagine some kind of self organized group of people where we're altogether providing some service. But then we also every month I report how good your service was and you report how good my service was. There is some mathematical averaging and then if you're a good behaving service provider, you're going to get paid the same bounty. So the bounty is going to be standard and all of the nodes in the network are going to be standard nodes. And then if you have lots of money, you can buy lots of servers and put them on the network and then how fast? So when we spin up the chain, we need to do some really interesting cryptographic algorithms to randomly pick these nodes. And there is lots of cryptography going into this random picking of nodes.
00:15:41.714 - 00:16:24.318, Speaker A: There's a set of algorithms which is called probably you've heard about this BLS threshold signatures and common coin, all of the crypto thing. So it takes some time to spin the chain. The production chain, I think the development chain we can spin really fast. But for the production chain it will take probably like several hours because all of the algorithms have to complete. What's important is that we run all of our algorithms on Ethereum main net, so we're not like competing with the main net. Everything which we can do on the main net, we do on the main net. And currently we have a very large set of smart contracts that we are actually going to deploy to the main net once our network goes production.
00:16:24.318 - 00:17:34.052, Speaker A: And this does all of this bounty payments, service level agreement, all of this stuff is going to actually happen on Ethereum mainnet, on the ETH mainnet. So the way it's going to happen is that as a DAP developer you're going to decide for how long are you going to have this production chain. So the production chain you can only have for a long time because we have to protect the security of users, right? You shouldn't be able to kill your chain really fast. So the production chain you'll be able to have like for a year or for two years, the test chain you'll be able to spin up and down really fast, but it won't be production. Now, what was your yes. So then an interesting question is once you have your chain, for the most part it's going to be almost free for the end user. But to protect against the denial of service attacks, we still have to introduce some kind of gas payments which are going to be almost zero all the time.
00:17:34.052 - 00:18:16.896, Speaker A: But if someone is doing a denial of service attack, the gas fee is going to go up to protect against denial of service. So this is still gas fee for the most part. Your chain is going to be underutilized and the gas fee is going to go pretty much exactly to zero because we are using very much the same algorithm which is going to be used in a th 2.0 where the gas fee is slowly changing depending on the load of the network. And if the network is underloaded, the gas fee will go almost exactly to zero. But if the network is getting loaded, the gas fee is going to go up. One interesting additional thing that we are implementing is that you will be able to replace gas fee by proof of work.
00:18:16.896 - 00:19:06.280, Speaker A: So if there's a user which doesn't have any tokens and you want this user to actually create a social network, for instance, on Blockchain, right, the user doesn't have any tokens, so how can this user actually use blockchain? So the user browser will be able to do a little proof of work in lieu in replacement of the gas fee. And in this case you'll be able to use unauthenticated users that you don't have any tokens. Exactly. So each of our chains, you can view it as pretty much a copy of Ethereum mainnet in the sense that it's fully compatible. You can use Truffle, you can use everything. It just works faster. But API wide, it just looks to you as Ethereum chain, which works faster.
00:19:06.280 - 00:19:47.720, Speaker A: We're working on implement. We didn't actually implement this one. I think by that we're going to participate in the hackathon in New York at that time, currently just zero, I guess, fees for this hackathon. But the next one is going to have this implementation. The chain will actually have its native currency, so you won't have to have any user, you can print any amount of this native currency and distribute it to users in any way. And the only reason to having this native currency is to protect against denial of service. And if you don't want to do it, it's a very interesting possibility.
00:19:47.720 - 00:19:58.720, Speaker A: Just you will be able to configure the chain in such a way that there is no gas fee in terms of native currency. It's in terms of proof of work. And then everyone with a browser will be able to use the chain.
00:20:00.100 - 00:20:10.388, Speaker B: And to add on to that, we're going to have a workshop tomorrow to explain how to pretty much obfuscate the gas fee from the user. So you'll be able to see that tomorrow at 430.
00:20:10.474 - 00:20:34.338, Speaker A: I forgot to do one thing. We actually have another extension. Christina is going to show it tomorrow. We have also an interesting extension which does file storage on the blockchain. So we'll be able to do websites like upload images and music. And Christine will show it tomorrow. Absolutely.
00:20:34.338 - 00:21:07.274, Speaker A: Your chain actually your chain is going to be totally yours. And there will be different types of chains. There will be chains that take the entire server, but there will be also less expensive chains in a shared environment in a sense that the server is going to be split in docker containers. And so we'll split the server in ten docker containers and then each of those docker containers can become part of a different chain. And then you have to pay ten times less. So we expect if people have lots of money to pay, they'll create powerful S chains. But many people will just be fine creating this kind of shared S chains.
00:21:07.274 - 00:21:36.306, Speaker A: Think about like Heroku has these units. That's a very similar idea of sharing. So one single server can participate in lots and lots of small, tiny chains which are not powerful, but maybe enough for a particular application. And they're going to be really cheap. Absolutely. The servers are going to be done by people who want to make money very much the same way, like Bitcoin or Ethereum. But we don't have number crunching.
00:21:36.306 - 00:22:03.730, Speaker A: We have like just literally you'll have to buy like a 3000 server, like mid range server, and put it on the net somewhere and then you'll be able to make money from this server. But that's the validator. The guy who makes money putting the server on the network. And a GFG developer will just come and pay for creation of this chain. And the chains are not going to be expensive, especially the shared ones. Could be very inexpensive. Maybe, I don't know, hundreds of dollars, I don't know exactly the amount.
00:22:03.730 - 00:22:07.410, Speaker A: But I suspect that the shared ones are going to be really inexpensive.
00:22:09.510 - 00:22:10.980, Speaker B: All right, one more question.
00:22:18.850 - 00:23:07.290, Speaker A: Yes, that's a great question. So we're thinking about these features and frankly, this is something which probably going to be happening a little later, but we are thinking about replicating the state and we're also thinking about things like creating a distribution like Ubuntu Linux or Red Hat Linux, where your S chain will have a package manager. There are like package manager for smart contracts like Ethpm and other package manager. And then it will be almost like a Linux distribution where it will be like open zeppelin and all of the stuff ENS and all of the different nice packages. And your S chain will come prepackaged and pretested in a very similar way. Like your Ubuntu 18 comes with all of the stuff pretested. So we are kind of thinking in this direction, creating distributions.
00:23:07.290 - 00:23:11.820, Speaker A: Thank you guys for very good questions.
00:23:14.590 - 00:23:16.540, Speaker B: Awesome. Well, thanks you guys.
