00:00:00.490 - 00:00:13.946, Speaker A: Austin Griffith. I will let him explain himself a little bit better than I probably can. He's got an extensive resume, pretty cool stuff, and he's going to teach you everything you need to know to get everything you need to get done during this hackathon. Austin, the floor is yours.
00:00:14.138 - 00:00:20.810, Speaker B: Awesome. Thank you. Thank you. Luke global hackers. GM. GM. GM.
00:00:20.810 - 00:00:44.810, Speaker B: GM. In the chat, I am here to show you Scaffold ETH. I am a builder on ethereum. I am not a gigabrain. We have gigabrains building this wonderful protocol for us. We, as caveman application developers, can build on top of this substrate and build really cool, decentralized apps by just writing a little bit of solidity. We're going to get into that today with Scaffold ETH.
00:00:44.810 - 00:01:13.806, Speaker B: You can drop questions in the chat. I will be watching that, but I'm just going to kind of dive in and start tinkering. The goal here is show off Scaffold ETH. Show off how we could possibly put something on polygon and then kind of show off the tools and get you started for next steps. We're going to speed run this thing because we only have about 30 minutes. I am going to share a screen and let's get started here. Yeah, I don't have the chat.
00:01:13.806 - 00:01:29.642, Speaker B: I want to have the chat up. So feel free to throw questions in the chat. There we go. I've got it. I've got eyes on the chat. Okay, so scaffold ETH we're talking about rapid prototyping in web3. Building decentralized apps quickly and trying them out.
00:01:29.642 - 00:02:15.458, Speaker B: See what works. Web Three is notoriously bad for good UX, right? It's really hard to find a good UX product with good UX in Web Three because there's all sorts of stuff like this super slow asynchronous expensive database that we're saving to right. But this slow asynchronous database has some really interesting trust and availability assumptions. This is always on, right? When you deploy an app here, your app is there forever, and not even you can stop it if you build it correctly. And it runs on top of this and it's always on. So let's dive in and look at building decentralized apps with Scaffold ETH. So Scaffold ETH is kind of like decentralized app template.
00:02:15.458 - 00:02:51.666, Speaker B: It's got your back end with hard hat, and it's got your front end with create react app. It wires the two together, but it also has a ton of handy components. And then once you have that, there are tons of forks that use Scaffold ETH. So once you pick up Scaffold ETH and you understand where things are, you can go look at the 300 some forks of NFT marketplaces and Harbor Taxes, NFTs and weird DFI Ape protocols where you lever up, and weird Dow and Governance and Multi SIG experiments. All of those things built with Scaffold ETH. You know where everything is. It's easy to fire them up.
00:02:51.666 - 00:03:18.790, Speaker B: It's easy to fork them. Making things very forkable is something that I've been really hammering home. So I'm going to kind of speed run the setup. I'm going to assume that you can get Node and NPM set up. If you have Node and NPM set up, you need to do an NPM install g yarn. We ought to make sure you get the right yarn. We're going to use yarn for workspaces in Scaffold ETH.
00:03:18.790 - 00:03:54.642, Speaker B: So I just want to really zoom in on that line. Don't get the wrong yarn. You can end up with a Linux executable yarn that'll just get you in all sorts of trouble. So we've done a yarn install and a yarn start if you just follow those instructions here with Scaffold ETH, we've done a yarn chain and that spins up our local blockchain so we can yolo stuff to it and try things out in the EVM. And then we've done a yarn install. We did the NPM install G yarn to get out all this other stuff going. But now we can do a yarn deploy.
00:03:54.642 - 00:04:25.214, Speaker B: And if I go ahead and deploy that, there we go, contract goes out. And now so here's where Scaffold ETH really shines. So you start out with a default smart contract, and along with that comes an auto adapting front end. So here is your front end. Let me actually zoom in on that a little bit more. There we go. And what I can do is I can go over here and I can add some extra exclamation points because it's bow tie Friday and we're fired up and we're throwing down.
00:04:25.214 - 00:04:42.310, Speaker B: And I can hit save and I can hit yarn deploy. And I can get into this dev loop where I'm editing my contract. I'm deploying it locally and I'm seeing the changes live. See that go. And I can even do whoa, whoa, whoa. Get out of there. I can even do a yarn deploy.
00:04:42.310 - 00:04:58.826, Speaker B: I'm going to do a reset and just force that same exact contract to get deployed again. And we'll see a new address show up there. Let's do it again. Let's do it again. Watch for that address to show up. Okay, there we go. So now once you have this, you have the license to learn.
00:04:58.826 - 00:05:18.606, Speaker B: You're able to tinker with solidity. You're able to paste in each concept from solidity by example. I love solidity by example. Let's see if we can pull that up. And you can learn solidity by simply like, okay, primitives and data types. Let's get into them. We're going to learn about uns.
00:05:18.606 - 00:05:41.066, Speaker B: We're going to learn about addresses. We're going to learn about bytes, all of these things that are primitive data types as part of solidity. And how do we learn them? Well, we just copy and paste them in there, right? Boom. Address, default address. Okay, let's not do that. We don't want to start it out with zero. Let's put in our front end address, right? Let's see.
00:05:41.066 - 00:05:55.980, Speaker B: Here we go. Grab this dude's address. Paste it in, right? There no quotes around it. Boom, yarn deploy. Now what should happen is our contract should notice this new address showing up and should there it is. Default address. Okay, let's not call it that.
00:05:55.980 - 00:06:25.734, Speaker B: Let's call it owner. Right? And this is arbitrary. I could just call this Austin or Front End or something, right? It doesn't mean like, owner is not a special name. It's just an arbitrary name we add in here. So let me go ahead and deploy that and that should turn to owner. So now we're deploying our smart contract and it has some arbitrary owner we're tracking. And we're learning that by going through Solidity, by example, learning these new Solidity topics by just pasting them into our contract and tinkering around.
00:06:25.734 - 00:06:55.198, Speaker B: So one of the first things that you're going to do once you get in here and start building your solidity is write a require statement. So I guess let's real quick look at this. What is this contract so far? This is the default contract you get with Scaffold ETH. It's kind of like an adester. You have some string purpose and then you have some function that lets you well, what am I doing here? It lets you update that purpose and what the heck, there's a console log in there. Wait, console log. Okay, hold on.
00:06:55.198 - 00:07:32.922, Speaker B: What is that doing? So let's go over here and try to set the purpose. I'm going to grab some funds from this faucet and I'm going to say, hello world, and I'm going to post that. And where did that console log go? Oh, wow, look at that, a console log. Thanks to Hard Hat right there in our hard hat node, we see some feedback about what's going on there. Okay, so now let's just quickly prototype this app and then look at what this takes to deploy. Just because we're so limited on time. So your front end, usually you're going to build out a front end.
00:07:32.922 - 00:08:16.534, Speaker B: A lot of times the front end gets pretty close to being let's say we're building a counter and we're creating an increment function or something like that. You can easily use this debug for that. Eventually for your users, you'll want to have a nice pretty UI, but this lets you prototype that interaction. Let's just say we are going to go with a purpose and we're going to make an Attestation app, right? So we have this purpose and we let people set the purpose. What we want to do here is we want to set up some kind of rule. Let's say at first maybe we would require that the message sender is the owner, but then it's like locked up to only us can access that. So let's make it more decentralized.
00:08:16.534 - 00:08:40.642, Speaker B: Let's make it more like a vending machine, right? Let's make this a payable function, okay? And let's require that the message value is greater than or equal to 0.1 ether or something like that. And if it doesn't work out, we'll say not enough. Wow, great spelling. Not eno. There we go. Not enough.
00:08:40.642 - 00:08:47.394, Speaker B: I think my cat's trying to get in here. Sorry, Kitty. I'm live. Kitty. I can't do it. Kitty, you got to just hang on out there. All right, here we go.
00:08:47.394 - 00:09:09.578, Speaker B: We're going to deploy this new contract and we're going to test this require statement. And you'll notice that this set purpose changes. Look at that. Now we have this transaction value here. So now when I say, hello world, if I don't send any value along, it's going to throw an error saying not enough. Right. So what I need to do is point can you guys hear the cat meowing? Then I add that in and I hit send.
00:09:09.578 - 00:09:25.626, Speaker B: That time I paid for it. Right. And something really interesting happens here. The contract earns some value. Now there's $2 locked up in that contract. So we might need another function that's maybe called withdraw. Right, withdraw.
00:09:25.626 - 00:09:49.938, Speaker B: And what's that going to do? I don't know. It's probably not going to be payable. But what are we going to require? We're going to require the message sender needs to be the owner. Right. And if it's not, we'll say not the owner. And if everything is right, I want to send all the money from this contract. And what do you do to send ETH? You go to solidity by example and you click sending ether.
00:09:49.938 - 00:10:28.770, Speaker B: It might be nice if it was just a send or transfer, but actually the syntax is a little wild for sending ETH because we need to control the gas in case we're sending it off to a multi SIG that needs to execute a little code. But we're going to do message sender call and we're going to send value. What's the value going to be? It's going to be address this balance, right? Something like this. Let's see if this compiles. Yeah, I don't think we even need to use this. Let's see. Let's throw it at the wall and see if it sticks.
00:10:28.770 - 00:10:43.626, Speaker B: Please work. Please work. All right, there we go. Okay, so now we have a new app. The app requires that you pay to set the purpose and our owner can withdraw. Right. Let's make sure all of that works real quick.
00:10:43.626 - 00:11:05.034, Speaker B: I'll just say hello, I'll send in some funds, and then let's do a bad guy first. Bad guy? How do you create a bad guy? You create an incognito window. You go to a local host. It's going to generate you a different burner wallet in the top. Right? Notice these two are different. You grab some funds from the faucet and you try to withdraw. See, the withdraw button is right there and it should say not the owner.
00:11:05.034 - 00:11:22.722, Speaker B: Get out of here, you gibroni. Okay, now we come back over here as the owner and we withdraw. TADA. The money comes out of the contract and goes to us. Okay, so we've almost got this thing ready for production. I'm going to pull out the console logs. What do we want to do right before we deploy? Dang? Let's add some new financial mechanism.
00:11:22.722 - 00:11:41.402, Speaker B: What are we going to do? Okay, let's make a U 256 price, right? Public. Let's make it public so it shows up. Everything's public on a public blockchain. Let's make a price, and let's set it to this point. One ether, right. Something like that. Let's put that up here again.
00:11:41.402 - 00:12:07.794, Speaker B: We're rapidly prototyping these ideas. We're trying things and seeing what sticks. Now we're going to say it got to be equal than greater than equal to price. Does it deploy? Let's see. I want to make sure that price is okay. Here's the mechanism I want to add here. I want to say each time someone sets the purpose, the price is going to go up 1%, right? 100 divided by price times 100.
00:12:07.794 - 00:12:22.502, Speaker B: Now we can't just do zero one, right? There's no decimals, no floating points. You got to do this. And let's even make sure we get the order of operations right. Okay. I like this. I feel like our price is going to go up 1% with each purchase. Deploys.
00:12:22.502 - 00:12:46.226, Speaker B: First try. Let's go real quick before we ship this to a public network. Let's go real quick and just test this out and make sure that if I put in that price and I send it, the price goes up 1%. Then the next time I try to post something there we go. That price is going up on a price curve. We've got our app ready to go. Now, of course, you would build out a lot more front end here.
00:12:46.226 - 00:13:26.846, Speaker B: You would spend some time making this thing super pretty. But for the sake of getting this out to a public network, I'm going to assume that we've basically got that part built and your app works and looks the way you want. Let's real quick look at the front end just to show that there's this back end, this smart contract. It's getting deployed. But over here in the front end, you have this really nice kind of set up where you can select what network you're going to. And then you have this nice home, JSX where you can edit your stuff. At app home, there's examples of what the current purpose is, what your balance is.
00:13:26.846 - 00:13:51.798, Speaker B: There's a lot of stuff here that shows you kind of some of the gotchas. And if I zoom in on something like format Ether, right? When you're going to display a big number, you need to do format Ether, right? Let's see if there's a parse Ether in here. No, there isn't. When you're going the other direction, when you've got like 0.1 and you need to put that to a big number, you've got to do Ethers. Utils parse ether. Just something that you'll get used to as you build these things out.
00:13:51.798 - 00:14:24.190, Speaker B: They're all here with examples for you so you can quickly kind of iterate. The other thing I want to show off, something that you've got built into your front end is ETH hooks. So we started out just with components and hooks built into Scaffold ETH. And we realized not everybody's going to use Scaffold ETH, but these hooks and these components are super powerful. So we've carved those out, we've cleaned them up, shout out to Srivan and Bliss and Mark and a bunch of other people that have helped with this. But the ETH hooks package and the ETH components package are going to be these nice clean go. Look at ETH hooks on NPM.
00:14:24.190 - 00:14:52.842, Speaker B: The code is nice and clean. It's TypeScript he's writing tests for it just like all this stuff that Austin doesn't do. Shirbana is doing much better. But check this out. You've got Use Balance, Use Block Number, all these hooks that will help you kind of get the state set up in your app. And basically, what do you do? You set up your Ethers context where you've got Signer Provider account. You can grab your local balance or get I don't know what that status is.
00:14:52.842 - 00:15:23.810, Speaker B: You can get some information. The Use Balance, it'll just loads your state up with the balance. Here's different ways to use that. Use balance, right? So all these hooks that you're going to need to make your front end work are all here and ready to go for you. And if you don't use Scaffold ETH, you should still look at ETH hooks and check that out and use that in your app. If you're like a hardcore TypeScript person and you are allergic to Scaffold ETH, these components are still available for you. Okay, let's pretend like we've built our contract, we've built our app.
00:15:23.810 - 00:16:00.590, Speaker B: We've kind of built those two things kind of in symphony in parallel, where we're kind of learning how the solidity works as we poke at it. And we're finding what works and what doesn't work. And maybe this array of structs didn't feel quite right, but we tinkered with it for a little bit and we got it. Right now we're ready to deploy to a public testnet. So it's super easy. Basically what you do is when we're deploying to Hard Hat, when we're doing this yarn deploy, it's just using a hard hat. It's using a local blockchain, it's using this like we get some free accounts with those.
00:16:00.590 - 00:16:32.486, Speaker B: But when we deploy to a public network, we won't have those free accounts. And this is all in the ducks and it's easy to get to. But what I'm going to do is Yarn Generate, that's going to create an account for me, basically create a local mnemonic and give me an address that I can fund. And that'll be my deployer account. So if I do a Yarn account, that's going to show me a nice QR code for that. And since Polygon is a big sponsor, I'm going to try YOLOing this to Polygon. I think we may have some RPCs wrong, but homie Jason is in the chat and he's got me some better RPCs.
00:16:32.486 - 00:17:05.246, Speaker B: So if this falls over, we'll just adjust a few things. So I'm going to use my punk wallet. Punkwallet IO built with Scaffold ETH super forkable Wallet connect up front. I'm going to hit scan there and I'm going to scan this QR code and I'm going to send $10 of polygon. Is $10 of polygon enough to deploy a contract? I bet it is. All right, now I'm going to assume that that address has polygon on it, and I want to make sure is it called polygon or matic in the constants? I need to make sure I deploy to the right network. It is called polygon.
00:17:05.246 - 00:17:14.354, Speaker B: Okay. And there is an RPC. So we're good there. I think maybe I was looking at this wrong. Jason. Sorry. I sounded the alarm on the RPC.
00:17:14.354 - 00:17:26.234, Speaker B: Here we go. We're going to try to deploy to Polygon and we'll see what happens. So I'm going to do a yarn network polygon. Right. I've tested all locally. I've played around. It looks good.
00:17:26.234 - 00:17:45.730, Speaker B: It works well. How do I deploy it to a public network? Super easy. Yarn deploy and then that network. Here we go. Oh, no, the JSON is definitely not liking that. Okay, let's try an Alchemy key here. Right here, I think.
00:17:45.730 - 00:17:56.722, Speaker B: Let's try this. Let's try this. Hopefully I'm not leaking. No, no. Invalid. JSON response received. Unauthorized.
00:17:56.722 - 00:18:10.466, Speaker B: Okay. Should we try Mumbai? Let's try deploying to oh, I'm in the wrong config. You're right. Jason live. Good call. I need to be over here. Okay, so there's two different configs.
00:18:10.466 - 00:18:21.082, Speaker B: There's two different different there's the front end and the back end. The back end is hard hat. You've got constants there. The front end is react. I was over in the react constants. I need to be in the hard hat constants. All right, let's look.
00:18:21.082 - 00:18:30.766, Speaker B: Is it called polygon here? Let's look here to see if it is called. Yeah, it is. Okay. Oh, yeah. There we go. There we go. We've weird URL in there.
00:18:30.766 - 00:18:47.106, Speaker B: I don't even know how that got in there, but let's pull that out. I don't know who put that there, but there we go. Now let's oh, wait. Is that polygon? Mumbai. I think that's Mumbai. Here we go. Yeah, I got it.
00:18:47.106 - 00:18:58.762, Speaker B: I got it. Wrong one. Here we go. You got to get I don't know why that was using morales okay. Yarn account. No, that's not what I want. I want Yarn deploy to polygon, please.
00:18:58.762 - 00:19:08.090, Speaker B: Work. Third try. Come on now. Come on now. Deploying contract. Oh, man. What now? What now? Intrinsic? Oh, I don't have enough money.
00:19:08.090 - 00:19:32.866, Speaker B: Really? What's the gas? That should not be that much. Let's check. Maybe we don't have enough. We're looking for polygon here. Do we have a polygon balance? Got to have some polygon. Wait, let's see. Come on.
00:19:32.866 - 00:19:46.306, Speaker B: Where is it? There. Oh, it says I have zero. Okay, so maybe the burner wallet didn't send. Let's try that one more time. Make sure I'm on the right network. It is on polygon. It did send polygon.
00:19:46.306 - 00:20:03.326, Speaker B: Two. D twenty four. Strange, strange, strange. I'm not sure. Let me try one more time. We might have to just go to another network. I would hate to do that, but I think let's see.
00:20:03.326 - 00:20:10.254, Speaker B: Let's just send some poly. Let's make sure. D two, four. Maddox. Let's send some Maddox. Here we go. This address.
00:20:10.254 - 00:20:32.080, Speaker B: Send ten. That should be enough and it should be gone, right? Like 5 seconds later. I'm assuming that account now has Matic on it. Let's try this. Deploy in 5 seconds. Let this finish. Come on.
00:20:32.080 - 00:20:53.570, Speaker B: Kind of pushing the maybe. There we go. Okay, so maybe my punk wallet doesn't have the right RPC for Polygon either. Okay, now we've deployed our contract live. We've got seven minutes left. So like I said, we've got the front end and the back end, right? We've basically deployed our contract to Polygon. That's our back end.
00:20:53.570 - 00:21:09.070, Speaker B: Now our front end needs to adjust. It needs to point to that new network. So over in the front end, I think we've got that right. Now I can go to app. Here's the change. Here's the one change I'm going to make in the front end. I'm going to change this right here to Polygon.
00:21:09.070 - 00:21:24.014, Speaker B: Now, assuming all your RPCs are right sorry, I had to dance around those. It should be just a couple of things you need to change. Now our app is pointed at polygon. Now we're using that. Oh, no. Yeah, it's connecting. We just don't have okay.
00:21:24.014 - 00:21:48.310, Speaker B: And now at this point is a good time to bring in your MetaMask too, right? You can connect your MetaMask. Hopefully this starts to show a balance. There we go. Okay, so the RPC is working. We're just waiting for this contract to deploy is really the case here. I wonder if I didn't do enough gas here. Is one going to even be enough anymore on Polygon? Maybe this has changed and it's gotten more expensive.
00:21:48.310 - 00:22:07.082, Speaker B: Let's jack this up to five and try again. Let's see. I don't know. Increase the gas. Yes, please. Go get okay. There we go.
00:22:07.082 - 00:22:25.010, Speaker B: Our contract is deployed. Okay, cool. So now our app is up on Polygon and there is the contract. So what I'm going to do is start a yarn build. I need to get that going because it's going to take a second. It's going to build our static site and let us deploy it. But let's go play around with it.
00:22:25.010 - 00:22:37.926, Speaker B: Like I said. Now you can. Now that you're on a public network, you connect that MetaMask. Quit messing around with burner wallets, polygon gas. We probably needed 3.2 or something. Yeah, it looks like it increased it.
00:22:37.926 - 00:22:59.998, Speaker B: So we got it deployed. Okay, so our contract is now out on polygon. Our app is pointed at polygon. It's building. We're close to being able to just deploy that thing and let someone but let's just tinker around with it real quick and make sure this works. So Austin Griffith wants to say, hello, world. Which version of Hard Hat? I could find that out.
00:22:59.998 - 00:23:17.826, Speaker B: Let's see. Version maybe. Let me know. MPX hard hat version. We try to keep up with Hard. Yeah. 614 14 may not be the latest latest, but we try to keep up with them.
00:23:17.826 - 00:23:42.074, Speaker B: Okay, so Austin Griffith is going to say, hello, world. He's going to spend polygon. It's going to prompt me. All right, make sure we're on polygonmatic. There we go. Now, that transaction should get processed in a few seconds. We should see the new purpose, get updated, and we should see the price go up.
00:23:42.074 - 00:24:06.898, Speaker B: 1%. Now our app is working. We're tinkering with it. There we go. The price went up again, right? And I can say hello again. This is what it's all about, is being able to rapidly prototype, throw these ideas out there and try things, see how they feel, see how other people use them, get other folks to use these. And by the way, going back to that punk wallet, maybe my punk wallet wants to say something, right? I'm going to log out of there.
00:24:06.898 - 00:24:24.422, Speaker B: I'm going to go back to my punk wallet on polygon. It failed us earlier. I'm not sure why that happened. I'm going to hit scan. Look at this. I'm wallet connecting in with a punk wallet, a browser based wallet. I've just logged in as punk Austin Griffith and let's see, he's got his $30.
00:24:24.422 - 00:24:56.034, Speaker B: I don't know why that didn't work. Okay, this is punk AF. And what are we going to spend? We're going to spend this much money and when I hit send here, it should prompt me over here. There's that transaction. And I hit okay, we just wallet connected in with a browser based wallet and using Scaffold ETH. So using a very forkable wallet, you can fork that wallet and have a nice web wallet and connect to all your apps. Last thing.
00:24:56.034 - 00:25:12.866, Speaker B: Here we go. Yarn Surge. What are we calling this domain? I'm going to call it it's kind of like an attestor, right? I'm going to say Testor attestor. OOH, I like that. That's good. Okay. Surge.
00:25:12.866 - 00:25:32.510, Speaker B: Sh. And here we go. Now we're deploying our app live. So we've got our contract up. Now we've got a front end going up. And now anyone in the world can go to Attestor surge Sh and they can put in a purpose here. Please don't put it in any dirties because it's going to be up on my screen for the next three minutes.
00:25:32.510 - 00:25:53.042, Speaker B: Don't do it. Don't do it. But here is the link. I'm going to paste it into chat. And now anyone can go to Attestor Surge and they can connect their wallet and they can talk to that smart contract and that app that I created. And let's do that real quick just to see that. And again, it's not just in a tester app.
00:25:53.042 - 00:26:19.978, Speaker B: In a tester app with a price curve that we built, we added the price curve in about 15 seconds, right? It was just that extra little bit that we added right here that gave us that price curve. And it was sort of, sort of like a last minute, let's put a price curve on it. Woo. Okay, let's do it. There's a lot of just like playing around, prototyping, trying things. I'm seeing if anybody has written anything dirty yet. They haven't.
00:26:19.978 - 00:26:44.340, Speaker B: Great. Okay, awesome. Hearts, hearts, hearts, hearts, hearts. Send. There we go. We're all using a decentralized app that I built in like two minutes, even with a bunch of things breaking, right? This is what Scaffold ETH is all about. So Google Scaffold ETH, you should be able to find the repo pretty easy.
00:26:44.340 - 00:27:11.342, Speaker B: Get into this routine where you change a few things in Solidity. You go to Solidity by example and you look at some of these topics, you paste them into your contract, you tinker with that front end here and you kind of poke at your contract and make sure, wait, did this work? I think we're still waiting for that to go through. It might be trouble with the RPC too. Rapid. Prototype. Your app first. Get scaffold ETH down.
00:27:11.342 - 00:27:38.646, Speaker B: Learn solidity. But then once you have that and you're able to quickly iterate on things, then it's like the world is open to you. Now this is just the starting point. Now that you've got the starting point, scaffold ETH is also not just a starter kit for learning, but a starter kit for building apps. And it's very, very forkable. And anything you build with it then becomes very forkable also. Right? So all these people know exactly where your contract is and they know where your code is.
00:27:38.646 - 00:28:04.602, Speaker B: They know where that home JSX is. Right? So then what we've done with this nice little like this is sort of like a DAP starter kit. We've used that to create a whole bunch of other starter kits. Optimism starter kit or a proxy factory? Simple streaming. Oracles NFTs sign in with ethereum. There's so many different example branches. Seriously, if you go, let's let's go to the Scaffold Eth.org.
00:28:04.602 - 00:28:28.162, Speaker B: So that's just GitHub.com scaffoldeth, right? Scaffold ETH. And I'm going to scaffold ETH examples. I'm going to paste these into the chat because I want people at home to go check this out. How many branches? 262 branches. Let's go look at the how do I look at the Active? Here we go, here we go. You're not going to be able to see it, but what do we got? Like, right here? Like ether.
00:28:28.162 - 00:28:38.826, Speaker B: Scan starter. Kit. A. Token multidrop. A multi SIG ZK circom starter kit. A ZK game example uniforker. I don't even know what that is.
00:28:38.826 - 00:29:00.766, Speaker B: Retro PGF funding with optimism. Some Maddox starter kit, some abi thing. Don't know what it is. There's tons and tons and tons of examples here where you can search for the thing you're looking what if you're looking to learn Commit Reveal, let's just say, what the heck is Commit Reveal? We want to learn it. I'm going to go to Scavebled ETH examples. I'm going to go right here and I'm going to type in commit. Look at that.
00:29:00.766 - 00:29:48.046, Speaker B: There's three different Commit Reveal tutorials that you can get in here and follow. All of these have these nice readmes that are focused on helping you get up to speed and figure things out. Look at all this great information. All right, so lastly, as you're building cool things, there's even incentivization mechanisms. I'm streaming to builders that are building prototypes and products and tutorials and templates for other builders. So if you happen to get in, you know that Circom Starter kit we saw over there? Definitely YOLOing ETH to whoever built that, right? I want more and more and more of these composable generic components that we can grab off the shelf and make some kind of product or prototype out of. And this is the way to do it.
00:29:48.046 - 00:30:09.306, Speaker B: This is the way to do it. Get scaffold e tinker with solidity, then grab some branch that gets you dangerously close to the product you want to build. Tinker with it, three or four examples of it. Throw it at the wall, see how people use it. And iterate on that post that repo back. I'll yolo some ETH to you. And we create this kind of like, nice cycle of development.
00:30:09.306 - 00:30:32.394, Speaker B: Then kind of stepping up from that is the Moonshot Collective. Beyond Build guild, we have the Moonshot, which is focused on dao tooling and prototyping. So as builders kind of look at these things, they could get scooped up into moonshot or other orgs in the space that are looking to build these things. But really, I'm talking to you, builder. I want you to build your own thing. I want you to take Scaffold ETH off the shelf. I don't want you to go work for Sushi.
00:30:32.394 - 00:31:06.226, Speaker B: I want you to build the next Sushi, and I want you to do it by just grabbing Scaffold ETH, tinkering with things and learning as you go, and then finding some of these projects and prototypes that you can fork, like the punk wallet, that wallet that I was using there. How do we get the punk wallet? Well, I'm guessing we're going to go to Scaffold ETH, and we're going to type in punk. There it is. There's the punk wallet. This super forkable web wallet with wallet connect first is right here. You can fork it, and in ten minutes you could make Radwallet IO, which is a punk wallet. That uses the Rad token.
00:31:06.226 - 00:31:17.126, Speaker B: Right. So much stuff we can do there and get stuff going. So thank you all. This has been a super fast Speed run. Check out Scaffold ETH. Check out speedrun. Ethereum.
00:31:17.126 - 00:31:24.782, Speaker B: Oh, I forgot. One shill. One shill. I got to shill this. I got to shill this. I'm talking oh, yeah. So there's the rad wallet I was talking about.
00:31:24.782 - 00:32:01.194, Speaker B: Speed, run, ethereum. Once you get Scaffold, once you get the syntax down, once you get some of these first and initial things, go speed Run Ethereum. I'm going to paste that right into the chat. Speedrun Ethereum helps you get both your footing with the tooling, but also with ethereum. Ethereum is tricky and you need to learn what works and what doesn't and what people are building with, what kind of stuff you can put out there actually going to work. Speedrun Ethereum takes you through that with a curriculum that teaches you the superpowers of Ethereum and the gotchas. So you'll just take on some challenges there.
00:32:01.194 - 00:32:18.222, Speaker B: And then there's like a multi SIG Cohort. There's a Dex building cohort. There's an NFT building cohort. So as you get through those first challenges, then you'll drop into these rooms with real humans that are going to help you build through these things. So please check it out. Check out Scaffold ETH. Build something quick and fun with it.
00:32:18.222 - 00:32:25.402, Speaker B: Check out speedrun. Ethereum. Check out ETH. Hooks. Check out Build Guild. Check out Moonshot. Whoop.
00:32:25.402 - 00:32:31.454, Speaker B: Whoop. Happy bow tie Friday. Hearts. Hearts. Hearts. Hearts. What's up, Luke? How you doing, man? Are we good?
00:32:31.572 - 00:32:46.914, Speaker A: Oh, my God. I don't even know how to follow that up. That is the best this is the best bow Tie Friday that I've seen. I need to get a bow tie and I need to be there for the next one. Thank you so much to everybody for joining us today. Thank you, as always, to Austin. It's been an incredible presentation, as usual.
00:32:46.914 - 00:33:00.234, Speaker A: I'm going to post some of the links you shared in the discord in case anyone needs to see them again. As a reminder, the Zoom Chat is going to be closed after this, so I highly recommend connecting in discord, continuing this conversation and keeping that energy up and kicking.
00:33:00.282 - 00:33:06.570, Speaker B: Keep building. Go build something awesome. Sunday is going to be insane, right? What? Sunday at 06:00 p.m.. Or something like that? Sunday evening.
00:33:06.730 - 00:33:07.600, Speaker A: Oh, yeah.
00:33:08.690 - 00:33:09.630, Speaker B: Builds.
00:33:09.970 - 00:33:19.450, Speaker A: I'm sure you will. I'm sure you will. Well, thank you, everybody. We have another session coming up at 230, so I'll hope to see you all there. We're going to be closing this one right now. Thank you again, Austin.
