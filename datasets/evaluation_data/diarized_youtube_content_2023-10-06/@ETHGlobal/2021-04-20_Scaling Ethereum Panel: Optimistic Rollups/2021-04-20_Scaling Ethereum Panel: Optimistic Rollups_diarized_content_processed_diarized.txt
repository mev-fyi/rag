00:00:00.810 - 00:00:34.600, Speaker A: With that said, those were some amazing points that both Carl, Patrick and Harry brought up. So what I'd like to do is just ask everybody to turn their video on and we'll have Patrick do a quick panel on or just moderate a quick Q and A session with Harry and Carl. So I'll let Patrick take it from here. And we have for questions, we did get a lot of questions on the chat, so we'll be relaying them here directly. And then I'm sure Patrick also has a handful of questions himself, so I'll let him take it from here.
00:00:35.050 - 00:01:19.880, Speaker B: Yeah, thank you very much for that partake. So this is the first question that I basically got from the chat. So the question was more to do with the EVM. So the EVM and layer one, how interoperable will it be with the EVM and layer two? And this also sort of leads to my next question that's around this, because you both mentioned that your roll ups are good for experimenting. So how easy is it to introduce a new EVM chains on your roll up? Let's say we wanted to experiment with EIP 30 74. Could that be implemented on your roll up before it hits main chain ethereum? So I'll let one of you guys go first. Maybe Carl, I guess, really excited, full of energy.
00:01:21.610 - 00:01:40.860, Speaker C: That may always be the case though. Yes, definitely. You can 100% experiment with various EIP changes and there are specifically certain things that are easier to experiment than others. But for the most part, yeah.
00:01:43.490 - 00:01:44.910, Speaker B: What about you, Harry?
00:01:45.570 - 00:02:50.180, Speaker D: Yeah, I think I could basically second to what Carl said. I mean, that's one of the cooler things about roll ups is basically kind of like how much it opens up the design space. Now the caveat to that is once there's launched roll up chains that have a lot of money and users. We're probably not going to want to get too crazy, and we're going to want to run test nets and kind of innovate reasonably slowly over time, but essentially kind of spinning kind of your own roll up chain, essentially. That isn't kind of part of the main one and doesn't synchronously communicate with the main one, but is sort of your test bed environment is something that's really awesome. So I would for instance, really expect over a couple of years from now when a new EIP is proposed, there'll be a roll up chain that's launched on mainnet with the full economics that's kind of running with that EIP added in. So that kind of rather than just having a separate test net, we can get a much more kind of authentic test of the new tech.
00:02:52.070 - 00:03:11.340, Speaker B: Awesome. So that also leads to my next question on the EVM. So how vanilla will your EVM be when you launch your initial roll up? Are you going to have any custom features in your EVM or is it going to be complete vanilla upon lunch. So are you going to experiment right away?
00:03:14.190 - 00:04:33.522, Speaker D: Yeah, sure. Ours is going to be kind of mostly vanilla, but with a few exceptions, kind of the two biggest ones that come to mind is with kind of supporting alternate transaction formats. And so the biggest one there is with support for BLS, which is kind of awesome efficient signatures that are going to be able to cut down the call data usage of roll ups even more. Another area where kind of Arbitrum we've done a fair amount of work is on the kind of gas pricing and economics. It turns out that kind of for a roll up chain there's kind of a fairly kind of different set of concerns compared to Ethereum's. L one in sort of how the economics of the chain work. And so we've kind of done a lot of work there, very inspired by EIP 1559 and kind of trying to achieve sort of the UX improvements that are given by that of around the edges, basically sort of trying to innovate, but with the core model essentially as similar as possible so that we're not like the thing we don't want to do is confuse people too much or cause things that would work on ethereum to break.
00:04:33.522 - 00:04:40.760, Speaker D: And so those are the areas we're staying away from and the areas kind of that don't have those risks are the areas we're trying to push the envelope a little bit.
00:04:42.890 - 00:04:54.182, Speaker C: So I can also second a bunch of that. However, one thing I will get into specifically is what it really means. What have we done with the EVM?
00:04:54.246 - 00:04:54.522, Speaker D: Right?
00:04:54.576 - 00:05:44.650, Speaker C: We are literally running an EVM in geth and what we're doing is we're actually intercepting the calls to a smart contract in that EVM and then hooking that like kind of creating a pre compile for that contract and hooking into the guest's internal storage. So when you say are you making modifications to the EVM? The only modifications that we are making to the EVM are actually how the smart contracts are structured. But we're using the EVM vanilla EVM software to support those features. So it's this very interesting like we are as tightly integrated and kind of along for the ride in that sense as I can imagine.
00:05:45.470 - 00:05:54.810, Speaker B: You actually just reminded me optimism definitely you're dealing with the EVM because you I think at one point crashed. Go Ethereum was also impacted in fura.
00:05:56.670 - 00:06:00.480, Speaker C: Yeah and by the way, the reason why we did that.
00:06:02.450 - 00:06:03.246, Speaker D: The reason why.
00:06:03.268 - 00:06:33.770, Speaker C: We found that vulnerability was because we are working with the EVM at such a low and insane level that we are using pre compiles that just don't make sense in normal contexts. There is the identity precompile where you call it and it just returns what you called and no one uses that. Like that's some crazy stuff but we had to use it for part of our software and it's like oh of course there's a bug in that pre compile. By the way, if you want to find a hard fork vulnerability, look at the pre compiles.
00:06:35.630 - 00:06:36.310, Speaker D: Exciting.
00:06:36.390 - 00:06:59.810, Speaker B: So I'm going to move on to the next question then. This is also from the chat. So one thing I mentioned in my talk was like withdrawal integrity. How do we guarantee someone can withdraw their funds if the sequencer disappears? And their question was, what's that interaction like going from an L2 transaction to the L one transaction? So do you guys just want to give us an overview of what it's like on your systems?
00:07:00.150 - 00:07:43.310, Speaker C: Sure. So an L2 transaction is you're sending directly to the sequencer, but an L One transaction is essentially an L One to L2 message. And now notably that L One to l Two message can be anything. It can be, for instance, a fully signed, valid L2 transaction. And so everyone on L2 has a kind of smart wallet. It is implemented as a contract wallet which actually you can then upgrade to whatever you really want. But the kind of general sense is you would essentially be sending a metatransaction esque thing which is a message into L2 that is eventually run in the L2 system, of course with higher latency.
00:07:45.010 - 00:07:47.294, Speaker B: Harry, do you want to give us an overview as well?
00:07:47.332 - 00:08:21.980, Speaker D: Yeah, I think for Arbitrum the story is relatively similar. There's some differences there in that. Our kind of L2 accounts are basic EOAS. So basic kind of like we don't have kind of smart contract wallets by default, we just have sort of regular accounts. And so in our system basically, that L One to l Two transaction just basically sort of submits a regular transaction from that user. But these are kind of like technical details. So I think sort of in practice that'll end up feeling pretty much the same.
00:08:22.670 - 00:08:41.426, Speaker B: Awesome. Well, also what I want to ask is we're at a hackathon full of newbies. You're really excited to get involved with this. Can you give like a 1 minute overview of what it's like to get started on your layer three system? What would the dev developer experience be like? Anyone can go maybe. Carl, do you want to go first?
00:08:41.608 - 00:09:29.620, Speaker C: Okay, so the developer experience, we are trying to keep it as minimal as possible. So we have a tutorial that you can check out on our GitHub like optimism tutorial. And essentially you take for instance a hard hat project and you add a couple lines in and then you run your test and it all passes. And so that is very similar. The general format is you add the optimistic ethereum network to your MetaMask and then you can start interacting with it and sending transactions, deploying contracts, whatever you want. So it's just essentially just think of it as a change to your provider. There are a few oddities around fee payment.
00:09:29.620 - 00:09:35.330, Speaker C: There's some caveats here and there. But that's at least where we are headed.
00:09:38.490 - 00:10:06.846, Speaker D: Yeah, for us, basically. And I think I showed on one of my slides, there's a kind of a little landing page testnet. Arbitrum IO. Really all it is is kind of if you have a Truffle project, a hard hat project where you have kind of where you fill in your provider, there's an Arbitrum network, there's a URL, there's a chain ID. It's a public testnet. And so you can just kind of take your existing project, no need to do anything, and deploy it. There are a couple of corner cases and a couple of edges you could hit.
00:10:06.846 - 00:10:14.400, Speaker D: And we have kind of there's a little more detail in there, but if you try that out, chances are pretty good that it'll just work.
00:10:16.850 - 00:10:33.640, Speaker B: Awesome. So the next question is also from the chat, and I guess there's two variants of this. The one in the chat was why do we have to use Ethereum for data availability? Can we use IPS filecoin, et cetera? So what do you guys think about that? Are we Ethereum maxis here?
00:10:36.250 - 00:10:39.110, Speaker C: Definitely. Oh, sorry.
00:10:39.260 - 00:10:40.118, Speaker D: Oh, no. Go for it.
00:10:40.124 - 00:10:41.770, Speaker B: Go for it. Carl, you go.
00:10:41.840 - 00:10:43.802, Speaker D: Yeah, okay.
00:10:43.936 - 00:11:12.786, Speaker C: No ethereum. Maxis here. We got to be we're blockchain maxis. But anyway, the thing that I was talking about in my presentation was availability is like the pipes, right? It's not the storage. So IPFS just doesn't really do the same thing as data availability that we're coming to consensus on. The reason why availability on Ethereum is really nice is because it's really confusing for developers to have tons of different security models for your different information.
00:11:12.888 - 00:11:13.154, Speaker D: Right.
00:11:13.192 - 00:11:34.380, Speaker C: If I'm using the trusted Internet, it's just easier for my brain if it's all trusted at the same level or a similar level, there will be gradients. I'm not saying there won't be, but generally speaking, for many applications of wide variety, it's just going to be nice to have a homogeneous trust model.
00:11:35.070 - 00:11:37.450, Speaker B: Awesome. What about yourself, Harry?
00:11:38.110 - 00:12:13.830, Speaker D: Yeah, no, I think it's interesting how this will expand over time. I think Ethereum is the place to be right now, and it's the place to be hopefully forever. I think there is some kind of interesting work going on here. I mean, state channels, for instance, have their own solution. Data availability, which is just the people involved agree that it's available. There's all sorts of I'm sure there'll be some discussion, I think, a little later today about the cool stuff that some of the ZK roll ups teams are doing. There's some terms bouncing around ZK, Porter, Volition.
00:12:13.830 - 00:12:44.160, Speaker D: There's a lot of really cool stuff here. So kind of there's a lot of ongoing work. I totally agree with Carl that I think that simplicity here is king in a lot of ways, but there are a lot of really cool kind of research directions here that do the same thing as roll ups, which are kind of like modify the security model of ethereum a little, but probably within enough constraints that the systems are still sort of reasonable to use. So yeah, we'll see where that we are in five years.
00:12:45.410 - 00:13:18.042, Speaker B: Awesome. So I want to ask two more questions. One's again to do with the data availability. So as we know, and you've both alluded to this in your presentation, the real bottleneck to these roll ups is Ethereum's bandwidth call data, how much data can you send, et cetera. And so that's going to be the main gas consumption for the layer one. I don't know if you have any numbers handy. You may not have numbers handy, but do you have any example applications that use your service and you're like, oh, they were using 5 million gas on Ethereum but now they're using X gas on the roll up.
00:13:18.042 - 00:13:27.946, Speaker B: How good was that improvement? And if you don't have numbers, it's fine. It's just interesting. Do you want to go first, Harry?
00:13:27.978 - 00:14:36.034, Speaker D: I guess, yeah, I think we've had a bunch of different applications deploy on our test set. Normally the way we figure this is we just sort of compare the we have our Block Explorer just kind of displays the L One costs associated with the transactions and we compare it to what it would have been or what it was if they're already launched on layer one. So I think we've seen kind of anywhere between I think in the worst case a ten or 20 X and the best case 500 X improvement. I think kind of like our go to a while ago. I think kind of basically the first thing we did on kind of the Arbitrum testnet ourselves and we got it working just because it's so core to ethereum was we tried out launching uniswap V two and if I remember correctly, the transactions there were coming in at around 1900 gas per transaction. Assuming kind of the batches of transactions were of a sufficient size which kind of there's this interesting thing which is like there's a fixed cost for the batch and then there's the variable cost per transaction. But one of the really cool things that optimistic roll ups have is the batches don't need to be that big.
00:14:36.034 - 00:14:48.810, Speaker D: And so for Arbitrum, I think it's kind of like 50,000 gas fixed cost and then we divide that over all the transactions in the batch so you can kind of still be very cheap even with not very many transactions.
00:14:50.030 - 00:14:51.958, Speaker B: Cool. Go ahead, Carl.
00:14:52.134 - 00:15:36.966, Speaker C: Very similar. But maybe one thing I'll shout out is synthetics in particular has a bunch of transactions that are like 2 million gas on L one and we reduce that less than 5000 gas on L two. Of course caveats batch sizes, et cetera. So some applications are going to be crazy gas savings. Now just one extra note is that the more people use the system, the more our compression techniques and the more mature. We get we can actually offload more of that availability off chain and we can improve those performance characteristics even more.
00:15:37.068 - 00:15:53.882, Speaker B: So it's pretty cool, awesome, exciting. So I hope all the devs out there realize that you're going to get like 100 X savings if you use optimistic roll ups. So my final question is it's a very quick one. I think Carl Ludwig this in his presentation. We're one big community. We're all BFFs. You're building competing products.
00:15:53.882 - 00:16:03.620, Speaker B: But you know what? You're all like good community. So my question is, what's your favorite thing about the other project? What gets you excited for it? That's a nice way to end.
00:16:05.990 - 00:16:08.498, Speaker D: Nice. Who gets to go first?
00:16:08.664 - 00:16:11.940, Speaker B: Everyone wants to go first. I'll give you a second to think about it if you want.
00:16:15.610 - 00:16:46.400, Speaker D: I have a joke answer and a real answer. My joke answer is you guys have the best memes. Seriously, your meme game is like so funny background. I got to give it to you. There no and the more serious answer is the way that kind of be able to use geth is really cool and kind of reuse those existing components is super.
00:16:48.530 - 00:17:42.640, Speaker C: Will? My answer is, since I learned about Arbitrum, okay, the first thing was I was like, okay, Ben, tell me how Arbitrum works. It is like, I do not know, but it sounds crazy is how do you have a virtual machine that traverses a tree? Literally, it traverses a tree that is legitimately the coolest mind expanding thing. And you all are always at the kind of forefront of just mind expanding kind of designs and design spaces. So it has been really inspiring to understand all of the trade off spaces, all of the kind of trade offs that you all have made. And also the I mean, man, I just can't get over the fact that you all's VM just goes up a tree and Travert goes down and it's like, yeah, wow.
00:17:44.210 - 00:18:21.422, Speaker D: I feel like one of the kind of beautiful things has been both projects are just making each other better. I know that, for instance, EVM compatibility a year ago, we hadn't focused anywhere near as much and seeing with the work you were doing and I think in a lot of ways inspired us in terms of pushing for that. Sort of like, let's make this look and feel as much like ethereum as possible, which is clearly, in hindsight, the right thing to do. And it seems like kind of one of the awesome things about optimistic Roll ups in general.
00:18:21.556 - 00:18:28.160, Speaker B: Awesome. So I'm going to finish there, guys, just for the time. So I'll hand it back to Cardig. Thank you very much for answering our questions.
00:18:28.610 - 00:18:36.220, Speaker A: Harry, Carl, thank you so much for that. And Patrick, thanks so much for asking that question and ending on a really positive and wonderful note. So thanks again and we.
