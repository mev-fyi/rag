00:00:00.410 - 00:00:35.062, Speaker A: So the next talk is titled State of the Merge. And this is going to be a talk by Luxman, who is a researcher at the Ethereum Foundation, and he's going to be presenting the current state of what the merge is and where it is. Luxembourgman's been working on this thing internally for quite some time, and I know we've all talked about the merge as a big event, but exactly what's happening there and what is planned is is kind of the goal for us to uncover today. So with that, please welcome Lakshman. And whenever you're ready, you can share your screen and turn off video. Turn on video.
00:00:35.116 - 00:00:46.458, Speaker B: Hey, is my video everything is great. Working great. Let me share my screen. How's that? Are we up?
00:00:46.624 - 00:00:47.994, Speaker A: We're up. Perfect.
00:00:48.192 - 00:01:17.122, Speaker B: Excellent. All right. Hi, everybody. My name is Lexwan. I work on a lot of things at the Ethereum Foundation, primarily focused on kind of moving the protocol forward. I think what that's kind of fallen under recently is we're calling this like East Two and the merge basically this big shift to proof of stake consensus. And I kind of wear many hats.
00:01:17.122 - 00:01:48.494, Speaker B: I'm involved in some R and D stuff. I'm involved in some coordination, communication stuff, education stuff. I'm always down to talk about this stuff. So on the last slide, my handles will be shared as well. But I'm always available to chat if you're interested in learning more, interested in getting involved, anything like that. All right, so this talk is going to be very specifically about the merge. I'm not going to go into too many technical details, actually.
00:01:48.494 - 00:02:36.480, Speaker B: I'm more going to kind of like motivate, what is this thing? Why are we trying to do this? What do we need to do to get there? And where are we now? What's remaining? And finally, talk a little bit about where you can get involved, where you can help, where you can kind of learn more. This talk, there's a lot going on in Ethereum protocol development, a lot of really cool ideas. Xiaoi gave some excellent kind of historical context and some vision about the future. And there's Sharding. There's a whole bunch of cool stuff coming for state size management, like Berkele trees. Epic based data. Expiry 1559 is on the way.
00:02:36.480 - 00:03:17.162, Speaker B: So we're going to have some cool new gas fee market kind of structure, mev extraction, like moving Starks into layer one. There's all kinds of cool stuff out there. This is not going to be about any of that. This is going to be very focused on this kind of singular task in front of us, which is upgrading from what we know as Ethereum today to Ethereum with the proof of stake consensus. And later in the day, Vitalik's actually going to talk about what comes after merge. So if you're interested in all this stuff, which is super cool as well, definitely stick around for that. So where are we going? What is the goal here.
00:03:17.162 - 00:04:20.330, Speaker B: Sometimes it's valuable to just step back and remember what this is about because there's a lot of jargon, there's a lot of changing kind of language around what we're trying to do and it's valuable to just kind of think about what is the end goal. So this is a near term image. Ethereum 20 years from now may look different but this is sort of what we're looking at and what we're hoping to get to. Don't quote me on this, but within the next year, I think last week there were a bunch of interesting talks about layer two side chains, various mechanisms for scaling that don't exist in layer one. And it's really cool that all that's happening in parallel with these things that are happening in layer one. Allah proof of stake. And so what we're working towards hopefully is something where these two things work in concert.
00:04:20.330 - 00:05:34.514, Speaker B: We have this very fast data layer that operates on proof of stake. Environmentally friendly, has economic finality, has these great properties that proof of work doesn't have. And that data layer serves this interesting execution, context ordering context for transactions in a bunch of different who knows how many different L two s and maybe they interact with each other. But this is sort of like the rough mental model that we're working is this is from a Tweet vitalik made at some point last year that I think while maybe the language is different, the concepts hold up. And also don't worry too much about the actual numbers here, but this is what we're working towards. When roll ups get there, if roll ups get there, we're going to have pretty excellent gas savings in TPS. But if we can combine both of these worlds, we go even further.
00:05:34.514 - 00:06:46.670, Speaker B: So that's what we're working towards. So how do we get there? So what is this merge thing on the ethereum one layer side or sorry, on the layer one side? What needs to be done to actually get there? I sort of think of three different pieces to this. One is sort of like the actual operational hot swap of one subcomponent of the system out for something else, which we'll talk about. Consensus hotswap one is sort of the actual client. It's not enough to kind of theoretically just have proof of stake and ethereum. We need like an actual client implementation that does all the things we want it to do, that does all the things we want from what we call ETH One today and all the stuff we want from the beacon chain. And finally we want to kind of really trust that the new home for Consensus is robust, is secure.
00:06:46.670 - 00:08:13.660, Speaker B: And so some of this is just sort of like a lot of testing but some of this is also kind of more visibility around what's going on over there. So first of all, I realize there's a lot of shifting kind of perspective on what this looks like. But I've started thinking about Ethereum as sort of analogous to a traditional operating system and that there's different kind of layers in terms of, you know, what it is. Just as in an operating system, you have kernel space, which is kind of like the vital functions of the operating system. And then you have user space, which is things like higher level stuff. You might think of Ethereum as having kind of this consensus layer which is the core, sort of like how do we even grow a blockchain? And then there's a lot of stuff that exists above that which maybe we can call the execution, which is like how do transactions get into the blockchain? What determines that a transaction is legitimate? I e the EVM. So if we use this model kind of like as our base, this is kind of one useful way to think about what the merge is.
00:08:13.660 - 00:08:54.920, Speaker B: We are keeping the execution layer the same, the Ethereum we all know and love today. And of course, layer two is above this somewhere. And we are upgrading the consensus layer to this new super fancy fast consensus layer with nice properties. So that's kind of like the hotswap, just like an image of it. And I'll get back to some of the details of what needs to be done there a little bit later. So just separately and be more concrete, we need a client. And some of you may have seen this image before.
00:08:54.920 - 00:10:22.530, Speaker B: This is, I think taken from like an older research post kind of originally proposing the idea for what this client looks like. But to get across the finish line today, we probably don't want to rebuild all of the great things that exist in ETH one clients around this execution layer that I was talking about here. Instead, maybe we can, and this is the current plan we can define a clear RPC interface between ETH One and E Two clients and have an EQ client driving an E One client as our new combined client that will kind of have all the things from both worlds that we want. So to do this, there's some very detailed edge Casey Spec work, which is a lot of what kind of merge R and D has been focused on recently. We need to make sure we define that RPC such that it can work for every single ETH One client interacting with every single E two client. Once you start having N squared number of possibilities, you want an interface that captures everything. You don't want to have to deal with those edge cases individually.
00:10:22.530 - 00:11:19.330, Speaker B: So that's kind of technically, but more kind of pragmatically. We literally need these people to start the people developing these clients to start working together. So a lot of what's been going on behind the scenes has been sort of like the beginning of collaborations between folks on what previously were separate client teams. Who knows what this will look like in the future but there's a lot of cross communication that needs to happen. And finally, as I mentioned, this is a very edge, case oriented thing. We want to make sure that this is very thoroughly tested, both kind of like unit tests and integration tests on the specs and clients themselves. But also we want to run devnets and testnets and see that things don't break when you start putting them under load.
00:11:19.330 - 00:12:28.730, Speaker B: A lot of testing that still needs to be done. The third item for how do we get there? Was kind of like a proof of stake chain, like a consensus layer that we can kind of trust to be the new home for this booming execution layer that has all this cool stuff going on right now and so separate from the merge itself. We want the beacon chain, the proof of stake chain, to have properties that make it resistant to capture, resistant to kind of like bugs and failures. So we want things to be very thoroughly tested. We want audits, we don't want a chain that is mostly run by a few parties. We want a lot of hobbyists. We want to know that kind of like that part of the chain can fork and kind of social and technical processes around forks work.
00:12:28.730 - 00:13:26.526, Speaker B: So we want to have experienced a hard fork in that chain. And so all of this stuff is stuff that's being worked on. That's like a high level three areas that are kind of being worked on in parallel. It's valuable to yeah, I think I'll now talk a little bit about where we are today which also kind of motivates what work is needed to get to the finish line. So I really like this image that's kind of like becoming sort of the norm for thinking about what the merge is. One of the reasons I like it is it sort of really clearly motivates like three separate places where work is happening. Work needs to happen on the top line, the proof of work line.
00:13:26.526 - 00:14:16.154, Speaker B: Work needs to happen on the bottom line, kind of like the proof of stake line and work needs to happen right at this intersection. We need to figure out what needs to happen for this upgrade to kind of happen properly. And so I think in terms of thinking about where we are now, it's valuable to look at. Where are we here? Where are we in the proof of work land? Where are we in the proof of stake land and where are we with regards to merge? So I'll start with merge. So Xiaoi kind of like hinted at this and I'm not going to go into too much technical detail here. I want to leave some room for questions. But also all of this can be found on the east to spec GitHub which actually is linked on the next slide.
00:14:16.154 - 00:15:46.250, Speaker B: But if you go read the spec, sorry if you go read the spec, the way that the kind of basic kind of like the data structures are changing is actually quite simple. We're just sticking in the block that exists in the beacon chain. We're sticking in the information necessary to kind of process transactions. So if you look at this execution payload and if you've interfaced much with Ethereum via like Ethers or Web three JS, you'll probably kind of recognize this because this is basically what's necessary to value the transactions in a block. So literally just sticking that straight in to the beacon block, it's quite straightforward. There's still some testing that needs to be done, but you can go to this link here and actually get an idea of how this all works. It's hard to be convincing when I'm not going through all the details, but it is pretty straightforward to understand if you have a basic understanding of how these two systems work that's kind of on the merge side, there is a release cut for the merge spec itself.
00:15:46.250 - 00:17:01.538, Speaker B: There's some additional kind of unit testing that needs to be done, but we're basically there on the spec side, next is next is implementation. So we haven't, you know, like that's proto protolamda is going to give a talk after me on Ryanism, the merge dev testnet. We're very close to starting to test the merge client in production. So on the proof of stake side, I think I mentioned earlier that we want to kind of know that we can hard fork and the first hard forks spec release has already been cut and we are at the stage of implementing it in all of the clients, which is really exciting. So we're pretty close to full confidence on this front. And if you want to learn more about what's in this hard fork, check this link out kind of side note. But one of the really cool things here, I think, is that Light client committees, the incentive to publish block headers for Light clients will be baked into the beacon chain itself.
00:17:01.538 - 00:17:52.626, Speaker B: And this hard fork adds that functionality. Again, slight side note, but if you're excited about Light clients, this is kind of fun to dig into. And finally, on the proof of work side, as we all know, the Berlin hard work just happened. A bunch of important gas cost changes. Sometime this summer we'll see London should happen. And then after that, hopefully, I think the merge is the next hard fork for the proof of work side. All right, so finally I'll talk a little bit about I think I've sort of set some parallel places where work is being done.
00:17:52.626 - 00:18:48.710, Speaker B: I'll talk a little bit about where you can kind of get involved with this stuff today. So I think there's broadly these three areas. One is kind of like testing of the actual thing, like testing the merge itself, like writing unit tests and stuff like that. One is actually running the client and seeing what Proto is going to talk about that after this. But there's going to be a test net that you can participate in over the course of this hackathon. And actually really exciting. I think if you think that the upgraded for the Stake is like an interesting place, like interesting period event in Ethereum history, I think participating in this testnet is a pretty historic thing to be a part of.
00:18:48.710 - 00:19:45.170, Speaker B: And then finally just being involved with the Beacon Chain, contribute to staking, like run a validator get involved, see what the process is like, see what doesn't work, and generally contribute to a healthy saving ecosystem. So on the spec test side, this is it's. I think, I think you, you kind of just need to go read the spec and like understand. And I looked it earlier, where was it? It was here. It's actually pretty like you can see that there's sort of these three links for the changes. It's not that long, it's pretty straightforward to understand. But I think what we need is people to read the spec and just think about edge cases.
00:19:45.170 - 00:20:40.666, Speaker B: Think about, all right, this could happen right at the point of merge. So very high level. It's like there's a difficulty at which merge will trigger or at which Beacon chain validators can start, including that ETH One payload in their blocks. And there's probably edge cases, there's probably things that we haven't thought of. So go just think of those things and add GitHub issues for things you think are missing. I think one area in particular, just to flag something, one area that could always use more love is like that exact point at which the fork should like, it should be simple. But as anyone who's worked on software knows, there's always weird edge cases you haven't thought about and just be great to get more eyes on that.
00:20:40.666 - 00:22:11.270, Speaker B: I'm also happy to help Direct. So my contact info will be at the end of this and feel free to reach out next. And I don't want to talk too much about this because Proto is giving a whole talk on this, but there's a testnet ongoing and it's a pretty cool opportunity to be a part of something quite historic, which is the testing of the upgrade to proof of stake that the community has been talking about since the beginning. So yeah, go participate, go run, pick two clients that may not be, pick an ETH one client and E two client that aren't being tested by someone else and see what happens when you try to stick them together. And then finally, as I mentioned earlier, contribute to a healthy Staking ecosystem. So I pulled this from Etherscan earlier today and it's kind of just to point out that there's a reasonable fraction of beacon chain deposits that are exchanges. And it would be great if the miscellaneous category here were a little bit larger as well as like the Staking pool category, perhaps.
00:22:11.270 - 00:23:00.454, Speaker B: So, yeah, just go run Validators, participate in the decentralized Staking pools, help build tools that make it easier for other people to run validators. I think this is something that Ethereum Validation is very interested in from like a grants perspective. You go try to run a Validator and you start running into some headaches. We want it to be as easy as one click, if possible, someday. So if there are things that are standing between you and that, you have ideas to stuff that is very important for a healthy seeking ecosystem and stuff that the Ethereal Foundation is very interested in. And that's it. I think I blazed through my talk relative to the time allotted me.
00:23:00.454 - 00:23:03.240, Speaker B: So we have a bunch of time for questions.
00:23:04.890 - 00:23:42.930, Speaker A: Thanks, Lakshman. And it was a really helpful overview of everything that's happening in this ecosystem. We do have a couple of questions, and I'll relay them as we kind of get this. And for those of you listening, we got a bunch of time for questions. If you see this thing after 32nd delay, type your questions and then we'll relay them back to Luxman. So the first question is, you've talked about the need for a unified client that kind of bridges e one and e two transactions. So the question is, what does that actually look like in practice? Would that be something that behaves more like mist from the early days or something else and kind of just going deeper into that would be super helpful.
00:23:45.050 - 00:24:34.978, Speaker B: Yeah. So I can kind of talk through what the kind of control flow of this client is. So it's a Beacon Chain client which does the sort of like growing of the blockchain that uses RPC to an ETH One client to figure out what transactions to add to a block and what transactions are valid. So you can think of it basically as a Beacon Chain client with this additional EVM attachment on it. It'll probably feel and operate very much like a Beacon Chain client today. But there will just kind of be this other thing it talks to to figure out, because the transaction pool management is a whole thing, right? Like, there's a lot of hard software problems that go into that. The EVM is a hard thing.
00:24:34.978 - 00:25:00.090, Speaker B: State size management is a hard thing. These are things that just didn't make sense to rewrite. So all of those pieces will be kind of you can think of it literally as a remote function call. All those pieces will be accessible to the beacon. So the Beacon Chain client will be kind of building and growing the blockchain and calling out to that when it needs to figure out, okay, what transactions should exist in this block, are these transactions valid according to the EVM, et cetera, et cetera?
00:25:02.590 - 00:25:21.426, Speaker A: Thanks for clarifying that. And I think there's another question that popped up from, I think the slide that had the struct they were looking at. And the question is why are transactions opaque but the payload isn't? And this may not just be fully in context, but I'm hoping that the.
00:25:21.448 - 00:25:25.890, Speaker B: Question is opaque but the payload isn't.
00:25:27.270 - 00:25:28.020, Speaker A: Yes.
00:25:31.690 - 00:25:46.042, Speaker B: I actually don't know the exact detail of why that has the name opaque transaction. Okay. Proto says that he will answer in his presentation. Yeah, that's better.
00:25:46.096 - 00:25:47.180, Speaker A: We'll have that question.
00:25:48.350 - 00:25:50.940, Speaker B: Proto will know better than I will know.
00:25:51.870 - 00:26:02.480, Speaker A: That's awesome. And I think kind of the one last question then that will end up to kind of put you on the spot. What's a realistic timeline for us to.
00:26:04.630 - 00:26:38.342, Speaker B: Well, first of all, I'm not the person who is the best person to ask. And also, I think that I am also hyper aware of the sort of the dangers of mispredicting the future with regards to timelines. But let's say within the next year from today, I don't know. I'm not going to say like when within that year, but within the next year soon.
00:26:38.476 - 00:27:00.300, Speaker A: TM right. Well, thanks so much again. I think if you have more questions, we'll leave them to you directly, or if I see you are hanging out on the TV page as well. So hopefully you can answer those questions directly. So thanks again. And with that, we are ready to move on to our next talk and also get that opaque transaction questions answer.
