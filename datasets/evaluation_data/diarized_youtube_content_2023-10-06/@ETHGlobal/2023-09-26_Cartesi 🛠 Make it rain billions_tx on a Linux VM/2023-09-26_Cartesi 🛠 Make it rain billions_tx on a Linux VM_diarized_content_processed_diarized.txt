00:00:06.970 - 00:00:14.442, Speaker A: I'm going to be talking about akartesi is promoting as a layer two and how it's going to help people onboard.
00:00:14.506 - 00:00:19.690, Speaker B: More developers and how everything comes together in this Linux environment.
00:00:19.850 - 00:00:22.090, Speaker A: I guess it's a little bit awkward.
00:00:22.170 - 00:00:29.158, Speaker B: And strange at first, especially because we are used to EVM compatibility, solidity and all that good stuff.
00:00:29.324 - 00:00:31.094, Speaker A: But I'm going to show you guys.
00:00:31.132 - 00:00:33.160, Speaker B: There is something else out there as well.
00:00:33.610 - 00:00:35.718, Speaker A: So today I'm going to introduce a.
00:00:35.724 - 00:00:38.134, Speaker B: Little bit on how Cortez rollups work.
00:00:38.332 - 00:00:42.506, Speaker A: And then I'm going to show you guys how the interfaces and how to.
00:00:42.528 - 00:00:49.690, Speaker B: Program it for it. And by the end I'm going to show a few examples of things that have been built using Cartesi.
00:00:51.010 - 00:00:54.494, Speaker A: So just as an introduction, this is.
00:00:54.532 - 00:01:02.030, Speaker B: A small example of a smart contract already using Python inside the Cartesia ecosystem.
00:01:02.450 - 00:01:05.766, Speaker A: And it is here to just incentivize.
00:01:05.818 - 00:01:09.346, Speaker B: You to pay attention to certain aspects of it.
00:01:09.448 - 00:01:14.670, Speaker A: By the end of the presentation I'm going to go back to it and I'm going to explain some of the.
00:01:14.840 - 00:01:22.726, Speaker B: Lines that are more important over here. So the overview pretty sure you guys.
00:01:22.748 - 00:01:27.126, Speaker A: Are already familiar with the Trilemma and what it means for Ethereum and what.
00:01:27.148 - 00:01:29.602, Speaker B: It means to the security of blockchain systems.
00:01:29.746 - 00:01:31.354, Speaker A: But we all know that we need.
00:01:31.392 - 00:01:48.142, Speaker B: Scalability and we are trying to figure out how to make it work. And here I'm going to show you guys that it is possible to have complex computation and great tooling while developing smart contracts only if you introduce back.
00:01:48.196 - 00:01:50.878, Speaker A: Again a very important concept that we.
00:01:50.884 - 00:01:53.040, Speaker B: Are forgetting an operational system.
00:01:54.610 - 00:02:03.070, Speaker A: So how does Cortez make you work? Cortesi is an application specific roll up. So it's an optimistic roll up dedicated.
00:02:03.150 - 00:02:04.510, Speaker B: To a single DAP.
00:02:04.670 - 00:02:15.030, Speaker A: That means that you have the flexibility to change parameters and change how validation might happen depending on what makes sense for your application.
00:02:15.180 - 00:02:20.570, Speaker B: But at the same time it means that you can have it as a layer and solution.
00:02:21.070 - 00:02:30.282, Speaker A: So right now the current system is EVM compatible, meaning you can deploy to any EVM execution environment. So it can be a layer two.
00:02:30.336 - 00:02:36.554, Speaker B: A layer three, whatever you think it makes sense. And the second part of the solution.
00:02:36.602 - 00:02:39.306, Speaker A: Is the fact that instead of focusing.
00:02:39.418 - 00:02:48.702, Speaker B: On the EVM itself as an execution environment or WASM or something like that, cartesi focused on bringing RISC V to the fold.
00:02:48.846 - 00:02:53.262, Speaker A: And what we did is create this machine emulator that is deterministic.
00:02:53.406 - 00:03:00.374, Speaker B: And because the instruction set of RISC five is very complete, it means that you can use Neo OS on top of it.
00:03:00.492 - 00:03:02.806, Speaker A: And therefore we chose to go with.
00:03:02.828 - 00:03:04.040, Speaker B: The Linux, of course.
00:03:05.290 - 00:03:06.694, Speaker A: So how does it feel?
00:03:06.732 - 00:03:11.914, Speaker B: Right, it feels like for all these years we've been playing with Pliers to.
00:03:11.952 - 00:03:15.990, Speaker A: Make things work in the blockchain ecosystem.
00:03:16.150 - 00:03:21.360, Speaker B: And when you try to use Cortesi, it feels like you have the whole to set back.
00:03:22.050 - 00:03:22.800, Speaker A: So.
00:03:24.850 - 00:03:31.422, Speaker B: It really improves the experience of developing applications. And this is how it looks like.
00:03:31.476 - 00:03:34.170, Speaker A: To actually be building your application.
00:03:34.340 - 00:03:37.390, Speaker B: It's just a system of docker containers.
00:03:37.470 - 00:03:42.274, Speaker A: That builds up to be the Cortesi node that you're going to develop for your application.
00:03:42.472 - 00:03:50.822, Speaker B: Meaning that you can just use any language, use any tooling, any of these things that we used to have.
00:03:50.876 - 00:03:56.294, Speaker A: So if you think it's interesting to have a postgres database inside, you can have it.
00:03:56.412 - 00:04:05.690, Speaker B: If you think it's interesting to have a redis or to import frameworks such as OpenCV or large language models, we've seen examples doing that.
00:04:05.840 - 00:04:08.410, Speaker A: And as long as you can properly.
00:04:08.830 - 00:04:12.480, Speaker B: Build your docker machine, you're fine.
00:04:13.810 - 00:04:17.120, Speaker A: So that's what it means, right?
00:04:17.650 - 00:04:24.580, Speaker B: It becomes very sexy. You can even import that one star repo that for some reason you're just so eager to.
00:04:26.390 - 00:04:47.042, Speaker A: So to be fair and display a little bit how it feels, I'm going to be very generous to the Ethereum network and let's go with 30 million milligraphs of block size, which is already not ideal. And if we take just the addition.
00:04:47.106 - 00:05:07.582, Speaker B: Opcode, which is the least that does something. You can have about 10 million instructions per block, right? And this is what it takes to boot Linux. It takes 3.6 million CPU cycles to boot it.
00:05:07.716 - 00:05:10.154, Speaker A: So it would never really be feasible.
00:05:10.282 - 00:05:17.778, Speaker B: Even interesting, to have Linux on top of Ethereum network. It's comparing apples to oranges, right? It does not make sense.
00:05:17.944 - 00:05:19.140, Speaker A: They have different.
00:05:21.190 - 00:05:27.186, Speaker B: Goals. And within 13 seconds, just to maintain.
00:05:27.218 - 00:05:35.282, Speaker A: Some comparison, which is the block time on the Ethereum network, on a laptop.
00:05:35.346 - 00:05:42.060, Speaker B: Such as this one, you can have 36 billion instruction cycles run.
00:05:42.750 - 00:05:44.746, Speaker A: So that's a lot.
00:05:44.848 - 00:05:45.850, Speaker B: That's a lot.
00:05:46.000 - 00:05:47.100, Speaker A: Correction, guys.
00:05:48.190 - 00:05:55.278, Speaker B: 3,000,000,003.6 billion. And that's how it looks like.
00:05:55.364 - 00:06:02.302, Speaker A: That little black dot over there, it's the scale of what Ethereum does in.
00:06:02.356 - 00:06:05.262, Speaker B: 13 seconds compared to a single laptop.
00:06:05.326 - 00:06:12.946, Speaker A: Running a cartesi node for your application. So the roll apps themselves, how the.
00:06:12.968 - 00:06:19.814, Speaker B: Architecture looks for people who are familiar with rollaps, there's nothing new here. It's more for people who are trying.
00:06:19.852 - 00:06:21.334, Speaker A: To understand what it means to build.
00:06:21.372 - 00:06:25.270, Speaker B: A DAP using a app chain or application specific rollout.
00:06:25.770 - 00:06:30.838, Speaker A: So here you have a browser representing some kind of UI and interactions of the user.
00:06:30.934 - 00:06:36.106, Speaker B: You're still going to be sending transactions to your base layer represented by Ethereum over here.
00:06:36.288 - 00:06:40.302, Speaker A: And this cartesialized framework, it really is.
00:06:40.356 - 00:06:43.134, Speaker B: The node with some other services that.
00:06:43.172 - 00:06:52.462, Speaker A: Make it feasible and convenient to use, such as reading information for an Ethereum chain. But what you're going to be building.
00:06:52.516 - 00:06:56.370, Speaker B: Is this cartesi machine block inside, and.
00:06:56.440 - 00:07:09.118, Speaker A: We package it already ready to use with a HTP API that will be convenient to make inputs and outputs to the base layer.
00:07:09.294 - 00:07:14.738, Speaker B: And the back end little box is what you're going to be coding.
00:07:14.914 - 00:07:17.202, Speaker A: So you can code it in Python.
00:07:17.266 - 00:07:21.238, Speaker B: In C sharp C, you can code in Brainfuck.
00:07:21.334 - 00:07:23.834, Speaker A: You can use whatever, really, as long.
00:07:23.872 - 00:07:25.434, Speaker B: As you can do get and post.
00:07:25.472 - 00:07:26.790, Speaker A: Requests to this API.
00:07:26.870 - 00:07:29.738, Speaker B: It's going to handle the communication side of things.
00:07:29.904 - 00:07:37.838, Speaker A: So it really is a sandbox environment. And as you build it, it can put anything inside. But as long as you remind yourself.
00:07:38.004 - 00:07:42.430, Speaker B: That it needs to be self contained, it can run on cartesi.
00:07:44.130 - 00:07:46.102, Speaker A: So, back to the code I showed.
00:07:46.106 - 00:07:47.570, Speaker B: You guys in the beginning.
00:07:48.630 - 00:07:53.490, Speaker A: So this is a very simple smart contract. It's not smart at all, actually.
00:07:53.560 - 00:07:55.606, Speaker B: It's an echo Python example.
00:07:55.788 - 00:08:01.346, Speaker A: What it does is whatever it receives as information, just plain text messages.
00:08:01.458 - 00:08:04.642, Speaker B: It replies back using one of the output methods.
00:08:04.786 - 00:08:07.442, Speaker A: So if it is a read request.
00:08:07.506 - 00:08:10.438, Speaker B: Read only request, just like East Call.
00:08:10.604 - 00:08:19.162, Speaker A: Gzrpc call, you can recreate this report. Such they're kind of like logs and.
00:08:19.216 - 00:08:34.900, Speaker B: If you have actual transactions, they're changing transactions. You can create these notices. And notices are kind of like ethereum events. They have a merkel proof attached to it. So you can go back to the base layer and actually do something about this information.
00:08:35.830 - 00:08:44.114, Speaker A: Finally, not represented here there is the concept of Vouchers. And Vouchers are transactions that will be.
00:08:44.152 - 00:08:46.038, Speaker B: Able to be executed in the future.
00:08:46.204 - 00:08:56.086, Speaker A: So you go on throughout the settlement period, execution period of your roll up, creating these Vouchers. After you settle, they become executable because.
00:08:56.108 - 00:09:00.140, Speaker B: You have merkel proofs attached to it.
00:09:00.750 - 00:09:07.530, Speaker A: So going back here, you can see on lines 18 to 20 that I'm.
00:09:07.870 - 00:09:10.742, Speaker B: Declaring some high level handlers.
00:09:10.806 - 00:09:34.670, Speaker A: These are the basic handlers every cortez application should have. You can create many more just as routes in an API. And these two high levels are the ones that I was talking about before. One is for read only requests, the other one is for transactional requests, the read only. It's really interesting because the node manages.
00:09:34.750 - 00:09:36.434, Speaker B: Snapshots of the machine.
00:09:36.562 - 00:09:39.430, Speaker A: So if you try to change anything.
00:09:39.500 - 00:09:41.842, Speaker B: On the application, it's not going to be saved.
00:09:41.906 - 00:09:46.258, Speaker A: The machine continues pristine from the last transactional request.
00:09:46.434 - 00:09:50.182, Speaker B: The same is true if you reject the input.
00:09:50.326 - 00:09:57.846, Speaker A: So because of the way EVM works, and it's interesting in blockchain systems that you will be able to handle, let's.
00:09:57.878 - 00:10:00.118, Speaker B: Say, weird corner case scenarios.
00:10:00.214 - 00:10:04.574, Speaker A: So you always have the ability to throw in solidity right and reject the.
00:10:04.612 - 00:10:14.162, Speaker B: Input and still maintain the pristine state of your smart contract. Here is the same. After handling a transaction, you can send.
00:10:14.216 - 00:10:23.726, Speaker A: A reject response for the input and the machine is going to be reverted back as if it never processed transaction.
00:10:23.758 - 00:10:24.820, Speaker B: In the first place.
00:10:26.890 - 00:10:29.490, Speaker A: So the idea here is to enable.
00:10:29.570 - 00:10:34.454, Speaker B: The DApps that we've been developed to be further decentralized, not necessarily needing to.
00:10:34.492 - 00:10:38.282, Speaker A: Rely on off chain computation or data.
00:10:38.336 - 00:10:39.980, Speaker B: Sources and things like that.
00:10:40.750 - 00:10:50.874, Speaker A: Also to have a faster development cycle and more concise and comprehensive by expressing more complex logics, by having the ability.
00:10:50.922 - 00:10:56.480, Speaker B: To import libraries and frameworks that many people have been building for so long.
00:10:56.930 - 00:11:03.610, Speaker A: You have the ability to have extra processing power. So you can think again that you.
00:11:03.620 - 00:11:05.746, Speaker B: Can use loops even and things like.
00:11:05.768 - 00:11:08.382, Speaker A: That and you can leverage the traditional.
00:11:08.446 - 00:11:14.354, Speaker B: Stacks because sometimes they're just nicer to use. And finally, as you're developing a new.
00:11:14.392 - 00:11:16.702, Speaker A: Project, you got to know that eventually.
00:11:16.846 - 00:11:20.706, Speaker B: Your project might need new developers. And there is a very small pool.
00:11:20.738 - 00:11:22.774, Speaker A: Of developers on web three right now.
00:11:22.892 - 00:11:33.718, Speaker B: But it's easier to onboard Web two developers if you have a framework where they can use the language they already know how to code with about the POCs.
00:11:33.814 - 00:11:50.862, Speaker A: So at East Lisbon, east Global Lisbon. We had this hackathon winner change. EPT this person was concerned about the open source large language models and what the influence large companies can have on them.
00:11:50.996 - 00:11:52.798, Speaker B: And she just uses a simple example.
00:11:52.884 - 00:11:58.530, Speaker A: But what if Coca Cola managed to mess up with the responses of the model?
00:11:58.680 - 00:12:00.466, Speaker B: And suddenly you have like ten year.
00:12:00.488 - 00:12:02.766, Speaker A: Olds questioning like, what is a healthy drink?
00:12:02.798 - 00:12:07.270, Speaker B: And Coca Cola is like the first response. How do you prove it?
00:12:07.420 - 00:12:14.002, Speaker A: It's basically random in essence, right? Are you going to do some statistical analysis?
00:12:14.066 - 00:12:17.206, Speaker B: How do you prove it? Replied to your children?
00:12:17.388 - 00:12:20.538, Speaker A: That kind of response. So she was like, okay, but if.
00:12:20.544 - 00:12:30.778, Speaker B: You run the inference in such an environment where you have validation process, you can prove that at that exact moment the response was such.
00:12:30.944 - 00:12:33.446, Speaker A: So what she did was she imported.
00:12:33.478 - 00:12:36.154, Speaker B: The Opacco model inside a Cortez machine.
00:12:36.202 - 00:12:43.886, Speaker A: And ran an example showcasing the power of it. And the second one is kind of funny.
00:12:43.998 - 00:12:46.098, Speaker B: Basically there is these systems where you.
00:12:46.104 - 00:12:47.378, Speaker A: Can clock in and clock out out.
00:12:47.384 - 00:12:52.206, Speaker B: Of factories or government institutions using fingerprint.
00:12:52.398 - 00:12:55.874, Speaker A: And in Brazil, people are pretty good.
00:12:55.912 - 00:13:02.306, Speaker B: At hacking this thing between silicon fingers and just bribing the person next to the machine.
00:13:02.498 - 00:13:21.446, Speaker A: It's not really reliable at all. So this guy who was just trying to understand how Cartesi works, thought it was going to be an interesting experiment to create such an application. He used OpenCV inside a machine to do the recognition of the fingerprint itself. And at the same time, he used.
00:13:21.568 - 00:13:24.030, Speaker B: A machine learning model that he built.
00:13:24.180 - 00:13:33.310, Speaker A: To check against forgery and spoofing. So with these two models running alongside.
00:13:33.470 - 00:13:37.586, Speaker B: People can scan the fingerprints and I.
00:13:37.608 - 00:13:41.010, Speaker A: Guess optimally in a more private setting.
00:13:41.750 - 00:13:44.370, Speaker B: Send this information and be auditable.
00:13:47.590 - 00:14:00.062, Speaker A: If you guys want to know a little bit more about other examples, other projects that have been built using Cartesi, even games, we have a bunch of games being built with Cartesi roll ups.
00:14:00.146 - 00:14:05.020, Speaker B: You can check rolluplab IO. People are sending their projects there.
00:14:05.470 - 00:14:13.934, Speaker A: And also for this hackathon we have such a distribution of prizes, we are tracked here. We're going to be throughout the whole.
00:14:13.972 - 00:14:17.390, Speaker B: Weekend helping whoever's trying to build using Cortez.
00:14:18.450 - 00:14:20.238, Speaker A: Finally, pretty soon we are going to.
00:14:20.244 - 00:14:24.818, Speaker B: Be launching a main net, a honeypot dev. The idea here is to showcase the.
00:14:24.824 - 00:14:33.966, Speaker A: Security of the roll app. So the foundation is going to be depositing some amount of money, periodically increasing.
00:14:33.998 - 00:14:36.998, Speaker B: The amount of value locked just to.
00:14:37.084 - 00:14:40.182, Speaker A: Ensure, just to give insurance to people.
00:14:40.236 - 00:14:45.842, Speaker B: That there is something out there with a lot of money locked and nobody.
00:14:45.906 - 00:14:54.794, Speaker A: Was able to hack it. So they're actually inviting hackers and security experts, my hats, auto hats, to just.
00:14:54.832 - 00:14:56.300, Speaker B: Try and steal this money.
00:14:58.910 - 00:15:18.026, Speaker A: I'd say this is the end of this presentation. However, I have one more thing for you guys. So it happened a while back, some guy was just trolling on Twitter asking what if EVM, if EVM and Ethereum.
00:15:18.058 - 00:15:24.710, Speaker B: Is the global computer, why haven't we seen Doom running on it? Right?
00:15:24.900 - 00:15:29.654, Speaker A: And Eduardo, by the way, is he here?
00:15:29.852 - 00:15:36.546, Speaker B: I thought he was here. He came here for a second. Guys, you're going to see him around. He just said like, fuck.
00:15:36.578 - 00:15:38.946, Speaker A: It took a weekend and he ported.
00:15:38.978 - 00:15:40.694, Speaker B: Doom to the Cortez machine.
00:15:40.822 - 00:15:44.666, Speaker A: So this is actually running right now. You can stop by our booth and.
00:15:44.688 - 00:15:48.246, Speaker B: Play a little bit with it. And the idea here is just showcase.
00:15:48.278 - 00:16:06.130, Speaker A: That even a freaking source code that is like 30 plus years old can be built and compiled and run without major efforts on top of such an execution environment. Now, yes, I'm open for questioning.
00:16:07.190 - 00:16:09.186, Speaker B: Any doubts? Okay.
00:16:09.368 - 00:16:14.210, Speaker C: There was courses helped everyone in view lost to investment with Core.
00:16:16.710 - 00:16:18.230, Speaker B: Question messaging.
00:16:18.970 - 00:16:27.506, Speaker C: Sorry, so is there a to where you like read almost my wand or any other chain in Corsati?
00:16:27.538 - 00:16:30.186, Speaker B: Berman so he's asking if there is.
00:16:30.208 - 00:16:33.002, Speaker A: Any way to read the state of.
00:16:33.056 - 00:16:38.460, Speaker B: Networks within the Cortez machine, but more specifically, you're looking for cross chain stuff, right?
00:16:39.150 - 00:16:44.378, Speaker A: Yeah. Okay, so yes and no. So the roll up itself is attached.
00:16:44.394 - 00:16:45.806, Speaker B: To some base layer so you can.
00:16:45.828 - 00:17:03.522, Speaker A: Read the state from there. Of course, mostly the current state of the SDK is that you just get the messages that are coming towards the roll ups. But the idea is to have something like pre image. We are calling actually the hashing device, where you can have a device inside.
00:17:03.576 - 00:17:05.666, Speaker B: A Linux machine where you can send.
00:17:05.688 - 00:17:07.686, Speaker A: It to it any hash related to.
00:17:07.708 - 00:17:13.606, Speaker B: The base layer and receive as a response the actual data. Because you have a proof for it.
00:17:13.708 - 00:17:19.718, Speaker A: It's possible to do a verification game, a dispute game later on.
00:17:19.804 - 00:17:31.680, Speaker B: So you can read from the base layer you attach to, but from others there is no current solution under development. Any others?
00:17:33.690 - 00:17:36.550, Speaker A: Guess that's it. I hope to see you guys around.
00:17:36.700 - 00:17:40.822, Speaker B: We are here throughout the whole weekend. I'll be happy to help with any.
00:17:40.876 - 00:17:44.840, Speaker A: Questions, any issues you have while trying to compile anything.
00:17:45.290 - 00:17:45.860, Speaker B: Thank you guys.
