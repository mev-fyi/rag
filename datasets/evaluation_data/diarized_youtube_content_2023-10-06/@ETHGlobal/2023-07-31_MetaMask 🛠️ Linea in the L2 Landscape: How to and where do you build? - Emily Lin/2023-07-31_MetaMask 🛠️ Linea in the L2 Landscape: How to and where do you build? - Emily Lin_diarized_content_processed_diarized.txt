00:00:09.370 - 00:00:28.870, Speaker A: Are we good to okay, cool. Okay, cool. Hi guys. I'm Emily. I'm the developer advocate for linear. If you guys haven't heard, we launched Mainnet on Tuesday. Big round of applause.
00:00:28.870 - 00:00:56.206, Speaker A: This workshop is not so much about building, but more so talking about where to build and why you should choose linear. Right. I'm not sure where we sit in terms of the technical background from this group. So I'm starting from like ground zero. If you glaze over in the beginning, that's totally okay, but we'll get into something more complex later. So anyways, what is linear? So linear will be a type two ZK roll up. Right.
00:00:56.206 - 00:01:36.918, Speaker A: Now, amongst the ZK roll up space, no one is actually type two yet. I'm going to explain this later, but keep in mind that this is what we are. So, starting off, why do we care about L two S? Right? So if you've heard of the blockchain trilemma, essentially it's a pick two situation between scalability security and decentralization. Ethereum basically has chosen to focus on security and decentralization. And with the boom of ethereum, you guys have probably experienced high gas costs and transaction times being slow because all of that is like a competing kind of computational cost. So what do we do? It's something called like a layer two solution. We've moved up to something called the roll up centric roadmap.
00:01:36.918 - 00:02:14.834, Speaker A: What that means is, starting from a layer one, it's basically the underlying foundation and base blockchain. That's where consensus happens, that where data is stored. The history is there examples, bitcoin ethereum avalanche, et cetera. Once we move into layer two, this is actually what we care about. So layer twos work by pulling the execution computational, I guess, capacity off of ethereum. The important part to clarify here specifically is that roll ups have been the, I guess, decided solution because it posts that data back to Ethereum. So if you guys are familiar with polygon proof of stake, so you might have heard you have polygon proof of stake.
00:02:14.834 - 00:02:44.590, Speaker A: That's what you know, that's like an OpenSea, et cetera, versus polygon zkebm, which came out recently. Polygon proof of stake is a side chain. It is not a layer two solution. All of that data is stored within polygon. So that's why kind of you've seen this pivot towards roll ups because it is a much more secure system to leverage the consensus mechanisms and community around ethereum. That like a separate alt layer one or a side chain would have anyways. So that's what a roll up is.
00:02:44.590 - 00:03:14.522, Speaker A: How does it actually work? So the anatomy of roll up has well, the anatomy of an optimistic roll up has kind of this structure of there's an on chain contract. So that's going to be on your L one that stores your roll up blocks. That's where the data is stored. It monitors updates. The next piece is the off chain VM. So this is where the computational stuff comes so that's going to be what you hear of the Zkevm, which we talk about later. And the last piece, I just kind of grouped them up together.
00:03:14.522 - 00:03:48.306, Speaker A: But operators validators, aggregators, sequencers. You can kind of think of this basically as the entity that takes in all that transactions, orders it, figure out what is going on and then post that data back. So moving on, I'm going to name two key vocabulary words you need to know when thinking about the different types of roll ups, right? So specifically we have the deposit process, so that's moving ETH from L one to L two. And then the last piece is ETH from L two to L one. That's withdrawal. So this actually withdrawal is a key difference, one of the key differences between optimistic and ZK roll ups. So let's actually talk about it.
00:03:48.306 - 00:04:40.946, Speaker A: So optimistic roll ups, you might have heard Arbitrum optimism, huge TVL, they're the first ones to come through, right? So essentially what they do is they assume transactions are to be valid. So to take a step back, like I keep mentioning data availability, what the important thing here when we talk about the different types of roll ups is how do we verify that the data we're proving is true, right? So optimistic roll ups came around and we say, let's just assume it's true. Basically we're going to have a seven day challenge period to wait for the community, alongside some slashing mechanisms and incentives, to essentially say, hey, this looks fishy, let me run a fraud proof. If it turns out to be a faulty transaction, that will be rolled back, right? There are workarounds like trusted bridges, but we all know bridges are always hacked. So it's not necessarily the best solution. But anyways, so that was kind of the first iteration of roll ups. We knew we needed to do this, but people got smarter.
00:04:40.946 - 00:05:33.362, Speaker A: I don't want to say people got smarter. Research took a little bit longer and we got to the point where we have zero knowledge roll ups. So how are they different from optimistic roll ups? So essentially they have something called a validity proof. So rather than optimistically, assuming they just say, hey, when I post this data back, I'm just going to also post a mathematical proof to a separate Verifier contract that will verify that it's true or false. Something I'm just going to mention, and I always say this, I get a lot of questions about, oh, how is privacy on linear? That's a common misconception because people think, oh, ZK, private identity, et cetera, that is a common association, right? Because the property of ZK proofs is that you can prove something without having to reveal the information. What it is in the context of a scaling solution is more. So, hey, when we're choosing the different types of mathematical proofs we can use, we're going to choose a zero knowledge proof because that's going to reduce the information as much as possible when we post that data back to be verified.
00:05:33.362 - 00:06:26.578, Speaker A: So that was kind of the choice. Examples include linear ZK, sync, polygon zkvm, scroll and StarkNet. So I think there's a lot of different layer twos kind of optimistic versus ZK. But once we get into ZK, what's the difference between all of them? Why do we care about the different kind of pieces? So the first piece I keep mentioning about Zke EVM, so essentially this is a Zkvm is the off chain virtual machine that essentially allows you to execute smart contract transactions in a way that ZK proofs can understand. I can't explain how it works, but basically you can think of it as I'm writing a computer program, how do I turn that into like polynomials and math that a mathematical proof can actually run and validate. So that's kind of what, a Zke EVM we've been building, right? And that's the differentiator one of the differentiators between all the ZK roll ups. So this is kind of where I get into the different types.
00:06:26.578 - 00:06:58.046, Speaker A: So if you remember, that first slide I said will be a type two Zkvm at the highest level, type four, that's going to be StarkNet, that's going to be ZkSync. You can write in Solidity, but it is not 100% bytecode equivalent. What that means is tools. You're familiar with Truffle, Hard Hat Foundry, you might have noticed you need to download a plugin. Not everything is covered. So you got to be really, I guess what do you call it, cognizant about the functions you write, whether or not it's actually supported by that network, you kind of move further down. So type twos essentially are fully EVM equivalent.
00:06:58.046 - 00:07:20.086, Speaker A: So that's I can write in solidity. I can write in viper. It's 100% bytecode equivalent. So the tools that understand the EVM don't need to change at all because there's no difference there. So that's our goal. That is also the goal of the other type two Zkebms. No one has currently reached that yet, but it's on the way people constantly doing research and we're fully confident.
00:07:20.086 - 00:08:04.150, Speaker A: And the last piece is fully Ethereum equivalent. Basically this means every part of the Ethereum ecosystem, I guess, kind of structure is used for developers specifically. There's not a lot of difference in your developer experience. I can talk about this later if you guys have questions about why it would matter. But it's not super important for like a hacker, for example. So last piece, when we talk about the different types of Zkevms, right, the kind of idea is the performance and compatibility trade off is there like building a Zkevm is very difficult, I think with StarkNet, for example, they started off with writing in Cairo, right, because their assertion was basically EVM itself is very hard to prove. So we're going to change parts of it to make it faster and more efficient and things like that.
00:08:04.150 - 00:08:44.002, Speaker A: I think with the proliferation of type twos. Basically that thesis has been proven incorrect and people are constantly iterating. So you can also see something like what StarkNet now has a new transpiler on top of it that is moving from solidity to Cairo VM to postback to ethereum. And I think that is just an indicator of why it is important to maintain that kind of network effect of keeping solidity devs in house. Like the ethereum ecosystem has already been growing and stuff like that. So anyways, kind of like how the prover works at a very high level. You can kind of think of it in linear terms in like three different stages or I guess how many stages are here? Four.
00:08:44.002 - 00:09:13.050, Speaker A: So the first part is Arithmetization. So Arithmetization is basically that part where we turn the computer program into math. So we call this traces. Linear is special because we are the only zke EVM to actually directly arithmetize the EVM. What does that mean? It means like there's actually slight differences where they have an intermediary VM with the other L two s. But that's super cool tech. I don't want to explain other people's roll ups, obviously, because I don't work there.
00:09:13.050 - 00:09:51.846, Speaker A: But the next piece that we do, and this is really what sets apart is something called the inner proof system. So it's called vortex and arcane. So essentially here, I think diving back into why ZK roll ups are really cool, specifically mathematical proofs is you can apply mathematical proofs on top of mathematical proofs and do that recursively. So you have this kind of recursive infinite scale and that's kind of where vortex and arcane sits, right? We use something called lattice based hashing, which is a really interesting thing that is like Plausibly post quantum. What that means is quantum attacks don't exist. But if they were to, we could, I guess, set up our system such that it would be, I guess, resistant. But no one wants to hack a roll up.
00:09:51.846 - 00:10:11.194, Speaker A: They're going to hack the nuclear codes. Right? That's how it works. But anyways, it's optimized for recursion. And the last thing is it's really efficient for hardware acceleration, which is kind of something you think about when you think about performance improvements. The last piece is an outer proof. So that inner proof actually does not get it small enough to be posted back on ethereum. That last piece is what you might commonly hear as like Snarks.
00:10:11.194 - 00:10:31.682, Speaker A: You might hear words like Plonk gross 16. That's the last piece. It's really cool because you get to basically compress or verify one transaction and 1 billion transactions in the same amount of time. For our ZK circuit libraries, I want to do call out we have an award winning Gnark circuit library. It's open source. It's actually used by different projects. It is the fastest Zkedm on mobile phones.
00:10:31.682 - 00:11:06.862, Speaker A: So when we start proving things on high schoolers phones, like, yeah, we're there. But anyway, so I guess now hopefully you understand this piece. Let's talk about actually what I think. And I think Linear success so far is really proved by it's not the tech, it's the ecosystem, right? So private testnet opened in January. I pulled these numbers, I think earlier this morning, 50 million transactions, like wallet addresses, deployed contracts. You can compare this against Scroll I think was like 46 million polygon Zkbm was maybe like the two to three. I do admit there is an element of having a token versus not having a token.
00:11:06.862 - 00:12:25.734, Speaker A: Definitely drives transactions. But I think there's a lot more to this than just farmers, right? There's a belief in the ecosystem and I speak specifically, we opened three days ago. So we have 13.3 million TVL for that what that means, right? If you look in the order of, I guess you could say all the roll ups ordered by TBL, within three days we've jumped from zero row 20 to I think now we are row 16 and we are 4 million away from row 15 and so there's a lot of growth, right? And why are people really interested in this? Right? So first thing finality again, that idea of just ZK versus optimistic, you have faster finality, you have a more secure trust assumption, et cetera. Something you might care about is TDL. So maybe if you're building you'll start with Arbitrum just because there is much more liquidity to act with for your users, right? The last piece I think that's really compelling as well as like roadmap when you think about what's next, we're not just what we are now, we are what we are in the future. But I'm going to talk specifically about what makes Linear really different and why we have onboarded so many partners thus far and maybe for developers here who want to actually take your apps past the hackathon, why this is important, right? So specifically it's like if you're building a DAP, you want to make money, right? And how do you make money? You have users.
00:12:25.734 - 00:12:58.926, Speaker A: So we are at the same company as MetaMask. We are a default integration. So immediately with Linear you have discoverability, you have seamless UX. You can think of MetaMask features in the future being set in the home of Linear. Right? That's a really powerful value proposition when you dive into Consensus is a little bit of a boat, right? So if you guys aren't familiar with Bezu so Bezu is one of the largest open source Ethereum clients. So that means in house we have a very experienced team to do interesting things with those kind of performance operations on the client side for an L two. So again, kind of building on that ecosystem.
00:12:58.926 - 00:13:45.554, Speaker A: Again, if you guys are familiar with Infuria, immediately we have that kind of scalability that comes with node providers. And I think the last piece maybe if you guys are familiar with Consensus, MetaMask, et cetera, we do actually have a lot of presence in the web two space. So when you think about onboarding people outside of our little click of fanatics, who are people going to trust? JPMorgan is going to trust consensus, right? And I think that's become a very strong value prop that a lot of like I said, the first 140 applications have been really excited about and why I believe and also I guess why all those people are there. So the last piece I guess is not super important. How many of you guys have deployed a smart contract before? Okay, so I'm going to say like majority of the room. So I don't want to actually go through a full demo. But basically in order to deploy a smart contract, you need a few things.
00:13:45.554 - 00:14:16.958, Speaker A: So you need ETH to make transactions for you hackers there who are choosing to deploy. You can get it through a faucet or you can bridge it. I'm a bit of a linear ETH whale, so also feel free to ask me. I can just send it to you, it's only for hackers. So anyone watching this, don't send me your wallet address over Twitter because I'm not going to send you any anyways. Last piece, right? I think the important part is just again, you can use whatever you want to use. I think if you're deploying here on polygon and scroll and whatever, please deploy to all of us because it's the same experience.
00:14:16.958 - 00:14:33.262, Speaker A: You want to mask those bounties, right? So just kind of an example of what it looks like. I can show you. Here's my config. Basically there's girly there's linea. Wow, look, let me write this out. Live coding. Woohoo.
00:14:33.262 - 00:15:09.678, Speaker A: Hopefully this works. I'm going to blame it on the internet if it doesn't. Anyways, linear do I need to run here? Oh, I have an extra s where deploys does that work? Night. Wow, so easy. Okay, that's about all I have. Yeah, this is how you can get in touch with me. Linear build.
00:15:09.678 - 00:15:31.538, Speaker A: This is kind of all of our information. This is a QR code to a website about myself that I haven't updated in quite a while. Yeah. If you have any other questions about linear and stuff like that, feel free to ask me now. I don't know how much time we have left, but am I over time? I talked pretty slowly. Okay, cool. Normally I'm like but I'm tired.
00:15:31.538 - 00:16:00.186, Speaker A: We're good, we're good on time? Okay. Yeah. So if anyone has any questions, please let me know. I can talk a little bit more about, I guess, linear right now. Another thing, right, when I think about L two S in general, you might hear a lot of the narrative is like, oh, we're so easy for developers, right? But I think it's very much a chicken and egg situation. You want the users for those developers to attract and so that developer friendly experience is just table stakes. I think that's what Linear understands.
00:16:00.186 - 00:16:31.042, Speaker A: We want our tech to be there, we want the experience to be there. But what's most important is that when you deploy, people want to use you. Right? So we already have something called the Ecosystem Investment alliance. I hate the name. It feels like Avengers, but anyways but it's essentially a set of VCs dedicated to funding Linear projects. I think separately, if you apply for our bounty, there is an opportunity to get filled into our accelerator program as well. So I think there's just a lot of interest, basically, in supporting projects past the hackathon.
00:16:31.042 - 00:16:33.330, Speaker A: I mean, I don't know how many of your students, but I don't.
