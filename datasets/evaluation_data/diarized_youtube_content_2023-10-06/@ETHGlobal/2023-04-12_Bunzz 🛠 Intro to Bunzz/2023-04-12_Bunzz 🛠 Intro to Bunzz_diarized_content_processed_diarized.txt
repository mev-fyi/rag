00:00:06.490 - 00:01:02.270, Speaker A: Building DApps have never been this easy. Hi, my name is Truss Leogre, developer and guest manager at Bonds. I'm excited to have you join us in this venture workshop. We're going to take a dive deep on how Bonds can simplify DAP development and save your development time to launch and deploy Smart contracts in five minutes. Bonds is a smart Contract ecosystem, a smart Contract hub with over 40 modus combinations across different use cases, supporting 100 EVM based chains. So far we've had 8500 deploy smart contracts. As a developer wanting to build blockchain applications, Bonds ecosystem gives you access to over 100 reviewed contracts.
00:01:02.270 - 00:02:15.850, Speaker A: Simplified development via GUI on any VM based chain allows you to manage your DAP and interact with your deployed smart contract easily via our easy to use UI. Bonds supports popular contracts. The bonds models. Smart contract models have been combined for different use cases for NFTs for d five ERC 20 tokens across ICOs, Staking and even Dows. The Bonds ecosystem supports EVM compatible chains, Ethereum itself, Polygon, Avalanche and so many more giving you a wide overview and choice to deploy contracts and DApps on your preferred blockchain. We'll be featured on different media supporting or partner with communities support developers to drive. Now let's get started and take a dive deep on different path on a dashboard to see how Bonds can help you as a developer simplify and help you build better DApps.
00:02:15.850 - 00:03:17.150, Speaker A: The first. Let's look at the explorer. The Explorer gives us access to a number of available expansive model templates. We can search the templates, we can see the name of the templates, the data was launched and overview of the templates and who created it. Let's take a look at the payment splinter. If you click on the payment splinter, it takes you to the documentation page for the payment splitter contract allow you to see how to use it, the model parameters available, the functions, events and the code as a change log. It reproduces them to see previous changes and updates made on the Smart Contract, how to use Giselle overview and how this Smart Contract can be used.
00:03:17.150 - 00:04:19.294, Speaker A: A guide by guide step to help developer quickly use a Smart Contract and interact with it in their preferred Web Three library. The Functions gives us the function available in the Smart Contracts across read and write functions. As we can see, clicking each other function gives you access to see the name, the type and description of the function. Code clicking on Code takes us to overview of the code used in the Smart contracts. Now payment Splinter clicking on the payment splinter Solidity of Soul gives us assets decode to see the code written that makes up the Smart Contract the Function so I can help you review and check the code. Very soon we're going to be launching a customized feature to allow you to customize this code, your IDE and add other features and increase the capacities as you same fit. You can share the contracts and share on Twitter.
00:04:19.294 - 00:05:22.920, Speaker A: Part of Gold deploy. Let's take a look at the documentation of bonds. The documentation of bonds gives you a much clearer overview on how this can help you to build your DApps better. Image description of the Bonds Platform so what bonds get started? The fundamentals smart contract hub how to interact smart contract deployed on bonds can be interacted using Ether, JS, web three PY, web three JS and any other preferred library that you would like to use. We can see documentation guide on how to call interact with smart contract, connect to wallet and signers. Boilerplates are very crucial to bonds. We want to give developers a head start to use bonds to quickly build DApps as the same fit.
00:05:22.920 - 00:06:22.570, Speaker A: We're going to be taking a look at how to launch a token, ERC based token with the boilerplate plates and launch on Bsebn and the BSc blockchain rather using bonds. Let's go back to the bonds landing page. We can log in, you can sign up as you seem fit. I already logged in, so I will just log out for radio. Can log in here, put in password so we are logged into the bonds dashboard. Because I'm not a first time user, there are different DApps already on my dashboard. But if you're a first time user, you're definitely only going to see the create DAP cart.
00:06:22.570 - 00:07:03.940, Speaker A: So let's create a DAP. Clicking on creating a DAP takes you to the setup page. Since we are launching a crypto token, my name is Trust and so I'd like to launch the trust token and I'll simply say trust token, I already have it there but the signal that's subjection so trust token. The next is to select the network name. There are different options from main net to testnet across different EVM based chain. Well, let's use BFC. Click Next.
00:07:03.940 - 00:07:33.782, Speaker A: Click Next. Nesting will be to select the smart contract model you would like to use. The Saints already know we want to use the ERC 20 token smart contracts. We can use this before we get that. These are bonds models developed by the bonds team. These are also by the bonds team. Now all tab shows model smart contracts developed by the bonds team alongside external developers.
00:07:33.782 - 00:08:21.902, Speaker A: Of course contracts have been reviewed by experts, but they are all in the old tab before. Smart contracts built by the vault team can be found on the balls, models and prepared templates. Let's quickly use the simple token to create a simple ERC 3D token as the use case was the name. A stress token was a symbol, I'll call it CTK Spark trust token for the token there. So let's deploy. Deployment allows us to connect our Metamas. So I have not logged in so do that quickly connect it.
00:08:21.902 - 00:09:52.616, Speaker A: So let's deploy side transaction confirm ERC 20 token to the BSE test net. What's the next thing to do. Now we have been provided with the Abi and the contract address are very critical to interacting with the smart contract on your front end using any of your preferred library. There is a Manage contract button which gives you additional capacities to walk and manage your smart contracts. You can see the write and the read function of these smart contracts and you can play with it. The functions interact with the smart contract using GUI similarly what you have in remits but of course has a much broader explanation of each of the functions descriptions and you can walk around it and write with the GUI provided here. Already we have the verification tab which allows you to copy and use full information to verify the smart contracts in the block explorer of your choice unless interacts using the boilerplate provided I discussed earlier.
00:09:52.616 - 00:10:56.620, Speaker A: The boilerplates allows you gives you a quick start to building DApps across different use cases. We have the boilerplates for ERC 20. NFTs meeting site and others that were provided accordingly. Let's click on the token ERC 20. It takes us the GitHub report for this and we have to simply clone this report to our local directory either using the git command the link or downloading the zip file on the zipping. Let's download the zip file. So we have to search open folder and kit the ERC 20 maintain by left click we open it.
00:10:56.620 - 00:11:32.362, Speaker A: Let me make this bigger. Close this step. Fantastic. This is how it's going to be when you clone the ERC three to meeting. But I've played to your own IDE via the code and you know preferred ID that you use. The first thing would be to install the NPM packages installed. It's already done.
00:11:32.362 - 00:12:18.266, Speaker A: But if you the first time for you to clone the repo you have to deduct it to download all of mystery packages needed for this. Now, the codes that they provided for us, we have to do two things to test at the boilerplate and you can now edit and customize the same fit for your own use case. The first would be to take a look at the ebi JSON file. Remember that we have been provided with the ebi of the smart contracts. We have to copy the Abi, return back to VVS code, delete the previous one and paste the one just copied because it is difficult to read. So we have to format it. Yeah, much better, easier to read.
00:12:18.266 - 00:13:02.970, Speaker A: So I have to save it. Second file we need to take a look at is EMV file. So we have to create a EMV file if it is not already done EMV which is already here. And these are the two things you need to impute the react app chain ID and the react apps contract address. So the app is a react when important is the contract address and the ID and the ID chain ID. Remember that we deployed this on the BSE testnet. And the BSE testnet chain ID is 97, hence we have 97.
00:13:02.970 - 00:13:45.848, Speaker A: And we have to copy the smart contract address and replace we already have here and save. Once you've done that, it's now time to run. Of course, you can take a look at the other codes. The fire. This handles the maintenance button, the function involved in that, and the progress message and the success message that pops up the app. The JSON gives us access to chain ID, the wallet connection functions and the others. So you can take time to go through the code and dates and input into your own use case to build more user.
00:13:45.848 - 00:14:18.012, Speaker A: With that, let's run this and check how this looks like. That will be here under on stats. Okay, just take a look. Thousand fine. So this is how it looks to connect our contract. So we have connected the contract. Brilliant.
00:14:18.012 - 00:15:03.540, Speaker A: So we ask to mint the contract. Now let's confirm. Let's take a look at what we have a stopping address and head over to the BSc Blockchain Explorer. Let's take a look at the BSc scale meant to be the testnet. It's actually the main net BSc. That would be testnet BS. Let's impute the condo address we just copied and check it out.
00:15:03.540 - 00:15:55.210, Speaker A: So finance is zero or it has been confirmed, created and a few events. Okay. Right sound. Let's head back to workload. If we take a look at the contract for action, which we got from clicking on the Manage contract to test if this work, let's maintain the GUI. So token receiver here. So let me just put in 15.
00:15:55.210 - 00:16:33.830, Speaker A: This is 500,000, the token receiver, sorry, our address here. So put it here. And mint sell water, pay gas fees. Yes, pay that. And it's going on correct minted. So we click on this borrower success. So trust test tokuli STTT and we have 0.5.
00:16:33.830 - 00:17:29.744, Speaker A: Let's validate that by clicking here. Pick one address it's been to seven minutes ago for TDT, which was our token that we deployed. Erase one address. So this is how you can play around this, and you can do the same using the code deploys from UID USD code. You can also do the same using the Guid as well across posting contracting balance of allowance, you can revoke and transfer ownership and post maintenance as you seem fit. You can look at the documentation for more use case. That gives you a more clear approach on how you can simplify how you can do better, how you can interact in different modules.
00:17:29.744 - 00:18:31.928, Speaker A: And of course, take a look at the mini models available across different use cases they can launch on the market tree. You have the reflections on Edgecrow in case you want to build a freelancing service on the blockchain with Edgecrow payment feature, just like you have on freelancer.com. On fiver, on upwork the vestal wallet contract native meeting the realtors for NFTs Marketplace and so on and so forth. So you can take a look and explore and deploy the Smart Contract, copy the Abi and the address and put into your front end, interact with it as you're seeing feeding any of the libraries available. We keep updating. We are continuously updating the Smart Contract hub with new smart contracts for more new use cases across different applications to help developers build more DApps as a SIM fit. Any questions you have, you can drop it in the comment section, I'll be very happy to connect.
00:18:31.928 - 00:18:48.750, Speaker A: Or you can join on Discord and ask a question. The committee of Developers on Discord as well. They can be happy to help you build and help you ask your questions as you can as well. Thank you very much and we can't wait to see what we build using the Plants platform.
