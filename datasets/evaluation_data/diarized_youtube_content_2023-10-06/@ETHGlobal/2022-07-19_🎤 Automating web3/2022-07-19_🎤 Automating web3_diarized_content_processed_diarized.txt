00:00:06.490 - 00:00:46.426, Speaker A: All right we're going to jump into our next talk here which is going to be a talk by David and Chris from Lib Protocol. They're going to be talking about automating web3. All the different kind of interesting primitives new things you can do when automation is built in. This is a huge problem space that is particularly difficult in web3, although kind of very common in web two. So really excited to hear a little bit more about what they're working on and just kind of exploring the space with them. So invite both David and Chris to turn on their videos and we'll welcome them to the stage. Feel free to share your screen.
00:00:46.608 - 00:01:02.080, Speaker B: Hey Jacob. Hey everybody. Thanks for being here. I'm david that's Chris. We're the founders of Lip Protocol. And yeah let's go ahead and jump into it. I'll start with the screen share here.
00:01:02.080 - 00:02:00.580, Speaker B: All righty then. So before we talk about specifically automating web3 let's do just a few minutes of context setting. So first things first, what is the web? So on the web we have this kind of like decentralized and resilient packet transfer network for sending around information. And here's a little video of that evolving over the past several decades. And so this is decentralized in the same way that one of these nodes can drop out and the information can still reach its destination. And so as you can see in any kind of system there's three main components which is the sending of the information and we see a checkmark here because the sending is in fact decentralized. But what we're going to talk about a little bit today is the decentralized compute and the decentralized storage of information and a lot of that was just touched on in the last talk.
00:02:00.580 - 00:03:14.170, Speaker B: Now that we kind of have an overview of what is the web generally let's talk about what is web two. And so using this same lens of sending information, computing information and storing information we can define web two as the internet where the data is computed and stored by these centralized platform corporations. So what does that mean specifically? Well of course it starts with the individual. And in this web two construct the individual has a bunch of data collected about them from pixels essentially tracking codes and tracking cookies across the web to the GPS data in the phone that is being aggregated and of course all of the spending and financial data. And so the result of all of this data being sent and traded and bought and exchanged by these third party corporations and here's kind of like a map of what that ecosystem looks like. These are the top 5000 marketing technology companies. Is that for each of us the individuals who are using the internet there is this picture of our identity that is the wholly owned property of these third party corporations collectively.
00:03:14.170 - 00:04:25.006, Speaker B: And this is kind of a result of the fact that the compute and storage of the data to date prior to Web Three was only really happening in a centralized way. So now let's talk about defining Web Three. Using this same frame, we can define Web Three as the web where the data is computed and stored by decentralized networks. And again, it starts with the individual. But then the other major component, of course, inside of Web Three is the notion of the asymmetric key pair, the public private key pair, the private address and the public address. And so this is the component that lets individuals and corporations and dows, et cetera, interact with these decentralized systems with higher levels of sovereignty, because the key pair itself delivers the power of being able to sign messages, sign transactions, encrypt things, decrypt things. This is a huge kind of innovation in terms of how people interact in our digitally mediated society.
00:04:25.006 - 00:05:44.746, Speaker B: And so some of these networks, you'll obviously be familiar with them, include things like blockchains, which are these public state machines that are ledgers showing who has what, tokens storage networks like IPFS and Filecoin, and then what the team at lit is working on, which is compute and encryption. And so we'll take a couple of minutes to talk a little bit about lit, how it works and how to get started with it, and then have some time for questions at the end. So, in context of this framing, what is lit? Lit is a decentralized key management network at the end of the day. So structurally and architecturally, what lit is doing is custodying a private key and elliptic curve in a decentralized way. So the private key that you have in your wallet is essentially just the line on a graph. And the lit nodes represent points along this curve, which is the secret of that individual node. And so the first product that we brought to market using this underlying network is a decentralized access control and encryption service.
00:05:44.746 - 00:06:43.454, Speaker B: And with this service, an individual can get access to some resource, whether that's a video, an application, a chat, a feed, somebody's friends list based on some on chain data. So a user may say, I own this NFT and I want access to this locked video. They sign a message which is broadcast to the lit nodes. The nodes then check the chain. Does this person qualify for access? If so, that node uses its underlying secret, which is that point along the curve, to generate an authorization or a decryption share, which it sends down to the user. And the user aggregates those shares in kind of a client side encryption, like a client side consensus type of view. And once they've collected two thirds of those authorizations or of those shares to perform that operation, which is to access something or decrypt something, in this example, they're able to do so.
00:06:43.454 - 00:07:40.686, Speaker B: They're able to watch that video, access that chat, so on and so forth. And so this has been really excellent. There's about 200 apps of all kinds of types that have implemented decentralized access control and encryption with lit today. Some of those examples include being able to do token gated commerce inside of Shopify. Decentralized encrypted chats on this application called Orbis Club is just one example. And then what the whole team, including Chris and I, are really excited to introduce here today is the notion of programmable key pairs and the ability to do decentralized compute and signing. And so what this means from the perspective of the network is for the access control and encryption product, lit was just one key that was checking those credentials and provisioning access.
00:07:40.686 - 00:08:30.910, Speaker B: But now we're imagining a future with our community whereby every agent who is using the Web, in addition to having their hardware wallet, in addition to having their mobile wallet or their browser wallet, can also have a decentralized custody cloud wallet which has some extremely unique advantages around being able to run automations because the signing can happen in the cloud and can be controlled by rules and programs. Rather than getting an alert about something and having the user have to open their phone and sign, the signing can happen on the user's behalf inside of this PKP paradigm. So with that, I'll kick it over to Chris, who will talk a little bit about installation. And Chris, you just let me know when to go to the next slide.
00:08:31.730 - 00:09:09.910, Speaker C: Wonderful. Yeah. So in order to use these PKPS, generally you'll want to use some JavaScript, and we're calling that a lit action. And so what you see on this slide here first is like how to install the SDK in a way that supports using lit actions. So you have to use that at Serrano tag at the top there that you'll see. And then once you have the SDK installed, you need to write some code that will run on every node. And that's what you're looking at here in this little code Snippet.
00:09:09.910 - 00:10:22.386, Speaker C: This is the piece of code that each node will run. And as you can see in here, we have a sign ECDSA function call that will instruct the node to use its private key share to create a signature share. And what happens is the nodes all run this little code Snippet in parallel, and the user collects those signature shares and then combines them and is able to use them for anything you could use an ECDSA signature for. So you can use it to authorize a ceramic, right? You can use it to send a transaction on any ECDSA blockchain, including Bitcoin. That's how the lit action code itself works. And then can you go to the next slide? And then yeah, this Snippet of code here is the code that actually uses the SDK to tell the nodes to run that code Snippet from the previous slide. And you can imagine in this code Snippet, if you look down a little bit.
00:10:22.386 - 00:10:57.562, Speaker C: You'll see there's a line that says const signatures equals await litnodeclient execute JS. And you'll see there's a parameter there code. And it says lit action code right there. Yeah, basically that's the code that you defined on the last slide. And so that could be like a string. And you pass that to each of the nodes and they run it. And what you get back is the signatures that were created.
00:10:57.562 - 00:11:47.274, Speaker C: The Lit JavaScript SDK takes care of combining all of the signature shares for you so that you just get the raw signatures back that you can broadcast to the network or do whatever you want. And one more thing that well actually two more things that I'll mention. One is like in this example, we're passing the code in as a string. That's what that code parameter is, where Dave's mouse is. It's also possible to pass in an IPFS content ID. And what that will do is instruct the nodes to pull down that IPFS file and execute it as JavaScript. And where that's really interesting is that IPFS things sorry, IPFS things are immutable.
00:11:47.274 - 00:12:44.830, Speaker C: And so where that's really interesting is that you end up with an immutable piece of code that you can use for signing. And what you can do now is you can use Smart Contracts. We're still pushing some of these features up, so you can't do it like today, but soon you can use Smart Contracts to grant access to a given lit action to use one of these PKPS. And so what you end up with is like an immutable piece of JavaScript code that has a private key that it can use to sign that's stored and runs in a decentralized manner. And so anything that you can think of that you could use a decentralized signing mechanism for, you could use this for in terms of automation, right? So we don't have a listener. That's something that you would need to figure out. You could use tenderly for that, for example.
00:12:44.830 - 00:13:42.606, Speaker C: But you need some kind of event listener, right? And when an event happens, you would kick off, you'd run this code that you see on the screen to kick off a signature. And what's really cool is that because it's running your code, you can put constraints and conditions in that code, right? So if you want to say like oh, when the price of Ohm drops below a certain level, I want to unstake my Ohm and sell it. You can have an event listener that looks for the price of Ohm dropping and fires this off. But you also can have inside the code here like an if statement that double checks the price. The actual event firing can be done by an untrusted party because you can put those guardrails into your lit action code. And yeah, definitely. Oh yeah, next slide.
00:13:42.606 - 00:13:55.480, Speaker C: Definitely. We have developer docs on all of this at the Developer Litprotocol.com website. And come on into our discord and we will help you with any questions or any support at all.
00:13:58.130 - 00:15:33.146, Speaker B: Back to Chris. And so yeah, I think a couple kind of ideas in the context of what to build on this, especially through the lens of hacking file systems. There's obviously some of the examples that Chris mentioned around DeFi automation and quality of life tooling, around finances, but focusing specifically on file systems and off chain data, something that gets really interesting here. Know, it's long been the dream of early internet pioneers for individuals to be able to travel around the web. Sometimes people use the metaphor of a data backpack with a self sovereign data hub. And what is so kind of wonderful is in the past, in order to have self sovereign data, an individual would have to go and rent a server from a provider like DigitalOcean or Amazon and install some software on that in order to interact with the web in a sovereign way. But now with the rise of decentralized storage networks and the fact that it is the private key that lets an individual interact and read and write to those storage networks, one can have a sovereign internet experience without having to go rent a server by reading and writing to their own encrypted shard of the open web, whether that's on using a service like Ceramic File, Coin or Table Land as the protocol for where that data is stored.
00:15:33.146 - 00:17:11.790, Speaker B: And so some examples of applications that start to get really interesting are things like what does social networking look like in this context? Rather than writing your posts and your friends list to Facebook or Twitter's database, what does it look like to start writing that data to a user's own hub where their own information is and then having rules around who can see it, who can comment on it, who can like it, so on and so forth. And so this is really the vision of the user owned internet and user owned social networking starts to emerge out of this frame and then we'll open it up for questions. But just to end on, an interesting idea here that we like to talk about often over at lit is really thinking about what is privacy? There's definitely kind of a cultural idea that privacy is about building up walls and saying what's mine is mine. And in the context of a networked digitally mediated world, we really like the idea of thinking about privacy less, about building walls, but it's more about building bridges. The point of privacy is not to necessarily keep any information away from everybody else, but is to give each individual, each application, each company, each dow really explicit controls around who can see which of their data and when. So we really like this kind of consent view of privacy and just wanted to share that concept and so open it up for questions here in a second. But yeah, thanks for your attention.
00:17:11.790 - 00:17:26.738, Speaker B: Here's our various kind of handles on Twitter. And yeah, we'd love to take any questions and looking forward to interacting with some of you in Discord and talking about the prizes and all of that.
00:17:26.904 - 00:17:32.826, Speaker A: Thanks so much. Awesome. Thanks, David.
00:17:32.858 - 00:17:33.466, Speaker B: And Chris.
00:17:33.578 - 00:18:19.326, Speaker A: Appreciate you going over that with us. And I mean, super exciting to have this kind of new primitive coming to be. I think we're still waiting to see if there's going to be any questions to filter in, but maybe I'll just kick one off on my side. I think you're totally right that this is sort of part of this vision that a lot of these kind of early internet pioneers had around just being able to teleport around the internet and kind of bring everything with you. I get curious about the Genesis story, I guess, of coming up with this as a feature and was this always the plan? Did you start with kind of the keys and then you sort of realized, oh, it would be crazy if we could do this. How has you sort of gotten to this point? And I mean, it's exciting point to be at. So I'm just kind of curious what that journey was like.
00:18:19.428 - 00:19:24.020, Speaker B: Yeah, great question. So Chris and I have been on this, we're on like a three year journey trying to come up with a really impactful idea and iterated through a number of different things. And about two years ago, we kind of got obsessed with the idea around how can we make an NFT an unlockable portal to an experience. Trying to think about NFTs less as kind of picture frames and more as browser windows that somebody could enter and thinking about what it would take for only allowing the owner of that NFT to be able to enter that digital experience. And so the question that emerged out of that was where does the key live? And basically the insight there was, oh, let's use a decentralized network to custody a key. And just in the context of building it, I think this is something that we talk about a lot on our team, that innovation and inspiration typically happens during the work rather than before. It was just very clear that the uses of a distributed key.
00:19:25.750 - 00:19:26.374, Speaker A: Were well.
00:19:26.412 - 00:20:14.420, Speaker B: Beyond the things that we could conceptualize. And even if you think about the founding of Ethereum and Vitalik's journey of saying, oh, people really like making coins and they keep setting up these forks of bitcoin, what does it look like to make a network that? Somebody can create tokens on top know led by Chris, we really went down a similar path in terms of thinking. Okay. This notion of a decentralized and distributed programmable key is very powerful. We don't know all of the use cases for this. The opportunity here is to basically take care of some of that work that would need to be repeated for each one of these use cases and make this kind of a generalizable compute or application platform.
00:20:16.310 - 00:20:36.140, Speaker A: Got you. Very cool. Awesome. Looks like there are some questions coming in now, I guess some specific questions, some kind of more open ended ones, I guess. Would this enable anonymous threshold voting as part of like would that be one of the things that you could build with this or is it missing anything from that?
00:20:37.230 - 00:21:18.518, Speaker C: I think you could build something like that, yeah. I'm trying to think about the specific architecture of that and how that would fit in. But yeah, because you can do things like signing. I'm thinking about the anonymousness of it. So all of our stuff right now, all of the nodes run their execution inside of Intel SGX, which is a trusted execution environment which is opaque to the node operators. They can't see into it. So depending on what data you were writing to Chain, I think you could do something like that with it.
00:21:18.518 - 00:21:19.240, Speaker C: Yeah.
00:21:20.890 - 00:21:52.418, Speaker A: Got you. Okay, sweet. And then maybe like a little bit more of like a general or more philosophical question. Given that you now have this kind of a concept of key and then you have this concept of compute, is it actually possible to sort of create a DAP at this point that would be completely computed on the lit protocol ecosystem and maybe not even need the kind of I guess you'd still have the blockchain component, but kind of almost like a kind of compute roll up type situation.
00:21:52.584 - 00:22:44.210, Speaker B: Totally. Yeah. We've been calling these liquid programs and are excited about the future where somebody can build a software product that provides a service, generates revenue and is running on entirely decentralized architecture. And let's say somebody builds that up and it's making $100,000 equivalent a month in tokens. And they decide, you know what, I'm ready to sell this business. And rather than having to go through the work of paperwork and everything and finding a buyer, they can just list the NFT that controls that software on OpenSea or one of the other marketplaces and somebody can literally buy what is functionally a software product business and the exchange of ownership of that business can happen on chain.
00:22:45.670 - 00:22:46.130, Speaker A: Wow.
00:22:46.200 - 00:22:46.386, Speaker C: Yeah.
00:22:46.408 - 00:22:49.742, Speaker A: Okay. That's an interesting idea. Sorry, I don't want to cut you off. Keep going, Chris.
00:22:49.806 - 00:23:10.954, Speaker C: No, yeah, I just want to add really quick the idea of replacing a backend with some of the stuff that lit does. I'd love to just talk about that really quick. Right. So a typical node JS backend will sort of have god mode access to a database. It can read and write from the database whatever it wants. But the actual code in those endpoints are what govern what gets written to the database. Right.
00:23:10.954 - 00:24:08.350, Speaker C: If there's an endpoint for a like post function, that endpoint will check if the user has liked it already, it'll off the user and then it'll just write that one piece of content to the database. And what you can do actually today with Lit Actions is you can have one of these Lit Actions that owns a PKP. You can have that PKP own a ceramic stream. And so what you end up with is a very similar paradigm where you have some JavaScript code that has God mode on a ceramic stream, and then you can write the code that governs what actually gets read and written to that stream, and that code can be immutable. And it's a very easy transition, I think, from thinking about the Web two node JS back end mindset to this way to do it in a decentralized way, where the data actually lives on the D web and you don't have to stand up a database. You're using ceramic.
00:24:09.970 - 00:24:39.818, Speaker A: Yeah, that totally makes sense in a way. It almost does kind of feel like almost a serverless function type idea as well where it's sort of like, yeah, you're sort of outsourcing some compute out to this thing and you'll know, it'll get back to you at some point and maybe there's some kind of characteristics about it that you need to pay attention to. But beyond mean serverless function. Yes, but then I think even in the case of David, what you said, like a serverless company, which is kind of interesting.
00:24:39.984 - 00:25:22.422, Speaker B: Yeah, I think that's a perfect example. Right. It's basically a serverless function. And if you go use AWS Lambda today, you can hook it up to the AWS kms. But the service provider that says like, hey, we built some kind of DeFi automation using Amazon's serverless function product. The person who's building that application has total access to that kms and can rug the users at any point. But in this paradigm that we're talking about, you can do that same thing, it's the same mindset, except the key is custody by this decentralized network, and somebody can build a really wonderful service and then say to the users, look, I can't rug you.
00:25:22.422 - 00:25:26.390, Speaker B: This is built on this decentralized key management infrastructure.
00:25:27.290 - 00:25:39.020, Speaker A: Yeah. Not even rugged, just from the key point of view, but even just like the compute point of view too. Right. AWS can at any point just turn off the function and you're kind of out of luck. Right. So wow. Very cool.
00:25:39.020 - 00:26:07.354, Speaker A: Awesome. Just see if there's any last questions that sneak in. Cool. I think we're kind of drying up on the question side. Maybe just before while I still have you both. And before you go, I know you touched on it a little bit at the end, but obviously we were kicking off a two and a half week hackathon. What are some of the cool things that you want to see built with this? What are some of those awesome outcomes that you'd like to see explored?
00:26:07.502 - 00:26:08.920, Speaker B: Chris, you want to go first?
00:26:09.450 - 00:26:34.186, Speaker C: Yeah, anything that uses ceramic, like in the way that I described, I think it'd be really cool. Also you can make Http requests inside these JavaScript snippets so you can read and write for like you could build a bridge between file systems, between chains. I don't know, there's just so many possibilities. It's hard for me to come up with concrete ones. You got some, Dave?
00:26:34.298 - 00:27:15.354, Speaker B: Yeah, I mean I think basically three comes after two. Web Three comes after web two. We're back down to the fundamentals. So it's things like messaging, posts, friends, lists, profiles. There's always interesting game dynamics to explore, but it's really just some of the basics of what does the user owned internet look know. If you think about the start of Facebook, it basically started as the notion of essentially a profile page, right, where you could upload your pictures, et cetera, and things like the feed and these other kind of interactions came later on. So I think that's like the state of where things are at.
00:27:15.354 - 00:28:28.782, Speaker B: It's just like it's wide open and early and being able to tackle some of just the super obvious components that exist in Web Two today, whereby all the data is stored on these third party servers in the lens. Of what we've been talking about, whereby that is controlled by the user through this PKP paradigm that is like controlling a ceramic stream, for example, is really interesting. The other place where this gets really interesting is on the authorization side. So for many people it's a real privilege to be one's own bank and a real honor to be able to custody a twelve word seed phrase. But there's a lot of kind of fellow members of our species where that's a real burden, right. They may not have a secure place to store these words, they're receiving these words in a language that is foreign to them. And so there's a lot of opportunity on the authorization side, which is how can an individual tell that cloud key how to behave using kind of more, let's call them more traditional authorization methods like biometrics, multi factor authentication, things of Google Authenticator.
00:28:28.782 - 00:28:40.870, Speaker B: So there's that whole world to explore on the auth side as well. And all of this stuff is just like super extendable to then every other application that is building inside of this same user owned paradigm.
00:28:41.290 - 00:29:14.334, Speaker A: Wow. Amazing. I mean, out of all that the auth stuff is very interesting, but then also just being able to make an Http call from within, it like getting data within that context and being able to do cool things with it. Yeah, maybe you won't have the same guarantees as you would if you're using an Oracle provider or something. And yeah, I mean it's a point of failure. But to Juan's point earlier, at the end of his talk, at the beginning, it's all about just solving a problem, right? And if you can solve that problem and then sure, you have a centralized data source within this kind of liquid thing that you're building. Cool.
00:29:14.334 - 00:29:28.018, Speaker A: Later on, take that out, swap that for something more resistant and solve that problem later. So awesome. Seems like a really cool tool to yeah, I don't know. It seems like a very open ended thing that people can build with. So really awesome.
00:29:28.104 - 00:29:38.700, Speaker B: Yeah. And we couldn't be more excited to have those dialogues. Like, please get in touch if you want to ideate and chat about stuff. It's fun together.
00:29:39.710 - 00:29:55.830, Speaker A: Absolutely awesome. Okay, great. Well, that is time on our end for this talk, but really appreciate you both, David and Chris, for coming out and chatting more about kind of automating web3 and the work that you've been doing there. We're going to move on to our next chat.
