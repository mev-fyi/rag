00:00:05.750 - 00:00:06.300, Speaker A: You.
00:00:08.190 - 00:00:28.522, Speaker B: Great. Welcome again to our workshop on Morales. We have David Godrich here who will be leading the workshop and you'll be learning on how to build Unity web3 games. David, I'll let you lead the workshop, and if you have any questions, feel free to pop them in the chat and we can take them towards the end.
00:00:28.576 - 00:00:29.180, Speaker A: Thanks.
00:00:29.950 - 00:00:30.434, Speaker C: Thank.
00:00:30.512 - 00:00:50.390, Speaker D: Thank you. Hello, everyone. This is David from Morales, aka exactant. If you've been in the discord for Morales. So what I want to talk about today really briefly is why use Morales and Unity 3D. Provide some examples of what you can build. Do a quick walkthrough of our boilerplate, how to get it up and running, and see how easy that is.
00:00:50.390 - 00:01:25.490, Speaker D: Just go through a little bit of the code that shows how to use Unity and Morales together. Walk through a couple of tools that will be really important to helping you build your games. And then hopefully we'll have some time for questions and answers at the end. So why use Morales? Well, there are a lot of reasons. To me, the biggest reason to use Morales is our community. We have a great community of developers and a lot of employees that are really willing to help and answer questions. And we like to have really quick turnaround on answering user questions.
00:01:25.490 - 00:02:18.046, Speaker D: That's one of the big things. But Morales also offers you a lot of tools to quickly get your development going. So all the heavy work that's required for crypto development in the backend is done for you, whether this is nodes, querying data, talking to the EVM chains. Morales provides all this for you so you can concentrate on your DAP and what your DAP is going to do. So you can concentrate on your game, on the UI, on the characters, and then all the heavy lifting of communicating with the blockchain is handled by Morales. So, just for an example, if we look at Morales server, you can see that it provides a lot of information. So this is one of my test servers.
00:02:18.046 - 00:03:01.570, Speaker D: And when a user logs in, the Morales backend server automatically syncs all the data of the chain that the user logged in with into the database. So you can query it real time. So you can see for this user, for these users, I have the ETH balance. I can see the NFT transfers, their ERC 20 token balances. All of this is in real time. Same thing with other blockchains BSc, Ethereum, Polygon, Avalanche, all the major EVM blockchains are provided by Morales. The next thing is the NFT API.
00:03:01.570 - 00:04:25.798, Speaker D: So what's really cool about this is this FOIA API is available to you as a developer even without authentication by the user. So you can have your game come up and start querying NFTs tokens balances. A lot of read, any of the read that you'd have to do on the chain, you can actually do through the API and Morales has already taken all those data and indexed them and loaded them so that you can do very quick searches, very specific searches. So if I go back to my server and go to the web, three API, you can see that you have the whole schema of the API here and you can actually run through and test these transactions. And the way that you use them here is fairly similar to the way that you're going to access them through Unity. So this full API and all of the services that are offered by Morales start with a free tier, and those are all available inside your Unity SDK. So what is it you can build? So you're probably looking at Unity, you've probably looked at some other game engines.
00:04:25.798 - 00:04:52.178, Speaker D: The cool thing about Unity is it also has a very large community. It caters toward new developers. So if you're new to game development, you're new to using a professional game engine. The community for Unity itself is very large. There are a lot of tutorials on YouTube and also on the Unity site. And so it makes it very easy. And some of the cool things that Unity provides is an asset store.
00:04:52.178 - 00:05:12.202, Speaker D: And on that asset store are a lot of free tier assets that you can use to test around with. So this is a multiplayer game that one of our developers is creating. There is a tutorial that he's doing a series on with this. And so very quickly I can run.
00:05:12.256 - 00:05:12.860, Speaker A: This.
00:05:26.250 - 00:06:12.770, Speaker D: Or maybe not as quickly as I expected. All right, so what is happening here is Unity is basically compiling on the game. It's compiling the game. While that is happening, I'm going to skip ahead just a little bit. We offer a boilerplate application on the web. And if you just go to Google and type in Ethereum boilerplate, you'll come to our GitHub. And then within that you'll find Unity boilerplate.
00:06:12.770 - 00:06:42.160, Speaker D: And basically what this does is offer you the SDK plus an example application that demonstrates how to log in, how to check your wallet balance, how to check NFT balance, and also how to transfer an NFT. And then it has some other cool things such as the glowing effects on the sword, the life bars showing address and so on.
00:06:45.170 - 00:06:49.802, Speaker A: And let's see if that game is loaded yet.
00:06:49.956 - 00:07:43.890, Speaker D: All right, it has okay, so I'm going to take my wallet and I'm going to scan the QR code. And then just so you know, if you build this in the WebGL version, which is a browser version, it will use MetaMask inside the browser instead of the QR code. Reason I didn't try that is that it takes a lot longer to build the WebGL game. So this has basically logged me in and I've now joined a multiplayer game. And so far in this game, what we can do is just walk around and so on. And if you follow the Morales web3 YouTube channel you can see this game in progress as it's being built. And you can see it has my username that's associated with my address back in the database.
00:07:43.890 - 00:08:40.770, Speaker D: And again, this is all made with free assets out of the Unity Asset store. All right, so how do we get started? So again, we go to the Ethereum boilerplate, ethereum Unity boilerplate GitHub, and just go to releases and find the newest release. Click on the package, it'll automatically download. And while that's downloading, I'm going to go to Unity hub, and I am going to create a new project, and I'm going to call this demo project. Now you can change the version of Unity that you're using. So far, 3.30 is the newest release.
00:08:40.770 - 00:09:37.660, Speaker D: There are newer versions than that that are also in development. So you can try out the new features of Unity. So you can just set that here. I'm going to leave it where it's at, create my project, and Unity will load. This is part of live streaming, is doing everything in real time. It okay. So let's not have dead air here while this is loading, since we do have a short amount of time.
00:09:37.660 - 00:10:02.302, Speaker D: Okay, it came up. So never mind. All right, so we have that. We have our package. So you can see it's a clean build, freshly opened. I'm going to take my package and drag it right into assets. So this is going to open up and show you everything that's in that package.
00:10:02.302 - 00:10:19.962, Speaker D: So the cool thing here is that if you're developing your own game, you've already used the example. You don't want to use it. You can just uncheck it and it'll automatically not import that code so that your build is cleaner. But of course, we want to see it for the demo. So I'm going to leave it and I'm just going to import everything to get started.
00:10:20.136 - 00:10:52.478, Speaker A: It's still importing you it you see.
00:10:52.484 - 00:11:27.280, Speaker D: That while it is fast, it does take a few seconds. Okay, so everything's imported. There are a couple of things that we need to do for housekeeping. I forgot about this little issue. Okay, we're working on this. So the newest version does not come with the package for Newtonsoft. And so you have to load that separately.
00:11:27.280 - 00:12:17.216, Speaker D: We are working on having that automatically load when it comes in. So I apologize about that. So see, what I'm going to do is just start that over in an older version, and I apologize for that. So what I'd have to do is pull in Newton soft, and that takes a little bit of time. So I am going to instead redo to do this as let's choose 27. And again, the joys of doing things live stream. All right.
00:12:17.216 - 00:12:59.820, Speaker D: So while that is happening, again, to save time, I just want to point out some of the cool tools that you can use with Unity. So first of all, there's the Morales documentation. This walks you through how to connect everything up, how to talk to Morales, how to integrate with Morales, the features that are available. Unity has its own Unity Manual, which is very complete. There's also the unity learn courses and the Unity asset store, which I talked about before. And this is a great set of assets. Again, there's free and paid, but there's plenty of free assets that you can use to play with, and you're allowed to use those in your games.
00:12:59.820 - 00:13:50.624, Speaker D: The GIMP is an open source picture or image application that allows you to create Gifs and PNGs. It's very similar to the Adobe product, but again, it's open source and free. Blender is a free 3D creation tool. This allows you to create 3D assets, characters, rig them, skin them, create animations and so on. If you're not so good about with that, or you're in kind of a hurry, you can use Miximo. Miximo has a lot of free characters and a lot of free animations that you can use in those characters. And then you can just import those into your Unity application and use them right out of the box.
00:13:50.624 - 00:13:54.210, Speaker D: All right, let's check on the loading of.
00:13:58.180 - 00:13:58.930, Speaker A: The.
00:14:01.460 - 00:14:12.960, Speaker D: All right, so I am going to re import my download.
00:14:14.100 - 00:14:15.130, Speaker A: It it.
00:14:32.540 - 00:16:09.270, Speaker D: That was the previous version. So one of the packages we use is called Ethereum. And with Ethereum, it uses some mathematical operations that require unsafe C sharp code. And so what we have to do is go into player settings and find other settings and scroll down and find a checkbox for allow unsafe code. And if you're new to C sharp, what unsafe code does is it uses some more platform specific code that isn't wrapped in the garbage collector and it can cause errors if used improperly. It's used for advanced applications, and in this case, Ethereum, which is what Wallet Connect uses to connect to the blockchain. It uses it for some of the encryption algorithms.
00:16:09.270 - 00:17:06.730, Speaker D: So that's why that's so when I look at the scene that was imported, what I have is I have my Morales Web Three API. I have the scenes that came with the demo. Those were automatically created and then the WebGL templates. So if I was going to use WebGL, I'd want to go to Player Settings and then select my Morales Web Three template. And if I have time, I will show that in a minute. So to get up and running, we have an example screen and I'm going to open that scene. And for Morales setup, I need to have my Morales Server Uri and Morales Service or Application ID so I can just go to my server and see view details and copy that directly.
00:17:06.730 - 00:18:01.926, Speaker D: Okay, so everything's connected. And so what the demo scene has in it is we have a login canvas, and this handles all of our UI. It has menus for iOS, Android, the QR code one that we saw earlier. And then it also handles wallet connect through MetaMask that doesn't show up here, because that's actually handled through the browser. And there's also a little joystick controller for iOS and Android. So all of that is actually toggled automatically you just have to select the build. You don't have to actually actively turn these on and off, because the application will do that.
00:18:01.926 - 00:18:36.066, Speaker D: And the demo for this is actually inside the script. And so if we edit the script, we'll see that. Okay, so let's run this. And I'm running in desktop mode. And again, I have my QR code scan it. And I'm at the moment using Rainbow wallet on my phone, but I've used MetaMask and I've used Trustwallet and Im Token Wallet, and they all seem to work. So I'm authenticated.
00:18:36.066 - 00:19:14.290, Speaker D: And you'll see that my name bar now comes up with the address. And as you saw in the other demo application, you could change this to take your address, query the Morales database, and then get the username that the user set. So that's something that you can add in. So I can run around here. The orcs won't attack me, but I can attack them. And then the chest and within the chest, there's an NFT mug. And I can click on that.
00:19:14.290 - 00:20:05.400, Speaker D: And then it asks me to confirm the transaction, and the mug disappears because my transaction has been completed. All right, so let's look at some of the code. And I know we're running out of time here, so I need to do this quickly. Again, part of the joys of live streaming is waiting for the applications to start up and run.
00:20:05.470 - 00:20:06.090, Speaker A: Okay.
00:20:08.380 - 00:20:34.496, Speaker D: All right, so we have our Morales Web three API within it. The example. And the example has the scripts in the scene that enable us to connect to some of the Morales tools. Some of the Morales tools you'll work with a lot. The morales interface. This allows you to basically interact with the Morales client, with the Web Three API client, with the Web Three client. From anywhere inside the application.
00:20:34.496 - 00:21:09.470, Speaker D: You don't have to keep instantiating those objects. It's just like in a JS client. It allows you to just access them from anywhere. So let's take a quick look at the main script that controls the menu system. And once you authenticate, this is what logs you into Morales. So you can see that there's code in here that determines whether or not we're in Android, iOS, WebGL, or other platforms. And then it's handled in different ways.
00:21:09.470 - 00:21:45.576, Speaker D: So the first thing that has to happen is that we have to authenticate. Oh, and I guess I'm getting ahead. We need to connect with Morales itself, but the package does that automatically for you. But just so you can see, because it's in the documentation that it calls the initialize with the information that you've entered into the scene. So this automatically happens on start of the application. Again, with the API, you just drag and drop it. You don't have to worry about this.
00:21:45.576 - 00:22:24.692, Speaker D: It just happens. So when I hit Authenticate, it's calling play and it's determining if you're used in or not. If you're on desktop or you're on mobile, then when the user logs in, it's persisted on the device as long as the session is good. And so if they're already logged in, the session is good, it's just going to go right into the scene. Otherwise it's going to show our authentication method for unity. I mean, for Android and for iOS, it's going to show you your list of mobile wallets that you can then connect to. For desktop, it's going to show you the QR code that we just saw.
00:22:24.692 - 00:22:58.060, Speaker D: And then if you're in WebGL, it's going to bring up MetaMask. So if we look in the Wallet Connect handler, this is what's called by Wallet Connect. When the user is connected to the wallet, we're going to sign the transaction and then we're going to log into Morales. So again, if you're using this code, you don't have to worry about it. It's already done for you. But if you're making your own code, it's a good thing to look through here and to see how this is happening. But as Ivan likes to say, it's basically one line of code.
00:22:58.060 - 00:23:25.284, Speaker D: So a line of code for signing. And this takes care of sending the sign message to the wallet. One line of code for logging in. And then if you want to do cool things with the chain, we talked about the Web three API if we go to this awardable controller. And again, this is in the code. This is an example code. You can see how easy it is to call your balances for NFTs.
00:23:25.284 - 00:24:01.490, Speaker D: So inside the demo, we've got this collectible NFT, and it's running on the Mumbai chain. So it's a sample NFT. But basically I am just giving it my address. This is the user's address. It's doing the claiming of the contract address that I'm calling. And what this does is it goes out and it finds all the NFTs that are owned by that person. So in this case, I want to make sure they don't own the NFT before I show it in the game.
00:24:01.490 - 00:24:55.292, Speaker D: And so I take those results, I look for the ownership. And if the person already has the mug, so if this returns data, then that means they already own it and it's not going to show the NFT. Whereas if they don't own it, it'll still show the NFT. And then when they claim the NFT, we're basically taking our let's see, here it is. Okay, so we have our token ID, and this is saved in a constant in a different file, and it turns it into a big int and passes it in. And so we have one line of code, morales interface Send transaction. And this is going to call the claim reward function on my rewards contract.
00:24:55.292 - 00:25:35.188, Speaker D: And again, these are defined in a different file. And if you look through the code, you'll see how this is done. But again, it's one line of code and this takes care of calling the contract and doing the transfer of the NFT from game ownership to the ownership of the player. All right, we've got about five minutes left. And so at this point, I'm going to stop here and let's go to some questions and answers. Are there any questions this moment?
00:25:35.274 - 00:25:40.630, Speaker B: No, but guys, feel free to post them in the chat and we can take them live.
00:25:41.400 - 00:25:43.310, Speaker C: I will have a question. Questions.
00:25:47.680 - 00:25:58.880, Speaker B: Go ahead, Fernando. Someone asked, would this work on an Apple M One chip?
00:25:59.620 - 00:26:30.536, Speaker C: So when it's time to store or have the amount of transactions that Morales needs in the back, you show the server and the type of blockchain connect to interact. Is there like any different levels of service we need to consider for going to prod or for going to launch? How size that?
00:26:30.718 - 00:27:20.170, Speaker D: So it's sized by number of transactions per minute. And there is a pricing sheet on the Morales website if you go to. So there's the free tier, which is great for development. And again, you have access to all the services. You can just only make so many calls per minute, though, when that's against the API, the database plugins against the RPC node, so those are all limited. And then there's a paid tier that has a pretty good number of calls per minute that you can make. And then there are also the enterprise tiers that if you call and talk to, if you basically email or call our sales folk, then they will put together a specific pricing plan for your application.
00:27:20.170 - 00:27:39.090, Speaker D: And if you look on the website there with your servers, it tells you that when you're getting ready to go into production to give them a call. And then they can help estimate how much throughput you're going to need for the expected number of users that you're going to have in your application. In this case, your game.
00:27:39.460 - 00:28:19.710, Speaker C: Yeah, but when you start, you don't know that, right? And you can have like, let's say you have a promotion over one weekend. You can have a huge peak and maybe the peak will be on the IPFS server, maybe because you have the NFTs been viewed or sold. Is this all the same pool of resources pay for I'm wondering how it works, especially for the first at lunchtime, right? I noticed you have like two tires, like free, then the middle one and then the next one.
00:28:21.040 - 00:28:29.200, Speaker D: And I know with the highest level, basically I believe it spins up your own virtual server.
00:28:29.860 - 00:28:30.704, Speaker A: Okay.
00:28:30.902 - 00:28:50.310, Speaker D: And then the size of that is going to be determined on your contract. And again, Tom and everyone else in sales is really good at estimating that and helping and then if you're going to have spikes or dips, of course you can adjust those as well.
00:28:50.680 - 00:29:12.990, Speaker C: I guess specifically when you launch a game and you have all, let's say you have 1000 items inside right on the marketplace for the game, and these ones are viewed by people still not paying for it, right. The rewards being viewed are we using the IPFS for that all the time, or we use like a cache server in between.
00:29:14.640 - 00:29:50.170, Speaker D: So the data that you would read actually are coming off the database and they're synced live and there's like a minute delay, but it will be in the database. So you can call the web3 API, you can have a list of the NFTs and use what will come back is the address for IPFS. So the IPFS call is just like a web call. So what would be monitored are the calls for loading the NFT set. But then when it goes out and touches IPFS, that's just like a regular web.
00:29:53.660 - 00:30:05.632, Speaker C: Count. When you view an item from a marketplace, it's count for one IPFS web call and one database call.
00:30:05.766 - 00:30:26.260, Speaker D: The IPFS call goes from the client's application. And so that's not regulated as far. But again, a lot of these questions are going to be better answered by our sales folk. Okay, but what I can show you is I can go back to that server.
00:30:27.400 - 00:30:49.420, Speaker C: I'm trying to figure out this moment when you launch or you're in preview or beta until you have something more stable also in terms of revenue. So what is the infrastructure costing? There's a magic formula, maybe you have to put up front this much, right?
00:30:49.490 - 00:31:44.428, Speaker D: And then when you talk to the salesforce, they have all that information in front of them. So the server is going to show you how much you're using. Again, these are all free tier, the ones I develop with, and this gets refreshed once a minute. So if you're calling cloud functions, then that counts towards your throughput. If you're making calls to the tables in the database or using any of the web hooks or triggers, that counts toward your throughput. And then if you're making calls against the web3 API, that is also going to count towards your throughput. And honestly, with the free tier, and of course it's just me or a couple of people at a time testing against it.
00:31:44.428 - 00:32:15.910, Speaker D: The only time I've ever hit a limit is if I'm doing a lot of saving on the if I'm creating a lot of web functions, a lot of cloud functions, and then saving them. So if I create a big block of those at once, sometimes that'll cause the CPU to spike. But the other ones I've never run into with the free tier. Now with a game, a production game, you will. And so again, the best thing is to contact sales and talk to them and they can walk you through that all right.
00:32:16.520 - 00:32:19.890, Speaker C: Specifically, if there are any tips to use during the develop.
