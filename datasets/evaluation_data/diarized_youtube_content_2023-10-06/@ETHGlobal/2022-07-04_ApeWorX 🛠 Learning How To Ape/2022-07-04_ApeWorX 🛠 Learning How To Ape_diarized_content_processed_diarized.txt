00:00:06.650 - 00:00:41.978, Speaker A: Language for writing smart contracts. So if you like the Python framework, you'll love the Viper language for writing your contracts. We have some additional information about testing up on Ape Academy that will help you test your smart contracts. So let's take just a second and look at Ape Academy since I've already been talking about it a bunch. So while this talk is only about half an hour long right. With some room for questions, inevitably, if you're using Ape, you're going to want to go back and reference something that either I've said or something that you want to do. You want to deep dive some information.
00:00:41.978 - 00:01:30.302, Speaker A: That's where Ape Academy comes in. We've currently got some featured tutorials, including one that was just released today. My coworker Chris works really hard on creating a lot of these tutorials, and we're going to actually hands on go through deploying an ERC 20 contract in just a moment. And while we're going to go through that really quick, this will be a great place to come back and actually explore information about that. So please check out Ape Academy. So one of the features that we also have is something called Ape template. So if you don't really know where to start on a contract and you want some rough framework for yourself, you want something that works out of the box and that you can easily customize.
00:01:30.302 - 00:02:12.880, Speaker A: This is where Ape template really shines for us. So essentially, when you download Ape, the plugins, we don't decide for you what plugins make sense for the kind of project that you're working on. Right? If you are never touching solidity or you're never touching Cairo, why should we kind of bulk up your system with additional plugins that you may never use? So this allows you to really customize and pick what things that you want to focus on. So with that being said, to use template, we're not forcing users to go ahead and have that as a download. It's an add on for you. We do have a recommended plugins list that you can download. If you're just getting started, you're like, hey, yeah, let's go for it.
00:02:12.880 - 00:02:48.950, Speaker A: So to install a template, we'll watch a little video here in just a second, and we're going to focus on the ERC 20 token. There's a standard for it, hence the ERC 20. The files that are generated, there's a token Vy file, which is a Viper file, and that is the ERC 20 standard. This is for a fungible token. We've heard a lot about NFTs, but what was an NFT before an NFT? It was fungible. Right? Hey. So these are identical tokens.
00:02:48.950 - 00:03:22.530, Speaker A: Another contract that we support is an ERC 721, which is the NFT standard. Once again, that's a non fungible token and therefore unique, and it has metadata associated with it that allows for linking assets and other things. You can see on the right hand side here that it is on the right for you. All right? Or is it just for me? Okay. Sweet. Kind of the file structure that is created when you use the template. So let's build this real quick so I can type in Ape plugins and point that to an install of templates.
00:03:22.530 - 00:03:54.350, Speaker A: Should be fairly quick here. And now that it's installed, I can use it by calling Ape template and pointing it to the GitHub repository that I wish to connect to. This could also be an Http address. And this uses cookie cutter. So anything that is in square brackets is kind of a default value. Anything that I type in will override that default value. And so a lot of the interfaces that are going to be used in this token contract, you can decide whether or not you wish to engage with, right.
00:03:54.350 - 00:04:22.150, Speaker A: Whether you want to pre mint, whether or not you want something mintable or burnable or permittable. So I just let the defaults happen there. And we can see that it's created the file structure for us. So I'm going to take a second to step away from the videos here and actually look at the structure. Hopefully this is big enough. You can kind of see it. Everybody, we good? All right.
00:04:22.150 - 00:04:52.880, Speaker A: So this is that same demo file that we had on the video earlier. And we can see the contract folder. This is everywhere when you utilize Ape that you're going to store your contracts. You can have nested folders within there, but kind of starts with contracts. It's fully configurable. So if you don't like the word contract and you want to have, I don't know, letters or code, snippets or, I don't know, whatever you want to call it, you can customize that. It's one of the great things about our tool set is it's highly customizable.
00:04:52.880 - 00:05:38.780, Speaker A: So just briefly looking at it, we can see where I overrode the word Stemo and DMO as the symbol for the token left 18 decimals as a default value. And once again, a shout out to Chris if you use Ape Academy and look at his video. I had that up here earlier. Yeah. On how to make an ERC 20. He really goes into depth. There's both a transcript and a video here of all the components of setting this up and then telling you kind of the breakdown of the contract itself and even giving some tips about how you might use it or what it might mean to implement a certain interface.
00:05:38.780 - 00:06:23.588, Speaker A: The other thing you have here is the Scripts folder. So this allows you to use Ape Run to run your scripts and that will automate a lot of your processes. If you wish to have a more interactive experience, we have Ape console that we'll see in a moment when we do querying that allow you to do more of a hands on interactive environment with locals available to you. So the Scripts folder that we have here has a deploy currently script in it. That's very simple. This is just going to ask me what account do I want to deploy with and then it is going to do the deploy action for me. The other thing that's really nice about using this template is that you get some things pre built inside of it.
00:06:23.588 - 00:07:12.364, Speaker A: As far as the tests go, we give you some fixtures straight out of the box so that it can support these pre made tests around. Some of the questions that we were asked earlier, like do we want it to be able to be mintable? Do we want it to be burnable? Right? So the tests are already kind of built for you out of the box. And the last thing I want to cover, at least in this screen, is the Ape config YAML. So inside here, you can basically configure your project to interact with the Ape framework and create a lot of overrides as well. We see that. Right now, all I'm doing is specifying that I have a dependency of a plugin, that is the Viper plugin that will help compile to the abi code bytecode that I need to deploy. We'll see this compile.
00:07:12.364 - 00:08:07.856, Speaker A: And one thing you'll also note is that we're going to use confirmations. So knowing that the block can change just a little bit as we're adding to it, right, we want to make sure that it's at a stable point before we consider our contract to be fully deployed. If we wish to override any of these, we can actually do that here in the YAML. So with that said, let's try it. So I'm going to go I want to run this script that I've written or that's been generated for me, the deploy script, so I can say Ape run and I want to do deploy. And the thing is, I'm not ready to deploy this to mainnet just yet. I would like to use a test chain, right? So I'm going to use the network flag network to position this to which chain I actually want to use, what provider and what network and what ecosystem.
00:08:07.856 - 00:08:49.554, Speaker A: So I want to use Ethereum and I would like to use Rinkbee if I could type. And lastly, I would like to use Alchemy as my provider. So it's bringing up some accounts that I've already set as personal accounts and I've given an alias to so that I at least know which account works for me. I'm going to select my account and I get a signing prompt here which at least allows me to look at the gap. So beforehand I can be like, yeah, that's acceptable to me. I would like to do that. I will sign.
00:08:49.554 - 00:09:25.934, Speaker A: I'll enter my passphrase. Please don't steal it. It will ask me if I want to leave this unlocked. I might have additional things that I wish to do and I don't want to have to unlock it every single time for now, I'm going to say no. And now what I can see is it has begun the process of making sure that it is confirmed on the block. We can already go ahead and look at this Etherscan link. Etherscan is another plugin that we support and the Internet's just a little bit slow.
00:09:25.934 - 00:10:22.500, Speaker A: So we'll wait for this to load. Yes. So we now see that it has successfully, the transaction itself is successful. The next thing we would want to confirm once we wait for the two confirmations here, is that the contract itself might be hitting that a little hard with the retries, is that the contract itself has deployed. So I can go back to Ether scan and check that my token is now available and we see demo token. ERC 20 DMO is the symbol. So we have actually, if you all want to even go out on the testnet on Rink B right now, you can see that I just deployed an ERC 20 token.
00:10:22.500 - 00:11:10.808, Speaker A: What? No claps amen. Thank you. All right, so we talked a little bit about the plugin architecture. Let's dive just a little bit deeper because one of our bounties is writing a plugin, so you might say Evan. All right, what's this plugin thing about? We got Apecore, which is basically the glue and defines how these components are going to interact with each other. You have some core plugins that come kind of out of the box as soon as you download Ape. That are Ethereum guest Ethpm, which is a package manifest sorry, had a brain fart there.
00:11:10.808 - 00:11:41.750, Speaker A: Package manifest plugin. And then East Tester, which helps to set up and supply some of the locals that you can utilize in the testing environment. So then we have what we call supported plugins that are written by Apewworks employees like myself. They kind of fall into some different categories. We have compilers, so these are language based. This is what's going to convert your Viper Solidity Cairo into an Abi or contract type bytecode. Right.
00:11:41.750 - 00:12:36.950, Speaker A: We currently support hardware, wallets, ledger and tracer. This makes for a really great way of not exposing your private keys while interacting with the chains. We support L, two ecosystems like Phantom and StarkNet, which I do want to give a shout out to one of my coworkers for making the first non EVM plugin, Jules, who happens to be with us today. And we also have provider plugins like Hard Hat you saw me use Alchemy earlier in Fura and Foundry is currently in Alpha. We have a lot of projects that are currently in Alpha and we'd love for you all to have a project in Alpha. Beta, gamma production, whatever. Right, so you're saying, Evan, how do I make a custom plugin? Well, let's walk through that real quick.
00:12:36.950 - 00:13:43.200, Speaker A: So the first place to start, if you want to go for this bounty or you're interested in plugins, I would say, is to look at some examples of plugins that we've already written. So if you want to know something about like Ape Solidity, you want to write a different kind of compiler. For languages, I would take a compiler API and kind of begin looking down that path providers, maybe something like infura using the provider API tracer using the count API. Or if you want to make a CLI extension, ape Tokens wraps the token list and provides that through the CLI. So here are the bare minimum requirements, right? You've got to start with Ape underscore give your plugin name, generally whatever the plugin is about, right? And then you kind of pick your own adventure here. This is an and or you can do both things. You can choose to do one thing, but you've got to implement one or more API classes from the Ape API module and or make a subcommand and point it to your entry points in your project setup.
00:13:43.200 - 00:14:49.120, Speaker A: If you're looking for ways to kind of organize your file set and look at the standard that we've already kind of created, we actually have an optional project template in GitHub that you can utilize. So as for the adventure path of implementing the API classes, here's a quick example of using the Alchemy like we saw that I used earlier. You want to import the API class and then make that the base class. So, unfortunately, I cropped off the line numbers here, but where it says Alchemy Ethereum Provider and it has Web three Provider and Upstream Provider. Those are where you're utilizing your base class with the APIs, right? So a Web Three provider allows access to the web3 chains and an upstream provider allows for forking. And you can see kind of here, even though I've collapsed everything, you've basically implemented the abstract methods for connect, disconnect, establish or not establish, but estimate gas cost and send transaction. So the details of how these things are done, you decide.
00:14:49.120 - 00:15:46.512, Speaker A: As long as the interfaces connect together, right? It makes sense. The next step to that is registering the API class, which this is a separate file. And we just see that we have a list of networks that we're providing within the Alchemy mainnet, robstein Rinkbe, which you saw me utilize, so on and so forth. And then we just yield after registering the plugin, ethereum being the ecosystem name, whatever the name of the network is, which in this case would be Alchemy and then the provider itself. If you're creating a CLI extension, you can look at an example like Ape Tokens, which wraps a token list. And we can see some click commands here and click groupings. And the next part of that is just to register your entry points.
00:15:46.512 - 00:16:38.532, Speaker A: So between lines 67 and 70 there, we see entry points. And we're just saying Ape Tokens as a command is actually going to point to the Ape Tokens library looking at the underscore client or CLI file and then pointing to the CLI method. And the final thing I'll leave you with is how to query the blockchain requirements here are just that you're connected to an active provider. We're going to look at this real quick in Ape console, which is an interactive Python environment that has locals such as chain there's much more, but we'll point you to additional things in Ape Academy for the rest of it. But essentially it returns a data frame that lets you do some really neat things. So let's do that just really quick. If I can find my there it is.
00:16:38.532 - 00:17:33.160, Speaker A: Okay, so Ape console this time I'm doing a network of Ethereum mainnet and let's do infura. All right, so I currently have an active session here and I want to set up a few things. So I'm going to copy paste here. So the first thing I'm going to do is set up my stop block, which is going to look at the chain and get the very last block and get the number of that block. So if I want to know the last block there we are. Then I'm going to set up my start as being 50 blocks before the last block. And then I can do something like looking at the average gas used over those 50 blocks.
00:17:33.160 - 00:18:38.790, Speaker A: TADA. Or I could do something like looking at the average time of creation over those last 50 blocks. Like how long does it take for a block to be generated? We're up to 17 seconds. This morning it was 14. So that's fun. Or we can do even more complex things like set up visuals with Matplotlib. So if I generate blocks and I go back over the last 20,000 blocks in steps of 1000 because I'm wanting to aggregate some data here and I use Matplotlib for the visualization and then a little magic here and let's show it, we can actually create some graphs based dynamically on the blockchain.
00:18:38.790 - 00:19:35.250, Speaker A: All right. And what's my time looking like? I got two minutes or so. The last thing I want to do is give a shout out to the bounties that we're running. So if you want to do any kind of smart contract project using Ape, we have a kind of first place at 3002nd, place at 200, 500 if you write a plugin, which we kind of went through 3000 for. That one and going over, like the blockchain data that we just did. That's 3000 for coming up with a really good story utilizing those analytics. Any questions? Yeah, so the the question is about the Ape console.
00:19:35.250 - 00:20:09.560, Speaker A: What kind of environment essentially is that? And it's essentially an IPython that has additional locals injected into it so you can access the eight specific functions, but you do have the full Python environment available to you. Any other questions? All right, well, I will see everybody at the Karaoke later. Please be sure to hit us up on Discord. Check out our GitHub. Read our docs. We're kind of cool. Just saying.
00:20:09.560 - 00:20:11.940, Speaker A: But I'll talk to you all later.
