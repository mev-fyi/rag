00:00:09.600 - 00:01:32.154, Speaker A: Hello everyone, I am Sukanya, senior integration engineer from Neon EVM. This video will walk you through what Neon EVM is and how you can take all the advantages of Solana's network by deploying your Ethereum based decentralized applications on neon EVM. So basically, let's see what Neon EvM is. Neon EVM is a fully compatible Ethereum environment solution that is built on the Solana blockchain. The platform allows developers to deploy ethereum based decentralized applications without undertaking any reconfiguration in their code base. So what? Basically Neon EVM is a smart contract which can understand and execute EVM bytecodes inside Solana's virtual machine. And also, Neon EVM allows all the solidity and VYPR based decentralized applications to take the advantages of Solana's networks like low fees, high transaction speed, and parallel transaction execution, which makes Neon EVM the first parallelized EVM on Solana.
00:01:32.154 - 00:02:57.364, Speaker A: The developers also can use any development framework like hard hat, foundry remix, and any other framework that is available on the Ethereum environment. So let's first see how we can get the endpoints RPC endpoints for neon. So we need to go to the chain list site then search for neon EVM since we will be working with Devnet. So we will include include testnets and as you can see you will get this neon EVM devnet. So this is the RPC you need to add to your metamask account. You can add it from here. So this is basically my account which is already added neon evm devnet.
00:02:57.364 - 00:03:49.364, Speaker A: So yeah, after that we have a faucet which you can use for development. It gives like hundred tokens at a time. So we can just send tokens to the connected metamask wallet. And as you can see my balance changed to like more more hundred accounts now added to it. This is what neon faucet is. Then let's see, by transferring some tokens from one of one account to another account. So this is my neon account and this is my another neon account which has zero neons.
00:03:49.364 - 00:05:00.984, Speaker A: So let's transfer some neons from this account to the second account. Let's send 100 neons. Let's wait for the confirmation. Yep, says it's confirmed. You can check it on the neon scan website that your transaction has been confirmed. Yeah, so you can see 100 neons has been transferred from this account to this account and we can verify it here. Now you can see the account two has 100 neons.
00:05:00.984 - 00:06:00.636, Speaker A: So this is how the transfer works. So now let's see, we have a native bridge from neon to Solana and vice versa. So this bridge is basically for all the native Solana tokens which can be also used as an ERC 20 for SPL token wrapper on neon EVM. So we need to connect metamask wallet. You can see the metamask wallet has been connected for Solana. You need to have any of your Solana wallets like Phantom or Solflare. So I have phantom installed.
00:06:00.636 - 00:07:02.684, Speaker A: So I will use Phantom connect my account. So this is my phantom account which has ten Solana. Now we will transfer some neons from neon EVM to the Solana network. Let's transfer 20 neons to Solana. This will be the transaction fee because we are using this account for the first time on transaction. So the transaction fees will be a little bit more because there will be an account creation on the Solana side, the Ethereum wallet. So this is why the first time transaction fee is a bit more.
00:07:02.684 - 00:08:24.894, Speaker A: So let's transfer. Yeah, the transfer has been complete and we can see in the explorer this is the 20 neon. So we can check it in the phantom wallet. Yes, this is the neon token which has transferred from Ethereum wallet to the phantom wallet on Solana. So this is how Neon pass works. Now let's show you a very quick example of how we can deploy an ERC 20 for SPL token on neon EVM. And we need to know two things for this.
00:08:24.894 - 00:09:30.048, Speaker A: So the factory contracts with which we can create an ERC 20 for SPL token it have two variants. One is ERc 20 for spl and another is ERc 20 for spl min. Table so these two factory contracts offers ERC 20 interface for SPL tokens on Solana and allows to access the SPL tokens on Solana from Neon EVM. So ERC 24 SPl factory basically allows you to deploy an ERC 20 wrapper token of an already existing SPL token. So the SPL token which is already existing on the Solana network. If you want to access that token from Neon EVM, you need to create a wrapper token on Neon EVM through the ERC 24 SPL interface. The another one which is neon EVM variant.
00:09:30.048 - 00:10:48.804, Speaker A: Another variant for ERC 24 SPL is ERC 24 SPL mintable, which allows you to deploy an ERC 20 wrapper token as well as its corresponding SPL token on Solana means you can create a SPL token from the ERC 20 interface, which will be a new SPL token on Solana so basically it is an extended version of ERC 20 for SPL which has a couple of more functions like minting of SPL tokens from Neon AVM. So this is basically the factory contract which you can see on the screen. So this is the ERC 24 SPL contract. So here you will find a very interesting thing. So you can see these two lines, line eight and line nine. These are basically pre compiles. So Neon EVM has precompiles that can interact natively with Solana SPL program and metaplex program.
00:10:48.804 - 00:12:23.470, Speaker A: So basically what is, what it does is that these are pre compiles which can read SPL token data from the Solana account and from the metaplex accounts respectively. This is the ERC 20 for SPL contract where you can see we have wrapped all the ERC 20 based functions with the pre compiles. And we have another variant which is the ERC 20 for SPL mintable which will allow you to mint a new SPL token from neon EVM. This main function is responsible for this. So these are the basically two factory contracts for deployment of ERC 24 SPL. We have this harder config file where we have the neon Devnet and neon mainnet configurations. Here you can see we have a private key owner which will be the deployer account.
00:12:23.470 - 00:13:02.374, Speaker A: And the deployer account is mentioned. The private key is mentioned in the environment file here. So you, you can add your own private key to this environment file and then import this private key from the environment file. In the harder configuration. Then we have a deploy script. This deploy script is basically deploying the factory contract. You can see here we can display the deployer address, then we will get the factory contract.
00:13:02.374 - 00:14:45.514, Speaker A: Then we will deploy it. Our token's name is hack token symbol is HTK, decimals is nine and with the deployer address. So after that we will get the contract address ERC 20 contract address for the token on neon EVM. Then we will mint 100 hack tokens to the deployer account with the mint function. So this will also mint this token 100 amounts of token to the SPL token which will the hack token on Solana network. And we can find this Solana hack token address with this find mint account function. So let's deploy the contract with the hard hat command script is deploy script is under the scripts folder and we will mention the network as Neon devnet which is basically this already configured in the hard earth.
00:14:45.514 - 00:16:06.334, Speaker A: Let's run this. Yeah, so here you can see we have the contract address which is the token contract address on Neon EVM 100 tokens has been minted to the deployer address and the minted token Solana account address is mentioned here. So let's check all these things in the explorers. So let's take this contract address and this is the neon scan the explorer. Let's go to Devnet and then search for this account. As you can see we can found this contract address. You can see this token's name is hack token.
00:16:06.334 - 00:17:21.224, Speaker A: The contract has been created as you can see here we can check the token, we can see the token here and we can see the transfer. So this is the transaction hash. We have transferred 100 tokens to the deployer address and this and this is the fee for the transaction. So let's now check the same thing on Sol scan. So let's copy this address and check on Sol scan. So this is for the Solana Explorer. You just set the blockchain to Devnet and search for this contract address.
00:17:21.224 - 00:18:53.914, Speaker A: See we can see this is the token contract which is the hack token. This is the authority which is the deployer address contract. Let's go here and check. So as I have mentioned that the Ethereum account from which we transferred the tokens for that particular account there will be a corresponding Solana account creation. So when we were transferring the 100 tokens to the deployer account, so the deployer account has this corresponding Solana account on the Solana blockchain. And we can see we have hundred tokens here you can check the token balance which is hundred. This is basically how you can mint SPl token from the neon from Neon EVM using the SPL ERC 20 for SPL mintable interface.
00:18:53.914 - 00:20:29.914, Speaker A: So now for the hackathon we have two use cases. So you can use like you can create a decentralized application that can utilize like microtransactions that utilizes cheap transaction cost. And also like you can create a DAP with some existing DeFi primitives like Uniswap or any other DeFi primitive you like which will be deployed on neon natively with any unique features, any innovative features you want to. And another one is the neon using the neon transfer SDK. So basically you have to deploy an ERC 20 for SPL token which will be a mintable token on the Solana blockchain. Like you will have to use the ERC 20 for mintable and also write a script or develop a tool which can transfers the token from Neon EVM to Solana and vice versa like what neon pass does. So it will be a similar thing and you will have to write the script or tool for it.
00:20:29.914 - 00:20:53.794, Speaker A: And all the required links and all the required documentation links are mentioned in this page which you can go through and you can build your app. So yeah, have fun building with neon evm. See you guys later on. Thank you.
