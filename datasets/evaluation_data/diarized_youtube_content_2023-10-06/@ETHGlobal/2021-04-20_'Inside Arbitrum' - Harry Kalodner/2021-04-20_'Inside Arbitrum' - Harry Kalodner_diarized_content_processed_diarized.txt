00:00:00.170 - 00:00:21.870, Speaker A: Super excited to introduce our next talk and that is Harry from Arbitrarium. And Harry is going to talk about the internals of how Arbitrum works and how they're thinking about the optimistic world strategy. So Harry, I'll ask you to turn on your video and kick us off with your presentation. And welcome to the live stream.
00:00:23.090 - 00:00:51.900, Speaker B: Awesome. Thanks for having me. Really excited to be here. Really excited to have a whole ETH global hackathon devoted to scaling. It was super fun getting to see Patrick's talk and Carl's talk and yeah, really excited to be here. Let me just share some slides. Awesome.
00:00:51.900 - 00:01:41.870, Speaker B: So, yeah, so I'm going to talk about Arbitrum rollup, which is our solution to scaling. My name is Harry Klodner. I'm co founder and CTO of Off Chain Labs, where we're developing Arbitrum. And I want to start out by just talking about why Arbitrum is awesome and kind of why you should be excited about the future of scaling. Transactions are cheap. I think that's probably the biggest thing I think people get excited about, especially if you're watching the gas prices as they've been on Ethereum mainnet recently. You start to really wish you had some cheaper transactions and they're cheap and it doesn't even rely, it doesn't rely on any expensive cryptography.
00:01:41.870 - 00:02:25.690, Speaker B: There's nothing kind of expensive to run on Ethereum at all. We're moving things into layer two and it really feels like magic. The system is fully trustless, it's permissionless and the security is derived from Ethereum. So you're not kind of trusting a security to some set of nodes that are kind of different from the regular old machines that are validating Ethereum. It's all still in that same Ethereum security model. Now Patrick was totally accurate when he said it's almost the same as Ethereum. A lot of times we kind of gloss over some of those precise differences just because it gets into very nitty gritty details in terms of what matters.
00:02:25.690 - 00:03:15.594, Speaker B: It's the same where it matters. And then particularly for Arbitrum, kind of one thing that I think is a really big deal is kind of full EVM support and really easy porting. That kind of same contract that you can deploy to Ethereum, you can also deploy on Arbitrum using the exact same tool chain, whatever version of Solidity you want, viper, whatever you're using. You can do the same thing on Arbitrum, which is pretty useful. So the other cool thing is that we have a testnet. We've now had a testnet out for, I think about six months now. We actually about a few weeks ago launched our kind of testnet which is a release candidate for our Main net as we kind of chug along towards Mainnet, which is obviously where we want to be.
00:03:15.594 - 00:03:48.562, Speaker B: And I think already in the last three weeks I just looked this up right beforehand, there have been 174,000 transactions just over the last three weeks from 64,000 different senders. So it's pretty cool and it's kind of open. Anybody can use it, deploy their contracts, whatever you'd like to do with it. So kind of what is Arbitrum? Well, so we'll start from the big picture. There's kind of a queue of transactions. So if you look at that and kind of squint, it kind of looks like blocks. So similarly to Ethereum, we have our transactions.
00:03:48.562 - 00:04:25.006, Speaker B: They're in an order. We have some chain state and the state is what you get when you evaluate the transactions. And then these transactions have some effects and that's kind of the mile high view of the system. And then obviously we can dig down a little more and see what some of those details are. But there's kind of a bunch of initial questions that sort of pop out when you're thinking about this. Sort of when you're looking at that sort of high level design, who keeps track of this information? There's a bunch of different data there. There are the transactions, there's the state, there are the outputs.
00:04:25.006 - 00:05:32.310, Speaker B: Where is that? How do we ensure that the state's actually correct and the outputs are correct? I can say, hey, trust me, it's right. But can you be sure of that? Where do users come in? So how do you actually get your transaction onto the chain? And how do we interoperate with Ethereum? So is this thing just kind of floating on the outside? Is it connected and kind of it is connected. How do we actually sort of navigate between the Ethereum chain and the Arbitrum chain? So just to kind of start off, I want to talk about the roll up protocol itself which is basically how this thing is connected to Ethereum and how it's secured. And so first of all, I'm going to answer that first question which is where are the transactions? Where is the inbox? And the answer is it's on Ethereum. That Ethereum is responsible for data availability like has come up in the kind of previous couple of talks. Whereas execution and storage don't happen on Ethereum. They're pushed off chain, but they still need to be correct because we want to be as close to Ethereum security as possible.
00:05:32.310 - 00:06:05.406, Speaker B: Which means we need to know that the execution and storage of the L2 system are correct. And the way that Arbitrum achieves this as an optimistic roll up is through fraud proofs where a claim is made on chain and then anyone in the world can verify that claim and challenge it if it's wrong. And I'm going to go into detail as to how that works. And what this means is that the entire chain is secured by the Ethereum blockchain. So here's our roll up protocol. We have blocks. We have a bunch of green check marks.
00:06:05.406 - 00:06:37.820, Speaker B: Those are the blocks that everybody agrees on. They've been verified and we all agree they're correct. But now we have Alice. Alice is creating new blocks and she's created this block 93 and it's proposed. So she's made a claim, she's put down a bond and she says hey, this is the correct new state. But Bob comes along and he verifies Alice's claim and he says wait a second, that's wrong. Now Bob is anybody, bob could be me, Bob could be you.
00:06:37.820 - 00:07:18.978, Speaker B: There's no permissioning here. And so this could be anybody running a node who's willing to put down a stake. And so Bob then makes a counterclaim and he says well, actually the state after 92 should be this. And now we have a dispute which we need to settle somehow. In some cases this kind of looks like a fork but Ethereum needs to resolve it because there can only be one true roll up chain and so we can't really allow this fork to go on. And so the question then is how do we prove fraud? How do we actually settle this dispute? And so in order to talk about that, I want to just sort of quickly restate the setup here, which is that all the inputs to the chain are posted on Ethereum. And basically what happens from those inputs is deterministic.
00:07:18.978 - 00:08:22.330, Speaker B: And so if I'm honest and I'm looking at those inputs, I know what's correct. And then we have some validators and those validators have put down bonds and they've made claims about that execution. So they both have some skin in the game and they're kind of liable to lose that bond if they've made an incorrect claim and anybody can do this. So that's kind of our setup. And then the question is so what happens now that there's kind of two conflicting claims? Well, the answer for Arbitrum is we use an interactive challenge process and so we narrow down the dispute into smaller and smaller pieces and then run a small unit of dispute on chain so that Ethereum can be the final judge of what's correct and what's incorrect. So what does that look like? So what we do is a process called Interactive Bisection where essentially you can think about the entire initial claim was made and it said, hey, if you run these 10,000 transactions the end result is X. Well, and then I come along and I say wait, but X is wrong.
00:08:22.330 - 00:09:28.420, Speaker B: So you can come back and say, well, if I ran half of those transactions the result would be Y. Now at that point either the first half of the transactions is wrong, in which case I know the error was introduced somewhere in there or it's correct, in which case the second half must be wrong if the whole thing was wrong. And so we continue along this process down and down until we get down to not a single transaction but actually a single step of execution which is then replayed on Ethereum. And so we've narrowed down this dispute over huge amounts of gas and huge amounts of computation into a very, very limited small piece that has to be verified by Ethereum and with the guarantee basically that if you're honest you can engage in this process and you know you'll win. And this is why basically and this is how we achieve this property that any honest validator can make sure that the chain executes correctly. And interactive proving is awesome. There are kind of various ways you can go about this process of kind of in a roll up knowing that the state transition is correct.
00:09:28.420 - 00:10:12.174, Speaker B: There's a lot of awesome stuff going on in the ZK realm. There are various ideas in the optimistic realm. And my personal favorite I'm a little biased here but my personal favorite is the way we do things which is interactive proving. It's hyper efficient. In the optimistic case I can just put down a single tiny little claim about vast amounts of computation and then if there's no challenge it will just kind of be accepted by everyone. And so I can kind of bypass actually making claims about a lot of kind of about each individual transaction by just making one big claim. It's also minimal in the cost of disputes in L One.
00:10:12.174 - 00:11:04.210, Speaker B: So it's kind of super optimized in the happy case. It's also super optimized in the unhappy case where we minimize how much work Ethereum has to do in order to verify whether there was fraud or not by cutting down in these simple transactions into a smaller and smaller segment that's been challenged and then resolving just this relatively simple execution on chain. And further from that, the fact that we just need to run a single step means that the actual complexity of the contracts and transactions in layer two doesn't get affected by the fraud process at all. So essentially we could have transactions. There are other reasons why you wouldn't want to have transactions that kind of use 100 billion gas or contract that's a gigabyte in size. Don't get me wrong. These are not unlimited.
00:11:04.210 - 00:12:10.274, Speaker B: But there aren't restrictions in place from the fraud proof mechanism which means we can escape out of the limitations that are in place in Ethereum and have the L two actually have kind of higher capacity for gas in a single transaction higher capacity for the size of contracts than Ethereum has. And for anybody who's developed on Ethereum for a while you almost certainly have hit that really annoying thing in solidity where your contract exceeds the size limit and kind of having L2 make that situation better is a pretty big win. And finally, implementation and fraud proof flexibility. This is kind of a bit more of a technical point but essentially the Arbitrum chain is kind of secured by Ethereum but it can make its own choices because we only need to be able to emulate a single step of execution. We can change around opcodes as much as we want. We can kind of alter the virtual machine. And so basically this means that there's a lot of experimentation that can be done with kind of the initial version of arbitrary mainnet.
00:12:10.274 - 00:13:06.934, Speaker B: We're kind of staying pretty close to Ethereum because those are the tried and trued design choices that have done us well for a lot of years now. But the capability is there to really experiment, which is awesome. So now I want to kind of shift gears a little bit. We've talked about the roll up and how it's secure, but what does this actually look like to a user? And so we've been kind of like looking at basically what happens at layer one on Ethereum. But now we're going to talk a little bit more about what the layer two chain actually is. And so the typical experience is kind of from a user perspective feels very much like Ethereum or like a regular side chain where there's a network you connect to, you send transactions and you get receipts back and you deploy contracts and you interact with those contracts. It all just kind of feels like Ethereum, which is pretty cool because behind the scenes there's a lot of magic going on.
00:13:06.934 - 00:14:26.354, Speaker B: The fact that you can deploy your contracts as the exact same bytecode as you would deploy to Ethereum deployed on Arbitrum which means that you can use whatever version of Solidity you want, whatever version of Viper you want, any kind of weird EVM language I've never even heard of. The fact that Ethereum Tooling just works is pretty magic and the way we achieve that is over here on the right side and I'm going to talk about that a little bit more later. But is this magic layer called ARBOs which is kind of the L2 operating system or runtime and actually does sort of the translation and does all of the bookkeeping for the layer two chain. And so you can kind of think of it as doing a lot of the things that an Ethereum node does except essentially kind of trustlessly as part of the L2 chain itself as opposed to being part of the client. And so that user experience this is really just reiterating what I was saying. We have the standard endpoint which means the chain is compatible out of the box with MetaMask, with hard hat, with whatever kind of the tooling is that you're used to. And we're kind of working really hard on kind of expanding out and supporting as much Ethereum Tooling as we possibly can because one of the key things about actually successfully getting people into the L2 ecosystem is not forcing them to learn a lot of new stuff.
00:14:26.354 - 00:14:54.026, Speaker B: People are busy. People are busy and they've already spent a lot of time learning Ethereum Tooling. There's already been a huge amount of effort to improve the Ethereum ecosystem and Tooling and we want to take advantage of that. That's kind of a really big deal, I think. And so user experience then is you have a node. Maybe it's a hosted node, maybe it's a node that you're running on your own computer. Either way, nodes always know the correct state.
00:14:54.026 - 00:15:37.490, Speaker B: And so kind of there was this whole validator protocol I was talking about before. You don't really need to worry too much about that because the state is deterministic from the inputs. So your node, without even paying much attention to what the validators are doing, will know the correct state. And so you can just kind of ignore any sort of fraud or challenges in the normal case because you know what the correct state is and there's no need to kind of introduce any trust into the validators here. And you can use all of the same languages and tooling you're used to. And so just to give a little more detail into the thing I mentioned earlier, the secret sauce ARBOs. So ARBOs is the l Two operating system of Arbitra.
00:15:37.490 - 00:16:38.890, Speaker B: It provides a lot of really cool features and we're going to be adding a lot more over time. But just off the bat, this is where we get our generalized and safe L2 to L One and L One to L2 transaction bridging which is also kind of lets you really easily and kind of in a really simple way port tokens. Between the two chains. We get cool things like transaction batching and the ability to handle BLS signatures at the chain level rather than having to use smart contracts, which is going to be really valuable as time goes on for saving costs. Because it lets you cut down on that precious call data because it lets you cut down on how much resources are needed on Ethereum in order to put your transaction into the roll up. ARBOs is where we get our EVM compatibility at the bytecode level. There's this really cool thing which is basically when you deploy your contract, it's actually compiled or transpiled, I should say, because it's very simple, into kind of your L2 contract.
00:16:38.890 - 00:17:36.174, Speaker B: And so basically that's done in the L2 system, which means that you don't need to worry about it on your computer. It'll happen automatically and it'll happen securely because it happens kind of as part of the core system rather than sort of an auxiliary tool that you have to run. And this whole system is easily extensible with new transaction types and features. And so kind of over time, all of the cool ideas that are developed in the context of Ethereum and in the context of Arbitrum as time goes on will be really easy to incorporate into the system in kind of a secure and kind of pretty rapid way. And so that kind of is going to really spur a lot of exciting development, which I can't wait to see. All right, so I think now we've been through enough of the system that we can kind of put these various parts back together. And so if you look at this diagram, I've probably touched on most of really all the components here.
00:17:36.174 - 00:18:13.290, Speaker B: But if you squint a little and zoom in, you'll see a diagram with a bit more information in it. So this is kind of a little bit more realistic. That first diagram is a bit of a simplification. But what this looks like is this is basically the fusion of the L One system that I talked about and the L2 system I talked about, where we have what's going on kind of off chain. And here kind of off chain really means like just the actual hardware and software that people are running. We have the Layer One system running on Ethereum, which is the roll up protocol, which is the inbox. That's where the validators are staking and getting into challenges or getting slashed.
00:18:13.290 - 00:19:17.600, Speaker B: And then we have kind of ARBOs and kind of the EVM compatibility layer where your smart contracts are being deployed to. And this is kind of how all the different parts come together in a really neat so kind of little bit of background basically just on who we are. As I said, my name is Harry. Also I have two co founders at off chain labs, ed and Steven. All of us will be around on Discord, both the ETH Global Discord as well as the Arbitrum Discord and would love to talk about any cool scaling projects, ethereum stuff, basically anything. We've been in this space for a lot of years now. Ed is a professor, well, has been full time at the company for a while, but is a Princeton professor who wrote along with Stephen, wrote the textbook on blockchains a lot of years ago.
00:19:17.600 - 00:20:13.226, Speaker B: And we started out with Arbitrum as a research paper, actually, that we wrote together before deciding that, hey, this could actually be practical and spinning it out into a real applied project, which is how we got to where we are today. On the verge of actually kind of having something ready to scale Ethereum and solve a lot of the scaling problems that it's been happening, that it's been having. So at the hackathon we have a lot of cool prizes. I think some of this if you saw the video earlier, you're going to hear some repetition because this is a slide I used in the promo video. But we have four different prizes totaling $12,000, which we're really excited for teams to win. That kind of bridge a lot of different areas related to scalability. Some for just using Arbitrum and deploying contracts and kind of taking advantage of the scaling.
00:20:13.226 - 00:21:15.940, Speaker B: It provides some more wonky stuff like kind of working specifically towards cost chain interoperability or kind of integrating with the Layer One protocol in interesting ways. And kind of one that I'm particularly excited about is improving tooling. So like for example and this one is kind of near and dear to my heart. There's a lot of work to do in helping kind of understand and display what it means to have multiple chains. People are kind of there's already some work to this effect, but still, most of the kind of wallets and kind of explorers and all of the kind of software around Blockchains is really focused on kind of a particular chain. Whereas now we're really migrating over to this world where there's the ethereum chain, there's the Arbitrum chain, there's the optimistic ethereum chain, there's the ZK sync chain, there's the loop ring chain, there's the matic chain, and the tooling really needs to catch up. And so that's one area that we're really excited about in particular.
00:21:15.940 - 00:21:58.158, Speaker B: And so, yeah, just in terms of kind of like next steps and if you found this interesting, kind of what you should do next. So Fred Lax and Daniel Goldman are giving a workshop on the practical matter of building on Arbitrum and kind of what there is to know. It's going to be pretty short because it's pretty easy, but there is some pretty cool stuff in there, so you should get excited for that. And that's on Monday. Also. We're on the ETH Global Discord, but probably a lot more of the team and it will be a little more responsive on the off chain Labs Discord. So just if you visit Arbitrum IO, you'll get the link to our Discord.
00:21:58.158 - 00:22:41.486, Speaker B: It's worth joining. It's a lot of fun. And then there's some pretty nice developer documentation at Developer Offchainlabs.com. And in particular there's a section called Inside Arbitrum, which hence where I got the title of this talk from, which goes into kind of way more detail than you could possibly imagine into kind of all of the different parts of the system. This talk was basically kind of a sneak peek at some of the content in there. And so kind of if you're really interested in kind of roll ups and Arbitrum and how all of this stuff works, I would highly recommend going and checking that out. I think I'm coming in a little under time, but I think I basically covered it.
00:22:41.486 - 00:22:44.490, Speaker B: So thanks for listening and excited for the panel.
