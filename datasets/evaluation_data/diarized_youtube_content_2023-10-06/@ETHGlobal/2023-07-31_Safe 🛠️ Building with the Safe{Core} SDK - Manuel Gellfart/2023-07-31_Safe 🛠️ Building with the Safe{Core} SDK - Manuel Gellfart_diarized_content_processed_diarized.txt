00:00:07.450 - 00:00:38.440, Speaker A: Welcome to my talk. If you've been here earlier to at 330 at the talk it will be the exact same talk that was just an issue with the recording. So yeah, we are rerunning the talk. I'm manu from safe. I'm working at Safe Wallet, so working as a front end developer for the wallet interface. And this talk will be mainly about building with Safe quarzdk but we'll also shortly look into the Safe protocol kit. Okay, sorry.
00:00:38.440 - 00:01:12.206, Speaker A: Yeah, let's quickly talk about Safe. Like most of you probably know Safe already. If you never heard of Safe, you've probably heard of nosis Safe. It's an old school multisig wallet which launched in 2018 already in the first version. But it's way more than just a multisig wallet. Basically we are trying to push the account abstraction narrative because Safe is also an ecosystem and a protocol. So that means there's multiple DApps already building on Safe or using Safe under the hood for instance.
00:01:12.206 - 00:01:48.270, Speaker A: WorldCoin is also here. Like they're using safe. Every WorldCoin user is also a Safe user, so to say. And this talk will be about safe course decay. Safe Course Decay, simply put, is a TypeScript SDK so library just with helpful wrappers for better developer experience when you build on Safe or when you try to integrate with Safe contracts. Yeah, talking about Safe, we restructured the company or the project a little bit. So we split into two groups.
00:01:48.270 - 00:02:19.654, Speaker A: SafeCore we will talk about it more in this talk. And safe wallet. That's where I work at Safe. Safe Wallet is mainly responsible for maintaining the interfaces. That means the web wallet or the web interface for the wallet and also the Android and the iOS app displayed here in the screenshots. While SafeCore is responsible also for multiple things, you can split it into like three groups. The first is the SafeCore protocol.
00:02:19.654 - 00:03:07.000, Speaker A: We will talk a bit more about it in a bit. It's basically the smart contracts powering Safe. Then the SafeCore API, that's mainly the transaction service. It's called some other services, but mainly It's services which for instance index save transactions, which index created Safes and which offer an API to quickly query which Safes are deployed. What are the setups for a Safe so you don't have to fetch all the data on chain all the time and then the SafeCore account abstraction SDK? Yeah, I'd already mentioned it. It's like this TypeScript SDK just wrapper around the Safe smart contracts, wrapper around some account abstraction kits. We will talk about it a little bit.
00:03:07.000 - 00:03:31.674, Speaker A: Let's start with the SafeCore protocol. It's quite new. Previously we also used to call SafeCore Protocol or Safe Protocol the set of smart contracts which are right now deployed in prod. But we are pushing for a new SafeCore protocol soon. Right now it's in an alpha state. It was announced yesterday at ECC, the first time in public. And it's basically this architecture.
00:03:31.674 - 00:04:13.030, Speaker A: So it's a new framework or a new protocol around smart accounts. And the idea is that it's split between accounts, registries and integrations. Where accounts are smart accounts at the beginning it will be safe, supported. But the idea is that also other smart account developers or other smart account wallets could plug into this protocol and then also use the same plugins and registries. So it's not just bound to Safe. What are registries? It's quite simple, registries is just a registry where we have audited or sets of audited contracts. These contracts are these integrations.
00:04:13.030 - 00:05:24.446, Speaker A: So it's always a bit tricky to know okay, which of these plugins can I trust? Right, and that's why we need registries but there could also be multiple registries, it could be by multiple DAOs, by multiple protocols just so that you know who audited it and who you can trust. For integrations plugins are very similar to modules which already exist in Safe. So it enhances a safe by some new functionality which isn't there in the core contract or in the native contracts. Hooks hook in to the transaction lifecycle. That means there's like callbacks for lifecycle events for instance like pre execution or post execution and also some other events and you can implement what should happen or what should get checked there. Right, so you could build some security feature where you revert a transaction if some condition is not met, post execution or something similar. Yeah, functional handlers and signature verifiers is what currently is implemented in the fallback handlers in the compatibility fallback handler it's called in the current Safe contract.
00:05:24.446 - 00:06:39.050, Speaker A: So for instance, a signature verifier, that's where the 1271 signature check is implemented in. So if you want to build something more sophisticated in the signature check, for instance, you could use it for DEXes, for, like, smart orders. You could check some oracle if some price conditions are met, and only then you could say that a signature is valid, and otherwise the one inch or the cowswap order would not be able to get executed or whatever other decks. Sorry, I missed it. What is obtained by the registry? Registry of tenFar comcast of the integration store. The registry basically registers these plugins hooks, et cetera, so that you have like a source where you can check which plugins exist and the plugins also come with some metadata on chain like how's the plugin called, which version is it? So basically it's a way to find and discover these plugins also while at the same time bringing security because you could have a registry which is quite strict about that. Every plugin needs to be audited and whatever while another registry might be less strict but in a way if you trust the registry or if you know a registry with high security standards, it's also a security feature but it's also for discoverability of plugins.
00:06:39.050 - 00:07:17.894, Speaker A: I will show a quick demo to a very quick demo. Yeah, if you want to more information, we updated the docs today. So if you checked the Save docs yesterday, please check them again. Also there's some other changes because we just deployed a new version of the Con Abstraction kit and yeah, for the demo I will quickly switch to a new browser tab, make it a bit bigger, I hope you can see. Yeah, basically the demo which is also linked on the docs. So you can try it yourself. It's basically application, it's deployed on a GitHub page also.
00:07:17.894 - 00:07:45.086, Speaker A: Or you can run it locally and you can add it as a custom safe app to your safe. Important. As I mentioned, it's alpha. So it's only on Gurley right now because we don't want a false sense of readiness for this feature. Right. So we don't want people to actually use it with actual funds because it's still in a very alpha stage. So, yeah, you can edit on a Gerdisafe and then you can open it, you can see the available plugins.
00:07:45.086 - 00:08:23.120, Speaker A: So this list of plugins that comes from one test implemented registry. So that's why I meant it helps for exploring plugins, for instance, or hooks for instance. And here you could now enable some of these sample plugins. Or like there's also an example for a relay plugin which relays transactions through gelato, paying the fee from the safe and it could also pay in ESA 20 tokens. I will not show them more detail because the talk should be more about the Con Abstraction kit. But I want to mention it because we have bounties about this safe core protocol. So if you have further questions, please come to our booth or use our discord and then we can talk about them.
00:08:23.120 - 00:09:02.330, Speaker A: Yeah, or check out the demo yourself and then you can also try to relay with it. Let's go back to the slideshow. Okay, let's talk about the account abstraction SDK. So I mentioned it's a TypeScript library and it consists of multiple kits and every kit has multiple packs which are kind of the implementations. So the kit is kind of the interface for a certain feature while the packs can there can be multiple for certain integrations with it. So the Auth kit is the first, as the name says it's for authentication. That means it's a kit to create an ethereum address which then becomes a signer of a safe.
00:09:02.330 - 00:09:57.190, Speaker A: So currently you can, for instance, use a social account or your Google account or your Apple ID to create a signer using MPC through a provider and use that as a Safe signer for deployed safe. Then the protocol kit, like the protocol again are the Safe contracts. So this is a wrapper around the Safe contracts. Like you need to give it a signer and then you can sign transactions, send transactions or deploy saves also to this kit. Yeah, or for instance, you could also deploy a save and already do a transaction in a batch with it. Then the Onram kit as a name says, it's quite simple you can buy crypto with Fiat and put it into and fund your safe address through it. And the Relay kit I already also mentioned the provider like Gelato.
00:09:57.190 - 00:11:04.130, Speaker A: The idea is that you don't pay gas from your EOA or from the executor of the transaction or from the signer of your safe but you for instance could pay directly from your safe or through something like a third party provider which offers to pay the gas for you. Here are some examples of the current existing packs we plan to also extend these packs by new providers as we go. So for the offkit currently we have the web3 offkit. It uses web3 auth IO to create like a signer using NPC from your social account. Like I mentioned, the Stripe pack it only works in the states currently because Stripe is only available in the states for on ramping but that works and the Monarium pack is quite new. I don't know if you heard of Monarium but they are in Europe and they use a euro stablecoin and you can on ramp to a bank account which is then connected to your safe. And the Gelato relay pack uses Gelato to relay you can pay directly from your safe with it or you can also pay through one balance.
00:11:04.130 - 00:11:52.030, Speaker A: Yeah, we also plan to add more kits in the future. Like right now we're looking into recovery kits or a multi chain kit. Like a recovery kit is, as the name says, to recover the safe if you lost access to a signer, for instance, or to add a custodian. If you use a custodian service, then it's like half not self custodian anymore. But yeah. And the MultiChain kit, we're also looking into supporting MultiChain better for Safes because right now, Save is only deployed on one address always and it's a bit tricky to interact with multiple safes on multiple networks. And of course, as the future will tell, we will also have more topics which are important, and add more kits to this SDK.
00:11:52.030 - 00:12:20.490, Speaker A: Yeah, the SDK is deployed or is available on GitHub and on NPM. It's called Safe Core SDK from Save Global. And it consists of these mentioned packages, like, here's also another list of the packages. And the only one I didn't cover before is the Save Core SDK types. The Save Core SDK types are basically just like some TypeScript types which are used across the other kit so we don't have to copy paste them everywhere. So just some types. Yeah.
00:12:20.490 - 00:12:37.590, Speaker A: Let's also do a quick demo of the kit. Like, we have a demo app. You can also try it yourself. It's a small react app. Hope it's big enough. Zoom in. A yeah.
00:12:37.590 - 00:13:03.334, Speaker A: In this demo you can use some test network, for instance, like Mumbai. You can start the demo I already did before. I hope the WiFi will work properly. And you can try out the different kits. Like this is the Auth kit. So this is the Web Three Auth model which opens and you can say you want to continue with your Google account, for instance. Then you log in with your Google account, it will create the signer key from it and the signer address and takes a bit.
00:13:03.334 - 00:13:30.366, Speaker A: Okay, here now we see the owner ID. That's the signer connected to the Safe as an owner. That's the ID generated with Web Three Auth and the Safe account is deployed with that owner. And we also see the address here in this small demo app. It also shows like some code snippets on how this is built. I mean, it's not the exact code, but you can also check the demos, also open source to see the exact code. But this is basically to explain how they work.
00:13:30.366 - 00:13:56.150, Speaker A: So here we import the Web Three house kit or two objects from the Web Three house kit. Then we need a bunch of options. They come from Web Three Also or they required on Web Three also site, like the client ID. Like you need to register as a customer. Then you get a Client ID, you have to put it here. Or you also can configure which chains should be used. And then some UI options which are not super important and self explanatory.
00:13:56.150 - 00:14:29.966, Speaker A: Yeah, and some other small options for Web 3 hours. And then in the end, it's always a similar structure. Like as I said, the interface is basically always the kit and the packs are the implementations. So here we initiate the Web Three Osmodel pack and then we initialize the kit with this pack. And then we have methods like sign in, sign out, get provider, et cetera. I can use those to interact with the Save them. Next is the onram kit.
00:14:29.966 - 00:15:11.310, Speaker A: I can sadly not show it because right now we only integrated stripe in this demo app because Minarium just launched, I think last week. But basically if you click on it, we can see the model. But it won't work because we're in Europe right now. If you want to try this, there will also be a link if your Safe has no funds yet to the Mumbai Faucet. So you could also fund it with the Mumbai Faucet and then continue in the demo here it's similar, like how to use shows you a small Snippet. So there's some variables required on stripe's end, like the stripe public key, et cetera. Some session data also which contains the chain supported and which currency to use, et cetera.
00:15:11.310 - 00:15:47.782, Speaker A: And then again you create like you initialize here the kit with the pack and then you have functions which you can use like save onram open will open the stripe onboarding model. Yeah. Next the relay kit. Also a small demo. I will already click because it takes a bit. But all that happens if you click is the Web Three hour signer will be used to sign a transaction which transfers zero one matic from the safe to the safe itself. And it relays the transaction cost from the safe.
00:15:47.782 - 00:16:10.980, Speaker A: So as we saw here, it was just one click, I didn't need to sign a MetaMask or anything else. And the transaction is being executed on chain. So this kind of shows the power also of account abstraction. Yeah, as we see it's success. So we could check the transaction if it's included here for the gunskin is a bit slow. You have to trust me. Just try it yourself.
00:16:10.980 - 00:16:56.266, Speaker A: Okay, let's continue with the slides. I talk about the hackathon. Like this year we have like $10,000 in hackathon bounties for the Safe Foundation and they're split between these two projects I presented. Like if you want to be eligible for the bounties, you have to build either on top of the SafeCore protocol or the SafeCore Account Abstraction SDK. The bounties have the same tiers on both projects, but it's separate bounties for each project. So you can decide on what you want to build on. If you want to build for Safe, also important for the Safeco protocol, it's the new protocol where I showed the diagram where we updated the docs for it's, not the old smart contracts.
00:16:56.266 - 00:17:32.830, Speaker A: Like we would prefer if you try out the new protocol, build a plugin, build a hook, be creative about what you could build with those. Or you can also build a registry, or alternatively, you could even build a new small wallet implementation which uses this new protocol to show that also other smart accounts could be used and not just Safes. Yeah. If you have any questions about this, please come to the booth. We'll be there all the time. Or try to be there as much as possible to answer your questions. And we also have a discord partner channel like Partner Safe on the East Global Discord.
00:17:32.830 - 00:18:24.750, Speaker A: Yeah. Here's some more links, like links to our docs, to our own Discord, our forum and our Twitter. If you want to participate in some discussions around these topics, or if you want to just check out the docs or you just need some help. We also have a small Hackathon Success Guide, which we try to always maintain between our hackathons, which has a lot of learning materials, has infos about past workshops or past hackathons. So you see which teams won in the previous hackathons, what did they build? Just to get some inspiration, but also to know what not exactly to build, because it would be good if it's something new and not just an old project revamped. Yeah, this QR code leads to the notion page with this Hackathon Success Guide if you want to scan it. Otherwise you also have this QR code at the booth.
00:18:24.750 - 00:18:53.270, Speaker A: Yeah, I will leave it on this page. This was the presentation. If you have any questions, feel free to reach out or to ask them now or otherwise. You can always come to the booth or ask a discord. Thank you. Hey, thank you. Have you considered building a MetaMask snap leveraging your SDK? Like to have contact abstraction with snaps? If you are aware about snaps.
00:18:53.270 - 00:19:45.490, Speaker A: I'm aware of snaps, I guess, sure. The only requirements to be eligible is that you use the SDK. And I think in the Snap you could also use the SDK as a dependency to for instance, if you want to sign a safe transaction and you have MetaMask, you could fetch some context right, about the safe transaction through Snap. So definitely the only requirement is to use the SDK or to build on top of the new core protocol. So yeah, would also be the geo fix the smart account in the new protocol. Is that a different contract than the current safe account? No, it would be also the current safe accounts. I think the demo currently, as I mentioned, it's only deployed on Gurley.
00:19:45.490 - 00:20:42.950, Speaker A: Okay, so only on Girly testnet. And I think they use together with also the new safe version, one four one, if I'm not mistaken. Is that kind of based on the full 43, 37, the account abstraction standard or is that still a different thing? I think the new safe version also supports four three seven. Think also through a module, if I'm not mistaken. But it's a different protocol. This safe core protocol is not directly related to four three seven. It's more the idea to have a new framework or have a new architecture or protocol to include multiple smart accounts and have a way of a composable modular architecture to easily extend these smart accounts by new features.
00:20:42.950 - 00:21:13.680, Speaker A: And then it would be cool to use them also across different smart accounts and not be bound to a safe. Like for instance, this example we saw. All it does is it relays through Gelato. It's a plugin. So if you send the transactions through this plugin, it will check the gas costs and it transfer the amount of ERC, 20 tokens or the amount of native tokens to Gelato in the same transaction. And then Gelato can relay it. That's the demo.
00:21:13.680 - 00:21:28.660, Speaker A: If you want to check it, like there's a repo. This is, for instance, this demo plugin, like the relay plugin. So it's linked on our docs. You can find it there. And there's a contracts folder and there you find the contracts used for this raw demo. It.
