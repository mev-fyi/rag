00:00:02.250 - 00:00:02.558, Speaker A: Interesting.
00:00:02.644 - 00:00:03.520, Speaker B: Thank you.
00:00:04.050 - 00:00:38.460, Speaker A: I believe Elliot is here. Hi Ellie. Hi. Are you able to share your presentation from your phone or would you like someone? I prefer that if someone else can do it for me that would be easier because I'm joining from actually just from some family event, from a car. You don't want to hear the full story anyway. So if someone can share my screen yeah, let me just do like this and then I can okay. Can you see me well? Yes.
00:00:38.460 - 00:00:50.220, Speaker A: Okay. And can you hear me well? Yes. Terrific. And I'm supposed to go for like 15 minutes or so, or ten minutes and then leave time for questions.
00:00:51.410 - 00:00:54.400, Speaker C: Let's aim for ten minutes and leave for questions.
00:00:55.090 - 00:01:03.002, Speaker A: Okay, so ten minutes. Okay. So I'll start. So. Hi. I'm Ellie Benson. I am co founder and president at Starquare.
00:01:03.002 - 00:02:10.940, Speaker A: And I want to tell you a little bit about a few of the methods for doing mev protection on layer two. And of course, I'll be speaking from the angle of Starware's technology. So I'll be focusing mostly on vidu, which is a start based VDF in timelock. So can we move to the next slide, please? Okay, so what is the problem? The problem is that the L two operators right now, we're discussing mev protection on layer two. So any operator that is operating on L2 receives transactions. And just like on L one, just like with the miners, this operator may extract value unfairly and in the same kind of from censoring transactions, from inserting the operator's own transactions, and from modifying the true sequence of events. So those are the three problems, right? Deletion, insertion, and reordering.
00:02:10.940 - 00:03:17.708, Speaker A: Can we move to the next slide, please? Now, how can we solve this on layer two? And I want to say at the very beginning that actually conventional methods in certain cases may work very well. Okay? But I'm not going to devote a lot of talk to that. So what do I mean? I mean, in the conventional world, like, if you go to standard regulated exchanges, they will have similar problems. And the way their integrity is asserted and checked is by a combination of auditing reputation and legal incentives. So if you assume that there's an ability to hold the operator accountable, either by inclusive accountability, meaning that the mempool is visible to everyone, or by some delegated accountability, where there are some legislator or regulator that can look at things, then you can apply the conventional mechanisms, right? It's a repeated game. People will leave if the reputation is damaged. And of course, there's the fear of legal actions.
00:03:17.708 - 00:04:08.210, Speaker A: And this applies to single operator in particular, the customers that we are right now serving diversified, dYdX, Immutable, X, these are all single operators that they and Starkware, if we were to do shenanigans, all of these things would apply to us. So I know we're not, and I trust that our counterparties are not and it may apply to decentralized operators, especially if the operator identity is public. Okay? So if you have a small network of public entities, reputable financial institutions or something, then this may apply. But let's move to the next slide. So let's talk about the more interesting case. What kind of cryptographic primitives can we put to bear on this? So we have commit reveal schemes. That's the first kind.
00:04:08.210 - 00:04:44.350, Speaker A: You have VDFS and time locks. That's going to be my focus. You have trusted execution environments like Intel's SGX, and you have secure multiparty computation. These are four different methods that I'm aware of that can be applied to solve the problem and especially in the case of decentralized operators. So let's move to the next slide. Here's a brief comparison of how they a few parameters. So the first column, is this a non interactive setting? Because non interactive is a little bit better.
00:04:44.350 - 00:05:24.504, Speaker A: It's more complicated. When you have interactive protocols parties can leave off and it makes things much more complicated and less secure. So VDFS and trusted execution environments are non interactive, whereas Commit Reveal schemes and secure NPCs, they are interactive and hence not as good. You can ask which of these technologies is available today for use. So all but secure MPC I would say are available. Secure MPC, theoretically we know how to do it. There are some things out there that are like this, but you don't have elements of this form in production today.
00:05:24.504 - 00:06:41.568, Speaker A: So if you're asking about VDFS and timelocks, so Starkware has a VDO service running right now. Everyone can use it. And there are other such VDFS, chia has a VDF, there's a whole bunch of other things. Transparency, is there a trusted setup? Do you need to trust anything? So, all of these protocols, but for the trusting execution environment, they are transparent or can be made transparent depending on what is the technology you're using for the secure MPC or commit Reveal time lock. And yeah, I think the lack of transparency for the trusted execution environment makes it very problematic because I don't find it reasonable to assume that a lot of value will reside on trusted execution environments without keys being compromised. And finally, what kind of protection do you expect to get from these schemes? So I think that the bottom two give you much better protection because you can have inputs fully encrypted and the operator will sort of operate on them without even knowing exactly what's going on. Whereas with the first two, the information is revealed at some point or can be revealed and they give you some of the protection, but not as good.
00:06:41.568 - 00:07:16.252, Speaker A: Now, if you look at these so I would argue that VDF time locks are kind of in the sweet spot as far as we know today, because they have all the V's and they don't have the three. Pluses they're not fully green, but I think they're pretty good. So they may be used. Let's go on to the next slide. Now, when it comes to cryptographic time locks or VDS, there are two basic mechanisms that you can use. Them two modes you can use them in. You can use the time lock where transactions are.
00:07:16.252 - 00:08:02.892, Speaker A: So you can ask users to submit their transactions using a cryptographic time lock plus some expiration time to prevent opening of this. So that's one mechanism, right? So now when the transactions are put in the mem pool and are being sequenced, the operator doesn't really know what's going on, and only after they've been sequenced are they opened. The second option is to apply a VDF, which means that the transactions are submitted in the open so the operator actually sees them. The operator will sort them arbitrarily. But now we'll fix the sequence in a block, right? We're talking about L two. So you can rely on L One for your security. So you basically commit to this order.
00:08:02.892 - 00:09:27.990, Speaker A: You apply a VDF to the block header and then you use the VDF randomness to resort and shuffle the transactions according to the permutation that was selected and then you process them. Okay, so those are two basic options you can use with time locks and let's just do a brief comparison of them. So let's move to the next slide. So if you look at the time lock based approach, it's slightly better in that it actually shields the information while it is being sequenced from the operator, which means that the operator it precludes the operator from inserting or deleting certain things because the operator doesn't know what's going on. Whereas in the VDF approach, the operator can extract some value by deleting transactions, inserting her own transactions and things like that. So there's an advantage to the time lock based approach in this shielding, but on the downside, it requires K computations of delay functions because each one of these delay things needs to be open. I know that there are some really cool VDFS which can be or time locks that can be opened with just one opening, but at least the ones that I'm aware of that are out there right now in production don't have this property.
00:09:27.990 - 00:10:19.160, Speaker A: But the challenge with the timelock based approach is that miners may demand to see the unlocked transactions given to them by side channels and thereby sort of compromise the whole scheme. So a miner could say, look, if you want me to sequence your transaction even though it's time lock, please show me the opening of it. And usually it's going to be very easy to prove that a certain thing was opened in a certain way in all of these schemes. Okay, the second approach is the VDF one. Sorry, let's go one slide back. The second approach is the VDF one, and you need to compute only one delay per block, but the operator can do some stuff and extract some value. Okay, so let's move on to the very last slide of this presentation.
00:10:19.160 - 00:11:13.988, Speaker A: So I want to say that Vidu is going to appear on StarkNet. So Cairo will have support for VDFS and time locks by a dedicated built in that will do this. And then it means that you can have programmers of StarkNet smart contracts will be able to write all kinds of things like time lock based Mev protections. You could have VDF based mev protections. So you could implement both of these two modalities that I spoke about previously, using Vido as a built in, as part of your basically code base for Cairo. And of course there's going to be a lot more that you can do with it that is outside of mev. You could do second price auctions, which again can be some solution, or all kinds of sealed bid auctions.
00:11:13.988 - 00:11:59.732, Speaker A: You can have lotteries leader election proof of stake protocols and more and more. All of these things will be programmable very efficiently on L two. And I hope that people will build applications with this. And I just want to say that as we're prioritizing the set of built ins and things that will go into the Cairo programming language, it would be really cool to collaborate with teams that actually want to use this in production as soon as possible. We have already deployed Vidu as a service in production on Mainnet Ethereum. Sadly, no one's using it right now. We'd love for people to come up and say they want to use the version of it that will be part of Cairo.
00:11:59.732 - 00:12:03.210, Speaker A: So please talk to us. Happy to answer any questions and thanks.
00:12:06.620 - 00:12:32.000, Speaker B: Thank you. Ellie, any questions, please post them in the chat. Okay, no questions. Okay, we have a comment from Alex. I am worried about the impact on markets like price lag between centralized exchanges and Vido enabled liquidity.
00:12:35.780 - 00:14:10.252, Speaker A: I mean, there's one variant that I really like that could give you sort of the best of both worlds. It would look something like this. So you process in real time the orders based on the current market conditions and you understand that actually the sequencing may be such that some people win more or lose more based on the sequencing. And maybe even the miners have been playing games here. But the protocol then has a reconciliation period, which means that you will take so after all these orders have been done, the smart contract will take the sequence of orders randomly permute them according to a VDF and let's say two minutes or five minutes later, we'll run this reconciliation protocol that will either transfer funds or leave some of the funds outside and renumerate randomly, according to your order. So what this would mean as a user, I think you would get this would be like the sweet spot unless you're in the business of extracting value, right? Because you could get immediately you want to, let's say, access uniswap and get something you'll get pretty much the final price, but there'll be this random delta that you will learn of like five minutes later. So if you bought $1,000, you got $1,000 worth of whatever token it is, but maybe after five minutes it's going to be either $1,010 or it's going to be $990 based on the randomness that comes out of vidu.
00:14:10.252 - 00:14:23.700, Speaker A: So I think this would give you the immediacy of a centralized exchange and the fairness of as if you applied vidu. That's my preferred, but it's more elaborate logic.
00:14:24.680 - 00:14:41.076, Speaker B: Oh, I see. Interesting. It's kind of reminiscent of probabilistic payments where kind of in expectation you have the behavior that you want and it's fair. But in real time, on a discrete basis, there could be quite a bit of variance.
00:14:41.268 - 00:15:04.210, Speaker A: Yeah. Because the downside of using a delay function is, well, the delay. So what if you could have the immediacy of acting immediately, but you understand that the delay will be used for this fairness and reconciliation. So on layer one, I think the gas cost would really kill it today. But on layer two, this can be easily done. Right.
00:15:06.920 - 00:15:37.420, Speaker B: Right. I mean, maybe a potential other way to address delay with time locks is to have some sort of optimistic happy path where you reveal the time lock ahead of time, as in before, it kind of expires. And so in the happy case, you have near zero delay, but in the worst case, where things go wrong, then things are ordered using cryptography.
00:15:40.320 - 00:16:32.930, Speaker A: So I saw there was a question. So I see here that Klaus from Vega brought this up. So Klaus from Vega, if you want to work on know, on layer two using, you know, DM us me, let's get this thing is again, on layer one, it would be very gas costly, but on layer two, I think this would work marvelously well, this kind of thing, and we can make it happen. I saw there was another wouldn't vido incentivize spam? Tina is asking I'm not sure. Why would Vido incentivize spam? Oh, like time I i can time lock spam, I guess. Yeah. So you could have a collateral that would be slashed or something if you do that stuff.
00:16:32.930 - 00:16:57.690, Speaker A: I confess that my preference is this immediacy plus a reconciliation later on. It's also just one VDF, and you get instant gratification and then near instant reconciliation. I'd like to see. Okay. I'm not sure are there any more questions? Because I think my time is up.
00:17:03.680 - 00:17:12.770, Speaker B: I don't think there's any more questions. Tina, there a break between part one and part two.
00:17:13.940 - 00:17:33.872, Speaker C: So there is a panel that we skipped that we kind of went into discussion while waiting for Ellie. So we can bring that on or we can kind of skip to the part two and then have the panel towards the end. So up to you guys.
00:17:33.926 - 00:17:41.400, Speaker A: I apologize, I have to jump off to my family event, but thanks. So much for having me. And I apologize for running a few minutes late.
00:17:45.260 - 00:17:45.912, Speaker C: No worries.
00:17:45.966 - 00:17:50.264, Speaker A: Thanks, Alex. Thank you for joining. Bye, guys.
00:17:50.382 - 00:17:51.140, Speaker B: Thanks, Eddie. Bye.
