00:00:00.170 - 00:00:19.710, Speaker A: You all right, we're live, everybody. Okay. So welcome to group nine judging. We are the last group of Market Make, but we're last but not least. So yeah, so, I mean, Market Make has been an amazing event. It's our first event of 2021. We're really excited to be running this alongside with the Ave team.
00:00:19.710 - 00:00:46.140, Speaker A: And of course we have Jordan from Ave here as well, helping out on the judging side. So we're really excited about that. It quick little summary about the event. We had 490 hackers join us. Those hackers are, of course, across the world, 58 countries and 17 time zones, which is basically every habitable time zone on Earth, which is always cool to see and always fun to schedule for. So, yeah, really great event. Really excited about the project quality.
00:00:46.140 - 00:01:21.842, Speaker A: We had 120 projects around that number come out of this today. We're going to see about a dozen of them come through as part of this demo presentation here. And just to kind of give you a sense of sort of what to expect over the next maybe a couple of hours or so. So the judging format, everybody has prepared a four minute video demo, up to four minutes. So we'll spend time for the video demo. You'll play that video, of course, everybody here has been through the green room already and kind of knows the deal. After that, we'll pause for four minutes for questions so the judges can ask one on one questions to the teams.
00:01:21.842 - 00:02:08.870, Speaker A: We'll have a nice question period there and then we'll take a two to three minute break. Every four teams give the opportunity to kind of stretch your legs. Judges can chat a little bit about how projects are going, if they have the time, and halfway through, we're going to take a ten minute break again to sort of stretch legs, let the judges get together and kind of hash out how things are going so far and we'll carry on from there. So, wanted to briefly touch on some of the judging criteria that our lovely judges will be going over. So we have five different kind of ways that we judge projects. So technicality, so how technical a project is, how difficult it is to actually build originality. So this is kind of basing on the idea of the project.
00:02:08.870 - 00:03:03.826, Speaker A: How original is it? Has it been done before? Is it really useful? Is it interesting, practicality? That's kind of definitely more the useful piece. Is it going to be something that's going to be used in the ecosystem? Is this something that's really reasonable to have as part of the ethereum ecosystem and DeFi in general? Fourth category is UI UX DX. So sort of what does it look like, how does it perform? Kind of how are those flows feel? Is this going to be a product that kind of anyone can use? Or do you need to be really specific and then kind of a catch all category, the wow factor. So it's hard to judge everything based on only four categories. So if you're blown away, the last category is the wow factor, which helps sort of capture things that otherwise cannot be captured in those other four categories. The intangibles, if you will. So a couple of important notes.
00:03:03.826 - 00:03:30.426, Speaker A: I mean, this has been the case since day one of ETH Global. So this isn't a competition, right? So people are here to learn. We're going to have a wide variety of projects from people who are experts and people who picked up crypto or DeFi or blockchain for the first time ever. So we're not all playing on the same field, and that's important. Everybody's learning. And we're all looking to grow as both an ecosystem and personally as we build and learn new things. These projects also aren't necessarily built to be businesses.
00:03:30.426 - 00:04:12.026, Speaker A: They're built to be interesting ideas and interesting ideas executed on. So it's important to realize that they might not come with a business plan, and that's okay. Also, it's blockchain, so it's definitely okay. And also, hackers are here to get feedback, right? So this is meant to be sort of a step in the milestone of taking that project to complete fruition. This is a great way to get feedback from industry experts and also show off what you've built in such a short amount of time. Last but not least, big thank you for the three people on this call that are spending their Tuesday morning with us or Tuesday afternoon or evening with us. So we have Judging with us.
00:04:12.026 - 00:04:31.278, Speaker A: We have Jordan from Abe. We have David from many things. I put on this list just DeFi triple seven. And then we have Dimitri from Bollinger Investments. Okay, awesome. So with that being said, that's the end of my presentation. I'll jump into the demos and we're going to start with Team Ave Wasabi.
00:04:31.278 - 00:05:40.582, Speaker A: So if you can raise your hand, which I think you already are, we will promo you to the stage and you can click the computer Share audio button and share your guys, are we supposed to see anything right now? Because I'm not seeing I think Jackie's still trying to join. Okay. I was just wondering. Yeah, me too. There we go. Okay, cool. Looks like we've got that all set up.
00:05:40.582 - 00:06:07.162, Speaker A: We can see everything. And also I'll turn it over to you, Jackie. Hey, I'm Jackie, and this is for Ave Wasabi. So what is it? In a few words, it's markets to buy and sell risk. What does this mean? As an example, say we have someone who wants to open a highly leveraged position at four x five x six x leverage. It's a good idea to hedge your position with the protocol. We can do this.
00:06:07.162 - 00:06:53.850, Speaker A: In the worst case, if there's a huge loss, protocol will be able to cover some of it. In the best case, there's a profit and both buyers and sellers share in it. Well, concretely, in its current iteration, we just use the protocol like we use with liquidity markets in Ave or Compound, with borrowers being the sellers and lenders being the buyers. Now, here's a demo of what I've gotten done. In this scenario, we have a deposit that represents some users who just want to get the yields. Next, we have a deposit that represents users that are leveraged going long on ETH. They take out enough USDC to enable loss coverage.
00:06:53.850 - 00:08:12.310, Speaker A: In my terminal here, I'm artificially collapsing ETH price, prompting the users to close their position at a loss. Now, when they repay their debt to unlock their collateral, the protocol allows them to pay less than they need to to unlock and withdraw. So what's going on? All deposits in the protocol are actually deposited into Ave and the borrowers come from Ave too. Lenders get Ave's yields with the loss coverage and profit sharing subtracted and added, while borrowers get Ave's interest and the protocol's loss coverage and profit sharing on top. Once a position is closed, we either reduce the borrower's debt or increase it based on whether there was a profit or a loss from the prices at the time the position was opened. The rates for this are determined algorithmically based on supply and demand. For example, at its core, the COVID rate is simply the solution of the constant product equation.
00:08:12.310 - 00:08:38.560, Speaker A: The properties of this curve incentivizes opening positions, but rates quickly decay as demand increases to maintain protocol solvency. You can learn more about this in a documentation. So, what's next? More analysis on the protocol rates? Lots of safety improvements to be able to handle real money. Moving away from borrowing and lending. Terminology for general risk markets like for more complex risk packages like pooling leverage. That's my time. Thanks.
00:08:38.560 - 00:09:20.540, Speaker A: Very cool. So about four minutes for questions from the judges and Jackie, if you're able and you want to share your video, that's always better. Oh, hey, sorry, my webcam is having issues. I can't share my video once you kick off. I guess I could. Great job. I think leverage is something that we know has product market fit in crypto.
00:09:20.540 - 00:10:45.672, Speaker A: It's interesting that you're kind of building with that and I think this will probably find some interest with your typical DeFi user. I'm curious, what's the difference here between just using less leverage instead of just selling off a portion of that leverage? Sorry, are you asking what's the difference between this and using less leverage? As in just not making such a risky position? Yeah. So it's like you're hedging a leveraged position. And how is this different from just taking less leverage in the position in the first place? So with higher leverage, you have greater profit, but if you take less leverage, you obviously get less profit. So if you take higher leverage, you get more profit, which you can share with the entire protocol. Got it. So you are keeping the same upside, but you're capping your downside, or are you also capping your upside here? So if you make a big profit, you do share some of that.
00:10:45.672 - 00:11:14.468, Speaker A: So you are taking less profit. But the idea is the risk is mitigated, but the profit is not the same, but it's higher than you would have if you had less leverage. But with the protocol, you still have the same sort of upside, but with less risk. Got it. That makes sense. Yeah. Awesome.
00:11:14.468 - 00:12:01.484, Speaker A: Thank you. Awesome. If I can go, I was just wondering, how do you plan to incentivize the other takers? The one that are basically helping you to edge the risk? Yeah. So if the people that take out positions to leverage, they share some of their profits, so that goes on top of the yields that you have. So if you're a supplier and you expect east to go long, then you're expecting people to leverage and then you expect them to profit from that. So there's also, like, a short pool, and if you expect the profit to go expect the ETH price to go down, then you would supply in a short pool because that's where you expect where more yields would come from. People shorting ETH.
00:12:01.484 - 00:12:29.980, Speaker A: Yeah. Okay, so those lenders get that share of the profit on top of the existing Ava yield, you said, right? Yeah. But you have to make sure that if you're lending on the long pool, you're fairly confident that ETH is going to go long. If you're lending on the short pool, you're more certain that your ETH price is going to go down. So you have to be careful about where you put your liquidity capital. Gotcha. Awesome.
00:12:29.980 - 00:12:43.036, Speaker A: Yeah. That's amazing. Thank you. Cool. Yeah. Just one more question. Who did you build this with? Solo projects.
00:12:43.036 - 00:13:02.950, Speaker A: My first time, I wasn't very confident going into this, so that would be better if I just didn't try to make it too complicated or anything like that. Yeah. No, you have to start somewhere. Yeah. Awesome. Good job. Thank you.
00:13:02.950 - 00:13:12.552, Speaker A: Awesome. Thanks, Jackie. Very cool. Solo hacker. First time. Love to see it. Okay, cool.
00:13:12.552 - 00:13:42.070, Speaker A: Up next, we have Team Dieselock. He's promoting them now. Welcome, team. Thank. Thanks for sharing. Awesome. I'll turn it over to Team Dthlock.
00:13:42.070 - 00:14:40.830, Speaker A: Doesn't look through. The sound is coming through, so you'll need to reshare with the Share computer sound button toggled hello. We are team deathlock. We are a premier DAP development team focusing on simplicity that adds time released ownership anywhere in the DeFi transaction stack. In Deathlock, a will owner can deposit raw ethereum or a token ownership into wheel structure. We're not seeing the video. Owners can continue to deposit or the audio was coming through, but it looks like you shared the wrong window on that one.
00:14:40.830 - 00:15:27.896, Speaker A: We are a premier DAP development team focusing on simplicity. Deathlock is a simple DeFi brick that adds timely released ownership anywhere in the DeFi transaction stack. In deathlock, a will owner can deposit raw ethereum or a token ownership into the will structure. Owners can continue to deposit or withdraw from the will at any time after a deadline. A beneficiary address can also withdraw. So here we have the Scaffold sketch of our front end. On the left is our deployment address standing by with the will creation page.
00:15:27.896 - 00:15:59.964, Speaker A: On the right we have the second address watching our Will Management page, which runs on top of the graph. We begin by creating a will by copying our intended beneficiary address. Then we choose to deposit one ethereum into our new will. We could also deposit any number of tokens from the list of our usual suspects. We've also deployed Stooge tokens for use in local testing. We'll choose to deposit zero Larrycoin into this will. We can select our will's deadline from this handy pop up calendar.
00:15:59.964 - 00:16:58.260, Speaker A: Or for handy testing purposes, we've created this Now Plus 1 Minute button. When we press the Create button, the will is initialized and caught by the Graph Management screen listed under All Wills. We will switch the owner over to the Manage screen and the other address over to the Create tab. Now we will create a second will. With the address rules reversed, we'll set the deadline out a bit further and deposit some Larry some curly coin. This time, along with another F, we've an All Wheels refresh issue to tidy up, but with some poking, everything does display correctly. Next we will test the owner update function, which should always work.
00:16:58.260 - 00:17:58.082, Speaker A: Here we shorten the deadline to something a bit more lively. Our first wills minute is up, so now we can claim funds from it. We observe our beneficiary funds increase by the one F and the claimed will balance drops to zero. Wills are immutable, so the structure remains inactive or active forever. For further management, we still have a front end update issue on the left Management screen, but a bit of poking resolves it. Our owner withdrawal function does in fact work, but our graph refresh needs some work. Our Scaffold react front end is still notional.
00:17:58.082 - 00:18:42.840, Speaker A: For example, here we have the proxy interface showing a textbook design patterns ownable, plausible and something I call accountable, meaning it tracks loose ether sent to its address as tips and makes it available as salary to the owner. Future work obviously includes finishing the front end unit testing and deployment up the chain towards the main net. Team Locked would like to thank you for your time and consideration. We look forward to seeing you all around the developer community. Amazing. Feel free to share your videos if you're comfortable with it and turn over to the judges for questions. Very cool, guys.
00:18:42.840 - 00:19:15.460, Speaker A: Looks like this was built with Scaffold e. Yes. How did you guys find building with that? Did that kind of simplify the development process a lot? Yes, and no, the learning curve was kind of steep. It was a new tool for a lot of us. Okay. But once we got it, there was a lot of Legos in the box to play. So if I can ask the question or David go.
00:19:15.460 - 00:20:00.190, Speaker A: So thank you. I was wondering, so you basically want to push people to lock. So you put a timeline on the locking of assets. And I was wondering, did you think about, for example, depositing some assets in Ave so they can earn interest while they are locked in the desk lock? So let's say that you put a lock on ten years might be interesting. Even like if on lending protocols, the its rate is not that great on ten years, it's still very interesting. Or even like if you put stable coins, for example, could be interesting to consider. Yes, we were considering depositing on assets on AV.
00:20:00.190 - 00:20:29.036, Speaker A: We just didn't have time to implement that. Okay. Yeah. In general, I really like the direction of the project here. I think going cross chain and having bridges. So great stuff with the direction. I'm curious, in general, what was the hardest part about building this? Well, we are a premier team.
00:20:29.036 - 00:21:03.210, Speaker A: We were just here to survive the hackathon and see what it's all about. So we will come back with a more complex project next time. Cool. With this one, it sounded like it was pretty straightforward for you guys, or was there anything that you thought was relatively complex? Solidity was straightforward. The front end. We had a ringer whose career wouldn't let him participate, so we had to wing it on that. We were hoping for more.
00:21:03.210 - 00:21:23.090, Speaker A: Yeah. Well, I think it's a good first step for sure. Just one more question about the contract. So each will have a single owner that has to kind of do that keep alive. Yes. Each will tracks one owner, one beneficiary, and one token. Okay.
00:21:23.090 - 00:21:37.036, Speaker A: Can the will owner withdraw early? Yes. Okay. They can withdraw at any time. Got you. And they are the one that has to send that Keep alive message. Yes. Got you.
00:21:37.036 - 00:22:06.828, Speaker A: Might be cool. I don't know if this is something integrated. It might be cool if that could be separate accounts, because you might want, like a cold storage account that has access to the funds in a separate one where you can send these Keep alive messages. There are several applications we've thought of, and that would be one of them. Just mixing and matching where the address are coming from and going to, for example, key recovery if you are your own beneficiary. Yeah, that makes a lot of sense. Cool.
00:22:06.828 - 00:22:15.570, Speaker A: Well, very cool. Thanks, guys. Yeah. Great job. Thank you kindly. Awesome. Thank you, team.
00:22:15.570 - 00:22:51.550, Speaker A: Sorry. All right, next up we've got Team Simplify. And let me just find Raphael. There we go. Promoting you now. Okay, Raphael, when you're ready, feel free to share your screen tick that share computer audio button, and we'll be off. Hi, I'm Rafael, and this is Simplify, my market make project.
00:22:51.550 - 00:23:25.830, Speaker A: All right, so the problem that Simplify solves is that it's really hard to keep track of your DFI investments, right? We've all been there. We've all seen, like, this crazy opportunity that's offering 100 or 200% MPy. We ape into it, we put in our money, and then we look back a week or two weeks later, and we've actually lost money. And we wonder what's going on. And that's when you can actually calculate it. Sometimes it's just really hard to figure out what the return has been. And if you're like me, sometimes you even forget where you've put your money.
00:23:25.830 - 00:23:51.490, Speaker A: So the solution is simplify. It's just a one click tool. You connect your account, and it will show you exactly what you own. So the underlying assets that you own, how much money you've made. And it will also allow you to combine your returns from different fields and different strategies. Okay, so, welcome to the Simplify homepage. This is where you can connect your wallet via MetaMask or literally just check any ethereum address.
00:23:51.490 - 00:24:26.056, Speaker A: So, we'll do that. We'll just look for someone who has Adai. That could be a good test subject. So, let's look at the holders here and just choose someone randomly and plug that address into Simplify. Simplify is going to look at their investments, rewind their positions, and then show us the combined ROI of these three investments that they've made. So, two earning fields. So, liquidity provider, one farming field.
00:24:26.056 - 00:24:54.340, Speaker A: And in total, they have five tokens that they're holding, of which 99% are invested. So, we can check here what those tokens are. See that? There's a bunch of dies, but also some USDT. Some USDC. And we can see that a lot of these tokens are actually fully staked or provided as liquidity. So we can see where they've been provided as liquidity. First one is obviously in the Arbedai deposit pool.
00:24:54.340 - 00:25:45.088, Speaker A: So click on that. We can see the ROI, and we can also see that there's part of it that's in the Curve Ave pool, which is great. And here, we can not only see the ROI from this field, but also we can see if there are any yield farming fields that are related to this one. Like, for example, the Curve rewards gauge. Then we can add the farming ROI on that and see the total ROI from those two related fields. So, we can see that there's an ROI of $100 from just the core earnings, and that the farming on top is $619. And so, if you combine both, that makes a much bigger ROI.
00:25:45.088 - 00:26:41.780, Speaker A: And finally, we can just see details about the farming field itself. So that's the curve of a reward gauge. So, there's 619 of unclaimed curve for the time being for a total ROI of 2.48. The way that Simplify works is essentially a lot of data fetching so some of it directly from the blockchain, some of it from subgraphs and CoinGecko and Etherscan. What Simplify will do first scan for your surface investments and it will then rewind that position to find what the underlying fields are. And then finally it will boil it down to the underlying assets, which are going to be Dai, USDT and USDC. And then using historical price information, it will then calculate your ROI based on your past transactions.
00:26:41.780 - 00:27:09.350, Speaker A: Thank you very much for listening. Wow, that's super cool. That's useful. Thanks. I think this is like one area that there's just like countless opportunities for growth because it's like one of the best things about blockchain and DeFi is that you can have a bank and you can have other people build a UI for your bank. You don't have to use your bank's UI. That's super cool.
00:27:09.350 - 00:28:14.280, Speaker A: One question I had, mean, I know that this is a lot of data you guys are indexing and it was cool the way you described, the way you've kind of rewound that. I was curious, are you running any of your own? How much of this happens on the client side versus the server side and are you guys running any server side infrastructure or is it just like the graph, as you mentioned? Yeah, so there's a very simple back end that basically holds the contract addresses and things like that so as not to color or clutter the front end, but the rest is mainly on the client side. Mainly on the client side. So some of it is pinging CoinGecko, some of it is pinging e to scan, particularly for the token transactions. And then things like the graph are used depending on the protocol. So there's no need to use it for curve, for example, because you can get most of the information from the controller gauge contract that they have, for example. But with Ave, the big challenge was that it's continuously updating the balances.
00:28:14.280 - 00:29:06.648, Speaker A: So if you're staking something, it would show on the transaction history that you're actually taking out more than what you had. So the graph is used to get the historical balance. Got you. Very cool. Yeah, this is great. I probably don't know where I put a lot of my money, so something like this would be very useful for me as a user. I'm curious, I guess, how do you support additional protocols, whether in the UI or in the back end? What does it take to include another protocol here? So adding another protocol, it will depend on the protocol.
00:29:06.648 - 00:29:42.824, Speaker A: You have to figure out every single time what the methods are to actually go and query the balance. So balance is normally it's quite typical, it's just balance of, but then it's earning and then sometimes you have to add the account address as well, the asset address when there are multiple assets like in the curve pool. So it's just about specifying those and switching them, routing them inside on the front end. Got it. And then you would do that. I guess you just need to understand how that other protocol does that. Yeah, exactly.
00:29:42.824 - 00:30:17.264, Speaker A: And some of them are easier than others. Like Ave is great because the documentation is awesome. The subgraph is really clean. It helps a lot. Thank you. I think it would be very useful. And I was wondering, actually, have you thought or do you think it would be easy to get CSV export of all the assets so you can basically get for even tax purposes, so you could have a direct Excel sheet with all the things that you are putting in the UI? That would be actually very useful too.
00:30:17.264 - 00:30:33.480, Speaker A: Yeah, I think that would mean right now, I don't think you should trust exactly what you're seeing. But yeah, no, definitely, it could work. I didn't use this to calculate my taxes yet. Not yet. Someday. Yeah. Awesome.
00:30:33.480 - 00:30:42.152, Speaker A: Congrats. Thanks, Rafael. Awesome. Thanks, Rafael. Good to see you again. And awesome. We'll move on to the next team.
00:30:42.152 - 00:31:05.660, Speaker A: So up next we've got Team Polaris. So I'm going to invite them up right now and I'm going to kick you back down. Rafael. Thanks again. Thanks. Okay, cool. Team Polaris, whenever you're ready to go.
00:31:05.660 - 00:31:59.706, Speaker A: This is the Polaris group. We build blockchain games. Our team consists of four members, and I am Je. We're all students from Qinghua University. So our project is a decentralized, transparent and fair gaming platform, utilizing the layer two solutions on Matic to lower the extreme high gas fees on Ethereum network to provide a quick and also affordable and fun gaming experience to our users. It also offers borrowing options using Ave's Credit Delegations to allow users borrow tokens from friends to play our games and return the tokens back to them after winning. So, this is a summary of our project.
00:31:59.706 - 00:33:01.706, Speaker A: We implemented a simple rock, paper, scissors games. It is one player versus the smart contract right now and is deployed on the Matic network using thematic layer two solutions. So it has extremely low gas fees when players play our game. It also has a P to P credit delegation feature using Aave's credit delegation. It allows users to play games without owning any tokens upfront and they can return tokens back to their friends after winning. Our long term goals are using Zero knowledge proofs and to explore the possibilities of P to P interactive games on the blockchain and also to enhance the privacy of our users data. And we also want to issue a Dow token for governance.
00:33:01.706 - 00:33:41.610, Speaker A: Next, we'll do a demonstration of our project. All right, so here's our landing page. You can see our logo right here in a one sentence description of what we do. If you head over to the App page where the user interact with the smart contract playing the Rock Paper game. So you first need to configure your wallet to Matic and you connect MetaMask to it and you can simply make a choice between rock, Paper and Scissor and each round of the game is teematic. So now I hand it over to Brian to talk about the Aave part. So here we have the section for lenders where you can deposit your collateral and then you can also withdraw it and then check the amount that you have deposited.
00:33:41.610 - 00:34:32.646, Speaker A: And here's the section to delegate when you're delegators. Then you can use this function where you have the delegate T's address and then the amount that you want to delegate to him and then you hit confirm. You can also check how much you have delegated with that delegate. And as a delegatee or the borrower, you can just borrow the money and enter the amount and then the address of your delegator. As long as it's within this allowance, then this confirm should work. So all of that was the A part and after user borrowed the money, user can go play our lottery game which is deployed on Matic network. Well, to solve the extreme high gas fee problem on Ethereum network.
00:34:32.646 - 00:35:08.810, Speaker A: Here's the flow of our project. You have Ethereum and we implemented the front end allow you to do borrowing and lending on Aave and then you can use the money that borrow or the ones that you have already to get Matic and you can play the game on Matic. And then afterwards you can transfer it back to Ethereum and hopefully win some money. So this is our project. We weren't able to implement all the features that we wanted due to time constraint but we really enjoyed the time building this product and hopefully you like it too. And thank you for listening. Awesome.
00:35:08.810 - 00:35:27.774, Speaker A: Congrats. Thanks guys. One quick feel free to turn on your cameras. Sorry to cut you off there, David. No worries. And yeah, turn over for questions. One quick question I had was I was just trying to understand the difference between so it's a lottery, but there's also the rock, paper scissors.
00:35:27.774 - 00:36:13.614, Speaker A: So is it if you win the Rock, paper, scissors then you earn the lottery or how's that work? Yeah. So our ultimate goal was to build a gaming betting platform. So we want to implement interactive games, but at the same time we also want to implement kind of like a lottery platform where users are allowed to make predictions on esports games, NBA games. Okay, cool. So you see this scaling up to being all sorts of different games, blockchain sports, all different kinds of things in the same place. Yeah, that's what we want to build in the future. We want to add more features onto a platform.
00:36:13.614 - 00:36:53.520, Speaker A: Awesome. Very cool. So I picked up the betting part and I was wondering, have you had the idea if this is something that you thought about to do, like no loss betting? So you use basically the interest generated so you bet only the. Interest of your Ave deposit, for example, using the credit delegation is very good, but it's quite difficult to always find someone to delegate your credit. But if you could use only the interest generated from Ave to make those bets, it might be easier. Or even like, just using delegating that interest, for example. That could be interesting.
00:36:53.520 - 00:37:42.880, Speaker A: Yeah, that's a good suggestion. And we also thought about implementing a no loss lottery like pool together. I don't know if you guys have heard of it. So where users just pull money into the lottery and they get a ticket to be drawn in the next lottery to win the total money that we win from the interest in the always lending pool. That's what we thought about doing too. Yeah, that would be the case if we could kind of issue our own token and user can deposit their ether, and then we can issue our token and then we can put the ether into Ave to our interest. And then that way it could be just a no loss lottery and it's pretty good.
00:37:42.880 - 00:38:33.674, Speaker A: Everyone wins. Awesome. And how was it to build with Matic as well? You use the Matic USDC, the ma USDC built by the guys of Avigochi? Or did you build your own bridge to bring the assets there? Can you repeat that question again? So recently, the team of Avegochi, which is a previous actually, akathon project, they build a bridge, Ave assets, so a token USDC onto Matic. And I was wondering if you use their solution or if you build yourself. No, we didn't use Abigailchi in our project this time. Okay, sorry. Go ahead.
00:38:33.674 - 00:39:20.060, Speaker A: Oh, no, I was just going to say this is great and I think it makes a lot of sense to build on L2 with games, just gas fees, the UX, very pleasant on L One. If you had more, what other games would you like to implement here? I think Blackjack is like a very popular game that everyone would know how to play. So that would be our other choice. Nice. Do you guys have any other questions? I think we're out of time, but thank you, Team Polaris. Really appreciate you demoing, and great job. Thank you.
00:39:20.060 - 00:43:38.100, Speaker A: Okay, so great. So since that's our first four teams, we're going to take a quick two to three minute break. So, judges, if you want to sort of stand up, get the blood flowing, reorientate yourself, feel free to do so. And we will be right back in a couple of minutes. Yeah, cheers. Coming back. All right, let me know if you're back, judges.
00:43:38.100 - 00:44:16.950, Speaker A: And then in the meantime, Team Digi ULAB, if you're in the chat, can you please raise your hand just so you can promote? David, you've completely changed. I've traveled to a different place, crossed the apartment. Crazy. Okay, last call for Digi ULAB. If you don't raise your hand in a SEC, we can just move on to the next team. Just the button in the middle of your screen. It says raise hand.
00:44:16.950 - 00:44:34.200, Speaker A: Okay, cool. We're going to move on to Team Alchemy. If you're here, please raise your hand. There we go. We got a taker. Okay, sweet. Promoting you now, Team Alchemy.
00:44:34.200 - 00:44:54.210, Speaker A: Okay, cool. When you're ready, feel free to share your screen with your computer audio sign ticked and we'll let you take it from here.
00:44:56.820 - 00:45:41.500, Speaker B: We are Team Alchemy. And here are the members of our team. Inspired by Vitalik's post on the need for social recovery wallets, we created a layer two wallet that enables users to recover their seed phrase anytime, anywhere, in a secure, decentralized and anonymous way. We need a better way to safeguard seed phrases. What differentiates us from other social recovery wallets is that our guardians are chosen randomly instead of by the user. Financial rewards have also been integrated to incentivize guardians to assist with seed phrase recovery for otherwise complete strangers. Here is how it will look for the user.
00:45:41.500 - 00:46:37.040, Speaker B: Welcome to Alchemy, the Guardian of Wallets. Our user will be prompted to log in by entering their password and importing their wallet. Once imported, they will be brought to the homepage where three options will appear protect a wallet, recover a wallet, and view stored wallets. To protect a wallet, you will be asked to choose a wallet, choose your level of encryption and entering your master key. Once confirmed, your seed phrases will then be encrypted and sent to your guardians, encryption complete. To recover your seed phrase, you will be asked to choose your payment method, entering your master key and requesting recovery. Your guardians will then be alerted.
00:46:37.040 - 00:46:41.810, Speaker B: They will then send your seed phrases to you.
00:46:42.580 - 00:47:24.056, Speaker A: Now that you know more about guardians of wallet, let's dive in into the technical part. A user will be able to ask to store his password securely to the smart contract. The smart contract would retrieve all the guardians and choose randomly people who are going to actually store your password. It's going to return a list of the guardians plus their public key. You're going to be able to split your safe phrase into multiple pieces, encrypt each of them with a master key plus a public key from each of the guardian. Once it's done, you're going to send each of the guardian a piece of your password securely off chain. You're going to then be able to store your contact list or the guardian list into IPFS.
00:47:24.056 - 00:48:13.700, Speaker A: The same goes for the guardian who has your seed phrase but has no idea who you are because he's only storing an encrypted password, a piece of password plus an alias that only you know. He will be earning interest for holding your password. And of course, every time you request your password, he gonna get more reward, which is gonna encourage him to keep your password safe. Quick end to end test for our smart contract. You can always look at the code in the GitHub to know more about the application. And also we want to mention that we're going to make sure that the Guardians have the password. So we're going to check in every month to see if they are still keeping your password so they can still keep their reward.
00:48:13.700 - 00:49:04.880, Speaker A: So what happened here is an invitation has been sent to the Guardian. The Guardian will be able to accept the invitation and we're going to select random Guardians. In this case, we're only taking one Guardian into consideration. The seed phrase will be then encrypted with your master key and then encrypted with the public key, then sent to the Guardian, who can then store it securely. At the same time, you can store the Guardian list on IPFS in order to request your seed phrase. You just need to call the smart contract and again, contact all the list of Guardians that hold your password by providing them with the master key. Of course, always encrypted with their public key so it could be secure even if it's off chain.
00:49:04.880 - 00:49:29.670, Speaker A: Feel free to share your videos and we'll turn over to the judges for questions. Sure. Cool. Well, I think this is awesome. I mean, beautiful wireframes. It just looks like you put a lot of time into this. So just great job.
00:49:29.670 - 00:50:12.596, Speaker A: Do you guys build this in three weeks? Yeah, we're actually still working on it. We even made some changes to the design that I wanted actually to talk about for the Guardians. Actually, when they're storing your password, they're going to have like a random reference that only you have. So even if somehow this Guardian want to go and check, oh, I have a piece of password, let me find someone else, he's going to find another person with had a random reference only, you know, and an encrypted password that is for him useless. And we keep adding layers of security to make it fully decentralized and more secure. That's so cool. Three weeks, like no sleep, it looks like that for sure.
00:50:12.596 - 00:50:58.128, Speaker A: And then you're splitting. Are you using like shamir, secret sharing to split the keys? Exactly, yeah. Very cool. Sorry, one question I had that you kind of answered in your video was you mentioned that we're going to kind of keep pinging the Guardians to make sure they still have the passphrase. Is that like kind of a point of centralization at this point and if so, something you plan to expand? Actually. Well, the user are going to pay for this service, right? We're providing him with a service. So in order to secure his password, I'm sure a lot of people you pay for banking fees, so you're going to pay either monthly or pay a year.
00:50:58.128 - 00:51:39.296, Speaker A: And you're going to have a small extra fees every time you recover your password to encourage more Guardians to keep storing your password. The idea is also to go from IPFS to filecoin so to keep sure that the password is actually there, so we don't want it to disappear after a moment. So, yeah, those fees are being paid by the user and interests. Actually. There is extra reward that we're going to put on Ali every time someone recover a password and it's confirmed, contract confirmed. He's going to get this reward, which is extra because he earned interest. I think it's really an awesome project.
00:51:39.296 - 00:52:18.988, Speaker A: Let me get this straight. So I have the app and I get randomly chosen to keep the password, like part of the password of someone else. And since I was chosen, I start getting a piece of interest from your treasury or something like that that is working in Ave. And then basically when someone wants to recover, then I also receive a payment because okay, yeah, just more detail about it. It's something we just add, actually, a guardian need to register, so we're going to have a list of guardian. If you want to be a guardian, you're going to register and you're going to pay extra fees, like registration fees. It's going to be very small.
00:52:18.988 - 00:52:55.044, Speaker A: We don't want everybody you need to have the app. So we need to know you because we're storing the list of guardians request to everybody. So you register to become a guardian and then we're going to contact you and as well, as you said at the end, you're going to get your wife. Okay, awesome. Yeah, I think this is what I understood as well. This is a very cool project and I think it's even more interesting because it's like something that has tried to be solved many ways and I think that's a very original solution. So, yeah, excited to see it scale.
00:52:55.044 - 00:53:17.228, Speaker A: Awesome. Thank you. Well, we already have NATIC coming in to talk to us just randomly, I think, because we have the project and they like it and we probably give us a small help in the development. So we are working it. We already have a roadmap, so it's going to be something that hopefully we can see soon. Awesome. Congrats.
00:53:17.228 - 00:53:26.448, Speaker A: Nice work, guys. Thank you. Thank you. Awesome work. Thank you so much, Team Alchemy. Of course. Awesome.
00:53:26.448 - 00:53:37.990, Speaker A: We found DGU Lab, so we're going to promote them right now and they're going to be up next. Okay, cool. So I have instructions to share this video from my end, so I'll be doing that right now.
00:53:44.650 - 00:54:13.518, Speaker C: Hello, everyone. We are DGU lab team. We are part of the DGU AI project, one of the top three crowd investing projects. Our goal is to create a cross chain swap between Ethereum and Binance smart chain. Blockchains BSc is a functional clone of Ethereum, but much faster and has a lower transaction cost. We create our own bridge between these blockchains. We use chain link to do that.
00:54:13.518 - 00:55:18.878, Speaker C: In Binance smart chain, the only liquidity entry point is Binance. It issues its own tokens packed to traditional tokens such as Ethereum or USDT. Therefore, if you have USDT ERC 20, you need to give them to Binance to get the Pegged tokens for BSc. So currently, Binance Pegged tokens are used in BSc and secured by Binance's honest word as Binance bridge is centralized black Box we see this as a potential problem that we can solve by providing people with decentralized and clear cross chain bridge to swap their assets. So we create a decentralized exchange that uses liquidity pools in different blockchains and transmits cross chain data using chainlink based Bridging technology. It should be noted that this solution will work with any blockchain that supports EVM and chainlink. Our prototype works similarly to the Uniswap protocol.
00:55:18.878 - 00:56:02.670, Speaker C: Let's look at a prototype cross chain exchanger. We have improved the user experience by using our application to simultaneously use the connection of two wallets set up on different networks. Let's do an exchange between Ethereum Rinkibuy and Binance smart chain testnets. First, let's run the approve. Please remember the balance of the pools. After the exchange, they will change. The operation of our pools is provided by two smart contract pools filled with liquidity AAV Rinkabay Network Test tokens and Uni Binance Smart Chain Testnet.
00:56:02.670 - 00:56:48.094, Speaker C: When the transaction is confirmed, you can click Swap. We need to accept the offer and confirm the transaction. It puts the AAV token into the pool and initiates a client contract. Call in BSc blockchain using chainlink now we need to wait until the transaction is confirmed. The connection or communication between the blockchains is provided by the two chain link nodes we deployed. When the transaction is confirmed, the node that is connected to the Rinkabay will run the job. This job will initiate the sending of uni tokens from the Binance smart chain pool.
00:56:48.094 - 00:57:24.722, Speaker C: We need to use chainlink token to call Oracle's Chainlink Services. You can see this in the transaction here. Let's refresh the BSc Testnet Explorer page to see the incoming transaction. As you can see here, we've received the requested amount. Now we can check the received amount and compare it with the amount we've sent in the swap interface before we clicked Swap. Also, you can see the change in the crosschain pool balances. We've also developed an add liquidity operation.
00:57:24.722 - 00:57:35.600, Speaker C: It uses similar principles, even though it's a bit more complicated. Thank you for watching our presentation. Feel free to ask your questions.
00:57:40.150 - 00:57:51.060, Speaker A: Very cool. All right, Bogdan, I'll turn it over to you. Feel free to share your video. There you go. And over to the judges. Very cool. Yeah.
00:57:51.060 - 00:58:38.020, Speaker A: Cross Chain Liquidity it's becoming clear we're going to need lots and lots of bridges and ways to move between chains as we're moving away from kind of this single chain world. One question I had was I guess I'm not as familiar with how chainlink works. So is this basically using chainlink to read the balances? Kind of using chainlink as the bridge to relay, like, oh, this has been deposited in one place and sending that message to the pool on the other chain. Is that basically how it works? We use chain link both ways. Okay. To read the data is the most simple way. But also we use chain link.
00:58:38.020 - 00:59:12.698, Speaker A: We have wrote chainlink script, chain linked, external adapter script and it actually calls a contract method on another chain. So we have the whole mechanics working. Very cool. That's kind of a unique for now, we have the smart contract. It's the same. Our Dex pool smart contract is mirrored in both chains. And you have two methods.
00:59:12.698 - 00:59:51.622, Speaker A: I mean, even the method is the same. If you want, I can show you. That's very cool, thanks. And it's working, this prototype, it's working just for one token in one chain and one token, yeah, and on Rinkabee, but still that's awesome. That's quite nice. Congrats on the project. I was wondering, do you see this as first step to bridge ethereum and BSc? And do you have plans to build a chain using the same I saw in the presentation that it was compatible.
00:59:51.622 - 01:00:35.030, Speaker A: But is this part of your plan or is this just like a statement? No, sure. Actually we have plans to design real liquidity pool with mixed liquidity from different chains. And of course we want other chains to participate in it. Also, there is no limitations, any ethereum, any EVM compatible blockchain. We can configure it and it will nice. Nice. Awesome.
01:00:35.030 - 01:01:41.390, Speaker A: Yeah. I echo what David said around just having more cross chain bridges. I think this is awesome. I'm just curious, what do you think was technically the most complex part of this implementation? Actually, the most complex thing is in front of us is to make this decision decentralized. Because in this prototype, what we showed you, this external adapter which runs on the chain link node, it actually becomes a single point of failure. So in this implementation there is no decentralization. But what we are thinking now is to make such adapter that it can become really decentralized, that we can let anybody to run it and it should be trustless.
01:01:41.390 - 01:02:51.102, Speaker A: And we have thoughts how to do it but didn't implement it yet. Yeah, that makes sense. That's definitely this is the most complicated because in my level of understanding of chainlink now that what do they sell? At the moment they sell price feeds, but price feeds is a little bit different. For example, you're getting prices from 20 nodes and you can see that maybe one node is malicious and you can throw it out, it's okay. But our goal is to make changes on another side. So we have to do some protocol like how adapters should negotiate between each others or it's one way or second way is maybe to embed it into chain link code. So there is a lot of different ways to implement it.
01:02:51.102 - 01:03:25.646, Speaker A: Yeah, for sure. That definitely sounds quite complex, but I think what you've done here was awesome. And I'm looking forward to seeing where you take this project and you can test our web application. And there is two Facets in the right upper corner. You can press Facets and you just need to add token into the wallet. Awesome. All right, we got to wrap up here on this one, but thank you team Digi Lab.
01:03:25.646 - 01:04:01.514, Speaker A: Awesome project and excited to see the future for that one. Yes, thank you very much. Okay, cool. Up next, we've got team Hush hush. So we've already promoted you guys, so feel free to share your audio or your video with the audio button checked and I'll turn over to you. So I'll be presenting hash improving anonymity on savings accounts. So the problem is that we want an on chain savings account, but just having eight tokens in a wallet is not private and leaks a lot of information.
01:04:01.514 - 01:04:45.926, Speaker A: We could put eight tokens into a tornado cash pool that would be great for privacy, but it's very inconvenient if I want to continuously use vomits. So say I want to deposit $1,000 and then withdraw half of it at some point, I cannot do that. Our idea is Parchosh, which is a sort of tornado cash with a twist. We have fixed deposit amounts but variables withdrawals. So we're doing this exactly the same manner as tornado cash is by using CK Snags. And CK Snarks is really just a proof that proves that something is true without showing you why it is true. So to deposit, we don't have to provide a proof.
01:04:45.926 - 01:05:37.690, Speaker A: The user simply provides some secret knowledge, which is K, and then the contract computes a leaf and inserts us into a tree. And then it pulls funds from the user's balance. So first part of the withdrawal is what do we actually need to prove? So, to be able to make this continuous deposit, we have to provide a change leaf that is inserted into a tree. And then we have to prove that we know all of the secrets for our inputs and that we are not creating any funds out of thin air. And to ensure that we cannot spend the same funds multiple time, we provide a nullifier. Beyond just what we have to prove, we also need to think about how we can publish the proof. So if the user publishes the proof himself, it destroys his privacy.
01:05:37.690 - 01:07:04.950, Speaker A: But we have to keep in mind that regardless of who publishes the proof, the proof should be is valid. So we can have a relayer do it instead. And then as we're having a fee inside the withdrawal, we can have this fee go to the message sender, meaning that if the fee is larger than the transaction fee, it is an easy arbitrage. And then we also need to recall that because we are using Snark, the publisher cannot change any of these inputs without it validating the proof. So To Nadocache has better privacy as it is more limited on what users can do. Then we also have an issue of we cannot run in the browser currently because of some issues with Nagjs future work. We'd like to have like publish encrypted versions of leak relief contents just to ensure that people not throwing away the funds set up a network of relayers and then have in pool transactions and then we have a small demographic.
01:07:04.950 - 01:08:01.552, Speaker A: It also turn over to the judges for questions. Nice. Great job. Yeah, I think this is probably super complex to do. I think it's a pretty glaring gap, at least in my view. I think the transparency of public blockchains is both a blessing and a curse. So I think this is a really useful thing that you've built.
01:08:01.552 - 01:08:45.870, Speaker A: So awesome job. I'm curious, how much gas do you think this would cost to do a withdrawal on Ethereum L One today? So it is really expensive, especially so the hash function. We are not using Shard 256 as that is very inefficient inside the Snark. So we're using Mimsi and then depending on the depth of the tree you are using around 50,000 gas per hash. So say the tree is the same size as tonight's gas. So 20 step deep, then you're almost around a million gas. And then for the withdrawal you're also having the Snark and withdrawing the atones themselves.
01:08:45.870 - 01:09:26.884, Speaker A: And we also had to make a calculation. So because inside the proof we have to have a specific amount, not an amount that is changing over time. We are using the scale balance of the tone. So we also need to take the scale balance, compute how much would that be in current balance and then withdraw that from the pool. So it is currently very expensive to do. We thought about making some of the verifications move more of the verifications inside the Snark. But then we have some issues as then you have to be the next transaction.
01:09:26.884 - 01:10:15.080, Speaker A: If the state has changed, your Snag will be invalidated and that would not be that nice. So you would be around like a million gas to deposit and then just a bit more to withdraw. So it would be fairly expensive. Yeah, which for some users that's okay too. If you have a large enough balance and you want privacy, maybe you're willing to pay for that. If you were to build on an L2 today, which one do you think you'd do it on? So I think for something like this it would make sense to look at something like CK Sync or talk with the Aztec guys as you could have recursive snacks. So you have pretty much a roll up of the Snarks.
01:10:15.080 - 01:10:49.588, Speaker A: So you just validate that on the main chain, which would then be just the snacks, around 3 million gas. And then you have a set of nodes that will make the off chain commutations. Yeah, just congrats. That's a very cool project. I don't think the gas is that an issue. Like Dimitri was saying, potential user of that would be large accounts. So for them gas is not necessarily an issue.
01:10:49.588 - 01:11:19.080, Speaker A: I would not put that as the main focus. The gas optimization is always cool and that's like gas is pretty close to tornado cash. So I think it is sort of like the same user base as well. Yeah, I think it's a very cool project. Congrats. Very impressive. In terms of the cost and stuff, I feel like especially when it comes to zero knowledge stuff, this stuff tends to advance kind of exponentially.
01:11:19.080 - 01:11:52.920, Speaker A: So I imagine stuff that's expensive and difficult to do today will be a year from now. Quite easy. Can you talk a little more about the cryptography side of it? I mean, I'm not a cryptographer at all. Okay. So this state is pretty much just a merkle tree. So when you make a deposit, you don't have to make a proof. You are inserting into this Mergal tree and then we use an incremental Mergal tree, meaning that when you insert, you pretty much compute the path to the leaf and then you insert the new leaf.
01:11:52.920 - 01:12:28.256, Speaker A: Do you have to submit a proof? It's not really a proof when you submit, you just submit the new leaf and then you insert it's just a leaf. Okay. Yeah. Is the whole tree stored on chain or just the tree is some of the values are stored on chain. You need enough values to have some of the intermediates to make it easy to compute. But you don't have to have the whole tree on chain. And isn't it possible to work back the balances by the interest accumulated? So like maybe you could get doxed by the interest that you accrued.
01:12:28.256 - 01:13:18.820, Speaker A: So the idea is that the withdrawals themselves are anonymous, but you can see who deposits in. So say that if you're the only guy who deposited in then really easy to figure out who you are. But you could also just withdraw some of the funds at a time and then it'd be fairly hard to see if say, 100 people have deposited $1,000 and somebody withdraws 200, then it's fairly difficult for you to see who it is. So that is also why we have limited to a fixed amount that you deposit. So if you have to deposit the same scaled amount so say that at one point deposit will be $1,000, then at a later point if you have to deposit, it would be 1100. Okay, very cool. Yeah, you should create like basically a private market on the every protocol.
01:13:18.820 - 01:13:25.850, Speaker A: Very cool. Awesome. Okay. Thank you. Team. Hush, hush. Thanks so much.
01:13:25.850 - 01:14:04.910, Speaker A: All right, we're going to move on to Team Interest simulator. And I have a video from Anna that I'll play on her behalf. All right. Hi, my name is Anna and I'll be demoing the Ave interest calculator for you today. It's a simple tool designed to quickly estimate how much interest you would have earned if you were to deposit an asset on Ave version two, or how much you would have had to pay if you also decided to borrow against it. So here we go. This is all powered by the graph, by the way.
01:14:04.910 - 01:14:39.770, Speaker A: Here we have the graph. You can quickly see that there's definitely periods where you don't earn much interest at all. And then there's jumps and you start to earning interest more regularly. This is specifically for the Bat. Let's go for a different asset maker. So here we can also see that by the end of 30 days, you would have earned about $100. And we can also definitely borrow against it.
01:14:39.770 - 01:15:25.800, Speaker A: Here we go. So here, if you board 100 TUSD, the interest has lowered, but you're definitely still earning interest. And if you borrowed a bit more, you're going into the red territory and you would have started owing interest on your loan. Here, it's actually a little not intuitive that owed interest is still higher. That's because it's not normalized. So if we switch to USD, can see earned interest is higher. There's also the rate portion.
01:15:25.800 - 01:16:16.340, Speaker A: You can see the rate is highly volatile. This just gives the user better understanding of the ecosystem and which assets are more volatile, which are less. If I had a bit more time, I definitely would have loved to integrate a wallet and read all the assets that the user already owns and show them the accumulated interest they would have earned and maybe even just having multiple inputs for the deposit. So they can also do that manually. Thanks. Awesome. All right, turn over to the judges.
01:16:16.340 - 01:16:43.424, Speaker A: Yes. There you go. Yeah. Congrats on the interest in Merritt. It's really useful. I know that a lot of the user in DeFi and in Ave particularly, are always eager to make those simulation before they make some deposits or after to just see the opportunity loss or the potential gain. So I know that this has already a market that is not yet really tapped in.
01:16:43.424 - 01:17:17.772, Speaker A: So, yeah, congrats. Thanks. Yeah, this makes me think of I have APY vision pinned in my tab, which is like uniswap stats, and I'm always checking that and I feel like if this was live, it would be pinned right next to it. Check my uniswap, check my Aave. Super useful tool. You got any thoughts or ideas about adding other protocols? I imagine this would be useful for kind of any lending or interest bearing protocol. So so far it's just on just I had a hard time coming up with an idea, to be honest.
01:17:17.772 - 01:18:08.264, Speaker A: So I just went off one of the RFPs that Avi had on their website. So, yeah, definitely an opportunity to integrate other protocols. And yeah, that's not an issue. Awesome. And what was the most challenging part in building the interest simulator? I think I had a hurdle. With the actual formulas for the Instantaneous Interest because the documentation is a little misleading. And yeah, just reading the graph because the historical data is limited to like, 1000 entries.
01:18:08.264 - 01:18:36.950, Speaker A: So just figuring out the graph for that and learning awesome. Don't hesitate to keep in touch to explain what part of the documentation was not really clear. Congrats. Yeah. This is awesome. I would echo what David and Jordan said. I think in general, use in DeFi just need more analytics and tools because I feel like they often just don't know what they're getting themselves into.
01:18:36.950 - 01:19:16.412, Speaker A: So this is great. On that formula part is part of that difficulty, and I'm not sure if this is true, but this Instantaneous Interest or like, the fixed rate isn't actually fully fixed and so it still kind of like fluctuates. And so is that part of the difficulty with calculating it or was it something else? No, it was just a technicality making sure my rates are matching. Abby's rates. Got it. And a really small point. Can you adjust the date range? Because on the UI it was last 30 days.
01:19:16.412 - 01:19:40.970, Speaker A: Yeah. So right now yeah, it's only 30 days. It's another thing that you can easily adjust and add on to the project if I had more time. Awesome. Is this live anywhere? No, but I can make it live. You should do it. Like, I want to use this.
01:19:40.970 - 01:19:54.044, Speaker A: Yeah, definitely make it live. We will promote. Yeah. Great work. Thanks. Great job. Well, if Ave promotes it, now you've got to make it live.
01:19:54.044 - 01:20:30.664, Speaker A: You don't have a choice. Okay, awesome. Thanks so much, Anna. And up next we have Quickzap, and then we're going to take a longer break after that one. So team Quicksap, if you could raise your hand if you're in the chat here, that would be helpful. All right, there we go. Awesome.
01:20:30.664 - 01:21:22.090, Speaker A: So when you're ready, feel free to share your screen and tick that Share computer audio box. All right, let's take a look. Is a DeFi payment gateway. It's the easiest way to make and accept centralized payments from customers anywhere in the world. To make use of our API, you just need to click on the Get Started button. You could copy and paste the API in your code and then load your page. Now, this is a sample page on how the API works.
01:21:22.090 - 01:21:59.560, Speaker A: Like, I want to make payments for this shopping cart. All I need to do is to click on the Pay Now button. Then it pops up, I connect to my wallet. We select the token. We select the token, type one you used to make payments. Then I click on Pay, then I've made Payments, which shows you how you can use any form of, ERC, 20 token to make payments at any store. Now we about three in our team.
01:21:59.560 - 01:22:26.940, Speaker A: These are the team members that made Quick. Zap. Okay, cool. Yeah. That's the end of presentation. Yeah, we'll turn it over to the judges for any questions. Great job, Sam.
01:22:26.940 - 01:23:42.356, Speaker A: I think the more fiat on ramps and the more you could connect DeFi and crypto to, I guess the traditional economy, I think that benefits the whole space. So, really important work here. I'm curious, what does the merchant have to do on their side? Well, is there anything that the merchant has to do to accept a payment? Does it have to convert to fiat on their side or do you have a sense of how you'd want to build that out? Okay, for the merchant to make use of the receive payments, all what they need to do is just to copy API. So to make it more easy to implement, so they don't need to make use of any API key. So all what they need to do is just to copy the code snippet and paste it in their code and they pass in the amount and they pass in the token type they want to receive payment. Probably maybe I want to receive payments in half or maybe in any form of ERC 20 token or in a stable coin. So then I set the token type.
01:23:42.356 - 01:24:47.950, Speaker A: Then once I put the code in my website or in my app, then by the time I load the page of my app, when users comes to my store, they want to purchase something, they can just click on the Pay button and it pops up. So they select the type of ERC, 20 token they have with them to make payments. So we are actually planning to roll this out for public use. We have a working demo already. So the goal is also to also include in the future to include other blockchain technologies whereby you could switch from maybe ethereum to polkadot, from polkadot to just having combination of all the tokens and coins in one place, they can use it to make payments. So just like for example, now I need to do something like some emergency emergencies whereby I have some tokens where I can use for my day to day activities. So that what brought up the idea.
01:24:47.950 - 01:25:34.776, Speaker A: Got it. Okay, great. Thank you. Yeah, congrats. Also on the Quicksap project, I was wondering, have you thought about using the interest bearing stablecoins? So instead of using Dai, a stablecoin using Adai so that your merchants have directly like interest bearing treasury, since it's always like one to one to the underlying is it something you could yeah, we've talked about it, but we've thought about it also because of the time was not enough for us to make the development. So we're trying to rush. So our plan was to use chain link in getting chain link to get data for the currency conversion, like building a chain link API.
01:25:34.776 - 01:25:55.520, Speaker A: But we didn't have that time to integrate that. So we saw that it was already close to the dying minute. So we just had to quickly rush. Very cool. Thank you. Awesome. If that's it, thank you, Team Quicksap.
01:25:55.520 - 01:26:26.830, Speaker A: All right, awesome. So we're going to go into another one of our breaks. Thanks again. So, basically, judges, just to give you an idea, we probably take a couple, maybe five minutes or so, kind of stretch your legs. Feel free to jump into that side. Call if you'd like, if you want to mute here and go chat there if you want to exchange answers so far, but good opportunity as well to sort of see how everybody you've seen ranks so far. And we've got four more after the break.
01:26:26.830 - 01:35:18.128, Speaker A: All right, see you all in about five to ten minutes. Cheers. Yeah. Hello, everybody. Getting ready to get back into it? I am, yeah. Awesome. All right, looks like we're all here.
01:35:18.128 - 01:35:27.830, Speaker A: I'll share mine too. There we go. And another corner of David's apartment. Very good. That's the first. Very good. All right, cool.
01:35:27.830 - 01:35:56.030, Speaker A: All right, so like I mentioned, we've got four last projects up next. Last but not least, in terms of next projects, we have Team Xcfd, which is Nathan. So I'm going to invite Nathan up to right here. And Nathan, I'll be playing your video. All right, we'll let Nathan get all set up. All right. And here we go.
01:35:56.030 - 01:36:25.236, Speaker A: Hey, welcome to the demo for the beta of Xcfd. It's a decentralized protocol for buying contracts for difference on Ethereum. You can learn more@xcfd.org slash docs, but I'm just going to jump right in with a demo. If you want to learn more about how what I'm doing works, you can just read about it here. So I'm going to go launch app in the top right that'll take me to App Xcfd.org. I'm going to click Buy in the top right here.
01:36:25.236 - 01:36:39.996, Speaker A: So I'm going to get ready to Buy contract. But the first thing we need to do is connect an Ethereum wallet. So I'm using MetaMask for my wallet provider. It's a browser extension. It's free. I highly recommend it. One important thing is to make sure you're on the coven test network if you're replicating this yourself, because it's not on main yet.
01:36:39.996 - 01:36:59.376, Speaker A: Yet mainnet. But I will put it on Mainnet in the future. So I'm going to go ahead and click Connect Wallet here on the top right. There will be a little pop up window. It's going to make me sign or not sign, but connect MetaMask to this website. So I'm going to click next and I'm going to click connect. Yep, looks good.
01:36:59.376 - 01:37:40.384, Speaker A: Connect. Okay, so we're good. And if it works, might have to refresh the page, but it should have your wallet address or at least the first part of it here on the top right, I'm going to click Buy, and I'm going to click February 14, because it's not February 14 yet. Important thing about setting an expiration date is for your transaction to go through, you need to make sure it's a future date and CFDs expire on 10:00 P.m. UTC as per recommendation of Uma documentation. And Uma, by the way, is one of the primary protocols I'm building this DAP on. So without further ado, we're going to click looks good.
01:37:40.384 - 01:38:06.424, Speaker A: Ether, by the way, is the only token that supported right now, but place order. And we're going to click confirm transaction. And I'm just going to check the console to make sure everything looks good. Yes. So we have a contract for difference on Ethereum now that's going to expire on the 14th. So that's it. In short, there's a lot more that needs to be done here.
01:38:06.424 - 01:38:32.080, Speaker A: This is kind of a partial incomplete demo, but I figured it's better than nothing. I'm going to be working on this a lot. I'll be active in the Uma discord and be pushing updates for this and hopefully launching a main net V one as soon as possible with many more features. It's pretty busy, this hackathon, but, yeah, I think we got a lot planned for the future. So thank you for your time watching this. And if you have any questions, you can always let me know. All right, thanks.
01:38:32.080 - 01:39:15.550, Speaker A: Bye. All right, awesome. Turn over to the judges. Yeah, I think congrats CFD is like one of those primitive that is a bit missing in the current space. So yeah, glad to see someone building it. What was your main challenge in building those? Yeah, I would say just the implementation. So there's a lot of ways you can go about doing it, but ultimately I'm just trying to not only build new financial projects, but also migrate old ones, existing ones that people are already familiar with to the DeFi ecosystem because it's just good for adoption and just be cool to see.
01:39:15.550 - 01:39:42.944, Speaker A: Do you mind just giving me, like, a one sentence overview? Like, what is a CFD? Yeah, so it's like, basically an agreement between the investor and broker to exchange the difference and the price of security between the time the contract opens and closes with a set expiration date. And usually there's options to roll that Expiration over, but I haven't implemented that yet. Got you. That makes sense. Thanks. Yeah, very cool. And always good to have more of these primitives.
01:39:42.944 - 01:40:14.816, Speaker A: Right? Like, we're pretty much going to port over every primitive from the traditional financial system to this. Be cool to see. Awesome. That's working. Yeah, really great to see more folks building on Uma. I'm curious, is this a purely peer to peer model or is there an order book hosted somewhere for these CFDs? So this is actually using the price feeds through Uma DVM, which is, like, basically one of their oracles. Got it.
01:40:14.816 - 01:40:50.910, Speaker A: Could you walk us through what happens at Expiry? Yeah. So essentially, if there's not over 120% collateral, the contract will get automatically liquidated if collateral exceeds a certain amount. But basically if it's out, the money a certain amount, but otherwise it'll actually just go through to Expiration. It'll automatically liquidate. So yeah, that's the cool thing. It's like, basically contingent orders without the user having to confirm a transaction at Expiry. Got it.
01:40:50.910 - 01:41:41.528, Speaker A: Well, wouldn't you need bots to trigger the liquidation or is that not necessary in this model? Yeah, so when they sign back in, they'll have to confirm something, but yeah, got it. Okay, cool. Yeah, this is awesome. Yeah. A lot more work to do on this, but yeah, it was cool demo. I thought I'd submit it for for sure. Like Jordan said, I don't know of any other projects live doing this, so that'll be fun to kind of get it out in the open and see who's using it and get some feedback.
01:41:41.528 - 01:42:03.350, Speaker A: Yeah, nice. Okay, cool. Awesome. Thank you, Nathan. And we will move on to the next team. So up next we have Ave Teller machine. So, Chris, I'm going to bring you over now.
01:42:03.350 - 01:42:32.540, Speaker A: And Chris, when you're ready, feel free to share your video with the Share computer. Sound ticked. Hey, guys, how's it going? All right. And I'm going to share my screen here really quick and share sound. I see everything. Yeah, that's great. So, yeah, I'll just kind of walk you through this really briefly.
01:42:32.540 - 01:43:01.856, Speaker A: I have spent the last couple of weeks working on a thing that I call very lovingly, the Avatm machine. The Avatm machine is actually physical cash liquidity provision. So in my hand is $100 bill. But we'll talk about how this becomes $100 in die here in just a moment. Or a die, actually. Anyway, let's show how this works. What I have is an actual physical ATM machine made by a company called Gen Mega.
01:43:01.856 - 01:43:28.608, Speaker A: Gen Mega makes most of the ATM machines that you see in Bodegas and other places in the world. You just see one in the club, the one that says get cash. That's a Gen mega. So if you've seen it, that's the thing that I have. And I'll show you guys here in a moment. I've reverse engineered all of the functions of the ATM machine. The pinpad, the cash, dispensers the bill, acceptor the screen, all this stuff, to basically make it an ethereum contract front end.
01:43:28.608 - 01:43:59.108, Speaker A: So the team is me. Hi, I'm Chris. And, yeah, I'm actually a very good hacker, so I should actually say that first. I'm Internet famous for being one of the first humans to jailbreak the iPhone. So embedded engineering is something that I get very well. So, yeah, let's talk about a couple of the use cases that this machine does, and then I'll actually walk you through physical liquidity provision. So in this case, we've got an Alice and Bob.
01:43:59.108 - 01:44:32.628, Speaker A: This is an ATM machine at a bodega somewhere in Brooklyn. We'll say not too different from where I used to live. And Alice is a bartender at the Levee, and she's got about three, we'll say, $100 in cash, and she's walking over because she doesn't want to ride the L train. And with that cash on hand because people are weird, especially nowadays. So walks into this bodega and physically sees this Ave ATM machine. In this case, actually, let me go ahead and let me do the physical. That's that one I'm just slides are out of order.
01:44:32.628 - 01:45:01.160, Speaker A: So she walks in, deposits $100 in cash inside the machine. The machine also has an adjacent smart contract. The smart contract has the shop owner who owns the let's actually rewind a bit. You have an ATM machine in a bodega. One of the most important things to understand is that the shop owner also owns that ATM machine. It's just like the teller that they have on the counter. The cash that's inside the ATM machine is equivalent to the cash that they have on the counter.
01:45:01.160 - 01:45:58.176, Speaker A: It's basically one treasury all the way through. So what I'm proposing here is that and it's actually the cash that's in there about $4,000, is sitting there, not connected, doing anything. Now I have some better ideas on what to do with that in the future. But for this use case, I'm just saying for now, the shop owner also puts up, let's say, $1,000 in Adai liquidity. So what ends up happening is when he gets a physical $100 bill that is displaced by the Adai and pushed into the contract. And we have it working two way, the ability to put cash into a machine and the ability to reclaim. And so without further ado, and then also let me go another use case, one of the options that I could do is use physical liquidity providing as a way of doing a remittance transfer, if you will, so I can provide cash.
01:45:58.176 - 01:46:43.148, Speaker A: Again, the same story that we just had, but assign the credit delegation to someone else, maybe my abuelita in El Salvador. And so this is a way in which to provide really interesting potential cross border payments. Again, this is cash that exists on both sides of the ATM and it's simple software and an upgrade. So without further ado, I'll just roll my laptop into the next room. And here is an ave TM machine. Now, I've got it set up right here. I'm going to deposit some Ada, but let me just go ahead and show the physical cash work through first.
01:46:43.148 - 01:47:23.028, Speaker A: So here $100 bill. I'm going to go to my bill acceptor page. Here, let me open this up. Allow, open, and initialize Accept bill. So now here, if you guys can see this accept Bill reload, of course, like every fucking demo. Let's do this here. Crazy thing about ATM machines, they run components.
01:47:23.028 - 01:47:36.990, Speaker A: No shit, guys. I've had to reverse engineer so much stuff in classic Windows.com. But yeah, I've got bill acceptance, return. Let me go here. So accept bill. Initialize accept bill. There we go.
01:47:36.990 - 01:48:11.048, Speaker A: Initialize accept bill. Come on. Oh, yeah, now it's green. See that? It's green. Now, I push that in, I get a live bill, accepted notification that dings an internal smart contract that I have here. And that just pushes Dai directly to the wallet address that I have paired up here. So when I go look at my physical wallet now, once that happens, a transaction notification happens.
01:48:11.048 - 01:48:50.420, Speaker A: And basically in ethereum time, it'll take a little bit, but the human can just sit there, and they don't have to be in front of the machine to physically interact with it. And so, yeah, I'm basically working on all of the components of the cash acceptance and payout. And while I've got you guys on the phone, why don't I just do this? Let me introduce you to the Ave ATM bot, which is here. Let me just paste if you go to Telegram, I want to make sure we have time for questions as worries. Eight minutes total, and I think we're already at about seven. Well, let me stop my share. I'll go here to the chat.
01:48:50.420 - 01:49:26.130, Speaker A: I'm going to paste this bot there. If you go into it and one of you guys sends a dispense notification to the chat, you'll see it'll spit out $100 here on the other side of the machine. Disconnect slap. All right, cool. Judges, do you want to ask a couple of questions real quick? Yeah, for sure. In general, I love the name ATM. I get it.
01:49:26.130 - 01:50:07.900, Speaker A: And I applaud you on the bravery of doing a live demo, especially with a hardware machine. That's not easy. Yeah, I feel like I have a ton of questions and there's not enough time to cover it, but can you just clarify the workflow for me again? On the deposit, we'll say Bob is the shop owner, alex is the depositor. Right. But so when I deposit, I go to an ATM and I deposit. Do I need to specify my public key, a and B? No, it uses Wallet Connect. I didn't show you that part of it, but I can show you that I can connect with Wallet Connect, and that's how it gets the address.
01:50:07.900 - 01:50:31.190, Speaker A: Got it. And from which account is the Dai pushed from? From Bob's, the shop owners. So he needs to first top up that account with prep, and he'll have notifications as to how much is inside his mean, you know, it's part of the running a crypto ATM. Got it. Awesome. Thank you. Yeah, I'll give Jordan a question just because I'm sure he's never seen an ATM running his.
01:50:31.190 - 01:51:04.304, Speaker A: It's like it's fucking crazy awesome. Chris, I have many questions as well. Like everyone else, I'm around all day. Yeah, I'm working on this stuff. I think we contact. Do you always got, like, an ATM laying around in the garage? So the fun part about this is I was actually tapped by a group that does this right now. They actually manage physical ATMs in stores, and these are actually the ones you're most commonly used to.
01:51:04.304 - 01:51:22.980, Speaker A: So I didn't show you this part, but I've also reverse engineered these two. But that's a bigger story. Anyway. Yes. Basically, with the code modifications that I've made, my software can run on, I would say, 80% of the world's international ATMs and make them crypto ATMs overnight. Awesome. Yeah.
01:51:22.980 - 01:51:44.510, Speaker A: I have plenty of question and even ideas, for sure. I'd love to talk to you guys about them, too. I was going to ask if some bodega knows that their ATM is missing. Yeah, but here's the thing. Imagine a bodega. Currently, this is a cost basis for them for the most part. And now it's a thing that can actually give them yieldable money.
01:51:44.510 - 01:52:03.748, Speaker A: When we get into the remittances market, you see how big that is. You get into just the ATM fees market. A free ATM, like an ATM that has no fees except for the ether ones. Anyhow, that's it. Chris, thank you so much. This was sick. And yeah, I mean hope to see one in bodega near me.
01:52:03.748 - 01:52:20.264, Speaker A: Let's hope so. Thanks, Craig. All right, take care. Okay, cool. Up next we've got Team finance club. So feel free whenever you're ready to share your screen and computer audio and we'll turn it over to you. Sure.
01:52:20.264 - 01:52:44.700, Speaker A: We are up. I'll play the video now. Greetings. We are team Finance Club. Here to present our project. The problem we are trying to solve here is that many people around the world are hesitant to invest in the stock market or cryptos due to lack of knowledge about the assets, hence reduced financial inclusion around the world. But all of these players or users have a lot of knowledge about their favorite sports and their favorite sports stars.
01:52:44.700 - 01:53:28.364, Speaker A: So we want to build a platform where users can trade their favorite players, thereby getting an ROI for their income using cryptos. Now, the platform is being built as an ERC 20 Exchange platform where each of the celebrities or the sports stars will be listed there as an ERC 20 token. The users will be able to buy and sell these tokens for a particular price. The price of the sports players will purely be determined by the supply and demand for that player. For example, if a player is predicted to be doing well in the next match, the price of that player will increase and so on. Now, the platform is being built using Ethereum and layer two, Matic. We were also identifying opportunities with Avegochi after attending this webinar by them.
01:53:28.364 - 01:54:07.336, Speaker A: Let's take a look at the demo of our platform. The demo has been launched in DAP finance club. If you go to the homepage, we'll have five different players and two different sports here for the MVP. Now, any of these players can be bought and sold from the Exchange trading page. When I look at the wallet, this is where matic comes into picture, where Ethereum from the Ethereum network can be converted into Matic V 30 tokens automatically using the Matic widget that we have used. But let's take a demo of the actual extent trading page itself. Now looking at Mahendra Singh Dhoni, he is a favorite cricket player in India.
01:54:07.336 - 01:54:41.584, Speaker A: So this player will be listed here. All the buy orders and sell orders and the trades will be listed here. Now, when I go to some other player, the entire history of that player will come in. So when I want to, let's say, buy one of these tokens, I can either click on here any of the sell orders and fill that, or I can enter that manually as well here. So if I want to fill this sell order, I can buy and it opens MetaMask automatically. So currently it has been deployed into Ring B test network for testing purposes. Soon we'll be launching under Matic mainnet.
01:54:41.584 - 01:55:25.352, Speaker A: So once I confirm this order and the order gets placed and confirmed, you can see that this sell order gets executed once the order is placed. I can also see that in open orders and history. Now that the confirmed transaction has been confirmed, I can see that the 100 tokens that I have bought for a price of 00:13 has been filled. And also there will be a change in my candlestick chart automatically. So today there is an open of zero one and a close of 00:13. So this is about our platform. One of the most important questions that we get when we talk about this platform is about the licensing.
01:55:25.352 - 01:56:04.170, Speaker A: So Finance Club is a game of skills rather than a game of chance. And hence when you are predicting a user's performance in the future, it is not like a lottery where you take a game of chance and hence we won't face any of the copywriting or licensing issues from the players. Even if it comes. We have a reserve fund that will be maintained for all the traded sports stars, so we'll be able to pay them a royalty based on the reserve fund. The future work that is in progress is mainnet launch on the Matic network. We are planning to use Bikonomi for gasless transactions. We are launching our own Token which is used for fee payments on the exchange platform and integration with Chainlink and integration with Avegochi is also in the works.
01:56:04.170 - 01:56:22.496, Speaker A: That's Finance Club and you can check us out at WW Finance Club or DAP Financeclub Club. Thank you. Awesome. Turn over to the judges. Yep. Thank you. Very cool.
01:56:22.496 - 01:57:02.024, Speaker A: One thing I wanted to say is I love the UX. Sorry, the whole UI looks really beautiful. Did you guys build that whole UI just in these couple weeks? And can you say anything about the front end side of this project? That's right. I've used React JS and Drizzle which is a Truffle component for getting all the contract based data. So Trufflepress React is what is running here. I'm also planning to use Firebase to store the user's email ID and nickname for the user so that I can show real time updates on who's buying the tokens, who is selling the tokens that add more excitement to the players. We are also using APIs given by Crickinfo and a lot of other sports websites to update real time scores of tournaments and current matches.
01:57:02.024 - 01:57:32.440, Speaker A: Also we are planning to play live commentary in our platform very soon once it is launched. Awesome. Very nice. Thank you. Yeah, awesome. Congrats on building this so fast as well. I always love this kind of human tokenization because it works both as representation of the presence for the sports but also kind of prediction markets when we expect things for different basically sportsmen.
01:57:32.440 - 01:58:25.780, Speaker A: How do you see it scale? What would you be doing in term of the I guess there is even business model behind it. So where do you see it taking? Okay, the first place where we get the revenue from is through an ICO. For every new player that is launched there are going to be a few tokens which are maintained by the company as a treasury for the royalty. And in the future we are also planning to bring in complete decentralization of this where users themselves will be able to tell us recommend some players which they want to see in the platform and when they launch it, when they create that token they get a portion of that as well. So that's the first part of the revenue. Second part of the revenue comes from our fees. Every exchange trade that happens will have a 1% fee and that will go to the ERC 20 token owners and we are going to split that as governance and feature.
01:58:25.780 - 01:58:49.090, Speaker A: So that's how we have planned the entire revenue. We also have our own fancy token which can be used to pay fees. It's like BNB tokens on finance. So if you pay using the base Ether you pay a lot of fees and if you pay using BNB it is 50 percentage. So you can either pay using Ether or fancy token. Fancy token will be half of Ether fees. That's how we have planned the revenue here.
01:58:49.090 - 01:59:19.672, Speaker A: Cool. I agree with David. Really like the front end here. Really beautiful. How many instances of each player will there be? Okay, we are still working on the tokenomics part of it. How many tokens have to be launched for a particular player? So for example, Cristiano Ronaldo, should he have 1 million or 10 million tokens is a question that needs to be resolved. Probably all the people I've got from Discord using this market make can help me get into the tokenomics part of it.
01:59:19.672 - 01:59:51.300, Speaker A: But for now I've set it as 1 million to curb the supply. Oh, got it. Have you considered then using like an ERSC 1155 or does that introduce difficulty with trading these things? I've looked at Es 1155 but I've. Not decided whether I have to go with that approach yet, so I have to do a lot more research. For now, it is ESC 20, but shifting into ESC 1055 is not going to be a difficult task as well. So that can be done if required. For sure.
01:59:51.300 - 02:00:50.624, Speaker A: Got it. Yeah, because that might introduce some scarcity. And then just a comment, I think fee Tokens, they add friction to the UX. And I think if you could have a model where you accept payment as an ETH or stablecoin, and then you still have the Governance Token, and then have a portion of that go to a treasury that's controlled by the Governance Token, that's a much smoother UX. And I would just encourage to look at that because I think a lot of the payment token models from around 2017, it hasn't really worked out and it hasn't really accrued value. So I feel particularly strongly about this. So just encourage to look at ways to make it as easy for end users and especially here, which are probably more retail, to actually use the platform.
02:00:50.624 - 02:01:04.430, Speaker A: Sure, we'll look into that, definitely. Thank you. Thanks for the feedback. Yeah. Jacob, you're muted. Oh, man. Always once.
02:01:04.430 - 02:01:42.916, Speaker A: Thank you so much. Fanites club project. And I almost made it to the last, but last but not least, we have Helotech and Flash Loan. So, yeah, when you're ready. Hopefully you shared the computer sound, but you can take it away from here. Hi, just a minute, I'm sharing. Hello.
02:01:42.916 - 02:02:42.810, Speaker A: For the hackathon, I have taken simple thing called Flash Log, which is already the code is there. I'm just using the logic to unwrap it. So I'm using whatever the tutorial has now connecting the project, my hello, Flash loan project, connecting to this with the local garage. I'm sitting at the Ava loan. This is a lending pool address then. Now I'm going to deploy the Flash loan, version two, which is this one. So I have all these codes in this directory, flash Loan, which is it contains this contract, version one.
02:02:42.810 - 02:04:04.240, Speaker A: So I'm going to deploy that. I'm still learning about ethereum and solidity. It is like first hackathon for me. And this is the contract for the Ether wrapper we, which is a wrapper of Ethereum, the server contract. So I'm setting that as a thing to make a Flash load. And I'm calling from the account zero to transfer requesting to transfer one Ether to the this is the transaction ID. So now one Ether is of WVT is transferred and it so Flash Loan is executing.
02:04:04.240 - 02:05:37.826, Speaker A: So we have to introduce, as per the documentation, we have to introduce the document here. I'm planning to use one inch protocol to get the price. Here what I will do. Get a loan from Ave and then unwrap it. Unwrap the Ave WB, then swap that with one inch protocol with the Die. Then again, keep the swap with one inch protocol to the e, then wrap it again and then payback. So then what we will have we will have a hundred percentage from this text.
02:05:37.826 - 02:06:14.560, Speaker A: This is what I'm trying to do. I'm using I'm impressed with this and I wanted to do similar project since I'm not having some time, I have come up to this. Thank you very much for your time, judges. Thanks a lot. Okay, great. Turn over to the judges. Hi.
02:06:14.560 - 02:07:16.494, Speaker A: The idea is that you made weights to have simpler way of making Flash loans, right? Yeah, that's the idea. I'm just trying to understand. Flash loan is very fascinating to me now. Yeah. Flash loans are like one of my favorite features of DeFi. Do you see this stuff you've been working on as mostly for looks like this was for arbitrage. But do you have any interest in kind of using Flash loans for things like other uses like rebalancing collateral pools or things like that? Yeah, initially what the arbitrage is the biggest thing which I want to do because since from one exchange to get loan from Ave and convert that and get it from one exchange and sell it to another between there is arbitrage.
02:07:16.494 - 02:07:55.054, Speaker A: Right. Recently somebody exploited some $360,000. So I'm just trying to find what is the gap, how it is just exploring and then the other motivation is I want to make it like a pro combo. Easy, easily, anybody can even we don't know coding. You should be able to assemble your Flash loan with scratch like blocks like a block lead from Google. They have a block lead thing. Right.
02:07:55.054 - 02:08:30.266, Speaker A: I want to make something like with a block. Now every kid also know the scratch programming. So that is another aim instead of having a big like make it a simple blocks like Lego blocks so that anybody can understand like it's not like a rocket science. So that's one of the aim to take it forward. Very cool. Thanks. Yeah.
02:08:30.266 - 02:09:43.810, Speaker A: Really glad you're kind of diving in and playing with ethereum. It's a learning curve, but I think this is a great start. I'm curious, it looked like you were using one inch to fetch an Oracle price. Yeah. Any rationale on using that versus the uniswap v two T wat? One thing is the gas fee is very less promote. The other thing is I want to have I will use the one inch as well as uniswap and then compare whichever the best price so that you can make a little bit of money. Comparing the Oracle one inch is one of the basically I want to try what is any there is any gap between various different Oracles.
02:09:43.810 - 02:10:08.226, Speaker A: That's one of the motivations. Awesome. Congrats. Sorry. Thanks a lot. My first hackathon in blockchain, so I'm excited. Yeah, I think it's very cool to see you learning solidity through Flash loan.
02:10:08.226 - 02:10:18.906, Speaker A: I think that you started the right point. Thanks a lot. Thanks. Definitely. Okay, cool. Awesome. Thank you.
02:10:18.906 - 02:10:41.842, Speaker A: So much. And with that, we are all wrapped up on all the projects for this group. So thank you everybody for coming out. Thank you, everyone who demoed. As mentioned, this is part of Market Make. We're in the final days here with our finale. On Thursday, we will be showing off some of these projects and projects from other judge rooms as well.
02:10:41.842 - 02:10:58.374, Speaker A: So keep an eye out for that. That's Thursday at 12:00 p.m. Eastern time. And yeah, big thank you again to our judges. Thank you to all the people who came out and demoed their project. And we will catch you at the next East Global hackathon. Yeah.
02:10:58.374 - 02:11:09.334, Speaker A: Thank you. And congrats everyone. Thanks, everyone. Thank you. Yeah, this has been fun. And thank you to Jacob as well and all these Global for organizing. Yeah.
02:11:09.334 - 02:11:11.020, Speaker A: Thanks everyone. Ch.
