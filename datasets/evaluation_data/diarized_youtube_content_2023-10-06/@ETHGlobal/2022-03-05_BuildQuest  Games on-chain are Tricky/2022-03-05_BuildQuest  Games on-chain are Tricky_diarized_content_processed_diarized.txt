00:00:00.330 - 00:00:02.160, Speaker A: But it's a tough job.
00:00:02.610 - 00:00:04.000, Speaker B: Sounds like it.
00:00:04.930 - 00:00:19.898, Speaker A: Tough job. Tough job for sure. Thank you, everybody, for joining us this evening. It's evening where I am. It might be afternoon where you are. You know what? Whatever it is, it's great that you're here. We're joined by the legendary Austin Griffith.
00:00:19.898 - 00:00:45.530, Speaker A: I could probably give him an intro, but I know that he's going to give a better intro that I could ever do myself. One thing I can note is it is bow tie Friday and we will be taking questions in the chat throughout. So if you have any questions, if anything comes to mind, now's the time to do it because when is the next time you get to talk to Austin Griffith face to face like that? I can't think of another time. So without further ado, I'll let him take it away from here. Thanks again, Austin.
00:00:45.950 - 00:01:04.862, Speaker B: I mean, technically my DMs are open and anyone can reach out at any time. I'm at know if we miss something here, you can always reach out in the DMs and hit me. Hi. Hi. I'm at Austin Griffith. Austin at ethereum. I build lots of things in the space.
00:01:04.862 - 00:01:40.666, Speaker B: I focus on developer, tooling, and onboarding. And today we're talking about kind of like a step up from that. It's kind of like after you've got the tools and the onboarding and you figured out some solidity, like, what does it look like to build a game? What kind of games are good? What kind of games are bad? What do we see so far? Certainly not an expert in the game field. I've built a lot of game prototypes, but this is just kind of like my view of the elephant. So let's dive in and see how we're doing. I think we're okay to just get started, I'm assuming. I'm just going to get going.
00:01:40.666 - 00:01:52.800, Speaker B: If anybody has any questions, like I'm watching the chat here. Hit me up. Shout out to ETH. Build GMGM. Let's GM in the chat. GMGM. I'll paste some notes as we go also.
00:01:52.800 - 00:02:33.814, Speaker B: But I think first thing I have to do is a disclaimer or a speed run of Scaffold ETH. I've got to talk about scaffold ETH. Even though I'm just talking about games today, I've got to at least spend two minutes plugging Scaffold ETH. So Scaffold ETH is a let me get the chat up in case something happens. Scaffold ETH is a tool for building decentralized apps. I would go to hackathons all the time and I found myself building all the same components all the time. So I put them all in a repo and then they have grown and grown and grown into this where it's like this really nice forkable repo.
00:02:33.814 - 00:02:45.582, Speaker B: You clone it down. You have a decentralized app. You have hard hat on the back end. You have react on the front end. Tons of stuff to glue it together. Tons of handy components. Let me just do a yarn deploy here.
00:02:45.582 - 00:03:10.294, Speaker B: So you get in this dev loop, and this is the dev loop I want to show you. Basically get in this dev loop of editing your contract over here, and I can zoom in a little bit more. You start out with a template contract. Let me paste Scaffold ETH into the chat too. Did I do that yet? Oh, I did it already. Okay. So Scaffold ETH is just a repo? You clone it down, follow the instructions, and then you've got your smart contract here and your front end here.
00:03:10.294 - 00:03:40.994, Speaker B: And if you follow me at all, you've probably seen this a million times, but I have to make sure to drive at home every day. Once we get this, we can go on to games and build some other things. But getting started is so critical because there's so much noise in the space and so many tools. You can start with remix in a browser, tinkering with Solidity. But once you know that, you're going to need to have a front end and you're going to need to build something more complicated. You're going to build something that you want other people to use. Pull down Scaffold ETH and watch what you can do.
00:03:40.994 - 00:04:01.558, Speaker B: So basically, you can hack on this contract. I'm going to add some more exclamation points. I'm going to redeploy it, and it should give me more exclamation points over here in the front end. Basically, it gives you a front end that sort of auto adapts to your contract. Oh boy, what am I doing? There was a seed phrase. It's a development seed phrase. Don't worry.
00:04:01.558 - 00:04:29.774, Speaker B: If I have something like a UN public counter and set it equal to five and I deploy that, we're going to see a new counter show up over here. If I add a function to increment that counter, that's going to show up over here and we might as well do it. It takes 2 seconds. P-U-B-L-I-C there we go. And we want to do counter plus plus. Okay, there we go. We built a counter in Solidity.
00:04:29.774 - 00:04:56.746, Speaker B: We deployed it. We can go over here now and we can grab funds from the faucet and we can increment that counter. So as you get started with building your blockchain games, as you get started just getting going, scaffold ETH is a great place. I heard a shout out for ETH build earlier. I might as well give that one a shout out too. If you want to get the fundamentals, if you're just barely new, you're not much of a programmer, but you still want to get the fundamentals, especially for very visual learners. ETH build is a good way to do that.
00:04:56.746 - 00:05:37.880, Speaker B: It takes you through all the concepts in kind of a slow and not gigabrain way, like top of the bell curve, real top of the bell curve kind of content. That's what I like to provide. So that's ETH build, then scaffold ETH. But let's assume what we have here on the call is we have folks here that have already gotten started, are probably amidst getting going on a hackathon, and they're getting ready to build something cool. So what can we build with Scaffold ETH? What can we do with this starter kit? And that's what I want to talk about today. So let's jump over to this tweet right here. Wait, what was this? I feel like maybe this is important.
00:05:37.880 - 00:06:01.374, Speaker B: We'll come back to that. That's a dice roll game when we start talking about randomness. Okay, so this is a tweet from Alex Van de Zant from a long, long time ago. And it's about what makes a good blockchain game. Let me see if I can zoom in here. Heck, can I share this thread? Let's share it with the wait. Okay, so we'll come back to this.
00:06:01.374 - 00:06:21.010, Speaker B: I got a question about why Scaffold ETH or Morales? I think they're kind of different things. I think maybe Morales has a Scaffold ETH kind of starter kitty kind of thing. Scaffold ETH is a starter kit. It's not a backend at all. Morales is its own backend and a service that you rely on. Scaffold ETH is a thing that you clone and take with you. So just the difference there between Morales and Scaffold ETH.
00:06:21.010 - 00:06:57.114, Speaker B: I know there's a sponsor here and I should have had a better Scaffold ETH fork that uses Morales just as a demo, but there are different services. Scaffold ETH is used for getting a prototype app out and in the wild and having your friends use it quickly. It uses ETH hooks and things that pull from the chain similar to Morales but without the middleware service. It depends on kind of what you need to build. You explore both the tools and use the one that gets the job done best for you. Okay, back to games. And also just like, keep throwing questions in the chat.
00:06:57.114 - 00:07:21.222, Speaker B: I'm down with that. I can rock with that. But here we go. Games. What makes a good game, right? First of all, it needs to be a good game. If you're just deploying a blockchain game to get rich, just like some random thing that is game mechanic, you slapped on top of blockchain and called it good boo to that boo to that boo in the chat. So it needs to be a good game first.
00:07:21.222 - 00:07:54.338, Speaker B: It should be fun offline. Like you should be able to play it somewhere else and just like the mechanic of the game should be good. And if you've ever played Dark Forest Forest game, what is it? ZKG Amy. It is a great example of a game that is just fun to play. It's just addictive. You start playing, you start moving troops around, you realize the world's so big and there's no way that you're going to be able to compete. But just playing it is fun and it's addictive and you find yourself an hour later like what just happened to the last hour.
00:07:54.338 - 00:08:33.002, Speaker B: So that's the start of a good game, right? You need to have that upfront. Okay, so then explore what makes blockchain unique, right? There's a bunch of limitations here. There's async slow blocks, right? It's expensive to make these reads and writes, but you're going to get a lot of cool things out of this too, right? This world is going to be persistent and always on. It's sort of like always on. If you build a smart contract game correctly, not even you should be able to stop it. Which is really interesting. And that's a really interesting mechanic to think about a game world that lives forever.
00:08:33.002 - 00:09:16.750, Speaker B: And it also has all these incentives and economies built into it. And how do you build a game with incentives and economies that doesn't become inflationary? Or maybe every game always is inflationary and we do it in rounds or something like that. So these kind of mechanics are things that you want to be thinking about as you're getting into building a game. And this is one of the interesting ones. And he's kind of amended this. He's even added to this huge shout out to Avsa here using all his content, but he's even amended this, that players need to own the game. If you build the game and you try to control every aspect of it, it's not really a blockchain game because it needs to be composable and it needs to be community run.
00:09:16.750 - 00:10:00.566, Speaker B: And if you try to control everything, it's basically a centralized game, right? A decentralized game. A lot of the things from the game probably will emerge from the community and how people use the game in the first place. So you're kind of thinking of games differently here when we're thinking of them on chain and to dive into the players own the game thing. He has another Tweet which I didn't find, which I should have, that we're just going to sit here and talk about simp on Avsa a little bit here. He talks about how a good NFT project right now needs to give itself away to the community and let the community control it. And that is at ODS with making money. And so there's this kind of polarizing.
00:10:00.566 - 00:10:44.954, Speaker B: Are you deploying this game to make money or are you deploying this game to give it up to the community, to let the community run with it and build with it and have them own it? Right? And maybe there's some middle ground there. Of course, if you're building awesome stuff, you should be rewarded for it. You shouldn't do it all for free. There should be something in it for you, right? But also you should be enjoying what you're doing and all that. Okay? So anyone is allowed to get in the community should own it. And this last one is really important too, because it's going to be on chain because it's going to be in this very programmable environment. You're going to have to expect that people are going to build bots and code that will run alongside your code for the game.
00:10:44.954 - 00:11:38.154, Speaker B: And you need to be able to embrace bots. You need to make a world where maybe Arbitrage is a great example, right? Like you have two markets on two different planets. And what is balancing those two markets when there's a big shift, right? Like players back and forth, but then they quickly build Arbitrage bots and you can imagine spaceships flying back and forth just running Arbitrage on two different markets. We've seen that like DFI Summer showed us all of that stuff. But now we're going to see those kind of things in games and we're going to have probably L2 Summer, right? Speaking of awesome games and things to come, we have all these big L2 S coming out or out already. And now we can kind of build fast, cool, quick, cheap games that are still on that secure network. Okay, how do you code a game where you can't cheat, right? Exactly.
00:11:38.154 - 00:12:23.994, Speaker B: So you're thinking of the game in the front end, right? You don't want to think of the game in the front end specifically. We're going to get in here and we're going to talk about movement and how movement is hard on chain. But you want to think of the game is here, it's written into the smart contract. Almost everything from your game should settle to a smart contract. Let's dive into that a little bit because there's a couple of games out there that are kind of like these card games that most of the game is actually on some server and it's like a signature based game. And really the only thing that's on Chain is like the cards and who owns the cards and that counts, that works. Those are some of the most popular games right now.
00:12:23.994 - 00:13:28.654, Speaker B: They're not actually on Chain, just the card ownership is on Chain and the game mechanics, a lot of them are on an off chain server that still uses signatures, which is very Web three, but somewhat centralized, right? So just bringing that into that into it too. When you're thinking about your game and your pacman little character moving around in there, you should assume that someone can play the game without the front end at. Like, technically, someone should be able to play your game within. You know, that doesn't work with some ZK games that have to be crunching proofs on the front end and submitting those proofs. So sometimes you're going to need a front end, but kind of like just thinking of where the security is, right? When we talk about security in the front end or security in the back end, your critical game mechanics should exist here in the smart contract and the security should be on the network of ethereum, like the protocol security. Right? So that's the level of security you should be thinking of. You write your game correctly, someone wrote code as law.
00:13:28.654 - 00:14:17.118, Speaker B: I don't know if you're phishing or not, but yeah, in a way this code is the law of the game, right? Can I interact and cheat? Yeah. So if you can cheat the smart contract, you can cheat the game. The code is going to do what it's supposed to do. Let's get into games a little bit more. I think the idea of movement is a really good way, something to talk about maybe before even talking about that. One other point I wanted to make was about what makes NFTs valuable, right? Where's? Where's Kevin? Is that thing called Kevin NFT? Is it even just going to take me to that? Yeah, here he is. This guy, right? So why, why is Kevin so valuable right now? Let's just go to OpenSea, right? I can find it on OpenSea but the answer is the market.
00:14:17.118 - 00:15:11.578, Speaker B: Right? Like I can mint an NFT and you can mint the exact same NFT and one of those could be worth thousands of dollars and one of those could be worth nothing. And the difference between those is the market has decided that mine is worth more money, right? Like what gives it the actual value? So when we talk about the game and its intrinsic properties of I'm building a game and it's fun, that is then kind of yes, it is fun. And then there's this other know the market decides what makes it valuable and why it's valuable. So there's a whole kind of subjective thing that happens here not only with the fund games, but what is valuable and what's not valuable. Kevin being worth four e or whatever he's worth right now. Just some fantastic stuff happening here. Oh, it's decentralized and it's permissionless.
00:15:11.578 - 00:16:10.610, Speaker B: So you're going to have players of your game that are jerks and they're going to grief the system and you have to assume that people are going to be jerks and grief the system. This is a very adversarial network so you need to build your game in a way to understand that people will be jerks and people will grief you and it's something that you need to prepare for and build into the game. Basically. Like thinking about liquidations, right? I keep bringing DeFi into this but when you take out an overcollateralized loan, if at any time that loan becomes under collateralized, some jerk can hit a button and liquidate you and get paid. Right. That jerk is actually like securing the whole system. And so we want to think about these protocols, these games, these structures that we're building as adversarial and the adversarial kind of attackers are actually very valuable in keeping the system secure.
00:16:10.610 - 00:16:38.522, Speaker B: Okay, lots of stuff here. Let's see where the dice game? I want to do movement. I think movement is the next cool thing to talk about on chain, and I think this will show it the best. Okay, so this is galleyass and this is running on XDI or Gnosis chain. And if you look closely, I'm going to zoom in this cloud. See this cloud? Every 5 seconds, this cloud shifts a little bit. Keep watching, keep watching.
00:16:38.522 - 00:17:07.234, Speaker B: Watch this boat here, too. See that? So these are game items. Even the cloud is in a smart contract. There's a smart contract for the clouds. And it says this cloud is this image and it starts here and it's moving at this speed. And it's going to slowly move across the horizon until it gets to the other side, and then it'll roll back around and keep going. So this cloud is basically moving forever since the time I deployed it.
00:17:07.234 - 00:17:47.202, Speaker B: But if anybody goes to the smart contract and looks at when it was deployed, how long it's been out there and what time it is now, they can render that cloud in the exact same position. So if anybody else goes to galleyastide IO, and it's an old defunct game, there's not even any wood in the harbor anymore. You can't even craft ships anymore. But this game is still running and you will still see that cloud in the exact same place you'll still see these two boats. So these two boats are two players. Notice how like, massive multiplayer this starts to feel when you allow anyone to just mint a boat. And then let's talk about this movement, how this is working.
00:17:47.202 - 00:18:14.202, Speaker B: So with the cloud, it's easy. I can say this starts at position X and it's going to travel at a certain speed. And so given any other time, you know where that thing is? Well, with the ships it's a little different. See how these boats, most of these boats have their sails down and they're fishing. See this guy trying to catch that dangler right there? There's some fish down here at the bottom, too. All the fish are ERC twenty S, I think maybe they're 720 ones. The boats are definitely 720 ones, though.
00:18:14.202 - 00:18:39.746, Speaker B: But see this guy's moving? So the difference between this ship here and this ship here is this guy has his sales up. The sales are up on the boat. So the way movement works here is you get an 721, you buy it for 0.1 XDI. That's a 10th of a penny you could buy it for. And then it shows up here, but the sales are down. You can see a lot of people are still here with their sales down.
00:18:39.746 - 00:19:31.810, Speaker B: So you have a 721, you put it into the contract. Now the contract is in control of it. And you tell that contract, I'd like to put my sales up and the sales go up on your boat. So it's kind of like a vending machine or even like an arcade machine where kids can come to the arcade and they can put in their boats and their swords they could get from other games. They can put them into the vending machine and the vending machine takes control of them and starts playing with them based on a set of rules. And the kid can play for a while and when he's done, he can eject his boat, take it out, take it over to another game and put his boat in the other game and play with it over there, right? Maybe this game is like strengthening it or something like that, right? So we have all these composable components. We put a boat into the world and then we make a transaction that says put your sales up.
00:19:31.810 - 00:20:22.094, Speaker B: And when the sales go up, then the boat starts moving. So instead of tracking I know this has been a long winded way to talk about movement, but instead of tracking that boat, boat is at position X five decrement increment, increment, increment. And that boat moves one step every time I hit increment. That would be super painful, right? But thinking through this, how can we make these boats sail? How can I do movement where you need to be at a certain place to catch a certain fish, right? There's a snark shark right down here. You can barely see it, but you need to be kind of parked right here in the harbor to be able to catch that. So if I was this boat right here, I'd get over here and then I'd send the command to drop anchor, right? And that would put my sails down. And then I'd send another command to cast my line out and it would use, commit, reveal.
00:20:22.094 - 00:20:58.906, Speaker B: We'll get into randomness next. But hopefully you're starting to see like, movement is a little bit different on chain and you're not going to track every XY position, but you can come up with tricks to still have movement, be part of the game and not have to make all those on chain transactions. So that's my long winded talk about movement and I can drop even in this is such a fun game. So this person is owning this castle. This castle is a smart contract. We can go look at the smart contract. You can purchase it for 1500 copper.
00:20:58.906 - 00:21:22.870, Speaker B: There's a whole marketplace where you can buy and sell these tokens. There's lots of different resources and then it scales out. Watch this. So here's the map and here's the map of the whole world and a bunch of different islands. And they're even like procedurally. Look at how this one has small and then thick and then small. If we click there, this is going to take us to another island with another set of boats.
00:21:22.870 - 00:21:53.594, Speaker B: And I was in the process of basically making boats sail from island to island when I realized no one cared about this. And it was 2017 and it was way too early to be able to do this. So I put it away on the shelf. A lesson to builders. Build things and show them off and get feedback. And build some more and show them off and get feedback. Don't go into a cave and build some love project for three months unless it's just about being in the cave and painting the happy pictures.
00:21:53.594 - 00:22:21.322, Speaker B: And if that's what you're doing, do that too. But if you want to be effective and have a game that a lot of people play, you need to iterate, and you need to throw it out there, and you need to see how people use it. And then at some point, instead of building the whole game here, I should have released it and I should have let the community build onto it and change the things that they wanted to change. Right? So here's that other island, kind of the big island. There was a little one and then there was a big one. That's this here. And then there's a couple of little ones.
00:22:21.322 - 00:22:35.562, Speaker B: But not a lot of people on this island. This land is very open. You could buy it, you could claim it. I think you need some boat. Yeah. So you need 25 copper. And I don't have any copper yet, but movement.
00:22:35.562 - 00:23:11.346, Speaker B: So movement on chain is the first lesson here. It's going to be very tricky if you build a game that actually has movement, it's kind of almost like too skeomorphic to do that. But if you end up doing that movement stuff, this is the way to do it. And I have a branch here that I'll share called Scaffold Ocean that basically shows this concept off very simply in code. And so let's see. Let me go kill that last shut off old Scaffold ETH, then come over here and I'll fire this up. Yarn start yarn chain.
00:23:11.346 - 00:23:33.886, Speaker B: So this is another scaffold ETH fork. Anytime you use Scaffold ETH, all the stuff is going to be in the same place. You know, where the hard hat stuff is, you know where the react stuff is. All the components and hooks and things kind of work the same way. So once, you know, kind of like one branch, you're able to pick up and run with another branch. So this is Scaffold ocean. And if we go look at let's go look at the contract a little bit.
00:23:33.886 - 00:24:10.330, Speaker B: So we're going to have some actor in the world, right? It's a struct. We're going to have an array of structs. And then you can launch, right? Anyone can launch a boat, a ship in this little ocean here. And right now it's set to only owner. You could strip that out if you wanted to make it more like a vending machine. But this is just set up to kind of practice and show you how you might do this sort of motion extrapolation, right? So we have an X and a Y, and then we have a DX and a Dy. So that's their movement, right? So this is their position and this is their movement.
00:24:10.330 - 00:24:46.482, Speaker B: And this current location will use their current position and then calculate where they've moved based on how much time has passed since it's checked in. Very simple stuff, but perfect for blockchain. Perfect for an asynchronous kind of slow blockchain. You kind of like make one transaction that says, I'm here and I'm moving that way. And from any time after that, you can calculate that. So then later on, after I've moved for a while, I can make another transaction to change course and it can kind of calculate, okay, where are you now? Now let's change course and move you. There's no changing course here in this contract.
00:24:46.482 - 00:25:01.034, Speaker B: It's just launching. But it will give you this just kind of like a little starter kit for motion. And let's see. Have I deployed it? I think it might be out there. Let's see. Let's Yarn deploy, reset, make sure we get a fresh contract. I did it again.
00:25:01.034 - 00:25:16.098, Speaker B: Okay. Same thing with Scaffold ETH. You've got your contracts here. You can tinker with your contracts. And then I've got a front end here. What I'm going to do is just launch a little boat at 32 32. And it's going to have a DX of one.
00:25:16.098 - 00:25:34.054, Speaker B: So it's going to be moving kind of left to right and Dy of zero, so it won't move up and down. And grab some funds from the faucet. Let's see if this is going to work. Please work. There we go. Okay, so we sent a transaction. Now hopefully our ship should be in this.
00:25:34.054 - 00:25:47.690, Speaker B: Maybe I have to reload. Oh, there it is. There we go. So we're at 32 32. And this thing is going to move one pixel per second. And so as we kind of make transactions here there we go. We see it start to just mosey along there.
00:25:47.690 - 00:26:17.730, Speaker B: Mosey along. Token zero. Have a good float. And in Scaffold ETH, I'm sorry, in Gallias, I called it sailing on the blockchain, right? Because you're not really making any more transactions. You made the one transaction to put up your sales, and now you're sailing on the blockchain. Just with each block, mind you're moving a little bit farther depending on your speed. So that's movement, that is 15 minutes about movement on chain.
00:26:17.730 - 00:26:57.026, Speaker B: For blockchain games, it's important, but maybe even kind of zooming back to zooming out. Thinking about how Pac Man in the front end was moving around, zooming out a little bit. Movement. Maybe movement isn't the best thing for a blockchain, right? Like maybe what we're doing here is we're playing in sandboxes as kids and it's too skeomorphic. Do something more innovative, right? Maybe a game looks more like isn't there a Wolf Sheep game? Maybe the Wolf Sheep game is the new actual game. It's cool and fun, but it just basically plays with block, hash and randomness. We'll get to that in a little.
00:26:57.026 - 00:27:38.074, Speaker B: Bit also. But honestly, the real game is Dark Forest. If you haven't spent some time just learning a little bit about how Dark Forest works, get in here and learn more about it and play around with it. In 2017 and 2018, what we were talking about good games would look like, and we were thinking about it. Brian Goo and team really implemented here with Dark Forest. They've done something wonderful with we'll get to the randomness stuff. Maybe I should get to that before I go too far into yeah, and burner wallets and onboarding.
00:27:38.074 - 00:28:11.722, Speaker B: Okay. Dark Forest. Maybe we'll finish with Dark Forest. Let's take Dark Forest and put it out here as a reminder to get to okay, randomness is next, right? So on a deterministic public blockchain, doing things that produce randomness or doing things that you want to do in secret, that's actually really hard because everything on Chain is public. So you've got to come up with sorry. I'm like, hopefully no one's getting sick at home here. Trying to find the right, there we go.
00:28:11.722 - 00:28:22.638, Speaker B: Dice game. Dice game. Okay, here we go. Yarn install. Yarn, start run my yarn chain, do a yarn deploy. Same setup, scaffold ETH. Got the template ready to go.
00:28:22.638 - 00:28:41.058, Speaker B: But in this case, we have a dice game we're going to play. So how does randomness work on Chain? I'm just going to take a pause here. Cheers. Happy Friday. Happy bow tie Friday. Randomness on chain. So there are a couple of ways you can do it.
00:28:41.058 - 00:29:16.346, Speaker B: Now, the block hash is one way. Can we just go to Ether Skin and look at a block hash? Let's look at block 601 Mind. Where's the hash? Where's the hash? Parent block hash right there. So this block hash is generated through proof of work. And that proof of work crunches a whole bunch to find a nonce that ends up making this hash work to some arbitrary difficulty. But what you can kind of lean on is that this is going to be pretty random. Pretty random.
00:29:16.346 - 00:29:59.862, Speaker B: The miner basically, let's say it's for a million dollar lottery, and the miners are all mining blocks. The miner could mine a block and it could be not a winner in the game that they want. And they could hold that block back and keep trying to mine more blocks. But it's not like the miner could mine a block and particularly set the hash so they are the winner. They themselves find the hash sort of randomly. So this block hash is pretty good, but there's like a huge caveat there. You can definitely game that because what you're doing is you're usually setting it up so your smart contract looks at the previous hash.
00:29:59.862 - 00:30:15.986, Speaker B: So here we go. Here's the move right here. Here's the move in solidity. You say, I would like the hash of the previous. So we go the current block number, and we go minus one. That block hash. So that gives us this back.
00:30:15.986 - 00:31:02.154, Speaker B: Now, if it is a game that is very valuable, people can manipulate this in a couple of different ways. So going back to the Wolf Sheep game, they are using previous block hash, but they use a trick where they make sure that the message sender equals equals the TX origin. And what this does is it forces no smart contract wrappers. Okay. And that's actually pretty handy for a game where you only want externally owned accounts hitting your contract. I did the opposite of that when I built a game for the Build Guild, and I set it up so they couldn't be equal. And you had to talk to my contract with your contract.
00:31:02.154 - 00:31:39.450, Speaker B: And smart contract games that use smart contracts are going to be super fun for the nerds this year. But that's a whole different thing. So that checking to see that it's not a contract means that someone can't wrap this, but in this dice game, you technically can wrap this. So this is the first attack, and let me share the dice game with the chat. So your job as a programmer is to build a second contract and your second contract. Let's see. Do we have a front end with this? My homie mark.
00:31:39.450 - 00:31:49.214, Speaker B: Put this one together. There we go. Let's zoom back out a little bit. Let's see. Let's grab some money from the faucet. Can I roll the dice? I don't have enough money. Hold on.
00:31:49.214 - 00:31:59.886, Speaker B: Let's send some money. Hit the faucet for some funds. Can I roll the dice now? Oh, there we go. We're rolling the dice. Mr. D, with the graphics, we rolled a four. Fantastic.
00:31:59.886 - 00:32:12.358, Speaker B: All right. I think you have to roll like an F to win here. Roll the dice again. An eight. This is fun. You could sit here and do this for a mm hmm. There we go.
00:32:12.358 - 00:32:55.780, Speaker B: Hit that f. Hit that f. Come on. What are we waiting for? What is happening? It's a local host, so it's not like I'm waiting for a block to mine. I think something may have gone haywire here, but your job as the builder is to build another contract around this contract that checks. So before it gets into this function, it checks the previous block hash, and it says, hey, if I do this calculation and then I get a hash of that hash that also includes a nonce and the address of this contract. And really, you should do message sender here probably, too.
00:32:55.780 - 00:33:32.622, Speaker B: If I do all of those things and I get a roll and it happens to be a winner, then I want you to pay to roll the dice, but don't pay to roll the dice in any other condition. Right. So you could set up a contract, and you could just basically hit that contract every few blocks, and every once in a while, you'll get lucky. You could hit it from a bunch of different accounts like, find ways to increment this to get different hashes. But what you're doing there is kind of just like only making the role if you will win by looking at the block hash. And that's totally doable. That's a totally a thing you can do.
00:33:32.622 - 00:34:19.402, Speaker B: This is why block hash isn't the greatest. There's also the condition where you could just be watching the chain and you could get the right block hash and you could immediately put in a transaction with a ton of gas and make sure you get that next one right. So there's ways to just time it right? There's ways to have attacker contracts. This is why previous block hash is not the best, but I've used it a bunch. Like, I've used it in a lot of places where I knew I could get away with it, basically. So the Lugies were a good example, I think I have them here in the Lugie smart contract. I did randomness, and I did it the same way I did previous block hash, message sender, message address, and then the ID of the token.
00:34:19.402 - 00:34:30.722, Speaker B: And actually, that ID wasn't in the first version. And I'll explain something really interesting that happened there. So same thing. Hopefully you all can see this. Hit me up. Oh, yeah, the ethernot. That's a great shout out.
00:34:30.722 - 00:35:03.550, Speaker B: Ethernot coin flip. That's a classic Ethernot coin flip. Check that out. Play through the ethernot stuff. If you've made it this far and you're looking for more challenges and you haven't done the Ethernet stuff yet, okay, this randomness here is pretty good because it was like a one time mint, and it was in 24 hours. And I was like, no one's going to build a smart contract to attack my dumb luggies SVG. This, by the way, was the reason why I've deployed this, was to make a very simple SVG example.
00:35:03.550 - 00:35:22.430, Speaker B: Like, look at that. There's the SVG right here. Here's one eye, here's the body, and here's the other eye. And it has a chubbiness and a color, and it ends up looking like this, right? So this is a chubby boy. Very chubby boy. What's the chubbiness here? Oh, yeah. 86 out of 90 chubbiness.
00:35:22.430 - 00:36:14.994, Speaker B: Almost max chubby. Right? So you could have these smart contract variables, and you can have them randomized at mint, and then forever they are that chubby in that color. And I just basically do a dice roll at mint. And I used block hash, and I could get away with using block hash simply because it was just a 24 hours thing and no one cared. Right? If you're doing a bigger mint, if you could be attacked, if you're going to do it for three weeks long, if some of those things are going to be worth two ETH apiece, then you start getting into the territory of getting attacked. I think the Mebits contract, they did some kind of reveal system that used possibly this is all hearsay I'm reeling back. Something happened there where someone was able to predict the mint, but that might have just been they found the mint order and got ahead of it.
00:36:14.994 - 00:37:19.430, Speaker B: That might not have even been using block hash. But block hash works sort of, right? And here's another way. The last thing I'll say about block hash is you can use it for something where you set. Let's say we do dice rolls, okay? But you pay for a roll and you stake money in on a future block hash. And then five blocks later, then that block hash happens, and that's the roll of the dice, and you either win or you lose and you didn't know about it, right? And so there is still like, man, if you're running a minor, technically you could mine and coordinate there, but in terms of like $100 game bet or something like that, we're not betting, we're not gambling here. $100 game asset that you could win or lose that could possibly work. Like, future block hash would be perfect for, like, keynote, right? Like, you pick these six numbers and then the future block hash comes up with these 40 numbers.
00:37:19.430 - 00:37:44.458, Speaker B: And if your six out of your 40 hits, you can turn in and make another transaction. But only do that on testnet, please, because that is gambling. But covan keynote, I'm all about tag me in the DMs and I'll come play some covan keynote with you. That sounds like a lot of fun. Please use Scaffold ETH to build it so it's hella forkable. Okay? So that's BlockHash. Blockash is a way to do randomness.
00:37:44.458 - 00:38:37.318, Speaker B: It's probably the easiest way to do randomness, but it has these kind of caveats that have to do with minor collusion, user collusion. You can play, you can attack it with a contract, you can know it's going to happen, you can get away with it a lot of times, and you can understand, like, future block hash might be better. All of that said, how do you do it if you don't use block hashes, right? So one thing I'll shout out is commit reveal. This is another kind of clunky hard pattern, but commit reveal is I just clicked the first article. I don't know. Commit reveal is a complicated dance that you do where man, what is a good you know what? I bet I have a good commit reveal explore on ETH build. I bet there's a good commit reveal here where I like, come on, commit reveal.
00:38:37.318 - 00:38:58.714, Speaker B: You got one here. I don't see it. Darn it. Okay, so commit reveal is a complicated dance, and I'll go through it once and hopefully I'll cover it. But you as the user and look at this. Actually, we can use Galleyas as the background because Galleyass uses commit reveal. Okay, so let's find this little homie fishing right here, right? And there's probably some fish down here.
00:38:58.714 - 00:39:34.750, Speaker B: There aren't. Okay, let's go back to an island where there are fish. So commit reveal. Galleyass uses commit reveal to determine whether or not you catch a fish. And the way it works is you take your sails down, you anchor, so your sails are down, you're now stopped. You're a boat kind of just chilling in the harbor. Then you make another transaction to the bay, telling the bay to tell your ship to cast out, okay? And that cast out is what I call the bait, but that's also the commit.
00:39:34.750 - 00:40:13.994, Speaker B: And so you as the fisherman sitting in your boat, you come up with a random number and you keep it secret, okay? You hold that random number secret and then you take a hash of that random number and you put that on chain. That's your commit. That's your bait. That's what you cast out is your commit and it's the hash of your secret, okay? And that goes on chain. And then that also tags a future block. And then after at least one block has happened, your commit is in the blockchain. Then you can reveal in another transaction, okay? And in this case, I don't know, I think we went back to the other island.
00:40:13.994 - 00:40:26.366, Speaker B: I don't know if I did something wrong. Here. Here, let's just do this. Go. Take me back to oh, man. Okay, so you cast out. That's your commit and then you reel in and that's your reveal.
00:40:26.366 - 00:41:24.886, Speaker B: There's a second transaction that you make, okay? So the first transaction is putting the hash of the commit, the hash of the reveal on, and the second transaction is putting the actual reveal on. So when you reel in, you basically tell the blockchain your secret and it's at a future block. And the smart contract hashes that and says, yeah, sure enough, that hashes to the commit that you said that we would use. Then they take the future block hash and the reveal and hash them together and get a random number from that. So super wild. But you take a secret, you hash it, you put that on chain, and then later you reveal your secret and it proves that it hashes to that previous thing and then mixes your secret with a block hash from the future. So basically, the collusion would have to be insane for you to be able to pull that off in a way that's pretty darn random and pretty good.
00:41:24.886 - 00:41:58.306, Speaker B: And so what happens is you cast out and then you reel in and that gives you a random number. And if that random number is larger than the distance to the fish that you want to catch, you catch the fish. So you catch fish randomly using commit reveal with this two step process in galleyas. And you can't do that on main net because it's so clunky and slow and asynchronous and you have to hold that thing for that person then turn it in later. Garbage. UX. But guess where you can do that on l Two S that are fast.
00:41:58.306 - 00:42:24.060, Speaker B: Right. You can pull a Commit reveal off on an L2, and the user is barely even going to notice, right? It'll be nice and fast. It is a second transaction, but it's not like there's so many things can go wrong in that time period. So again, kind of leaning into L 222. This summer. All these l two s are ready. Start building your games on these L2 S and start pushing the limits of the kind of things that we can build.
00:42:24.060 - 00:42:50.370, Speaker B: Commit reveal is one way you can do randomness. All right? Last way to do random is well, there's probably many ways to do random. Last way that the top of the bell curve. Austin can explain random to you is chainlink VRF. And I bet I have a VRF branch of scaffold ETH. Let's go do that first, right? Let's go find that. So let's go to Scaffold ETH.
00:42:50.370 - 00:43:12.378, Speaker B: Let's go here. Let's find a VRF. Actually, it's going to be in Scaffold ETH examples. Any questions? I feel like it's kind of quiet. I'm doing a lot of talking up here. If you have questions, what we have left is ZK stuff and onboarding and inventory stuff. Okay.
00:43:12.378 - 00:43:24.234, Speaker B: And I think I have about 15 minutes left. I think we're doing okay. Scaffold ETH examples. VRF. Now, here is another way to do randomness. And this is an interesting one. Yes.
00:43:24.234 - 00:43:55.586, Speaker B: Oh, this one comes with a video and everything. Let me share it with you all. Would you encourage to use Optimism or Arbitrum over polygon? Going back to the tool question, each of these networks is slightly different. Slightly different security concerns, slightly different costs, slightly different block times, if there even is block times. So use the one that works the best for you. Even. Like when someone asks me, what testnet do I use, I say, Are you deploying an NFT? Because it could probably be over on Rinkabee.
00:43:55.586 - 00:44:16.554, Speaker B: Are you doing DFI stuff? It probably should be over on Covan. Are you testing UX? It probably should be on Robstain because it's slow. Right. So use the tool, use the testnet, use the network, use the L2. That does the job for you. That does what you need it to do. Right? If you need transactions to be on the order of $0.10,
00:44:16.554 - 00:44:59.094, Speaker B: you'll use one network. If it's okay to pay a dollar, you'll use another network. If it's okay to pay $5, you'll use another network. It kind of depends on your game and how it works and what you're building, right? One giant disclaimer I will throw to this space because it always happens when you get into the space and you start learning solidity. You start using it like a database at first. So I would urge you to try to deploy an app on a more expensive network to understand the limitations and then kind of roll back to deploying on a cheap network. Because without that sort of forcing function of teaching you like I can't use this thing as a database, then you kind of keep using things that is a database.
00:44:59.094 - 00:45:40.362, Speaker B: You need to learn how to think differently and learn how to solve kind of problems. But yes, so use the chain that works best for you. Okay? Chainlink VRF, I posted it here. Yeah, I can imagine it's complicated to build, this is complicated. But what happens, let's see if we can even dig in and find the contract. Oh yeah, here we go, here we go, your collectible. So this is an NFT that uses VRF to randomize the genetics of it, right? So you will bring in the VRF consumer base, you will inherit it.
00:45:40.362 - 00:46:14.274, Speaker B: You'll call this consumer base on constructor which kind of initializes everything and sets it up. I don't even know what that is. And then what happens is you'll call this get random number. Okay, this is a public function and it looks like you could even, maybe even create a commit reveal that goes with this. I don't know if that seed is just a random number from the front end to help salting, but you call get random number and you're going to pay some amount of link. You'll pay some of the link token. To whoever is going to respond to this.
00:46:14.274 - 00:47:04.398, Speaker B: And then later on, there's a second call asynchronously back to you to this. Fulfill randomness notice. This is an internal function so no one else can call this except for the link adapters that are doing the random role. So you're going to make this one function and then just kind of wait and within a little bit you'll get a great big random number back right? And that great big random number is verifiably random, right? I think that's probably what the V stands for. So this is a good way to do really random stuff. If you are doing a lottery with a million dollars you probably want to use this. And I don't even know some of the implications like maybe we could have Patrick from Chainlink tell us more about how VRF works under the hood.
00:47:04.398 - 00:47:45.394, Speaker B: But I just know that in terms of you've got block hash, you've got commit reveal and then you've got VRF and VRF is probably the strongest. Again Austin from the top of the curve, not a gigabrain. Some of these guys could probably tell you different but this is what I would use for some of the most expensive stuff and you're going to pay for it too, right? You pay for it in different ways. You pay for the block hash in ease of use but it's exploitable. You pay for commit reveal in clunky UX where it's got to go back and forth. You pay for this in link and it is still a little bit clunky. Okay, we have ground to cover here still.
00:47:45.394 - 00:48:20.678, Speaker B: So we've kind of talked through movement on chain and how that's interesting. We've talked through randomness and how that's hard on a public deterministic blockchain. We've talked about commit reveal working very well, but we haven't talked about ZK Tech. And I think ZK Tech is really kind of on the forefront of really being something that's important for blockchain gains. And I have a couple different tutorials I want to show off. All of these are from Calvin shout out to Calvin, who's been working on the Build Guild stuff. So here is a Circom starter kit.
00:48:20.678 - 00:48:54.600, Speaker B: I'm just going to link dump into the chat. If you are interested in ZK, start playing around with these starter kits. These could get you halfway to having a game. The next one is a voting example. So voting but with your votes hidden, right? The next one is a membership example where you can prove that you are a member of a certain group by owning an NFT, but no one can see who owns the NFTs or something like that. When he explained this one to me, it was like, all right, let's share it. I don't know if I totally understand it, but let's go.
00:48:54.600 - 00:49:33.102, Speaker B: So ZK is kind of like this other interesting thing, another thing that we should talk about. I think there may be randomness after the merge. I think this idea of randomness may start coming in from validators on chain. So we may have some randow stuff going on where you can just kind of like ask a chain. So maybe all of this is for not in a few months or a few years, depending on how we do there. Okay, that's randomness and that's hidden stuff, too. So I wanted to add the ZK stuff because it comes down to like, what if you have a map and there's a map to explore? You can do that with commit reveal.
00:49:33.102 - 00:49:40.006, Speaker B: And I wanted to find that with the Dao. Here we go. Here we go. I'm going to paste this into chat. Look at that. You guys are just getting tons of chats here. But watch this.
00:49:40.006 - 00:50:08.960, Speaker B: So this is a game I built a while ago called the Dow. And every time I click on a box right there, I'm doing a commit. And then silently a reveal is firing off underneath. And so that requires a burner wallet and a fast chain and a lot of other things to make that work. And we'll talk about the burner wallet in a second when we get into onboarding in the next nine minutes. But I just wanted to show how fast that works. Right, watch me clicking click.
00:50:08.960 - 00:50:55.390, Speaker B: Each one of those is actually a two step transaction, but for the user, they're just sitting there clicking, just clicking away. And look at all those new land tiles that sort of randomly reveal and you discover things there, right? See, that all kind of open up and see that world open up. So this was the Dao a game I built that's like a governance game. Each game basically has a moloch dow that controls the rule set. And each rule is a smart contract. And you start out with a certain set of rules and a goal, but then you can vote in new rules and the rules of the game can change as the game progresses. And it all uses like v one moloch dow just to really dog food a lot of our own tech and kind of play around with dow governance and no one really cared.
00:50:55.390 - 00:51:24.502, Speaker B: No one cared about people building games in 2018 on chain, but they care now. And it's l two summer and it's up to you builders to build something awesome. Okay, so commit reveal. This leads me, though, to burner wallets. Okay? If we go to where's that Scaffold ETH example, which one of these is still up? The dice game. Where's the dice game? What do we got here? Sorry for all this flipping through stuff. Here we go.
00:51:24.502 - 00:52:02.194, Speaker B: This one's still up. Okay, let me show you burner Wallets. So a Burner Wallet is, instead of having that twelve word seed phrase in your MetaMask locked up here behind some terrible user experience and slow providers, you can have a Burner Wallet in your browser. Obviously. This is Ephemeral. Obviously this is not super secure. I could go inspect this and I could go look at the application memory and I could find a private key, right? Understand the security practices, understand your OpSec a little bit, understand what's going on there.
00:52:02.194 - 00:52:44.138, Speaker B: But when you have a Burner Wallet in a browser, when a person can just go to your website and land on it and it's going to generate them account. See that blue and pink? Let me close that and bring it up again. Localhost Scaffold does this out of the box. Almost always you turn it off because very rarely do you want instant onboarding. Almost all apps want you to basically have money to be able to participate, but really good onboarding. Some apps don't require you to have money. Some apps say come play first, come provide to the ecosystem and retroactively you'll learn how to take care of your wallet.
00:52:44.138 - 00:52:58.386, Speaker B: And these are kind of Burner Wallet apps. Dark Forest is really like someone who's gone a long ways with it. But if we look at I think Nifty Inc. Is a great example too. Nifty Inc. Is probably one of the first apps, like production level apps. There we go.
00:52:58.386 - 00:53:32.638, Speaker B: So C seven, two, b zero. Like there is that person. And if I close this all the way out and I go to Nifty Inc. I'm going to get a brand new address, right? 8827. Okay. So you can with just a tablet type in Nifty ink and land here and see some other cool art and say, okay, I want to create my own art. And you can go and you can draw something and that's going to go on chain and people are going to be able to watch you draw that thing and it all goes into IPFS red.
00:53:32.638 - 00:54:25.318, Speaker B: And I'm going to say two, and I'm going to mint. Now this uses a burner wallet and it uses that ephemeral key pair to sign a metatransaction. And then there's a metatransaction relayer that uses my gas to pay for your transaction. So you as this random new character, just drew some really cool art. You signed it with your key and it's now on a side chain and it'll take a little bit to load here, but then people can get in and buy this thing. I can even go here and I can put this thing on sale for a dollar without ever paying any money or ever having any ETH or understanding anything about key pairs or any of that. Basically I'm straight in here doing some art, right? Then let's say this is dope AF and everyone's like, I want red, red squiggles, red squiggles.
00:54:25.318 - 00:54:50.226, Speaker B: Buy it, buy it now. Now I'm going to earn money, right? If this sells one dollars apiece, it's a one of two NFT. I'm going to have $2 on this burner account, right? I should keep better care of it. I shouldn't have it in an incognito window. I should go here and I should reveal the private key and I should store it somewhere. Probably if you put it on your home screen, that's good too. But here's your onboarding.
00:54:50.226 - 00:55:44.140, Speaker B: Now this is instant onboarding and it flips the onboarding on its head because instead of me saying luke, Luke, if you want to get on nifty ink, you're going to have to learn what a twelve word seed phrase is first. And you're going to have to learn to back it up. Instead of all that horseshit, I'm saying draw something, contribute to the community, do something cool first. And then afterwards if you do something, you're going to earn some tokens, you're going to earn some value and then it's going to be like, oh, how do I protect this right? Now that I have this $2 in this 8827. Now I need to learn what a private key is and I'm incentivized to learn what a private key is. And it's a lot easier for me when I'm incentivized and I'm on the back half of it rather than up front having to do it. So this will hopefully drive more traffic to your app and allow more people to use your app and kind of smooth that onboarding and make it just easier for folks to land and use.
00:55:44.140 - 00:56:06.782, Speaker B: And that's my talk about onboarding. I think there's a lot of other things we can do better. Sign messages are really nice. Signed type data is really nice when you can just have a user sign. If I go to the Build Guild Bazaar and I want to shill my wares, I basically just need to sign a. Message. A lot of these Web Three apps can just be signed messages.
00:56:06.782 - 00:56:58.594, Speaker B: Like, sometimes it can be on a database. Sometimes you store it on everybody's database. Obviously, being decentralized is important for some things, but you can progressively decentralize as you go. Okay, what makes blockchain games really cool? What is some of the most important pieces of a Web Three blockchain game? And the two things I want to hit on here are basically your identity and your inventory are going to follow you from app to app. Going back to the kid at the store who takes his sword and pulls it out of one vending machine and puts it into another vending machine. Those swords follow me from place to place, and then that second piece is composability. You can take your inventory from one game and play in another game, and games should probably accept that and be ready for that.
00:56:58.594 - 00:57:33.934, Speaker B: If you want to bring your crypto kitty into Dark Forest and do some battle with it, maybe a Crypto Kitty could be in the ship or something, right? Okay, so I'm like faking composability here. Let's think of some real composability examples where the space could really shine. So I think I got it wrong in terms of building galley ass. As a full game. What I should have done is try to build galley ass and then realize there's no good inventory system for Web Three. There's no good movement system. Right.
00:57:33.934 - 00:58:25.306, Speaker B: Maybe just like the pieces in the thing moving around, that system in itself could be a composable component of Web Three. So as you're thinking of things to build as you're building things, you don't have to build a giant game. You can build that one composable component that all the other games are going to use. Thinking about your inventory following you from one game to the other, what if you built a great inventory system that anybody can use and it renders things nicely or something along those lines? What if you built movement? What if you built some kind of SVG rendering thing that renders them using ML? There's a ton of things you can do. Okay, I want to close out. I probably will go like two minutes long unless we'll get in trouble for that. I want to close out by just showing some fun composability stuff with NFTs.
00:58:25.306 - 00:58:56.280, Speaker B: Luke, interrupt me. Okay? I got a quiet thumbs up. Okay. Last thing I want to show off just where we've taken the Lugie so far because there's some fun little things that have happened here. So if you have a Lugie on lugies IO, you can go to claim. So let me go to Lugies IO first of all, burner wallet, you mean? Yes. Okay.
00:58:56.280 - 00:59:27.154, Speaker B: I don't know if I caught the total burner wallet, by the way. If you want a cool burner wallet to fork, you actually want the wallet? Go check out Punk Wallet. Punk Wallet is basically dang. What am I doing? There's a lot of money on optimism. That's probably a burner wallet, too. Man, I am just irresponsible. Anyways, if you want a good forkable burner wallet that does this kind of the private key and local storage this thing does wallet connect first.
00:59:27.154 - 00:59:35.102, Speaker B: You can wallet connect into things. Go to Punk Wallet. Punk Wallet is. Let's see. Can I just oh, wait, the code's right here. Boop. And then boop.
00:59:35.102 - 00:59:52.790, Speaker B: And then boop. There we go. So Punk Wallet is a very forkable wallet connect first burner wallet so that's also burner wallets come out of the box with scaffold ETH. Okay. Anyways, anyways, so you've got some lugies. And lugies were basically just a demonstration of how to really easily do SVG. NFTs.
00:59:52.790 - 01:00:19.790, Speaker B: So you've got some lugies. You can go to lugies IO and see your luggies. But what we realized is we wanted to do a bunch of crafting and fun stuff, and you can barely sell a Lugie on. I would say a Lugie is worth, like, $40 right now. And to move them gas is about $60 right now. So it's kind of like those loogies are kind of just frozen there. Eventually we will come back to Mainnet and do something cool with those loogies.
01:00:19.790 - 01:00:49.610, Speaker B: But what we're doing is we've ejected to optimism, and you can go to claim optimism, and we've started the lugieverse over on optimism. So what you can do is you can claim your luggies over on optimism. Okay. And then once you've got them claimed, you can go to what, like, optimistic lugies. Okay, here we go. Let's put our wallet on I don't even know what wallet this is. Put our wallet on optimism.
01:00:49.610 - 01:01:00.954, Speaker B: There we go. Okay, I'm going to mint one of these. Watch how fast this is. Watch how quick this is. This is over on optimism. This is costing me, like, a dollar, and boom. I should have a Lugie.
01:01:00.954 - 01:01:18.946, Speaker B: There it is. There it is. Lugie number 1255. Minted. Fantastic. Okay, so now that I've got this Lugie, it's over in optimism. Now what can I do with my optimistic luggies? Well, I'm glad you asked.
01:01:18.946 - 01:01:29.002, Speaker B: I'm going to go over to Fancylugies.com, built by my homie damu. And look at this. We can see my luggies here. Oh, look at this Lugie. That is nice. Yes.
01:01:29.002 - 01:01:44.066, Speaker B: Approve that to be a fancy Lugie. Absolutely, yes. Okay, so we're upgrading. Okay. Upgrade to fancy Lugie. So now we've taken our luggies, we've upgraded them to optimistic luggies. Now we've upgraded them to Fancy luggies.
01:01:44.066 - 01:02:00.446, Speaker B: Honestly, nothing here is new. Like, this happens all the time. There's no composability here yet, but the composability is coming. Here it is. So now I'm going to select to wear OOH. Let's take this Lugie to the changing room. What are we going to buy? Oh, we've got bow ties.
01:02:00.446 - 01:02:15.650, Speaker B: Okay, I'm going to mint a bow tie. NFT going to cost me a buck. Totally worth it. Oh, that is a nice one. Okay. So I know that I don't know why it's making. I know that there are bow ties that spin, and they're extra rare.
01:02:15.650 - 01:02:40.846, Speaker B: So I'm going to try to spam mint a bunch of bow ties. Oh, got 1 second try purple spinner. All right, so now I'm going to outfit this homie so preview. There we go. And it's like, hey, do you want to take this bow tie NFT and attach it to your loogie? NFT your fancy loogie? Why, yes, I do. And transfer. And we're set.
01:02:40.846 - 01:03:02.694, Speaker B: Now I've got what is this? Fancy Lugie number 81 is set up with a spinning bow tie. Now okay, here we go. Now. Last website built by Ahomi Block. Dev is the Lugitank. Okay, lugitank.com. I should have been posting these in.
01:03:02.694 - 01:03:17.226, Speaker B: So did I post in claim? I didn't. Okay, here's claim. And then here's Optimistic Lugies. All of these are built by different folks. Damu actually built both of those first ones. And then Lugie tank. There we go.
01:03:17.226 - 01:03:35.874, Speaker B: So now I have a Lugie tank. So now I can mint a tank. And it's basically this blue square here. Let me just mint another one so we see it minted. Cool. Okay. But what I want to do is I want to send in the fancy loogie that I just minted into this.
01:03:35.874 - 01:04:02.502, Speaker B: So this Lugie tank is an NFT. I can send this to Vitalik right now. And if he f's around with optimistic loogies, he'll see this cool Lugie tank and he could Eject the loogies. They're all in there, and they'll go to him. So the tank owns the luggies. The tank is an NFT you can send around. But something really neat is happening here, and it has to do with how luggies are rendered.
01:04:02.502 - 01:04:36.718, Speaker B: Notice we have this render token by ID, and it doesn't render the SVG here. The SVG is here. It's calling render by token with SVG around it. And what's happening here is we have a public function that basically renders the guts. It renders what's inside of the SVG. So guess what this Lugie tank does when it goes to render, it looks at all the things it owns, and it calls render token by ID on each one of those things and collects a giant SVG. And that's what you see when you go look at Lugie tanks.
01:04:36.718 - 01:04:56.074, Speaker B: So let me see if I can send in. So I'm going to go to Quicksodic, which is a marketplace. I think they spoke earlier that might have shield some OE 40s. Make sure you get yourself some OE 40s. They're a retroactive public goods token. But let's go back to Fancy Lugies. What I want to do is just steal the contract address here.
01:04:56.074 - 01:05:10.862, Speaker B: All right, this is the last thing, and then I'm done. Sorry I went overtime. Everybody's. Itching to get out of here and get a beer and go to dinner or go hack or do something. What I want to do is I want to send this Lugie into the tank. Don't send it to Vitalik. Not yet.
01:05:10.862 - 01:05:27.800, Speaker B: Not yet. Okay, so it's that oh, what's the Lugie? ID 81 80. Let's preview it. Oh, there he is. Oh, here it goes. Don't eject so approve. Okay.
01:05:27.800 - 01:05:55.226, Speaker B: I'm just kind of trusting these buttons and kind of YOLOing, especially with the cow and nine grand on it. Don't do it. All right, I think that should be it. I think I just crafted Lugie tank. There we go. Lugie tank number 20 is crafted and ready to go. It has some fantastic loogies with some rare bow ties crafted in it, has a normal optimistic loogie, a big chubby boy, and then some other fancy loogies.
01:05:55.226 - 01:06:15.314, Speaker B: So, like, multiple different child contracts being rendered in one. Should I yolo this too? I'm not going to. I should yolo it to Vitalik, but that is it. That is composability. That kind of stuff is going to run wild this summer. Build really cool, composable things. Maybe it's not just the whole game.
01:06:15.314 - 01:06:40.554, Speaker B: Maybe it's a small piece of the game. Right. Understand how movement works, understand how random works, understand ZK tech and how you can hide things out in the open, right. Understand some of these civil resistance and identity and onboarding things and how burner wallets can help you get folks in quick. I think that is about it. I've been watching the questions. We're good.
01:06:40.554 - 01:06:49.946, Speaker B: I think that's about all I'll stop sharing now. Sorry we ran overtime, Luke. Hopefully we're good. Hearts, hearts, hearts. No problem whatsoever.
01:06:50.058 - 01:07:14.886, Speaker A: We all love to have you here. These are some of our favorite workshops at our events. Thank you so much, Austin, for that hour of power and grace and finesse and all good acronyms and all good adjectives now. That was awesome. Super happy to have you back, and thank you to everybody who joined us. It's been an incredible evening. I hope you guys have all learned a lot, and I look forward to seeing what you all do with that in your projects over the next two weeks.
01:07:14.886 - 01:07:30.614, Speaker A: As I always say, continue the conversations in Discord. The man told you to DM him. DM the man. Get in his DMs. They are open, but we look forward to seeing everybody build some beautiful things over the next two weeks. Let us know if we can do anything to help you out. And good luck.
01:07:30.614 - 01:07:33.514, Speaker A: Hacking. Oh, yeah. Details right there.
01:07:33.712 - 01:07:34.694, Speaker B: I got a shell speedrun.
01:07:34.742 - 01:07:35.934, Speaker A: You got to do it.
01:07:36.132 - 01:07:58.802, Speaker B: Make sure you're a builder. Get that scaffold ETH get started. But if you're a builder getting into the space you're looking for, the next challenge you're looking to tester. If you are a web two builder looking to get into web3 speed run ethereum. If you have web two friends, if you're a web3 nerd already and you're just trying to talk your web two friends, just tell them to go speed run ethereum scaffoldy. Speedrun Ethereum. It's the best onboarding for developers.
01:07:58.802 - 01:08:05.446, Speaker B: They'll get the mental model. They'll thank you later. Tell your developer friends to speedrun Ethereum. Sorry, I had to steal that.
01:08:05.628 - 01:08:18.166, Speaker A: Speedrun. Speedrun shilling. I love. Right, this is the way. All right, everybody, we're going to be closing the session right here. Thank you again, Austin. And thank you to all of our wonderful audience members.
01:08:18.166 - 01:08:23.854, Speaker A: We love you guys. And yeah, it is bow tie Friday. As if there ever were one. The best of the best.
01:08:23.972 - 01:08:24.300, Speaker B: All right.
