00:01:30.770 - 00:01:56.450, Speaker A: Hello everyone. Welcome to the CK 2.0. This is a joint event with it Global that celebrates the launch of Polygon Ckbm Mainet Data. This is a special greetings from Barcelona where most of the Ckvm team is located. And I am Grace. I am from Polygon labs. I'm also the Ckvm product lead and today I have the pleasure to also be your MC.
00:01:56.450 - 00:02:37.994, Speaker A: We're extremely happy to have these special days and to show it, to share it with our ETH global community. This is a community with whom we share values and purpose. We have a very engaging program and we want to go through it very quickly. You will have some insightful conversations in a fireside chat style. We will have the official launch of Maine Data and that comes with a surprise, I won't say more than that, two awesome panels. We have also an important closing remarks and without further ado, let me introduce you to Sandeep and Mihailo, co founders of Polygon and the ones that will be opening the event. Take it away, ZMZM.
00:02:38.042 - 00:02:38.640, Speaker B: Everyone.
00:02:39.410 - 00:04:11.502, Speaker C: Today our community has come up with this new thing which is ZM instead of GM, where the Z describes the ZK part of it. Because Polygon is going to be all about ZK from here onwards. Many of you have seen the journey of Polygon and today is probably the most important day in the journey of Polygon because at Polygon we were always focused on mass adoption of web three. And we are very proud that because now it looks very obvious. But that time it was not that we chose layer two, scaling on top of ethereum as the path which can actually bring the scalability to the world with which we can take web three to the masses. And we have been very focused, we have always been dedicated towards scaling ethereum on layer two to have these global trustless systems, community owned businesses to be built and provided to the users and empowering users, especially the users who are the underprivileged and underrepresented, which is obviously the core ethos of web three. And before, in 2020, we started with our Polygon POS chain, which was kind of good, which worked at that point in time, whatever was available.
00:04:11.502 - 00:05:16.722, Speaker C: But our focus and mission was always to bring the world like true layer two solutions. And on layer two, amongst the researchers, there is kind of global consensus that zero knowledge technology is the end game, right? Because it kind of like with the cryptography and the mathematics behind it, it ensures that you can technically have infinite scalability, right? Which is very important for mass scale applications to be built on top of ethereum to build on top of layer twos. And hence today is the day where we launch our first true layer two solution, which is Zkevm. As many of you guys already know, and Mihalo, my brother and co founder, has been the architect of this Polygon's entire Polygon ecosystems strategy or kind of approach towards scaling on layer two with ZK. So without further ado, I'll hand over to Mihalo to share his thoughts on.
00:05:16.776 - 00:05:17.380, Speaker B: How.
00:05:19.510 - 00:05:26.760, Speaker C: What'S his master plan in his mind and what he sees forward from here, mehalo over to you.
00:05:28.090 - 00:06:03.358, Speaker B: Thanks so much, Sandeep. Hi everyone. It's a true pleasure to welcome you everyone to this great celebration. They're telling us in the background that there's more than 10,000 people tuned in at the moment, which is really exciting and humbling. And yeah, first want to start by saying that Sandeep is just being too generous and he's exaggerating. I'm just a single contributor to this great success and Sandeep contributed at least as much as I have, as well as the great team that we are very fortunate to have. And yes, maybe I can just say a few words about this.
00:06:03.358 - 00:07:16.514, Speaker B: So, like a year and a half ago, roughly, after a lot of research and experience with different scaling solutions and thinking about how to approach this grand goal of mass adoption of Web Free that we have, we decided that ZK technology. We formed a firm belief that ZK technology is the optimal or the most promising technology when it comes to building web free and bringing it to the masses. And we announced that publicly and we announced that 1 billion fund that we committed to this great technology. And in the meantime, we have onboarded and joined hands with multiple extraordinary talented teams, great individuals, and we achieved what we wanted to do. We established a ZK powerhouse within Polygon. And the first major result and deliverable of this great team and this great process that I'm really honored to have been participating in is the Zkavm announcement. Zkavm, as Sandeep mentioned and as is generally known, is considered the Holy Grail of blockchain web infrastructure.
00:07:16.514 - 00:07:49.714, Speaker B: And that is because it simultaneously offers three very important features. One is scalability, as we know we want to onboard the world to web free, basically. And we are far from the sufficient levels of scaling. So Zkvm addresses that. The second one is security. We know that in general, in web three, we operate with economic concepts and funds, et cetera. And we want to leverage ideally strong and proven security of Ethereum, which is the strongest, the most decentralized programmable blockchain in the world.
00:07:49.714 - 00:08:45.246, Speaker B: And the third very important feature is EVM equivalence or compatibility, which allows us to leverage all these great important tools, programming languages and user interfaces like MetaMask, everything that has been built in the Ethereum community so far with Zkvm, we can just simply leverage that. We're leaving developer and user experience intact, which is very, very important. So all these things together, all these three things make Zkvm the Holy Grail or the optimal or ideal solution for scaling blockchains. We have been able to deliver this at least two to three years because before it was generally expected to happen. And on top of that, the Zkvm that we're delivering today is absolutely practical. So there were concerns with complexity when it comes to ZK. That has been always the main concern with Zkvm.
00:08:45.246 - 00:09:55.238, Speaker B: Whether it's possible to build, and if it's even possible, whether it can be practical, will we need a data center to generate these proofs? And today we are incredibly excited. And it's even beyond our expectations, the fact that we are able to run Zkv, improver on commodity AWS instances, and pay them $1.9 per hour, which is how much our whole testnet has been costing us. So, all in all, this has been a great experience, very exciting journey. And I just want to say just one thing that I really have to say very briefly. Why we deliver this this fast, apart from great strength of our team and several engineering breakthroughs that the team have made, including very transformative concepts like goldilocks fields, like starkey, like Plonkey two, and other things in addition to that, the sense of mission and collaboration that happened within the team was really truly inspiring. And I believe it's really great that we delivered this decayvm.
00:09:55.238 - 00:10:39.382, Speaker B: We're incredibly proud and excited about this. But along the way, I think we just also got much more interconnected, stronger as the team, more convinced about our mission and the fact that we actually can contribute a lot to this industry and hopefully to the world. And yeah, with this, I would just actually hand it over to the actual hero and the person who made his mission to deliver this Ekvm, which is my good friend and co founder, Jordy Balina. And thanks everyone, again. Thank you, Mihailo, for those words. Yeah, I'm not the hero. It's like I'm just an engineer just trying to scale ethereum.
00:10:39.382 - 00:11:29.354, Speaker B: That's? What am I? So to start the talk, I would like to start a little bit from the origins when we finish from Polygon Hermes. When we finished the first version of the roll up payments only roll up with Polygon Hermes. I was in Zook at that point. A very good friend, Barney WhiteHat, came to my home and he challenged me about Zkvm. We believe actually when the first time he talked me about that, I told him, this is impossible, this is impossible to do. But he just insists in thinking in the different pieces. Well, we were just trying to see, okay, let's do the exercise, how we can do that.
00:11:29.354 - 00:12:26.986, Speaker B: And we were going to the different challenges, to the different critical points, and we were solving most of them in a very complex way a lot of times. But we had the intuition at that point that things were possible, and we start to dig on that. And there was a moment where most of the big challenges that we had is, okay, they are solved at that point, so this could be possible. And it was at this point that I start first convincing my partners at that point, david and Tony and well, first here also Barney helped me a lot to convince them this is a feature. I think we can do that on that. And then I did a presentation in Paris, just explaining the community how I believe this could be possible. And here started the real project.
00:12:26.986 - 00:13:09.722, Speaker B: They started not a lot, but we know with a small team from the Hermes team. And there was here a crucial moment that was the merge with Polygon. This actually was fundamental because this really allows to put all the resources that we needed to build all this. With this, we just built a team. I just got the best professionals, the best people that I knew that could deliver on that. I convinced them to join this team. And together with the people that already was in Hermes, we built what I believe is the best team in the world.
00:13:09.722 - 00:13:28.062, Speaker B: The team that can really build that. We started to work hard for a year. And in Paris one year later, we presented it could be a prototype. If you want to be the first version. That was a full prover. It was approver. That really works.
00:13:28.062 - 00:13:44.814, Speaker B: Terminated. Was terminated. Okay, this was worked. This was last July. And since there, of course we continue just improving this proverb. A lot of optimizations, new things. In October last year, we launched the public testnet.
00:13:44.814 - 00:14:23.870, Speaker B: That was another huge milestone. And since there mainly we have been working really hard. Mainly focused on security. Security auditing, checking, double checking, doing internal audits, dealing with external audits and rebuilding parts of the code, cleaning the code until we feel comfortable with the code that we have right now. And here is where we are. And we are today at the day, the day that we have been dreaming very much. A day that seems like impossible three years ago.
00:14:23.870 - 00:15:03.546, Speaker B: And it's these magic days where an engineer just put the things in production. It's like truly when the things start getting useful for the people. So this is the important point of the launch. Another thing that I want to announce now, and I think that's also very important is that today we are not only launch, we're not only launching, we're also open sourcing. All the code. And when I mean open sourcing is not making available, has been available for the last six months. But we are also putting GPL license and Hgpl license to all the repos of the approval.
00:15:03.546 - 00:15:51.930, Speaker B: I think this is an important gift for the community and I'm very proud to announce that. And before finishing, I wanted to share three secrets. Three secrets why we were able to build these things so fast. The first is experience that we got in the first roll up in the Hermes. One, this was really, I mean, all the learnings that we got from there, they are applied some way to this roll up to the Zikabm. The second part is architecture. I think that here we did very good decisions in how we designed the architecture.
00:15:51.930 - 00:16:17.918, Speaker B: We divide the architecture in layers. We have a low layer, which is the cryptography layer that talks about polynomial commitments stark flungs and all this recursion about flungs. And this has been an important layer. Another layer is the arithmetication. Sometimes it's equivalent. We have this similar of the hardware layer. We call it sometimes the hardware layer.
00:16:17.918 - 00:16:47.962, Speaker B: It has nothing to do with hardware, but we call it the hardware layer because it's this low layer. This arithmetic session. We built a language for working in this layer. We call this language pill. And we built a processor on top of this layer, kind of VM specific processor to Jiku things as normal processor. And on top of that is the software layer or we call the Rom layer, which is actually the program that's running on top of this processor. To build this program, we had to build an assembly for this processor.
00:16:47.962 - 00:17:53.854, Speaker B: And then the program that's actually the program that actually emulates the ABM and actually runs the ABM altogether. And all this stack in layers allows us to have different teams working in parallel each one in one of these layers. And not only that, for example, for auditing having also different audits running in parallel with different specialized teams working together in there. And this is what allows us to build the things so fast. And the last circuit that I want to share, there are many more, but the last circuit that I want to share is the team here. This amazing team already mentioned before, but this amazing team that has been absolutely committed, working day, night and weekends for the last two years because they believe in this project and learning together because you create a language and then you need to learn about that language, and then you need to go back and forth. And has been a huge effort, but at the same time has been also a pleasure.
00:17:53.854 - 00:18:55.506, Speaker B: We enjoy it. We had so fun also build that these both things together. This has worked, this professionalism of the team and this enjoying the work that having done is what allows us to build this product, this polygon zkvm so fast. So in order to launch, in order to do the real to we decided that the good way to do would be that to invite Vitalik to do the symbolic first transaction of Vzkvm. So I would like to invite Vitalik just to do this transaction. Hello Vitalik. And thank you very much for accepting this transaction.
00:18:55.506 - 00:18:58.520, Speaker B: Let's see if everything works. This is a little bit.
00:19:00.890 - 00:19:21.658, Speaker D: No, no. Hi Jordy. It's good to be here. Good to see all of you guys. Okay, I shall, I guess, click present and then I click on here and then okay, great. You see my MetaMask 0.1 e if I'm connected to the polygon ZK VM.
00:19:21.658 - 00:19:22.400, Speaker D: Right?
00:19:24.790 - 00:19:26.340, Speaker B: You did the bridge before.
00:19:27.670 - 00:20:06.320, Speaker D: Indeed, I did the bridge before. Okay, so then I have to send what address should I send to? Okay, let's go on Polygod Zkvm. We'll check this most recent transaction and how about we'll take whoever sent it? So I'm going to send to them and then send to them 0.5 e. Set the guess a little bit to 600:42, have some more meme value and then click next. Yes.
00:20:07.010 - 00:20:09.070, Speaker B: Maybe you want to put a message there or something.
00:20:09.140 - 00:20:19.780, Speaker D: Okay, how do I put a message again? Actually, I was looking this up and GPT told me to click on Advanced options, but I don't see advanced options.
00:20:20.630 - 00:20:27.860, Speaker B: Oh, it's not a bind. Sure, okay. But just do the normal transaction. That should be fine. You can share with us a.
00:20:30.390 - 00:20:35.080, Speaker D: So do you know how to add call data, by the way?
00:20:38.570 - 00:20:42.566, Speaker B: Yeah, I mean, it's advanced Options and show the data somewhere.
00:20:42.758 - 00:20:47.180, Speaker D: Right, but I just like I don't see the advanced options field. That's the thing, right?
00:20:48.270 - 00:20:52.640, Speaker B: I cannot see very good. The screen. But that's here.
00:20:53.010 - 00:20:54.480, Speaker D: Oh, there we go. Okay.
00:20:57.090 - 00:21:08.286, Speaker B: Just to show the data I need, the previous one is the configuration of MetaMask. In the configuration just go to the configuration of MetaMask.
00:21:08.478 - 00:21:21.958, Speaker D: Oh, I see. Okay, hold on to chose here again. Click on polygon hold on, where do I go for just maybe you need.
00:21:21.964 - 00:21:27.110, Speaker B: To maybe cancel this and just go to the okay, just go to the configuration.
00:21:28.250 - 00:21:34.010, Speaker D: There we go. Okay, perfect. So I go to add network and then I just go back to networks and then polygon Zkvm.
00:21:35.070 - 00:21:43.550, Speaker B: That's okay. Which is in general maybe in advanced in a second.
00:21:43.620 - 00:21:45.054, Speaker D: Advanced, I see.
00:21:45.092 - 00:21:45.342, Speaker B: Okay.
00:21:45.396 - 00:21:48.000, Speaker D: Advanced, advanced gas control.
00:21:48.770 - 00:21:54.340, Speaker B: Show data just up. Show that this one? Yeah. There we go.
00:22:00.550 - 00:22:20.418, Speaker D: Okay, let's see how this works. We're going to click send to this address. Send to oh, there we go. 0.5. Okay, set this to a meme number and then over here. Okay, great. I have to create some hexada.
00:22:20.434 - 00:22:22.920, Speaker B: Okay, hold on, let me just make the hexada first.
00:22:23.930 - 00:22:28.230, Speaker D: Let's see. I need something corny. I'll deliver corny.
00:22:29.610 - 00:22:30.640, Speaker B: Let it.
00:22:42.790 - 00:22:44.434, Speaker D: Is that corny enough for you?
00:22:44.552 - 00:22:45.620, Speaker B: That's perfect.
00:22:46.150 - 00:23:15.850, Speaker D: Okay, amazing. Okay, going back here. Send to the seven, whoever this is. 0.5 gasolabit has to go to a meme number and then x data zero X, whatever this is. No meme number. Okay, next and then confirm.
00:23:15.850 - 00:23:18.874, Speaker D: Okay, send pending. Amazing.
00:23:19.072 - 00:23:23.050, Speaker B: It should now go forward. Okay.
00:23:23.120 - 00:23:24.460, Speaker D: Edit says success.
00:23:26.030 - 00:23:35.540, Speaker B: Good. Okay, maybe yeah, you can see the data there. We already showed that. Just show you can show just select show.
00:23:36.230 - 00:23:36.866, Speaker D: There we go.
00:23:36.888 - 00:23:37.858, Speaker B: There we go.
00:23:38.024 - 00:23:38.740, Speaker D: Okay.
00:23:41.030 - 00:23:42.180, Speaker B: We made it.
00:23:42.630 - 00:23:43.380, Speaker D: Okay.
00:23:44.310 - 00:23:46.360, Speaker B: I was not sleeping for that.
00:23:48.250 - 00:23:49.880, Speaker D: Amazing. So happy.
00:23:50.970 - 00:23:55.462, Speaker B: I think. Great. We can continue. We have the first attraction there.
00:23:55.596 - 00:23:56.086, Speaker A: Definitely.
00:23:56.188 - 00:23:56.840, Speaker D: Okay.
00:23:59.370 - 00:24:38.610, Speaker A: Well, now we have officially launched secret EVM mainite beta. And we love turning. We love it. Now there's a big welcome to our community to our developers, to our builder. And we just want to say that we're going to share everything that you need to know about Maynight Beta at 630 Central European time or at 430 GMT time. So with that and with this excitement, we will continue with a Fireside chat. And we will invite now, Vitalik and Jordi to stay in and no better person to take this Fire chat on than Mihailo.
00:24:38.610 - 00:24:39.720, Speaker A: Take it on.
00:24:40.570 - 00:25:16.026, Speaker B: Thanks a lot, Grace. I'm not sure that I'm the right person to do this now, given how fast I was. Super exciting and super fun and yeah, luckily it turned out very well. Yeah. Hi, everyone. Again, I'm very excited and honored to have a very quick chat with two people that I tremendously thanks. And I think without further ado, let's go into that, right? So I think maybe we can just start emotionally, if that's fine, then we can switch back to rational conversation.
00:25:16.026 - 00:25:35.640, Speaker B: So just tell me, how do you guys feel about what just happened? Just, do you have any current emotion that you can maybe share? And what do you think about this event? Is it really an important milestone, as we believe? And is it really a gift to the community? Just anything that you can just share about how you feel about?
00:25:37.390 - 00:26:01.840, Speaker D: Yeah, no, I mean, I feel very happy and excited for what's to come. The whole Zkvm thing is just something that I think we've all dreamed about and talked about for such a long time. And actually seeing it happen on main net and seeing all of the pieces come together and just work is just so amazing.
00:26:03.590 - 00:26:53.690, Speaker B: For me. Okay. It's a strange feeling because I've been dreaming for this moment for two years. But at this point, once you get there, and even the days before, I'm more excited for tomorrow and for the day after tomorrow and what will happen tomorrow and the day after tomorrow that's that we will plan what we are going to do next and how we are built. And we have a lot of things in the backlog because in the last three months, we have been working very much in security and not doing anything new, just checking and checking the code many times and all that. And we have a lot of things to improve and to do it better and so on. So for me, the most exciting of this event is that, okay, we will finish this phase and we will continue building and improving.
00:26:53.690 - 00:27:03.058, Speaker B: This is just a milestone. I think it's an important milestone because it's having something that was impossible. Okay. No, it's here. It's a ckbm. It's possible. We can build that.
00:27:03.058 - 00:27:46.000, Speaker B: But it's a long path for scaling. We are just starting to scale. This is just the beginning. And now we need to really scale, I mean, really mean making many transactions, going fast. And this is, I think, an important step because this will really scale. Well, we'll start this edge of scaling Ethereum and we finally will see applications that were not possible because it's scaling no make them possible with the security of Ethereum. So I think this is a really important moment for the space.
00:27:46.000 - 00:28:24.362, Speaker B: Thanks so much, guys, for sharing this. Okay, let's switch back to a rational conversation and maybe a little bit more technical, but maybe you can start for the sake. We have more than 10,000 people, I believe, signed up and hopefully yeah, that's the info that you got from eGlobal friends. And hopefully a lot of them are newcomers, right? And we want to onboard as many newcomers as possible. So for their sake and everyone's sake, maybe if you can just recap again, what is the importance of these layer two solutions and Zkvm itself, just briefly, in your own words, just for everyone, maybe it's always useful to recap. Yeah.
00:28:24.416 - 00:29:30.478, Speaker D: So I think for almost since Ethereum launched, I've been talking about scaling as one of the most important problems for Ethereum to solve. And I think for me, at the beginning, for the first few years of Ethereum's growth, that was definitely pretty theoretical. We knew that Ethereum had to scale somehow to be able to serve future millions of people user base. But at the time, transactions were cheap for the users that Ethereum has, ethereum worked fine. But then, especially in the last few years and in the last bull run, it just became clear how expensive the Ethereum main net is. I remember visiting Argentina and just seeing how everyone is using a binance account, right? And from their perspective, it makes perfect sense because binance to binance transfers don't have fees. But at the same time, I think as a crypto ecosystem, we do want to ultimately move beyond the centralized approaches.
00:29:30.478 - 00:29:35.702, Speaker D: And I'm sure even a lot of people in binance feel that way as well.
00:29:35.756 - 00:29:35.974, Speaker B: Right?
00:29:36.012 - 00:30:52.334, Speaker D: But making something that's decentralized and easy and practical for people to use at the same time is just so much harder than making something centralized and easy to use. Right? And then last year we saw the FTX situation and we just keep seeing all of these incidents that just remind us in a very real and practical way why decentralized access to the chain being possible and being a reality is just so important. Because if you don't have that, then you have this kind of like centralized on top of decentralized Frankenstein that seems to just sometimes be even less secure than just doing the whole thing centralized top to bottom. Right? And so I think scalability and decentralization at the same time is like this really hugely important thing. And for the last couple of years, I think the Ethereum ecosystem has been focused on roll ups as a primary strategy for scaling. Basically, just because Ethereum core developer time is limited, the Ethereum network's ability to handle complexity is limited. And so we didn't want to give every responsibility to the layer one.
00:30:52.334 - 00:31:27.430, Speaker D: And we wanted to leave open some room for independent innovation to happen. We've recently had this layer two ecosystem start to emerge. Well, I think these days the layer two ecosystem has existed for some time. Right. But for me, 2023 in particular is the year when I want to see the layer two ecosystem really mature. And for me the biggest part of maturity is layer two is becoming actual layer twos. Right.
00:31:27.430 - 00:32:43.570, Speaker D: In the sense of you don't just have some claim that we're going to have a proof system in the future and actually we just have a multi SIG. No, you have proofs, right. And you have a system where your coins in the Lear two are actually protected by math instead of being protected by some group of five out of nine people or whatever the number is. Where if they want to go and grab up your $29 million and enjoy a retirement in some tropical beach country that's not Montenegro, then you don't really have much defense against that. Seeing, I think Polygon make so much progress just in terms of improving its security model over the last couple of years has been truly amazing and it's something that I look forward to seeing the rest of the layer two ecosystem do as well. Right? Yeah. I'm just excited to see scaling not just be this kind of theoretical thing, but actually be something that Ethereum already has solved in practice.
00:32:45.190 - 00:33:15.260, Speaker B: Such a great recap. Thank you so much. Alec. Over to you, Geordie. Well, it's the magic of not so we are not that theoretical. We are just taking the theory and just bringing to the solve real problems. And when I entered the space, for me it was amazing, but because, okay, you can do so many things, but actually when you want to do the things, you just start discovering the limitations of the space.
00:33:15.260 - 00:34:13.942, Speaker B: But I want to use this because I think it's amazing. So this is what I've been working on is, okay, what we need to put this amazing technology in people's hands and extend that anybody in the world can use it. Well, you see there are many things but security usability, but scaling was fundamental. If you can do just, I don't know, 30 transactions per second, this is not enough. It's not enough for the world, but not enough even for a relatively small community. So how do we have to do and we have been thinking a lot about that state channels, we think about the plasma, a lot of efforts happens. And when roll ups I remember this blog post from Vitalik and some people just working on they say they happens.
00:34:13.942 - 00:35:04.286, Speaker B: It's like we start seeing the light. It's like, okay, it's a path. There splitting the data availability and the execution and okay, it's a long path, but we just took this path. Ethereum Foundation, I think, is doing a great advance in the data availability and so on. And the ecosystem is also working a lot on these roll ups and these layer tools. And everything is looking that it's a long journey but everything is looking that in few years or even months we can have this technology available to the people. I think that's what's about thank you so much guys, this was really great.
00:35:04.286 - 00:36:30.150, Speaker B: Maybe let's go just a little bit deeper, a little bit more technical and as we see recently there have been multiple projects that started working on Zkvm and we at Polygon and I'm sure Vitalik as well, we are very happy that that's the case but that introduced the need for a little bit of clarity. Ideally what Zkvm is are there some different types of Zkvm and Vitalik recently introduced helped a lot on that front by publishing blog ports about four different types of Zkvms, basically that way introducing at least some initial nomenclature for this great technology and I wanted to ask you guys a little bit more about that. If you can chime in both you Vitalik and Jordy first about polygon Zkvm, where it is, which type of Zkvm it is, what is going to be in the future and maybe about the nomenclature itself. Vitalik. If you now from this perspective, would you consider changing anything in the nomenclature and just generally how you feel about the whole nomenclature? Basically, does it mean, for example, that the type one is by default the best solution or it's not that black and white just generally to chat about that a little bit in the context of polygon zkvm and in general about nomenclature of Dkvms.
00:36:32.410 - 00:36:35.126, Speaker D: Maybe jordy, answer the polygon question first.
00:36:35.308 - 00:37:46.186, Speaker B: Yeah, I think that was this blog post about classifying. I think this clarify a lot of things because at the moment there were a lot of different roll ups doing different things and the marketing people just putting things and bringing and this clarify a lot because at the end from the time zone. Perspective is what it is and the things in the case of the polygon we define ourselves as type three. I think we fit very good in the type three and we are going in the direction to be a type two that's a little bit the path that we are. So the idea is to get closer and closer to Ethereum. We want to implement some precompiled smart contracts that are not ready yet and there are some small details this new type of transactions and there are some small details that we want to get closer to that front. We are going in that direction and I think this is a good equilibrium the fact that for example in our system the people don't have to reuse the tooling so they don't have to use a different tooling so they can reuse all the Ethereum tooling.
00:37:46.186 - 00:38:05.320, Speaker B: So you just use Solitude, you just use Remix or you. Just use Halhat and you just build and you just connect to Ethereum and you go there. This compatibility is really good for the end user. So I think this is a good compromise for having a lot of users using.
00:38:08.750 - 00:39:24.638, Speaker D: Yeah, so I guess from my perspective, the way that I would summarize the type system in one sentence is basically that the lower the number of the type is, the closer it is to basically being an exact copy of Ethereum's EVM. And the higher the number of the type is, the further away from that it is. But the reason why you might want to do a higher type EVM is because either it's easier to develop or because if you do some things that are a bit different from the EVM, then you can get some efficiency benefits that you can't do otherwise. Right? So the difference between Type One and type Two, for example, is type One requires perfect compatibility to the point where you can verify Ethereum's existing execution layer. And that involves some fairly synac, unfriendly things like potentially verifying a huge amount of catch hack, right? And if you want, you could go and replace Ketchack with some more stark friendly hash function. Right, and that's something that's possible. But probably is the correct thing to do for layer two is today and five years from now probably will be even the correct thing to do for the layer one.
00:39:24.638 - 00:40:07.002, Speaker D: But it does mean that today you're not going to be the same as layer one anymore. Right. So I think my view of what the ideal is is I think the ideal for a Zkvm implementation is for it to be configurable and support all the types. Right. I think an ideal Zkvm would have settings so that if you want, you can turn it on to run with Ketchiak Orko Patricia Tree and that it can verify Ethereum blocks or you can set it to run with some more ZK optimized stuff and it'll be more efficient for you. It might even have different pre compiles depending on what you want. And you'd be able to kind of choose to what extent you want compatibility and to what extent you want efficiency.
00:40:07.002 - 00:40:33.880, Speaker D: And that should be more of a project by project choice. And I think it should be possible to make Zkv implementations that make it possible to hit all sides of that. And I feel like it probably shouldn't be too hard to do that if you're starting from the higher types and moving toward the lower types, right. Because you had your previous code anyway, right, so you just kind of make it open either way.
00:40:35.130 - 00:41:21.480, Speaker B: Thanks a lot. One of the things that I want to add here is I did myself the exercise to say, okay, you get all this technology because when you are doing this, you learn a lot. And it's a challenge every week. And it's like, okay, with this technology, if you want to do okay, forget about being Ethereum compatible and let's try to do an efficient roll up. Let's see how we would do it. The interesting thing is that I would not change many things the way that we were able to optimize. There are things that probably yes, I know, there are things like memory alignment and there are things that are a little bit tricky in Ethereum and probably I would remove some of these pieces, but not that many.
00:41:21.480 - 00:42:21.082, Speaker B: The way that we are computing, for example, arithmetics in different prime field, the way that we are computing Ketchup, the way that we are computing hash functions, the way that we are working with the storage, the way that we are executing the programs. Yeah, it could be some differences, but it's much less that you may think when you start and that's because the rate of optimization that we get and being compatible. So for us the requirement is, okay, we want to be Ethereum compatible. So that's the specification. So let's see what we can do on that. And we learn that much in this process. So we come up to some really good tricks and really good algorithms that okay, this is even better than if we were doing something different to that.
00:42:21.082 - 00:43:12.310, Speaker B: So that's a little bit the conclusions that we're getting there. Of course there are things, it's a spectrum of things and we should go like piece by piece, but in many pieces it should not be very different. Thanks a lot, guys. I would have so many questions in addition to this, but maybe let's just touch on one and then we can slowly wrap it up because we have to adhere to the schedule, I guess. So we are very happy that we deliver this, right? And we believe we are generally Mainet ready, right? We have multiple external audits, multiple internal audits. We have testnet that has been running for months and all of that. But still it's very important to say that this is very complex technology, this is new technology that hasn't been delivered before and it's important to be responsible.
00:43:12.310 - 00:43:48.150, Speaker B: Right? With that in mind, Vitali published another blog post very recently where he speaks about proposed, basically milestones for Zkavm rollups or rollups in general when it comes to introducing or slowly removing some sort of training wheels and security measures. So I know we have a basically security focused panel in a while, but if you can just one sentence, maybe share your thoughts also about maybe this Vitalik's proposed roadmap or model and just anything in general about Dkvm when it comes to this responsible.
00:43:48.890 - 00:46:07.810, Speaker D: Yeah, sure. So I think that blog magician's post was also motivated by just seeing this kind of confusion and definitely this kind of weird marketing situation where there are a lot of different projects in this space that call themselves layer. Twos. And people don't really understand what actually makes a layer two a layer two? What makes it not a layer two? What makes lawyer two decentralized and all of these things, right? And the goal of the post was basically to kind of help people sort of zero in on the thing that matters, which is security, right? And the thing that matters in security, which is basically this kind of complicated trade off of when do you trust put more trust in the people and when do you put more trust in the code, right? And it's like a complicated trade off to navigate, especially because we're dealing with this fairly young technology that inevitably has bugs and probably is going to continue to have bugs for some time. But basically the challenge is on the one hand we want to actually start moving away from just systems that claim to be layer twos but actually just require completely trusting some small committee, right? We don't actually want a system where a four or seven multisig can run off with $29 million and have a vacation in a tropical island country, but at the same time we want to try to do it responsibly. And if you kind of on day one just to get ahead of everyone else, push out a release and say, okay guys, code is law and then people throw in $29 billion and then it turns out that there is a bug, then that's pretty bad too, right? So I think what I tried to do is kind of structure things and identify a couple of middle grounds. So the three stages that I identified are I call them Stage Zero, stage One and Stage Two.
00:46:07.810 - 00:47:39.290, Speaker D: And Stage Zero is basically like full trust the people, right? So basically something that has kind of like the scaffolding of a roll up and you can submit transactions, you have backup channels, you have all these things. But at the same time there is some kind of override mechanism and ultimately the override mechanism can decide where the money goes with a 51% threshold, right? So it's like a full training wheels thing. Stage Two basically says you're fully running on the code. Now, there is kind of one nuance that I did kind of allow in the stage two definition, which is that what you can do is have a mechanism where if someone can prove that the code disagrees with itself, then you can flip an emergency switch and let humans come in, right? Code disagreeing with itself could happen in two different ways, right? Like you could have two different zkavms. You could have one zkavm and the switch would be like if someone can successfully prove two different state routes for the same data, there's lots of different ways to do this. Or on the other side, if no one submits a valid thing for an entire week, right, that would also suggest that something is broken. But otherwise the idea would be that if the code is running correctly, the humans have no ability to override the code, right? And that's a long term goal, but that requires being pretty confident in the code and the code's ability to not have certain kinds of really serious bugs.
00:47:39.290 - 00:48:54.534, Speaker D: Stage One is this kind of middle ground where basically it's kind of like halfway in between, right, where for Stage Zero, you need 51% of the humans to override and move money to wherever they want. For Stage Two, you need 101% of the humans, right? 101% greater than 100%, so you can't do it. And then for Stage One, you need 75% of the humans. So the thing that I suggested was at least six of eight, where there's enough people in that multi SIG that are outside of the organization so that the organization by itself can't just go and move the funds wherever it wants to. And with this kind of threshold, you still have the ability to intervene if things really go wrong. Right, and I've been in multi sigs a lot, right, and if really serious stuff happens, then generally you pretty quickly can get almost anyone, right? Like almost everyone, especially if they're professionals. But at the same time, it's much harder for 75% of people to collude and decide to go to a tropical island than it is for 50%, right? So it's this kind of middle.
00:48:54.534 - 00:49:59.802, Speaker D: And my goal for 2023 has been that I want the layer two ecosystem to basically move to at least the equivalent of Stage One. And I think it's okay to stay in Stage One for a pretty long time, right, because I think we do want to be confident that the technology works before we put even more trust in it. But if you're in Stage Zero, then you're basically not really giving any decision making power to the code at all, right? And it doesn't really matter if you're a ZK roll up or an optimistic roll up or what kind of roll up. Ultimately you're just a multi SIG controlled by the Security Council. So in Stage One, you're basically saying, okay, we have an actual proof system and the proof system has actual power, but we don't necessarily quite give it all the power. And if there is room for some Security Council, if there is strong agreement inside, it to override what the proof system says in case of a bug. So I think Stage One is this nice middle ground where we're not just talking about these very centralized things that we've had so far.
00:49:59.802 - 00:51:26.280, Speaker D: We're talking about actual proof systems, whether they're optimistic or ZK that have teeth and that actually have a strong influence in what happens on chain, but at the same time, we leave some room for error and we don't kind of trust things fully. And this is something that I think should be achievable for at least many both Zkevm and optimistic EVM projects this year. I've also talked to a couple other ones, and I know Arbitrum for example, they want to open up their proof system really soon and I think they have some Security Council parameters that are even more stringent than what the Stage one requirements are. So I would love to see Polygon really join the Stage one camp soon as well and really kind of set the standard for like, hey, you have to have an actual proof system. The proof system has to actually run and the proof system has to actually have some teeth, but still in a way where we're not kind of like turning the trust over from zero to 100% from day one and we can be a bit careful and still kind of scoot for a couple of years while we make sure that everything really is completely safe and then we keep going forward from there.
00:51:28.330 - 00:52:10.046, Speaker B: Just to mention here that Polygon Ckbm, it's a stage one. Actually we changed the multi SIG this morning in six out of eight. It was four out of seven and this morning we changed it to six out of eight just to be on the stage. But the cool thing is that we are quite prepared, at least from the code perspective, to be a stage two. Actually, we could be a stage two if you want. Of course we don't want to be until we feel safe. We want at least but what are the pieces, the pieces that we are missing to be a Stage Two is well, first of all we need to enable the forced transactions.
00:52:10.046 - 00:52:47.010, Speaker B: We will probably in a few weeks because this is an important mechanism and this is something that we disabled in the last minute for some issues. But we will enable two, three weeks probably. There is another thing, is removing this skill switch. This is probably the hardest part because we need to feel comfortable that the security is there. So this will probably stay. We are setting that we want to be running the system at least six months without finding any critical issue, at least. So that will take a little bit while on that.
00:52:47.010 - 00:53:11.740, Speaker B: And the other is the time lock for the upgradability right now is ten days and we need to increase that to 30 days in order to be stage two. The plan is there. It's more about getting comfortability of the code and we will continue running back bounties and audits and probably some upgrades in there. So we'll stay here for a while.
00:53:12.110 - 00:53:26.080, Speaker D: Yeah, no, I mean I definitely, really appreciate the commitment to security and I'm so happy that we finally have a layer two with Keith running on Mainet now. So big congratulations there.
00:53:26.450 - 00:53:59.166, Speaker B: Thank you. Thank you so much. Both again, if I can just share my humble opinion. I totally agree. As we saw, as Gorgi said, Polygon Zkv is formally, I guess, type one, sorry, a stage one when it comes to these wheels. And I totally agree that this targeting basically stage one for 2023. As you said, Vitalik devises the optimal and responsible approach because we really want to transition to full safety gradually.
00:53:59.218 - 00:53:59.434, Speaker D: Right.
00:53:59.472 - 00:54:25.582, Speaker B: And full permissionless solutions. Great. This has been a fantastic discussion. Thank you guys so much. And just if you have any closing messages or anything that you would like to share with the community, any sort of message or advice or anything, and then we can slowly wrap it up. My site is just give a try. I mean, it's a network, a new network there.
00:54:25.582 - 00:54:38.050, Speaker B: It's a zkbn there. So if you are a developer, if you are a user and just make a try and see how simple it is just to build on top of the polygon CKBN.
00:54:38.970 - 00:54:47.160, Speaker D: Yeah, I have tried sending two transactions and it's been pretty easy so far. So do recommend.
00:54:51.550 - 00:54:53.580, Speaker B: Grace. Please take it over.
00:54:54.350 - 00:55:04.910, Speaker A: Thank you. Well, thank you very much. And it was an insightful chat. And after all, Mihilo, you did make a balance between the rational and the irrational there, so that was a good myself.
00:55:04.980 - 00:55:06.320, Speaker B: It's important that I.
00:55:08.290 - 00:55:49.034, Speaker A: Came out absolutely perfectly balanced. And as far as Journey, I know that we can check a Fire chat with Vitalik out of your bucket list. That's definitely something that we can check it. Well, now that we had this Fireside chat, it's a good segue on where we're going next. So we have two amazing panels that are coming up. This particular one is about building Trustless scaling Solutions. So I think there's going to be a very engaging conversation around security, around auditing, around tooling, around what decentralization means and so on.
00:55:49.034 - 00:56:00.570, Speaker A: So we will invite Brendan. OK. Yes, please. Jordy. And Vitalik stays with us. Brendan is our moderator. Hi Brendan.
00:56:00.570 - 00:56:25.400, Speaker A: Welcome. And I was going to introduce everyone in the panel, but I think you should do this one. So I'll let you in and get started. I think we're missing a person. We're missing bahid from hexons and Alex. It's there. Okay.
00:56:25.400 - 00:56:32.460, Speaker A: I wonder what happened. Anyway, I'll let you continue.
00:56:33.550 - 00:56:34.618, Speaker B: Cool, cool.
00:56:34.704 - 00:56:42.910, Speaker E: Take it away. So the focus of this panel is going to be on Building Trustless Scaling Solutions, particularly around security and auditing.
00:56:44.770 - 00:56:45.038, Speaker B: I.
00:56:45.044 - 00:56:56.770, Speaker E: Guess for those of us who are new to the event. Alex, Daniel, Barry, would you like to briefly introduce yourselves? I guess Alex, starting with Alex.
00:56:59.750 - 00:57:02.580, Speaker F: Yeah, sure. I hope you can hear me now.
00:57:03.190 - 00:57:03.970, Speaker E: Yep.
00:57:04.390 - 00:57:04.754, Speaker B: Yeah.
00:57:04.792 - 00:57:48.500, Speaker F: I spent a significant number of years on EVM research, mostly at the and, you know, regarding polygon Zkvm. At Spearbit, we assembled a number of different teams to conduct review, and I've been participating on the EVM side, mostly on EVM compatibility questions, how the Ckvm would compare to mainnet, and if there's any differences, what kind of risks those could pose on multiple facets, including languages. I think that's like a short intro.
00:57:48.870 - 00:57:49.620, Speaker B: Cool.
00:57:50.470 - 00:57:52.210, Speaker E: Daniel, do you want to go next?
00:57:52.360 - 00:58:05.974, Speaker D: Yeah, sure. Daniel from Polygon zero. So we work on a separate ZK EVM, which is focused on type One compatibility and also working on related technology like Plunky Two and now Plunky Three.
00:58:06.172 - 00:58:06.678, Speaker B: Cool.
00:58:06.764 - 00:58:15.242, Speaker E: And I guess I also work with Daniel. And then last but definitely not least, Barry. Do you want to briefly introduce yourself? Briefly introduce yourself.
00:58:15.376 - 00:58:35.810, Speaker B: Oh, can you hear me? Yeah. Hey, I'm Barry. I work on a whole bunch of DK things, including I had a lot of fun working with Jordy on the early stage Dkvm cluster. So I'm happy to be here today chat about all cool, cool.
00:58:35.960 - 00:58:42.258, Speaker E: Well, I think we can just jump into it. I think it's safe to say, Jordy, from conversations that we've had, that security.
00:58:42.344 - 00:58:50.840, Speaker A: Is chris yes, I'm sorry, but we do have Bahe now. Everyone is there now.
00:58:55.530 - 00:58:57.430, Speaker E: Vai, do you want to introduce.
00:59:06.030 - 00:59:06.346, Speaker B: I.
00:59:06.368 - 00:59:31.380, Speaker E: Think it's safe to say, Jordy, from conversations that we've had internally at Polygon, that security has sort of been the guiding principle of the development of the Ckvm. And so I wonder if you could just talk at a super high level about the philosophy and the perspective around security and auditing and sort of building a system that fundamentally protects your funds. So we'd love to hear.
00:59:32.310 - 01:00:36.790, Speaker B: Yeah, it has been the biggest challenge of the full system because these systems are really complex and there is a lot of new pieces that are built on top that are built for this. So one single piece that goes wrong and the system is just insecure. This is really problematic and this has been difficult here when we faced security, just trying to isolate the things that can go wrong, just trying to find the right mitigations for the things that you know that can go wrong. So in the case of Polygon, we just distinguish like four things that can go wrong. One is smart contracts. We know very much about what can go wrong in smart contract and this is one type of things. The other is the correctness.
01:00:36.790 - 01:01:21.686, Speaker B: This is really bad. If the correctness of the proof means you are proving something that's correct, but this correctness goes to some balance, is wrong, this is really bad and you cannot do much about that. The good things on this point is that because it's Ethereum compatible, we just leverage on top. So we just run all the theorem tests and we are passing all the relevant Ethereum tests there. There's more than thousands of tests there. This give us a good confidentiality that there are no correctness errors or at least it's difficult to get the correctness errors because all the tests are passing. So everything is working as it's supposed to be.
01:01:21.686 - 01:01:56.754, Speaker B: This is not exactly so there are some exceptions and there are things that can go wrong and we find something at some point about that. And we were being very malicious on that, but really difficult on that. The one that's really easy is the soundness error in the program is just forgetting some constraint. This is really easy and this is what can go wrong. And here the Mitigation actually was proposed by Vitalik at some point. Well, there are two Mitigations. The first is that if you have a priority prover, so if you are running the proofs, you are not going to prove something that's wrong.
01:01:56.754 - 01:02:51.300, Speaker B: So I mean, this is difficult, but the proverb may stop. Or if you want to have a decentralized system, you need anybody to run approver. And here is where maybe if two provers go from the same estate with the same transactions to different states, then you can detect that automatically in the smart contract and how the system and these two Mitigations are good for this owners, which is really easy to have an mistake. And the other, the fourth one is more technical, but the proverb just gets stopped because you cannot generate the proof. But this is just the Mitigation is very easy because the system just stops and in seven days in the timeout, you just upgrade the system and you continue. So this is how the things and that's why you feel comfortable for launching. But again, security is you never have the 100% security that the system is correct.
01:02:51.990 - 01:03:04.338, Speaker E: Right. We sort of have this framework where errors can be either correctness soundness errors in the prover and then smart contract bugs. Is that sort of safe to say in the proverb?
01:03:04.354 - 01:03:08.460, Speaker B: Yeah. And then the other is that the prover that you are not able to generate the proof, which is.
01:03:10.510 - 01:03:40.078, Speaker E: Okay. So given that framework, I guess it would be really interesting to hear from Alex and then Vahe, we didn't get a chance to hear your intro. So if you could provide that but just what the experience has been auditing different parts of the system, sort of within that framework of different like how do you approach auditing for correctness? How do you approach auditing for proversoundness? So it'd be cool to sort of hear your perspective.
01:03:40.254 - 01:04:21.274, Speaker B: Yeah. Thank you, Brendan. I'm sorry guys, I had some issues with the video so I skipped the intro. I'm the CEO and co founder of hexons. We did the audit for the Zkvm. So, about the question, I would say that with the soundness I wouldn't say that there is a lot of things different than testing for completeness and soundness. I would say that it's about the approach that you take in auditing the different layers of the Zkvm because basically it has like if we can call it like hardware layer, firmware layer and application layer.
01:04:21.274 - 01:05:15.300, Speaker B: And one thing that we're trying to do is that when further we go down into the layers for example, when we were auditing like hardware layer, we're trying to use also some toolings there because like static analysis and dynamic analysis, trying to write small tools, some toolings that will help us out. Because basically, that's where almost everything is connected with some edge cases. And the bigger the coverage, the better. And you have a lot of, for example, auditing peel, state machines, you have a lot of constraints and a lot of assumptions. It's hard to just remember all of them sometimes. Yeah, it's better to use some toolings in that kind of situations. And also like the manual review.
01:05:15.300 - 01:05:34.886, Speaker B: It's always the manual review for every layer that you do. Sometimes you cannot find edge cases that will be found programmatically. You just need to watch them. That's pretty much it. Yeah.
01:05:34.988 - 01:06:34.966, Speaker F: I would say a single word answer to the question. What did it felt like? It felt like scary. Like extremely scary. Getting into, you know the Zkvm team has built a number of languages, a lot of tooling, a lot of different parts, and they were also constantly improving the system and conducting an internal review. But they were super helpful in setting up trainings, training workshops and being available to answer any kind of questions. When looking at any of the different layers, I think what has been challenging, of course, is the different layers, what kind of understanding and knowledge and background those different layers required and then the connection between the layers. I think generally it has been initially it was like extremely scary, but as you get into it, you build up confidence.
01:06:34.966 - 01:07:25.334, Speaker F: And especially the fact that Polygon Zkvm is able to execute most of the ethereum state tests. That was a reassuring fact. And there was in fact a good starting point to dig deeper and see why any of those test cases would have been disabled. There could have been a number of reasons, mostly because the test cases required gas higher than what the proverb would support. So even just investigating from that level down, it is possible to find a number of different issues. But I think generally we had a number of different teams looking at the different parts. The state machines have been looked in isolation, the EVM instructions have been looked in isolation.
01:07:25.334 - 01:08:19.290, Speaker F: And then there is like a stage where you try to connect these dots together. I think tooling, we did try to invent some tooling, especially for the peel, for the peel layer, but I think given the handy sentence technologies, there's just not enough tooling. What I seem to be somewhat useful is pattern matching. And once you identified a given issue, which may look like something you want to investigate further, I think some of those patterns were emerging in multiple parts. So yeah, I think pattern matching, when you look at such nascent technology, that's more useful than trying to invent complex tooling.
01:08:19.950 - 01:08:22.380, Speaker E: Cool, that makes a lot of sense.
01:08:23.230 - 01:08:54.390, Speaker B: Want to add that? I definitely shared a sense of scare. That is the thing. Yeah, I was just trying to be more pragmatic on the answer, but yeah, sure. Yeah. About the tooling part also was a lot of pattern matching, like variant analysis thing. Of course. Yeah, I mean, creating complex tooling here might be hard in an overkill rather than using variant analysis techniques.
01:08:55.370 - 01:08:55.830, Speaker D: Cool.
01:08:55.900 - 01:09:23.970, Speaker E: Makes sense. So, Barry, we already heard that your conversations with Jordy sort of served as the genesis for this entire project. And you guys are longtime friends. I'm really curious to hear from both you and Vitalik sort of how the EF sees its role as shepherding and stewarding these protocols and projects into maturity and into production, and particularly in the context of security and audits.
01:09:25.910 - 01:10:05.842, Speaker B: Sure. Thank you. Brennan so, yeah, the way I think about this is that there's a lot of different layer twos that are sort of like working to scale Ethereum. And one thing that I would really like to see on the security dimension is more collaboration between the different layer twos. I feel like a very nice security parameter we could have is if we had a ZK roll up that also had a fraud proof. And a fraud proof was just like the fraud proof was one of the members of the Security Council, for example. And if the fraud proof disagreed with the ZKP, then we would have to fall back to the Security Council to decide and break the tie.
01:10:05.842 - 01:10:18.066, Speaker B: I think that this is a very nice kind of underrated feature where we have all these teams working independently. But I would like to see eventually everyone sort of joining forces and working together because at the end of the.
01:10:18.088 - 01:10:19.618, Speaker D: Day, you get a lot more security.
01:10:19.704 - 01:10:25.122, Speaker B: By having a roll up with a fraud proof and a validity proof. Cool.
01:10:25.256 - 01:10:27.126, Speaker E: And then, yeah, Vitalika, it would just.
01:10:27.148 - 01:11:52.960, Speaker D: Be really cool to get your I mean, I think in general, in development of all of these new technologies, the Ethereum Foundation tries its best to play a supporting role. At the same time, try to avoid picking winners in the kind of project and application space and try to support projects that kind of uplift the entire ecosystem and kind of play those more supportive tasks that are valuable. Things across the entire ecosystem that are more kind of coordination related that would make much less sense for each individual team to do on its own and so forth. So sometimes that has meant writing and contributing to specific pieces of code, though I think even there we've been striving to not have the foundation dominate that and bring in contributions from other monolayer two teams and some other teams. Sometimes that involves being supportive on the security and auditing side. Sometimes that supports other things, but generally trying to kind of foreground the people in the ecosystem that are doing all the amazing work as much as possible.
01:11:53.650 - 01:12:18.890, Speaker E: Cool. Very cool. Daniel, it would be really interesting to hear, from your perspective, being internal to polygon, how sort of the culture of collaboration around security and auditing actually functions. I know that you were one of the participants on the internal audit of Flanck, so yeah, it would. Be great to get your perspective.
01:12:20.030 - 01:13:18.940, Speaker D: Yeah, it's been a really nice collaboration between Polygon Zero, Hermes and the Mitin team. So together we're sort of the ZK side of polygon. My involvement in Hermes ZK ABM was fairly small, but one thing I was able to do was help to do an internal audit of the flank code, which was very interesting to learn about and see how they were doing things. Yeah. And I'd say we just had a lot of really good discussions with these internal teams about what the right approach is, especially when it comes to sort of training wheels or backup layers of security. What sort of backup layers can we come up with to make sure that worst case, if there is a soundness bug, then we have some kind of fallback option and it's not just game over.
01:13:19.710 - 01:13:40.580, Speaker E: Yeah, cool. And so back to Jordy. It would be really interesting to hear about your sort of perspective on the roadmap for what training wheels we have now, what the process of taking them off will look like, and sort of like the end state that you'd like to get to.
01:13:41.830 - 01:14:23.534, Speaker B: Well, first of all, let me point one thing, just to answer it a bit Barry here, and it's that all the audits are public. I don't know if the last ones maybe are in a draft mode, but if they are not public now, they will be public like tomorrow. You can check that in the repos. So all the repos, they have a directory with the audits. And I mean, full transparency here. I would recommend all the roll apps, especially the ZK roll apps in the space to read those audits. Because as the people say here, that there is a lot of patterns, a lot of things that were discovered and you can learn a lot just reviewing those audits.
01:14:23.534 - 01:15:02.374, Speaker B: And I think it's called for the security in there. Of course, we are absolutely open. Just I think collaboration is key here. Sharing and being transparent in these audits, I think is one step in that direction for the future. We just started, I think was last Friday a bug bounty program. I think that continuous auditing is fundamental for here. We will continue to we plan some upgrades, as I mentioned, just including this precompacted smart contract.
01:15:02.374 - 01:15:46.934, Speaker B: So this will be complemented with some audits and we probably will do some re audits of some of the parts we already have identified, some of the pieces that maybe should be more checkered more closely or just talking with different auditors. We hear we have a good feedback of what are the more dark zones and clear zones and what are the concerns. And we are sharing a lot, this feeling with the different teams. And yeah, security is just invest as much as you can and put as much effort as you can. It never is going to be enough. So, here is polygon. We have a full team, full security team, just working in that direction.
01:15:46.934 - 01:16:02.000, Speaker B: We have a full budget in security and it's a huge commitment in there. And the worst thing is that you never have this confidence, but that doesn't mean that you don't have to invest as much as you can.
01:16:03.010 - 01:16:39.690, Speaker E: Makes sense. Yeah, I guess it would be interesting to hear about where this space can sort of go because I know that we've invested a lot of time in developing tooling for pill and ZK assembly. And I wonder in the future, do you feel like the burden of auditing will be reduced as we build more tooling? How do we get to sort of a state where we can do more kind of rapid development without as much of a burden on auditing? Do you think that's possible? Just be interested to get your perspective.
01:16:42.130 - 01:17:29.660, Speaker B: I think that toolings are something that needs to be done. I mean, it will never interchange the audit, the review from people, at least in the foreseeable future, I think, but the toolings is a must have in any case because it will shorten the time of the reviews. It will help a lot of ways. Like for example, if you can fuzz something, it helps a lot in exception than just going by hands and doing everything manually. But it will never interchange the audit itself. Maybe not never, but in the near future.
01:17:30.690 - 01:17:49.490, Speaker E: Yeah. It seems safe to say that formal verification for Zkbm is still pretty far away, right? Maybe not. Alex, anything to add on tooling and sort of automating certain parts of the audit?
01:17:54.710 - 01:20:03.340, Speaker F: Yeah, I think certainly the tools we have created were more about transforming PL to be more readable in certain aspects and then maybe being able to create some proofs for certain properties. We did initially in the first engagement, we did try to do that and you can see some of the results of that in the first report. This tool is called Perspector and later we learned that actually Polygon also has a similar inspection tool with a web interface. But regarding more rapid development, I think what we found generally is the separation of Peel and ZKSM may have proved to be a tiny bit of a bottleneck, at least for us, because you have two disjoint systems which then are connected through various paths. And we kind of felt that maybe if there would be a language in between the two so you wouldn't have two separate systems, maybe that would have helped, but it's really hard to tell at this point. And then I think the other tools which would be useful is more like IDE plugins to help you navigate the system much better. So one example in ZKSM, the syntax itself, it took a bit of time to get used to and as you have generally a lot of utilities just jumping to utilities and seeing what kind of constraints or registers they clobber, that is like a big question, right? It is really basically like what assembly is with calling conventions where you have to be aware what kind of pieces could be overwritten what pieces are saved and I think some kind of an IDE extension to help navigate these could definitely improve the review process.
01:20:03.340 - 01:20:23.394, Speaker F: And then also how to actually generate some of this code. The arithmetic state machine seemed to have been generated by a different piece of code and if you have such pieces where you can generate the Peel code or the ZKSM code and you can.
01:20:23.432 - 01:20:24.020, Speaker B: Be.
01:20:25.850 - 01:21:26.422, Speaker F: Certain that the generator is correct, maybe it is possible to formally verify the generator. That is something which could also reduce the time to review. But as it stands today, I think the really big saving grace is the testing suite. But unfortunately, as you see over time in mainnet, no matter how many tests you have, they're always going to be edge cases found. Especially if you look at the pre compiles those are like hotspot for issues and more complex call related instructions. I mean one big one in the past has been return data and I think these pieces may be even more complicated in Zkvm just the way memory and any of these constraints are handled. So yeah, I would definitely welcome a lot of tooling and I think over time we may get closer to have more velocity in reviewing this.
01:21:26.422 - 01:21:43.180, Speaker F: But I don't think manual review will ever really stop in any of these systems because you need to have a holistic view and some intuition into something which may not be a cool cool that makes sense.
01:21:45.390 - 01:22:22.540, Speaker E: I'm curious Jordy, about sort of the upgrade path for Zkvm. So suppose that the EVM on L one introduces new EIPS or for some reason we want to change the hash function in the state tree. How do you see that functioning? Actually Daniel, if we could also get your perspective on this as well, that would be great. But starting with like do you see the optimal path being sort of upgraded in place with a multi SIG? Is it migrating to a new roll up? What's sort of the optimal path there.
01:22:26.110 - 01:22:57.362, Speaker B: We are compatible. So the idea is at least what's in the idea is to be just upgrade in place, just doing some upgrades. Of course there are some pieces that could be a little bit complex. For example, mention that you want to upgrade the hash function. Maybe that would be just a full restate of the system. You can do a proof of state transition actually with aggregation we can actually build that. But this may be long.
01:22:57.362 - 01:23:31.920, Speaker B: So here we need to see case by case and see what kind of upgrade we do. But most of the upgrades that we have planned at least in the short run are going to be just adding functionality and maybe just adjusting some compatibility issues in the ABM. So at least for a while, it's going to be that way. So the idea is to be as close as possible to Ethereum. So just transiting from type three to type through type two. Ideally in a year we should be a type two roll up if everything goes okay.
01:23:33.010 - 01:23:37.018, Speaker E: Makes sense. Daniel, anything to add on upgrading roll ups?
01:23:37.194 - 01:24:32.260, Speaker D: Yeah, I think most upgrades are fairly straightforward because well, the ones that would be difficult would be ones that touch state and changing the hash function, for example, would be more complicated migration, but others would be fairly easy. And I think it shouldn't be that much work to keep up with changes to Ethereum because for good reason they happen very slowly. Yeah. On our side, we've implemented some things already like BLS, which is still a VIP. It hasn't fully landed yet, but we just have it ready for if or when that happens. Yeah, but overall I don't think upgrades will be a big deal unless we need to do something like change the hash function.
01:24:32.710 - 01:24:33.460, Speaker B: Cool.
01:24:34.550 - 01:25:11.226, Speaker E: And then I'd like to go off script a little bit and ask I'm actually very curious on Vitalik's perspective on this. To what extent do you think that it's important for Ethereum to eventually be sort of succinctly verifiable? And obviously we're talking about incorporating EIPS. To what extent do you think that the future design of the Ethereum l one should sort of take into account like ZK friendliness so that we get to the point that we might eventually.
01:25:11.258 - 01:25:12.670, Speaker B: Be able to converge?
01:25:13.110 - 01:26:01.050, Speaker D: I think that's crucially important. I've been talking a lot about the importance of preserving and improving upon the decentralization of the Ethereum network. And I think in the long term a really important part of the decentralization of the network is going to be just everyone being able to really easily verify the rules of the chain. Right. Like, I've talked about how I think it should be possible to stake not even just on a laptop, but on a phone and for something like that to be a reality. Phones are very good at bandwidth, right, but they're very bad at computation. And so you basically are going to have to use something like a Snark or a Stark to replace the computation of verifying an Ethereum block with something much simpler.
01:26:01.050 - 01:27:03.220, Speaker D: And the nice thing is that especially with things like PBS and the various stuff that's coming down the mev pipeline, the computational load of running a node actually should be pretty low. It literally should be possible to make it literally just be verifying once, like, downloading a bunch of data, hashing it and verifying a like, to me, definitely a dream long term future for, like, actually, if you look at the know picture that I published on Twitter, I think at the end of last year in The Verge, after the Virgil trees, the Verge is no longer just about virtual trees. The Verge is now about verification. And I added in a section where kind of the ultimate goal basically is reducing the cost of verifying the chain down to verifying one proof. So I would absolutely love it if the layer one could eventually make its way over to satisfying that goal over the next five or ten years.
01:27:03.590 - 01:27:04.530, Speaker E: Oh, amazing.
01:27:04.680 - 01:27:05.620, Speaker B: That's cool.
01:27:07.030 - 01:27:21.980, Speaker E: My cell phone is often dead, so I'm sort of terrified of the inactivity penalty if I were to stake from my phone. But I'm sure for more responsible people that would be a very workable model. Well, cool. I think this has been a really.
01:27:22.670 - 01:27:31.850, Speaker D: I have two old phones with me that I'm no longer using, so I just put one of those up for staking and leave it at yeah, that's.
01:27:33.730 - 01:27:34.480, Speaker B: Cool.
01:27:35.810 - 01:27:53.170, Speaker E: This panel has been really interesting, really fun. I think we're right at time, but I guess Jordy, do you want to leave us with a closing thought about security auditing Zkbm and putting it in production?
01:27:53.830 - 01:28:30.686, Speaker B: I would say that especially for the users, just be mean. It's a new there is many things that can go wrong, so we need to be responsible. Of course we want this to use and we want this to happen. Security is also about people using and this is how the things get stronger. Just having this maturity on the things. But at the same time, we need to understand. So it's important to put the effort to explain to the people that this is a very new technology.
01:28:30.686 - 01:28:58.870, Speaker B: That's a very nice technology, it's a very good technology. It's probably the technology of the future, but it's just get born. So do not go crazy and understand that we are in the early days of this technology and taking account that don't put the money, don't put all the savings and start asking for a mortgage and putting the money there. So just things like that. Cool.
01:28:58.940 - 01:29:00.540, Speaker E: Well, Chris, over to you.
01:29:00.990 - 01:29:49.942, Speaker A: Well, yes, well, thank you very much. I thank you all the panelists for this great panel. And also just wanted to say that we encourage collaboration and I'm happy that Barry actually mentioned that between the Ckvm rollups now we leave Brendan and Vitalik in this panel. We bring in Hudson, who's going to moderate the next panel. There you are. I just wanted to give a little parenthesis here that I wanted to thank the auditors that were in the previous panel and to also remind people that we have already published all the audit results and we have them available in our repository. So encouraging people to come and take a look at those audit results.
01:29:49.942 - 01:30:13.914, Speaker A: And this panel, I think it's probably one of my favorite ones, we're talking about evolving the CK stack, but more on the Ethos side, the Web Three. And here I wish I could be part of this panel. Open source development, decentralization, all the stuff that we love and we keep here. So Hudson, I leave you with your panel.
01:30:14.042 - 01:30:30.674, Speaker D: Thank you so much, Grace. Yes. So, hi, everyone. I'm Hudson. I work at Polygon Labs and generally I'm an ethereum Rascal on Twitter. Today we have a great set of panelists. So many of them have already been introduced, but I'll go through the people who haven't been introduced.
01:30:30.674 - 01:30:42.680, Speaker D: So, mahalo. We know that guy Vitalik has stopped working on his master node to sneak into this call. We'll accept him. We got david, what's your story? Just like an insert too.
01:30:43.310 - 01:30:56.270, Speaker G: Thanks, Hassan. Well, I'm one of the co founders of Polygon Cqvm and I am basically leading the project and product side for a long time. So super excited about this launch. Absolutely awesome.
01:30:56.340 - 01:30:57.230, Speaker D: And Bob?
01:30:58.770 - 01:31:07.170, Speaker B: Yeah. Hi. I'm lead of the Polygonmiden project, which is another ZK focused project within Polygon.
01:31:08.150 - 01:31:09.890, Speaker D: Wonderful. And Anthony.
01:31:10.950 - 01:31:21.880, Speaker B: Okay, last but not least, my name is Antoni. I am also one of the co founders of Polygon Zkvm. And in my case, I'm more focused on the operations and.
01:31:24.410 - 01:31:44.970, Speaker D: Gotcha. Gotcha. All right, this is going to be a really good panel because I looked over the questions and I made tweaks to make this more interesting a little bit. So let's get started with the first one. So, mahalo. Earlier this year, the Polygon teams got together to align on a common product. Know, I saw the post on Twitter where it showed everybody sitting at a table.
01:31:44.970 - 01:32:01.810, Speaker D: Would you like to share the vision of us with the Polygon ZK vision and where we are in the journey and where we're striving to go? Especially for the fact that when I talk to people about Polygon, sometimes they're like, yeah, Polygon is that thing with all the chains. So let us know what's going on.
01:32:01.960 - 01:32:48.622, Speaker B: Yeah. Thanks a lot, Hassan. It's a great one and very important one, of course. So when we announced our strong commitment and strategic bet, if you will, on ZK roughly a year and a half ago, we were very much aware of the fact that, number one, this is very early stage of this industry and number two, we're trying to build something which is highly complex, which has never built before. And we didn't want to be opinionated from the beginning, hence why we joined hands with all these great people. And we have, until this very day, three formally independent teams, polygon Zero, Polygon Hermes and Polygon Maiden, working under this wider polygon umbrella, if you will. We have never regretted this choice.
01:32:48.622 - 01:34:05.020, Speaker B: Actually the opposite. Like, the plurality differences in ideas, in approaches, in technologies and primitives that these teams have been using and have expertise in has significantly contributed to this milestone that we are shipping today. And it made Polygon Zkvm much more performant and enabled us to ship it years, basically before people expected. So this approach has one negative side, probably, is that some people are confused in the wider community, right? Like, why does Polygon has these free approaches what's going on here, but realistically and practically, this is one very strong, very coherent team with just different expertise and different approaches. But the team has been working very strong together and it has been a pleasure really participating in the process. That being said, the vision of Polygon when it comes to ZK is to establish this infinitely scalable, secure computational layer built on top of Ethereum. So there will be multitude of chains, there will be even application specific chains like supernets that are part of our product suit, if you will.
01:34:05.020 - 01:34:33.518, Speaker B: So the thing is, these all chains should be observed one day and should be tightly coupled, seamlessly interconnected to form one single, infinitely scalable, secure computation layer on top of Polygon. And that is our vision with ZK. And we're, I think, progressing pretty well on that part. Now. We already delivered. Basically. Polygon zkvm.
01:34:33.518 - 01:35:02.270, Speaker B: We are working on other interesting technologies to expand Ethereum beyond just scalability. And we actually have the first formal proposal or implementation to interconnect all these chains. That's something that we call del XLY. Bridge that should actually enable exactly what I mentioned, turning these chains into one single execution layer on top of Ethereum. So, yeah, hopefully this is helpful.
01:35:02.930 - 01:35:39.260, Speaker D: Absolutely. Great answer. So, David, this one is about open source. So open source has always been a priority at Polygon. I've seen that the last few years as I've been an advisor and now an employee. So when you all shared the Zke EVM repos last July at ECC, how is that an important step? And where are we today with open source? And just to add a little bit of spiciness, what's been the hardest part of that? Because I swear, every time I get into a discussion about open source licenses, there's like 30 to choose from. So basically, where have we been, where are we now? And why did we choose this kind? Is it hard?
01:35:39.630 - 01:36:59.618, Speaker G: Yeah, thanks. Well, yes, it's a very hot topic, to be honest, because there's this kind of tension between making this as a contribution and becoming some project that's creating value for the whole community. In fact, ourselves as a project, we have been benefiting a lot from other teams innovation and contributions. So we feel it's fair for us also to provide this to the community. In fact, the discussion about licensing is the second topic, which is do we do this permissive license or we do GPL? Because in the end we want to make sure that all this effort we did is useful for everyone. We can just provide this source code as something where community can just innovate, iterate develop, and we will be very happy if the innovations of other teams will be also available for the future and for other contributions on other projects. So, for us, the decision on license was to just provide Gpgpl as the proverb GPL, let's say the main components of the Ckbm, you will find them in the repositories today with Aperogpl version three.
01:36:59.618 - 01:37:34.382, Speaker G: But there are other tooling, like the Jordan explained these tools to create this array. Meditation, the Peel, all these languages are in a permissive license. MIT, Apache, two. So anyone can just use these tools to build anything with a different no commitment or license. And to the application, they prefer more convenient, even if it's for private users. So we want to do this contribution. We feel very proud and very happy to finalize the project.
01:37:34.382 - 01:37:50.850, Speaker G: But the second one is to do this openness of the contribution we did so far. And we will continue working like that because George was saying this is only the beginning of the project. So we'll continue in the open and in this open source license contribution.
01:37:56.590 - 01:37:57.322, Speaker B: Wow. Yeah.
01:37:57.376 - 01:37:59.034, Speaker D: I do this every time I do a presentation.
01:37:59.082 - 01:37:59.294, Speaker B: Okay.
01:37:59.332 - 01:39:09.074, Speaker D: Anyways, thank you for that and hello, Vitalik. The next question is to you. So you mentioned earlier about stage one of kind of a roll up strategy in your brain and to progressively kind of give up centralization control, other mechanisms that might stop the progression of a roll up from being as powerful as it could be in the hands of the users. So is there anything that a lot of the ecosystem is minimizing or overlooking when it comes to this process? The transparency involved, any hot takes that everyone's going to disagree with you on on how to do it? I feel like everyone agrees in theory, the bigger bottleneck is like, in practice. Right. Like, it feels to me like everyone is on board with the idea that, well, of course, roll ups should ultimately have proof systems that have teeth and be secured by them and move away from relying on multi sigs and all of this stuff. But in practice, there just are a lot of projects that claim to be very close to that, but are actually much further away from that.
01:39:09.074 - 01:40:05.206, Speaker D: And there's different degrees of, I guess, egregiousness of this sort of thing, and there's different degrees of well intentionedness versus actually never having the intention of decentralizing at all. And I think the bigger thing is to kind of just standardize and sort of lay down the rules a bit so that some projects don't really have as much of an opportunity to kind of wiggle out and try to claim that they're basically decentralized when they're actually not. And also make sure that the projects that have done a good job of that are properly getting credit on that. Got you. That makes a lot of sense. So what you mean is, like, basically practice what you preach and if you're not doing that, there should be pressure applied, basically. Yeah.
01:40:05.206 - 01:40:21.562, Speaker D: I think that's a good way to summarize. I haven't really seen big divergences in what people preach. I'm only seeing divergences in what people practice. Gotcha. Interesting. Thank you for that. All right, so Brendan and Bobbin, y'all are both going to take this.
01:40:21.562 - 01:40:50.094, Speaker D: We'll go with Brendan first and then Bob can also add their thoughts or other takes. So as we celebrate the launch of the Zke EVM on Polygon, the Polygon ZK team is asserting leadership in the space and with their open source ideals and safe execution. How are your respective projects within Polygon positioning for this and how are they embracing open source and the ideal vision of decentralization overall in the ecosystem?
01:40:50.222 - 01:40:51.300, Speaker B: Where are we going?
01:40:52.490 - 01:41:51.190, Speaker E: Yeah, sure, I can start. I work on the Zero team. We sort of have a dual mandate which is to work on proof system R and D. So we built Plonky Two and Starkey and incorporated a lot of those optimizations and advancements in the Zkvm and then we're also working on Zkvm stuff that we can maybe talk about in more detail in a couple of weeks. But I think for us, open source and decentralization is really important. I think that one of the most rewarding things that we can contribute to the Ethereum community, to the crypto community, is the concept of public goods that are freely and permissionlessly usable by everyone. And so for us it was really important to release our proving system optimizations under a really permissive MIT Apache license.
01:41:51.190 - 01:42:15.280, Speaker E: And so I think that those decisions vary depending on whether we're talking about a full productionized system like a Zkvm versus sort of like an underlying proving system library. But for us, decentralization and open source are both core values and super important.
01:42:17.570 - 01:42:18.506, Speaker D: Bob?
01:42:18.698 - 01:42:48.330, Speaker B: Yeah, I would basically echo the same thing. I'm a very big believer in open source. In fact, Polygon mining project right now is under MIT license. It was under MIT license from day one. And then as Brendan said, there is different considerations for something that is more kind of productionized versus something that is being a bit more experimental. But I do think there is a great benefit. Like if you open it up to the community, you get a lot of feedback, you get people looking through the code base and all that.
01:42:48.330 - 01:43:41.660, Speaker B: So it's good on both ends in my opinion. You let people use it, but you also get benefit of people using it and finding bugs and fixing and contributing back to you. For me personally working under my license, that's what I've been doing for the last, I guess three years and I don't think I published anything under any other license and in terms of mining specifically. So as I mentioned, it's another ZK project. I think the way we're thinking about it is that one of the nice things about L two S is that this is where you can innovate and we are trying to explore other design approaches to the space. I think ZKM is a super important and crucial piece to have, but we also want to explore other state models that maybe better support privacy, better support local proof generation and things like that. So that is what we're exploring with Michael at this point.
01:43:43.390 - 01:44:15.078, Speaker D: Awesome. Great answer. I would also say with this push for open source, and I might get to this a little later with people if we have extra time. The thought of collaboration comes to mind, which is kind of an antithetical thought to how L two S are working nowadays. But before we get into that, I want to make sure that I get Anthony here because there's a question on Polygon ID. A lot of people don't know about Polygon ID. I feel like just because it's been being worked on and a lot of the other, there's like a ton of different ideas on ID.
01:44:15.078 - 01:44:36.060, Speaker D: So what do you think about how Polygon ID upholds the Web Three ethos and the self sovereignty ethos that a lot of the Web Three and Ethereum projects share? And can you add more details on how this is being achieved in light of the work that you've done with Polygon ID? And I guess like a two sentence intro to Polygon ID would be nice too.
01:44:36.830 - 01:45:21.606, Speaker B: Okay. Thanks, Hudson. Yes. I mean, Jordy, David and myself, we started our project with what was with Identi. And then at the moment we saw that in order to vote, we needed to scale. And is when Jordy started to vote on Hermes and how to scale on top of Ethereum, then yes. For us, and we have seen in countries where there is well, some problems with democracy, how important is to have self certain identity and the ownership of your data and the fact that nobody can censor you and you can be always on the safe side and managing your keys.
01:45:21.606 - 01:46:00.150, Speaker B: Then in our case, now, today is the day of CKDM, but we have a lot of hopes on Polygon ID. That's our next big project, and we are very focused and we have a lot of hopes on that. And the idea is that it should be the entry door to Web Three. Through your identity, through that, you can manage all your keys and you are able to access any kind of tab or any service that you require, but always ensuring this privacy level that the zero knowledge groups are able to provide. Awesome.
01:46:00.220 - 01:46:27.230, Speaker D: Thank you. I was going to add another question on that. So is there plans or current designs for a mobile interface or something that just really kills it on the user experience? Because that's like the number one thing I hear about when it comes to a lot of these ID solutions all in one wallets, things like that. So there's already a fragmented ecosystem. What is Polygon ID going to do to make it very accessible to users and non fragmented?
01:46:27.890 - 01:47:04.150, Speaker B: Yeah, here you are totally right. And the Polygon ID team is working very hard on the shadows, let's say in a rogue mode. Then now, in July, we will see a lot of new features. And then also Parent of the Year. We should always have the full stack or the major part of the new improvements. And yes, this mobile aspect is something that we are working on. And yes, the idea is that in the next month it should be announced.
01:47:05.370 - 01:47:13.260, Speaker D: Awesome. That's great to hear here. I'm definitely looking forward to it. So I've run out of my prepared questions. So what I'm going to do is this. We're all going to take.
