00:00:00.730 - 00:00:38.566, Speaker A: Hello, I'm Sean from Fortmatic. So this workshop is share a bit more about Fortmatic and also give some tips and inspirations for winning the prize. To recap the hackathon prize, we're giving three winning teams. The first place will get a grand prize of Cad2500 and Cad250 for the runner ups project will be evaluated by user experience, practicality and originality. So yeah, before I start, I wanted.
00:00:38.588 - 00:00:39.946, Speaker B: To talk a little bit about my.
00:00:39.968 - 00:01:52.030, Speaker A: Past work because it's quite relevant. So, before founding Fortmatic, I actually worked at Docker for two years and I worked really closely with the founder, the CTO at the time to help manifest incredible ideas into things that are very accessible to developers. And if you use Docker before this little menu bar item, that's my project and it's called Docker Desktop and basically it is the point of entry for Docker and it is used by over 2 million monthly active developers, which is around 10% of all developers worldwide. I was also the creators of Kitematic, the desktop GUI for Docker, which was acquired in 2015. We wouldn't be able to accomplish this without a great combination of strong tech and developer experience. So before Docker desktop, docker wasn't optimized for the desktop. For common operating systems like Mac and Windows, there's really high installation failure rate which resulted in a lot of drop offs.
00:01:52.030 - 00:03:24.622, Speaker A: It was buggy, it's complicated, it had very sporadic behaviors because it integrated with a third party tool called VirtualBox. And what we did eventually is we removed this dependency and made Docker feel like it's running natively on the desktop, it's invisible and staying out of the way of developers. This was done by working with the best kernel hackers in the world and leveraged the operating system's internal hypervisor and exposed them to the users. The dependency problem for Docker is strikingly similar to what we are experiencing today in the DAP ecosystem, with DApps having to rely on third parties such as browser extensions or mobile wallets in order to serve their users with a really low 22% conversion rate. In the most optimistic case, for users who are new to the space instead of a virtualization issue, the user experience problem in DAP ecosystem is actually a key management issue. So after auditing the de facto browser extension user experience, we've categorized the different steps into four categories. The familiar web two user experience, which has the lowest rate of user drop off and also the unfamiliar web3 user experience, which may expose too much foreign concept in the user which result in drop off.
00:03:24.622 - 00:04:34.274, Speaker A: Context switches where users thrash between completely different user experiences result in the most chance for drop offs. And lastly, informative steps where user can drop off from feeling annoyed or feeling exposed to too much information at once. Essentially, what Fordmatic did for DAP with our SDK is to remove all the steps from the user experience where users have a chance for drop off basically the idea is don't make users feel like they're working on thin ice with all these warnings. Have to be careful with everything. We have to make sure that users feel secure and supported. Therefore create a UI that is familiar authentication experience to mainstream audiences like email, phone, two factor multi factor login so user won't be spooked by unfamiliar experiences. We also offer extensive white labeling service so you can make formatic look and feel like your application without diluting your brand and user experience, and help build trust between your app.
00:04:34.274 - 00:05:26.790, Speaker A: We'll also be shipping soon in a week, the ability for users make transactions on DApps with their credit card no KYC needed for smaller amounts. In the future we'll be adding things like Apple, Google, Pay and bank transfers. Underneath our UI is our delegated key management architecture. We actually just rolled this out on Monday and we've been working on this since we launched in February. Basically, account recoverability is super critical to us because mainstream users will lose their device, their recovery kits, or forget their password for encryption. The feeling of hopelessness from being locked out of their account is really, really bad for mainstream adoption. And to keep our architecture noncustodial, we make sure we never see the private key at any part of the flow.
00:05:26.790 - 00:06:55.970, Speaker A: So private keys are generated locally on developer's client within the secure iframe sandbox and then directly encrypted and decrypted with the cloud hardware security modules hosted on Amazon services. And we actually discovered this by accident, like searching on the internet where this user was complaining that he got locked out of the Amazon's Kms key management system. So we instantly thought, hey, why don't we remove our own access to it so that we can no longer access our own, use our own Kms for encryption decryption, effectively locking ourselves out and to hold ourselves accountable. We've gone through extensive SoC two audits to make sure that we have the correct security controls, which is a standard pioneered by industry leaders like Coinbase and Gemini. With a solution for key management authentication authorization, fiat onramp DApps will be leveling the playing field with centralized incumbents and we'll be ready to crush it when the market heats up again. Now for some ideas and tips for the bounty. I feel like one of the biggest and most effective improvements DApps can make is adopting a concept UX principle called progressive disclosure.
00:06:55.970 - 00:07:58.790, Speaker A: DApps should be easing users into more complex tasks by reducing the clutter and confusion and cognitive workload, usually by avoiding giving users too much decision, which causes decision paralysis, and also showing too much information at once. A really good example here are games. If you play games like StarCraft before, they cleverly avoid overwhelming users with a tech tree which gradually unlocks new units as you progress into each game. There's also a pretty cool equation called the Higgs Law that illustrates the impact to reaction time based on the number of options provided by users. It takes a lot for users to understand new concepts. By leveraging existing concepts or memes that users are already familiar with. It will help a lot with reducing cognitive workload.
00:07:58.790 - 00:09:28.198, Speaker A: And here are some pretty good examples. So, TokenSets does a good job on this inherently complex under the hood, but they've combined all of this complexity into simple and familiar actions of buying and selling tokens with one user interface that users are familiar with, like Wealthfront and Robinhood and DeFi is on the verge of a Cambrian explosion. Your protocols, like Set and Uma, enables developers to build synthetic assets, baskets of tokens that are autobalanced or having tokens that are tied to the value of real world assets. Now, with also the proliferation of decentralized exchanges, it makes it much more accessible to publish these new assets to publish these new assets worldwide through these decentralized exchanges. Also great products are extensible ever evolving to the user's need, and also without too much introducing, too much complexity. We at Formatic have been really fascinated by smart contract wallets because their elegant extensibility and also the extra security for users who need it. Basically, Formatic never really intended to be a wallet, it's just a good way to start and get people using it.
00:09:28.198 - 00:10:00.910, Speaker A: We've always wanted to build a robust and secure and compliant base level key management infrastructure for developers to use. We'd be really excited to see Fordmatics key being used as a master recovery key for a smart contract wallet, let's say on Gnosis, with the option for users to add other keys to further improve the security of their funds for custody and decentralizing trust. This would be really great for enterprise users and also users with much higher security preference.
00:10:03.510 - 00:10:03.874, Speaker C: Yeah.
00:10:03.912 - 00:11:07.960, Speaker A: And while you're at, it would be really cool to somehow work three box identity into this, as is your identity that follows you around web3 technology also enables new types of organizations and business models. ICOs are just a glimpse of what's possible and innovation in this space. We've always been a fan of dow's ways to properly align incentives of network of people. There are also many new innovative ways for organizations to fundraise, like the continuous organization using things like bonding curves that are used by Uniswap protocols. Yeah. And lastly, I'd like to personally thank and congratulate all of you. Our collective effort and awareness in improving user experience have significantly increased that monthly usage by about over 58% in the last ten months.
00:11:07.960 - 00:11:24.300, Speaker A: And this data is from State of the DAP. They've given us custom data to help us communicate this. And yeah, I'd like to give a short demo on how to integrate Fortmatic into your application.
00:11:26.910 - 00:11:54.980, Speaker B: So visit for Matic.com hit get started. And now you'll be introduced. Our dashboard basically log in with GitHub and you'll be given two API keys. One for testnet. You can pick between Rinkibee, COVID and Robston. And also the production API key.
00:11:54.980 - 00:11:59.270, Speaker B: So I just get started to our documentation.
00:12:02.010 - 00:12:02.470, Speaker C: Cool.
00:12:02.540 - 00:12:06.710, Speaker B: So we have a hello, World Tutorial here on Code Pin.
00:12:10.190 - 00:12:10.940, Speaker C: Cool.
00:12:11.390 - 00:13:00.842, Speaker B: So first step is include the formatic SDK script. We also have NPM packages, but this is an easier way to demo. And then I'll set up my formatic instance and set up my Web Three provider to be the formatic provider. And lastly, you can use Web Three JS functions as you're used to. If your app works with MetaMask, it would work with formatic right away. Cool. And now I'll load up my API key.
00:13:00.842 - 00:13:34.290, Speaker B: So I'm going to use my test API key. Now the app has restarted and now I can log to formatic. So I hit continue here. You can either use your phone number or email to sign up. So in this case, I will use my email and then I'll log in with my passport.
00:13:41.450 - 00:13:41.814, Speaker C: Yeah.
00:13:41.852 - 00:14:32.920, Speaker B: Now I'm logged in and I'm instructed to send out an Ethereum transaction. So for every developer who signed up on the Rinkabee network, we actually send them one free Rinkabee Ease. So you can get started right away. Cool. I'm going to confirm transaction. Hope this works it anyway, so we continuously pull the transaction to see if it's completed, so it can help users can understand the process. And after it's completed, you can view this transaction on Ether scan or back to that.
00:14:32.920 - 00:15:31.846, Speaker B: Also, I forgot to show that you will be able to select your fees. So you can actually select either faster or cheaper fees or developer can suggest their own gas for this specific transaction. Also some cool explainer on what gas is slow. Yeah, there's a cool diagram here. Supposedly it yeah, great. So if you look at our documentation, we do support regular Ethereum transactions as well as general smart contract transactions. You can do personal sign type, data batch requests, ERC, 20 transfers.
00:15:31.846 - 00:15:38.880, Speaker B: And we also work with Nifties as well. Yeah, great. Any questions?
00:15:40.130 - 00:16:07.586, Speaker D: Yeah, so I'm trying to understand what is the relationship between the username and password that you put Sean Lee@fortmatic.com with the API key that you generated, are you federating the usernames across all these API keys or is it like multi tenant? Is it per API key you have per user?
00:16:07.698 - 00:16:35.598, Speaker B: That's a good question. So the service as is now it's one email and password for all the apps. But each app have their own API keys which they can use. They can let users access with their formatic account. But we are introducing a service where it's multi tenant that you can have different set of users or different set of apps who really want to have their own users and user experience.
00:16:35.764 - 00:16:40.802, Speaker D: And the connection between the ETH wallet and the username is one to one, is that right?
00:16:40.936 - 00:16:41.570, Speaker C: Yes.
00:16:41.720 - 00:16:49.014, Speaker D: So in the second case where you have the multi tenant, there's going to be multiple wallets created per API key.
00:16:49.212 - 00:16:49.574, Speaker C: Yeah.
00:16:49.612 - 00:16:53.106, Speaker B: And that will be possible with the headless solution.
00:16:53.218 - 00:16:54.440, Speaker D: Okay, yeah.
00:16:57.050 - 00:17:01.770, Speaker E: To what extent would it be problematic if DApps shared API keys?
00:17:02.830 - 00:17:19.630, Speaker B: Yes, that's also a very good question. So we have a domain verification for DApps to kind of verify their domain so they can actually use the production key. So without verification, it's only available for localhost.
00:17:19.970 - 00:17:20.574, Speaker C: Okay.
00:17:20.692 - 00:17:23.790, Speaker E: Is that evaluated in the scripts or in your back end or both?
00:17:23.940 - 00:17:35.140, Speaker B: Yeah, it's validated in our back end. So you can actually do that on our Dashboard. So we support the meta tag way file upload or DNS record.
00:17:36.870 - 00:17:45.640, Speaker D: When would downloading the formatic SDK with NPM be more beneficial than just line for HTML or they both do the same thing.
00:17:46.330 - 00:17:51.260, Speaker B: It's for developers who want to lock down the version for their app.
00:17:52.590 - 00:17:59.740, Speaker E: If we hosted an adapt using a content hash in the Ethereum name service, would we be able to use this service?
00:18:03.890 - 00:18:06.270, Speaker B: The ENS question. How can we repeat the question?
00:18:06.340 - 00:18:15.946, Speaker E: You support DNS, but can you support ENS content hashes? Okay, yeah, we don't support you want ENS yet, but that's in our pipeline.
00:18:16.058 - 00:18:16.778, Speaker C: Okay.
00:18:16.964 - 00:18:22.850, Speaker D: Would it be helpful to have an API call where you can resolve ENS names, including argent names?
00:18:23.190 - 00:18:24.850, Speaker E: API call through RN?
00:18:25.350 - 00:18:26.980, Speaker D: Just an API call.
00:18:28.470 - 00:18:29.518, Speaker B: That'd be useful.
00:18:29.614 - 00:18:33.080, Speaker E: Yeah, we can have a little bit urgently needed.
00:18:35.370 - 00:18:41.554, Speaker F: So, Anderson, you have the HSM that does the signing, and you have a username and password that authenticates the user.
00:18:41.602 - 00:18:43.340, Speaker B: To explain what happens in between.
00:18:45.710 - 00:18:48.474, Speaker F: If I lose my username and password, all that kind of thing?
00:18:48.592 - 00:19:39.158, Speaker B: Yeah. So it's an interesting model where the authentication is segregated from the key management. So, basically, the key is generated on the client in the browser and the key gets sent directly to Amazon Kms through Amazon cognito, which facilitates this Credential exchange. Right. So formatic doesn't. So basically everything relies on Amazon's cognito, and formatic tries to stay out of way as much as possible. And we do currently run an Auth relayer that talks to Amazon and giving the tokens to the users.
00:19:39.158 - 00:19:48.080, Speaker B: But like I mentioned before, we actually are locked out of the Amazon instance ourselves, so we cannot decrypt with it.
00:19:48.450 - 00:19:57.918, Speaker F: So if I'm following the private key generated client side, it's encrypted and sent to Secret store. It's just Amazon manages the secret.
00:19:58.014 - 00:19:58.274, Speaker C: Yeah.
00:19:58.312 - 00:20:04.418, Speaker B: So it's like their own more developer friendly key management service.
00:20:04.504 - 00:20:05.474, Speaker F: And you're locked out.
00:20:05.512 - 00:20:06.990, Speaker B: You can't get it, right?
00:20:07.160 - 00:20:11.126, Speaker F: My username and password can get it. And if I lose my username and.
00:20:11.148 - 00:20:29.820, Speaker B: Password yeah, you can initiate a recovery flow which downloads encrypted key from formatic. So we store the encrypted version of the key in case you lose it. So now we can give it back to you and you'll be able to recover, for example, through your.
00:20:32.130 - 00:20:33.680, Speaker C: Email address. Yeah.
00:20:35.010 - 00:20:38.858, Speaker F: How does that work? So what actually does the encryption?
00:20:39.034 - 00:20:39.374, Speaker C: Yeah.
00:20:39.412 - 00:21:11.400, Speaker B: So it's also the cognito Credential that does the decryption. So whenever the user authenticates amazon Cognito will send either a encryption scope Credential or a decryption scope Credential, which you can use to directly talk to the Amazon Kms for encryption or decryption. And then we'll also have more detailed diagrams illustrating these in the coming day or two.
00:21:12.910 - 00:21:43.454, Speaker D: Can you walk through a scenario where you do not need a username and password and a state? Essentially, you create a burner wallet on the browser, and then ultimately when I want to save my state, I create a formatic account because that is the best user experience. There's no username login and a lot of popular web two apps let you do that. Flow.
00:21:43.582 - 00:21:44.258, Speaker B: Right.
00:21:44.424 - 00:21:52.214, Speaker D: Optimize the for example, you can play with the app without logging in. And then once you want to save your customizations, that's when you create an account.
00:21:52.332 - 00:21:52.854, Speaker C: Yeah.
00:21:52.972 - 00:21:56.310, Speaker D: How would that work with Fortmatic?
00:21:56.650 - 00:22:39.430, Speaker B: I think that's perfectly possible. And I actually suggested to burner wallet. Yeah. So if they integrate and then they'll be able to commit with more permanence. But I think still we're exploring that option and it's definitely more catered towards crypto kind of projects with quick wallets. But that's definitely a good suggestion for getting started quickly and start exploring the space. But the challenge is it's up to the DAPs to inform their users to kind of create this permanent.
00:22:40.410 - 00:22:58.634, Speaker G: Can I jump on that? We're giving a UX price and one specific one for $1,500. I would love to see anything in those lines implemented. So if any of you are looking for a project, I would love to see what you come up with.
00:22:58.672 - 00:23:01.034, Speaker D: No, because this is a genuine and.
00:23:01.072 - 00:23:05.982, Speaker G: No technical constraints or use formatic use anything in that direction. I'm happy.
00:23:06.116 - 00:23:34.066, Speaker D: When I see a brand new product on product hunt, I'm always skeptical. I'm always skeptical of sharing my username and password because I know at some point that spammy. So I always go to throwawayemail.com create a throwaway email, and then I sign up with a username password. And if I like the system, then I go and recreate an account. And I'm shameless I do that, but that's because I don't want it to tie divide it, try it before you.
00:23:34.088 - 00:23:34.982, Speaker B: Buy all that stuff.
00:23:35.036 - 00:23:39.650, Speaker D: Right, but maybe that's because I'm just a little more cynical. Maybe.
00:23:39.820 - 00:23:41.690, Speaker B: And that's fair. I do that too.
00:23:41.840 - 00:23:42.540, Speaker D: Okay.
00:23:43.230 - 00:23:46.730, Speaker A: A lot of people have a fake email, test their Facebook, Twitter.
00:23:51.070 - 00:23:51.830, Speaker C: Yeah.
00:23:52.000 - 00:23:57.520, Speaker B: It's definitely not the majority, but I think there's a good chunk of us that would really love it.
00:24:00.290 - 00:24:01.040, Speaker D: Great.
00:24:02.850 - 00:24:03.918, Speaker B: You mentioned doing that.
00:24:03.924 - 00:24:06.802, Speaker A: You were looking at doing more about that.
00:24:06.856 - 00:24:07.074, Speaker C: Yeah.
00:24:07.112 - 00:24:08.500, Speaker B: So we're going to be.
00:24:12.950 - 00:24:13.522, Speaker A: We'Re working.
00:24:13.576 - 00:24:47.760, Speaker B: With MoonPay or vendor. We were going to launch it today, but it's delayed by a week. So basically it will be able to send a transaction just with the user's credit card. And then we would try to abstract as much away of the blockchain away as possible. So it's kind of a really slick Web Two experience. Imagine that with, like, white labeling. So when users are interacting with your DAP, they have a white labeled credit card checkout experience.
00:24:47.760 - 00:25:14.520, Speaker B: And we also negotiated a deal with MoonPay to lower the fees because all the DApps that are integrated with us will have MoonPay by default, so it's really beneficial for them. And also they will be adding Apple and Google Pay support for even easier checkout and also bank transfers for much lower fees. So we'll be integrating and looking to that as well.
00:25:18.810 - 00:25:20.630, Speaker A: Do you guys make money at the moment?
00:25:20.780 - 00:25:48.206, Speaker B: No, we don't. I would feel more comfortable making money if Web Three actually took off. Where companies starting to find their own business model so far venture back so we don't worry about making money in the short term and really want to help grow the ecosystem and then work with the companies that's working with us on figuring out a pricing model. Great.
00:25:48.308 - 00:25:48.766, Speaker C: Yeah.
00:25:48.868 - 00:25:50.970, Speaker B: Thanks so much, guys. Sorry for the late starts.
