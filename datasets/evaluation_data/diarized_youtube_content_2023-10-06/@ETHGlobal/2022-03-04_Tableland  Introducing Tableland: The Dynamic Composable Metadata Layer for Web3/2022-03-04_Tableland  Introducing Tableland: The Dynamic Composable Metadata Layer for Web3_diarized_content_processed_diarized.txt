00:00:00.250 - 00:00:32.102, Speaker A: Start. Hello everyone. Good afternoon or good morning. Good evening wherever you're from, and thank you for joining us for another workshop at Build Quest. So today we have Carson, and Carson is going to be doing a workshop for Table Land on Introducing Table Land, the dynamic Composable metadata layer for Web Three. Of questions can go in the zoom chat and Carson will take them as they come in. So feel free to post any questions in there.
00:00:32.102 - 00:00:34.870, Speaker A: And with that being said, I'll hand off the mic to Carson.
00:00:35.530 - 00:00:52.110, Speaker B: Right on. Thanks Hannah. Welcome everybody. Thanks for joining me on this lovely Friday. Hopefully wherever you are is sunnier and warmer than it is here in Victoria, BC. But either way, we're going to kick it off. So my name is Carson Farmer.
00:00:52.110 - 00:01:37.894, Speaker B: This year I'm with Table Land, and you may know us from previous years as Textile. So Textile is the company I work for and Table Land is this new layer for Composable metadata for Web Three. And I'm going to give a quick introduction to what is Table Land and what you can build with it and that sort of thing. And then assuming everything goes well, I'll do a bit of a live demo that you can kind of play around with yourself to give you some inspiration for maybe hacking and building things with Table Land. So without further ado, let's jump in. So Table Land, you got to start with a tagline. So here's mine.
00:01:37.894 - 00:02:17.810, Speaker B: It's build Web Three with SQL or SQL depending on where you come from. And so Table End, it's not a new database, it's not a distributed database. It's just web. Three native relational tables. So it's a network that allows creators, NFT creators and game developers, DApps and content creators for the metaverse to use relational tables and SQL plus Smart contracts. And however, your app is interacting with your users to build awesome experiences. So it's a brand new token enabled protocol that will power the next generation of Web Three experiences.
00:02:17.810 - 00:02:56.462, Speaker B: And I'm going to talk a little bit about why that relational model is so useful in this context. In a SEC. The cool thing here is you already know how to use it. It's just a web3 native relational table model. So if you know SQL or you even have an inkling of how SQL works, then you pretty much know how Table Land works already. And the cool thing here is that ownership and access control, those key kind of components of a database that you need, they're built right in thanks to the native Web Three layer, in this case Ethereum. So just to give you a sort of like TLDR up front, right? It's so straightforward that it's retro.
00:02:56.462 - 00:03:35.758, Speaker B: It's just very simple, classic SQL things you connect to your database. So Table End is one giant database full of tables. You create a table, you select from that table, and that's pretty much everything that you're going to be interacting with. But it's so Web Three that it's the future of how we're going to be developing Web Three applications. So you can create, we've got built in support for the types of interactions and the types of data that you're going to want to use when you're building Web Three enabled applications and experiences. So you can create a table, a new token that represents an ERC 721 NFT. And this is the metadata.
00:03:35.758 - 00:04:19.658, Speaker B: And you create a table and you can start inserting data right away, and then you can query that data right away and you get back what you're expecting, which is ERC 721 compliant metadata. And we'll do something just like this live. And I'll show you how easy it is to actually deploy NFT metadata using Table and just really just a few lines of code or a few SQL commands. So as I said in table land, we speak SQL or SQL. It's just tables. And I'm going to repeat that a bunch of times so that it really knocks it. So for the ETH community, we launched our MVP just a few weeks ago at ETH Denver.
00:04:19.658 - 00:05:05.066, Speaker B: And what we launched was a single validator or a gateway, however you want to call it, with an RPC endpoint that enables address owned tables that are themselves ERC 721 compliant NFTs. And in this case on the Rinkabee testnet, that's where we've deployed so far with more networks and more testnets to come. So Polygon will be coming soon and some other testnets very soon as well. And it's just tables based on familiar SQL. The data is anchored to Ethereum as transferable NFTs. So you get a direct on chain connection to essentially what is off chain relational data. And you can use this to deploy Web Three native tables.
00:05:05.066 - 00:06:08.658, Speaker B: And so I use that term a couple of times, so I'm going to try and explain a little bit what I mean there. So any application stack that you're interacting with, whether it's Web Two or Web Three, a lot of this stuff is built on relational data, right? So current and future applications, they need relational data. This is things like relating a user to their avatar or to other information about in game experience or some sort of dynamic information that the user is creating and interacting and producing within your application. So we kind of need that layer. And a lot of in practice in Web Three world, this ends up being some sort of like centralized database on S Three or something or AWS. Now we have this blockchain and this gives us things like access control right out of the box, right? Blockchains are really great about handling identity and ownership and membership. And these are things that a database needs in order to provide access control.
00:06:08.658 - 00:07:20.220, Speaker B: And so if you start to combine these two concepts of built in native access control with off chain relational data models, you get a sort of like supercharged global database, potentially a globally distributed decentralized database. So we're solving a pretty big problem here and Table End is designed exactly for this to solve this problem, right? So it's a new web3 protocol that enables developers to create and relate and extend metaverse assets across applications. And I see that Nathan has a question. So if Nathan can just do that, like type, type that question out into the chat, then I can read it out and answer it. So yeah, please do that. Now we're not talking about sort of a traditional database, right? It's literally just web3 native tables, columns, rows, and foreign keys that are maintained by a network of validators, currently a network of one. But we're working on the decentralized piece of that puzzle this season and then it's data that's used and is accessible to layer one wallets and smart contracts and things.
00:07:20.220 - 00:08:12.026, Speaker B: So today what we're going to try and do is take that same model and use it to create dynamic composable metadata for NFTs. But you can imagine all sorts of other things too. And one application we've seen quite a lot of sort of early developers tinkering with is in game state and experiences. So imagine a user is playing some sort of NFT based game where they bring their own character or their own asset or their own loot with them. You can use metadata and table and tables to store the state of that loot bag. Maybe the broad sword has been drawn or they've changed their character's hair color or they're on level 3.5. All of these different types of information.
00:08:12.026 - 00:08:52.294, Speaker B: That's the type of metadata that you might store in Table End. So lots of other things as well. But NFTs in particular is something that we're hoping to see a bunch of in different hackathons and including buildquest. And so I actually have if you jump into our docs, which I highly recommend you do, I spent a lot of time tinkering and fiddling and making these docs kind of accessible for hackers at hackathons. So jump in there and start to explore. And we do actually have a couple of pages of resources for folks that are specifically building hacks. Hopefully you can see this.
00:08:52.294 - 00:09:32.158, Speaker B: This is what the docs page looks like. And we've got a section down here for developers where we've got a couple of examples of use cases that you might want to explore. So that's basically a live database of different use cases that we're hoping to see people build, right? So there's a bunch of them here. So if you're out there hacking and you think, well, this sounds like a cool idea, I wonder what I can build with it. There's a couple of cool use cases you might want to check out to give you some inspiration or just snag one of them and start building. The other thing we have is a bunch of grants. So if you click through to our grants, there's a bunch of examples and we've got a couple ones specifically for buildquest.
00:09:32.158 - 00:10:18.210, Speaker B: These ones are pretty generic, so if you're building something with Table End, you can jump in there and start exploring right away. We had a couple for East Denver and that East Denver hackathon is still going and then we have some open call grants as well if anyone sort of wants to take this to the next level and start building things with TABLEAN. So definitely I recommend you jump in there and take a look. And then for those folks that want to start building right away, you can jump into our quick start guide where we've got all the steps you need to do to get validated and get early access to the table. And MVP. You're going to end up whitelisting your address and getting some early access. That way you can play around with it right from the browser.
00:10:18.210 - 00:11:24.866, Speaker B: You can interact with Table End by our JavaScript TypeScript SDK, you can tinker around with the RPC APIs, and we even have a CLI if you want to play around with that and do things from the command line. And if we have some time, I'll try and go through some examples and things like that. So Nathan here has got a cool question. Is it possible to give granulated management rights to the users of the game with this database too? Yeah, so that's a really good question. So what we've launched with the MVP right now is essentially address based table access. So if you mint a table and I'll talk about what that looks like in a second, your address is the owner of that table and you have access control rights to that table. Very quickly we're hoping to move to providing actually the owner of the table then can grant permissions to other addresses to do things like update a particular row and have full access to a table, et cetera, et cetera.
00:11:24.866 - 00:12:15.560, Speaker B: So the short answer is right now it's pretty much just address based, so whoever's the owner can write to a table. But very quickly we'll be moving to more fine grained grant based access control. Yeah, exactly. And that's exactly the type of use cases. Imagine you have a game where each user needs to be able to modify some piece of the overall game state, but only that piece that they're responsible for. That's the type of thing that we'd like to be able to support. Of course, the other thing you can do, and you can do this already, is you can actually transfer ownership of that table to other users so that you can actually sort of transfer ownership and allow them to rewrite and change all sorts of things with that table and then sell it and things like that.
00:12:15.560 - 00:12:51.406, Speaker B: Yeah, I'm pretty bullish as well. Nathan, thanks for the comments. So I highly recommend you jump into our docs the JavaScript SDK tab is probably going to have the most in depth information. It's pretty much a walkthrough of how to create a table, how you can interact with it, listing tables that you own, mutating tables, blah, blah, blah. Querying tables is a lot more open. Anyone can query a table and view the data from the table. And we have a couple of example apps.
00:12:51.406 - 00:13:37.362, Speaker B: So if you click down on Examples or you go to Examples here we've got a couple of demos that our team has built where these are like live, view or react apps that sort of demonstrate usage of Table land in a real world scenario. One of them is actually a game, a very lightweight game like experience on top of the loot NFT. And so we're pretty excited about that. We're actually going to write a blog post and launch like, how we actually built this thing, which I think will be useful for hackers. So definitely check out some of those examples. If you click on demos here, there's a link to your classic to do app, this synthetic loot game. And if you go to our Table and Example app repo, there's a bunch of examples and things in there.
00:13:37.362 - 00:14:19.754, Speaker B: And then if you build something as part of Build quest, hopefully we can make it into the community Examples section as well. I'd love to start putting some things from folks there. We also have a playbooks section which we're slowly adding to, and so far I've just got three and I'm about to add a fourth one which goes through sort of common workflows that you might experience when building on web3 tables. So how to support NFT metadata. And we're going to go through this playbook in a moment, how to support key value storage. So just like if you want to store blobs of files or data there. And then how to create mutable versus immutable tables.
00:14:19.754 - 00:14:57.690, Speaker B: And that one's pretty cool too. I'll talk about that in the context of NFT metadata in a second. So I highly recommend you jump in there and check out those examples. Tinker with the command line, blast away at our remote API, have fun and break stuff if you can, which I'm sure you can. So that's part of the deal, right? You build stuff and break it, we fix it, and we get this great community interaction going. So I'll leave the doc stuff for a second, but yeah, dive in there and read those docs. And then in the meantime, we'd also love for you to just jump in.
00:14:57.690 - 00:15:56.414, Speaker B: And so I'll get you to jump into our website, Tableland XYZ. We launched the site about a week or two ago. I highly recommend you kind of start there, work through, and then I'm actually going to jump over there in a second and we're going to do a live demo of interacting with Tableand. Actually, I think I have it open right here. Yes. So Tableand XYZ, check it out, there's some beautiful art that we had built and maybe if you're an early adopter and you get into our discord and you start exploring with Tableland, there's maybe some future world in which you get to interact with and have some of that art yourself in the form of drops. So just jump in there and get involved and that's a little sneak preview for you.
00:15:56.414 - 00:16:57.090, Speaker B: Anyway, check out the art. As I said in Table land, we speak SQL or SQL. But what I wanted to do is just we've got this little section down here to try it out. And so this is itself an actual app that is built on top of Tableland and it's a very simple SQL command line which allows you to connect to the Table Land network, list tables, create tables, all sorts of fun stuff like that. And we have a few pre built examples that you can start to do things like querying, but I'm actually going to show you how to mint a Table, which is itself an ERC 721 compliant NFT, and then actually launch an NFT metadata table as a Table Land table. So we've kind of got this like nested ERC 721 thing going, so hopefully you can see this. Maybe I'll try and make the font a little bit bigger.
00:16:57.090 - 00:17:47.140, Speaker B: Here we go. So we're going to go over here and we're just going to connect to the Table or Table and that will pop up your classic MetaMask thing here to sign a essentially JWT token. And we're working to make this more visible so that you actually can see what you're signing instead of just the token value itself. But I'm going to go ahead and do that. So I'm connected, I'm in a basic Table and terminal you can do all sorts of fun SQL commands. I've got a couple of pre baked things here that I'm going to copy pasta into here so that I'm not wasting too much of our time. So what I'm going to do is I'm going to create a table called my Token of type ERC 721 metadata and I'm going to set the ID as the primary key.
00:17:47.140 - 00:18:28.074, Speaker B: And that makes it sort of relational in a sense. I can actually reference specific IDs and in this case, these IDs are the token IDs of my ERC 721 token. So I'm going to run that and it's going to ask me to sign some stuff because I'm actually minting an NFT in this case on the Rinkov testnet. So I'm just going to confirm that. And while that's going, I'm going to explain basically what's going on. So TABLEAN basically connects side chain data. So the data that's actually managed and made available via the Table Land validators, well, that actually went way faster than I was expecting, so I'm going to have to talk faster.
00:18:28.074 - 00:19:17.486, Speaker B: But anyway, what happens is the validators are supporting this data queries and access and things like that. And then they're linking it back to an on chain component on the parent chain, which is ethereum in this case to an ERC 721 compliant NFT. So you can actually do all of the access control on the parent chain, you can transfer ownership of that table, you can grant access to that table, to other addresses, et cetera, et cetera, and all that information is effectively available on the main chain. So then any other interactions that you might want to have with on chain assets, you can do that. And that on chain asset will always link to the off chain information. So I created the table and it's always got a unique name. So it'll be like whatever you call your table underscore and then a unique token ID.
00:19:17.486 - 00:19:55.050, Speaker B: So in this case it ended up being 198. And so I'm just going to then do some little magic here and I'm going to mutate this table. So my address is the one that created it. So I've got default ownership of this table. And what I'm going to do is I'm going to insert into my token 198 for the ID name, image and description fields, the values of zero. So this is the first token ID and the name is going to be Little Bobby Tables. Little inside joke for you all.
00:19:55.050 - 00:20:50.960, Speaker B: And it's referencing an IPFS hash. In this case, this is a Hello World hash and the description is just Hello World from Little Bobby Tables there. So if I hit enter there and run that, I get back just some results right away that says, hey, something happened. And now if I want, I can actually select just classic SQL, select everything from my Token 98. And if I do that, I get back some cool table data here, which is the name, description, the image, and these additional fields. I didn't actually fill those out, so they're just left blank. If I wanted we could grab that and go fetch the IPFS URL and I could interact with things that way.
00:20:50.960 - 00:21:42.346, Speaker B: But what I wanted to do is I wanted to kind of prove to you that this is what I say it is. And so you can actually reference the metadata for this particular row of this particular table to get the actual token, the ERC 721 token metadata. So if I go to here Oops table, testnet table, land network tables, and what did I say it was? 198, I think. Right, cool. All right. So in this case, I am using the gateway to directly drill down into that particular table's metadata. And in this case what we get is ERC 721 compliant metadata for the table.
00:21:42.346 - 00:22:22.474, Speaker B: So in this case I've got the name of it is my Token 98. I didn't add a description when I created that table, so no description. The external URL is just this URL again. And then we include a fun little image to sort of render it. So in fact if you mint a table and you have a wallet where you're displaying assets, the table will actually show up as an ownable asset that you can transfer later on. And had I been thinking, I probably would have left time to do that. But the other cool thing here is I can actually reference, I can drill down into the table via the gateway the specific token ID that I want.
00:22:22.474 - 00:23:01.880, Speaker B: So in this case ID is zero. And if I do that I additionally get ERC 721 compliant metadata. In this case I left these two blank. I've got the description, I've got the name and I've got the image here for that metadata. And you can imagine if I added a bunch more rows I could do a drop of like 100 token NFT or 100,000 or 10,000, whatever I want. And all of that data is managed in a table for me. And so you can start to interact with this data almost as if it's like an Excel spreadsheet that you're just deploying your NFT asset with.
00:23:01.880 - 00:23:44.478, Speaker B: So there you go. That's one way that you can create metadata for your NFT. Now because this is a mutable table, I can actually go in and I could actually mutate maybe I want to change the name from Little Bobby Tables to Just Bobby Tables, right. So I can actually go in and I can mutate that. And that's pretty great because now I get dynamic NFT metadata. But because the table itself is an NFT and it's transferable, say I want to actually make that data immutable, I don't want anyone to be able to mutate it anymore. I've launched my NFT and now I want to set that as Immutable.
00:23:44.478 - 00:24:20.910, Speaker B: Well, all I have to do is burn that table token. I just transfer ownership to the null address or call the burn method on that contract and now nobody has access rights to that anymore. The data still exists off chain or on the Table Land network, but nobody can mutate it. So I now have immutable NFT metadata. So you get the best of both worlds in this framework. So that's pretty going to I'm just about out of time so I'm going to kind of cut myself off there. So Nathan, another great question.
00:24:20.910 - 00:25:04.382, Speaker B: Can you make individual data points immutable? You can't do that yet, but that's part of the sort of fine ingrained access control stuff that's coming up is that should be possible. You could basically just grant permission to the null address for that particular row and then nobody can do it. So yeah, thanks for the great questions. Welcome to tableand. Welcome to buildquest. I hope you have a lot of fun this weekend hacking and building things. If you've got any questions or you want to get access to Table Land, jump into the Table Land discord and I'll share some invite links and things like that.
00:25:04.382 - 00:25:38.146, Speaker B: In a moment. You can get us on Twitter at tableland. Underscore underscore you can get me on twitter. We're also hiring, so if anybody is interested in building out this stuff with us, that would be great. Come and do that and then check out our website at TABLEAN XYZ for more details. So thanks very much and if you've got any questions, hit me up here. Otherwise my little helper in the background will probably be able to help with any questions you might have as well.
00:25:38.146 - 00:25:39.500, Speaker B: So thanks very much.
00:25:40.430 - 00:26:11.630, Speaker A: Awesome. Thank you so much for your time. Carson. That was really interesting and as Carson said, him and his team can be reached on discord or anything. So if you need any help or have any questions throughout the next week or so, definitely reach out. And with that being said, there's some more workshops today if you want to join those. The other ones are also very interesting and I hope you all have a great time hacking at Buildquest and can't wait to see some really exciting projects.
00:26:12.370 - 00:26:13.440, Speaker B: Thanks, everybody.
00:26:14.050 - 00:26:14.860, Speaker A: Have a great rest of your.
