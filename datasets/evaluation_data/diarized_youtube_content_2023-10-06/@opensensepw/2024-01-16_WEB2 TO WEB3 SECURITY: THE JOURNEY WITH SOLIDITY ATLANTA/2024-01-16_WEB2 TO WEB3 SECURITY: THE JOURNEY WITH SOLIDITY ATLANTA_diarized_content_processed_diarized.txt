00:00:02.440 - 00:00:10.686, Speaker A: Awesome. Yeah, I'm super excited to be here. As I'm talking through this, feel free to stop and ask any questions.
00:00:10.790 - 00:00:11.514, Speaker B: Awesome.
00:00:13.214 - 00:00:43.214, Speaker A: Cool. So hi everybody, my name is Robert Leonard. I also go by plasma blocks. That's what I use as my auditing, my auditing name. I've been a software engineer for eight years. I have a background in physics, spent a lot of time studying civic inductive physics and hardware devices. I've been working full time in web3 for a little over two years.
00:00:43.214 - 00:01:34.310, Speaker A: My first job was at open Zeppelin, working on the Forta protocol, which is a on chain security protocol for monitoring attacks, threats and security related events. And currently I'm working at a company called identity where I working on decentralized identity and verifiable credentials on chain. Outside of being a dev, I'm also a security researcher. I've been doing that our time for the past year and a half. And outside of those as well, I also have my own business where I do some consulting and education. And today I really.
00:01:34.502 - 00:01:37.634, Speaker B: Can I ask something about the identity stuff that you're working on?
00:01:37.974 - 00:01:38.742, Speaker A: Yeah, sure.
00:01:38.798 - 00:01:55.084, Speaker B: So how do you do the validation? I mean, if everything is on chain, there's some questions that's regarding. Regarding, like, you cannot leak document numbers, you cannot leak some certain kinds of documents. I imagine you got to have some certain part of CK in there, right?
00:01:56.064 - 00:02:54.848, Speaker A: Yeah. So not. That's one of the places where not everything is on chain, because you're right. If you're storing PII on chain, then you need to make sure that it's encrypted and safely stored so that people can't just look at it. But I would say our approach is hybrid, where we have, it's semi trustless in the sense that the people verify the credentials are the only people who have the full data and they choose what data to expose when other people are wanting to verify. So let's say, for example, someone wants to verify their age. If there's a provider that has this person's age, like say they have a driver's license or something, or they've done a Kyc process, it's up to them to show how much data they want to share.
00:02:54.848 - 00:03:04.744, Speaker A: And generally it's share as little as possible. It's like, yeah, we know this person's over 18, but we're not going to share their address or their name or any of that information.
00:03:04.904 - 00:03:09.004, Speaker B: Really cool. Really cool. Thank you, brother. I just wanted to know because I'm really interested in that subject.
00:03:10.184 - 00:03:20.644, Speaker A: Oh yeah, I'd love to talk about it. I'm still new to the space. I think I've been working in identity space for about four months now, but it's. It's one of my favorite areas of web3.
00:03:21.504 - 00:03:23.084, Speaker B: I'm gonna be huge in the future.
00:03:23.784 - 00:04:21.614, Speaker A: Yeah, 100% cool. So this talk I'm mainly gonna be going through, I think the two biggest things are mentorship and community, and also some advice that I could give to people trying to improve as both as a developer and an auditor. So, first, just to give a little background on how I got into web3. So I became aware of Ethereum back in the 2017 bull market. I read its white paper, and I approached it from a technology standpoint, because at that point, I was already a software engineer. So the whole concept of a decentralized Turing machine just, like, blew my mind and also having money built into it. And since then, I've just been diving down the rabbit hole.
00:04:21.614 - 00:05:18.782, Speaker A: I would say it wasn't until 2021 where I got really serious about transitioning my career there. So I spent a lot of time just educating myself on becoming a developer in web3. And I fully transitioned to work at open Zeppelin full time in early 2022. And it was actually during my time at Open Zeppelin that I got exposed to security, because initially I was purely a Dev. And then working at Open Zeppelin, I got exposed to all their great security researchers, and I also got exposed to working with bug bounties because the protocol I was working on, we had an immunify bounty, and part of my job was resolving bounties. That popped up. So that was my initial foyer into security research and probably for about a year.
00:05:18.798 - 00:05:32.394, Speaker B: And I'd say, bro, that's crazy, you know, going to work at Openzeppelin, did you, like, even knew the company? Like, I guess you knew the importance of the company before, right, applying, or was that lucky thing?
00:05:33.614 - 00:05:59.854, Speaker A: I think it was mostly luck. I knew their importance in the sense of, as I was learning solidity, I spent a lot of time reading open source code and on chain code, and I would see their contracts pop up everywhere. And so it's like, oh, clearly this is the top contract librarian. And while I was just reading their doc, that's all they were like, hey, you can apply for a job. We're hiring. So I just applied.
00:06:00.914 - 00:06:08.614, Speaker B: Nice. As a developer, you were keeping, like, defender or any one of their, let's say, business focused tools.
00:06:09.654 - 00:06:11.670, Speaker A: I was mainly using their contracts.
00:06:11.782 - 00:06:12.594, Speaker B: Awesome.
00:06:13.294 - 00:06:26.958, Speaker A: For I use defender now after I worked there, because I really understand what the product tries to do. But before it was mostly the contracts library. I wasn't even aware that they did audits until I applied.
00:06:27.086 - 00:06:28.398, Speaker B: Awesome. That's really cool, bro.
00:06:28.446 - 00:06:28.902, Speaker C: Keep on.
00:06:28.958 - 00:06:29.994, Speaker B: Pretty interesting.
00:06:32.734 - 00:07:43.678, Speaker A: Yeah. And so since then, I still work as a full time dev, but I do auditing and education part time on the side. Speaking of education, one of the things that throughout my whole career as an engineer and now as an auditor as well, that I really find valuable is mentoring others and teaching. Because I found a lot. I found a lot of my most satisfying moments have been from helping others grow to reach next levels, whether it's getting their first dev job or moving from like a junior dev to a senior dev. And so I really love education and mentorship, and I think the current state of Web three education is on an upward trend versus at least where I was learning back in 2017 and 2021. There's lots of great free online resources now with people like Patrick Collins and Owen Thurm, lots of youtubers, there's lots of great people to follow on Twitter.
00:07:43.678 - 00:08:40.704, Speaker A: They have lots of great information like past job and trust. There's also a large number of growing communities such as Opensense, where you can interact with like minded people of different experience levels. You know, just having someone to ask questions is a huge thing because when I was learning there was the Internet, like Google, and at that point, when I first started, there was barely any YouTube content. And I think securium had just started becoming a thing. There wasn't. Wasn't much, but now there's a lot of, a lot of content and there's also emerging paid courses that really dive into hands on experience. I think the biggest one I know of is Johnny times course, and I personally went through that and it was a great experience.
00:08:40.704 - 00:09:44.294, Speaker A: But I think one thing that's still lacking is mentorship for more junior devs and auditors, especially around the doesn't seem as common in web3 for more senior people to take up that mentorship role. Whereas in the web two world, at least, the software engineers I worked with at different companies, it's kind of assumed that once you get to a certain level, you're going to start mentoring other people. And that's a huge. That having a mentor is a huge addition for. And I would also argue for senior people too, because junior people are generally super motivated and they'll have fresh perspectives. So them asking questions and challenging things, you're saying, makes the more senior person make sure they're right and so they get better as well. I think it's a win win.
00:09:44.294 - 00:10:14.194, Speaker A: Yeah. And from my time at Open Zeppelin, I think that was one of the, one of the tools they used primarily to help auditors get better is once someone joined, they would have a mentor and they would have access to other people so that whenever they're, you know, in an audit or even just doing research, they had, they would have at least two or three people had a lot more experience they could reach out to and ask for help.
00:10:14.314 - 00:10:45.364, Speaker B: There's something else in there. You know, open is, Apple has something. I don't know what it is, but they have something different because they are really, really precise and meticulous. You know, one of the things I heard is that whenever they are auditing something, they not only audit the contract, they get, they hatch audit, but they also see how it interacts with another big protocols. So they always do these really interesting approaches, you know?
00:10:46.384 - 00:11:15.668, Speaker A: Yeah, I 100% agree. Their audits are extremely thorough. Like, they'll touch every piece of the system on chain, interacting with other protocols, the off chain pieces, like if they have no go or rust code, you know, even their developer practices of, like, okay, you, you know, maybe this audit's good, but if you need to upgrade, like, how are your upgrade scripts? They're very thorough and detailed.
00:11:15.716 - 00:11:16.344, Speaker B: Nice.
00:11:17.284 - 00:11:56.144, Speaker A: And I think one of the reasons why they're still a good firm is they figured out how to train auditors. Like, they have it down to a process. Yeah, the process. They can take someone who's new, maybe they've done a few audit contests, and after like four to six months, that person's just going to be a beast. And they just repeat that over and over. And then once that person becomes a beast, they start training people as well. And it just.
00:11:56.144 - 00:11:59.504, Speaker A: That's how they're scaling their auditing services there.
00:12:01.094 - 00:12:02.274, Speaker B: Amazing, buddy.
00:12:06.654 - 00:12:46.748, Speaker A: Cool. So one thing that I also want to talk about is this community that I helped start called Solidity ATL. So I'm still working full time as a software engineer. I still do audits, but I also spend time running this community that I created. And the main purpose of this community is to have a free and hybrid working environment. So we do both in person and hyper online events for web3 engineers and researchers. And our main goal is upskilling people.
00:12:46.748 - 00:13:33.394, Speaker A: So whether you're trying to break into the industry or take your knowledge or your career to the next level, that's our main goal. So we do different educational workshops, we do hackathons. We have audit team that does audits together. We also teach courses both for developers and auditors. And we do some network and career coaching as well. Like having companies come out to help with, you know, shaping resumes for traditional companies or helping teach different concepts around brand building. So we're very, we're free to open.
00:13:33.394 - 00:14:20.550, Speaker A: Join. A free community to join. And yeah, this has been something I've been really passionate about the past year and a half. Yeah, this came out of a lack of mentorship that at least I noticed for myself because I live in the southeastern United States. And aside from the online resources I mentioned earlier, I was personally looking for a community to build stuff with, whether it was building products or going to do hackathons or doing audits. And I couldn't find it and it was like very dispersed. So I started building it in my local area.
00:14:20.550 - 00:14:37.984, Speaker A: And just over the past year and a half, we now have probably 25 developers, different experience levels. We have about around ten security researchers. So it's been some exciting growth.
00:14:38.094 - 00:14:52.624, Speaker B: You're also posting stuff on YouTube, right? So if you have the link, feel free to join. To put here the discord server, the YouTube channel. Everybody should join, you know, a great chance to have a mentor. Like, there's no mentors in this space. This is completely true, you know.
00:14:53.524 - 00:15:52.626, Speaker A: Yeah, 100%. I can drop that in after the slides. And one thing I mentioned right now, the course we're teaching is intro to web3 security, and we're trying to bring on at least ten new auditors to start in their first contest. So if that's something you're interested in. Yeah, we'll be more than happy to have you join. Okay, so now I want to talk a little bit specifically just about mentorship and why it's valuable both for developers and auditors. So my first developer job, I was fortunate enough to have a mentor where we would probably spend five to 12 hours a week with each other, like talking, building, pair, programming.
00:15:52.626 - 00:16:48.844, Speaker A: And for the first, I would say four to six months of that job. It was just invaluable because I could. My mentor, he had been a dev for 15 years at that point, and so I could pick his brain on how to do things and just ask questions of if I was stuck on something or if he was doing something I didn't understand. He just let me ask other questions. I would review his code so he would write prs, and most of the time I couldn't help contribute. But it was a great opportunity for me to ask questions on his pull request to make sure I understood things. I was also able to see how he worked in real time, where I could see the tools he was using, how he was searching for things that just helped me grow so much faster than I would have alone.
00:16:48.844 - 00:18:22.714, Speaker A: So I really think having a good mentor can help you in your journey, like, whatever it is, whether it's your developer or auditor or even outside of web3. If you want to get in really good shape and you have a good mentor who can help you with that, they can help exponentially in whatever you're trying to do. Yeah. And like I mentioned earlier, my perspective, it seems like in web3, it's a lot less common for mentorship to be a thing or to be expected of people who have been in the space for longer. So if anyone here is struggling and they're looking for other ways to help them improve, as a dev, as an auditory, I highly encourage you to try to find a mentor through either one of the communities that you're in, like the opensense community or on Twitter, or try and find people in real life, because mentors can really speed up your development. Okay, so same thing for security researchers. Mentors can help accelerate your development a lot faster.
00:18:22.714 - 00:18:53.350, Speaker A: I think it's a lot less common to find, to have mentors or security researchers than for des, just because it's still newer, old, newer space. I think that traditional security firms like Openzeppelin or Trail of bits, it's very commonplace for people that have multiple mentors when they first joined because they understand how difficult it is for someone new to navigate the space.
00:18:53.542 - 00:18:59.834, Speaker B: How long it takes? Usually, like three months, four months. So your research is in a better level?
00:19:00.374 - 00:19:35.536, Speaker A: It depends on the person. The way that I saw open zeppelin look at it is there's like a base level of being able to, you know, navigate through a protocol to understand what's happening or being able to find, you know, consistently finding mediums or eyes. I've seen it take anywhere from two months to nine months. Yeah.
00:19:35.720 - 00:19:37.244, Speaker B: How long it was for you?
00:19:38.664 - 00:20:02.406, Speaker A: I think for me to where I felt like I wasn't a complete beginner, probably took about, I would say six months because my path was, I didn't have a mentor, so a lot of it was self taught. I would just talk to a lot of the auditors at hoping zeppelin and pick their brains and their ideas.
00:20:02.470 - 00:20:03.074, Speaker B: Nice.
00:20:04.294 - 00:20:44.234, Speaker A: And I remember my first attempt to audit was actually a bug bounty on immunify. So, you know, I picked that was. I wouldn't recommend that for a beginner because that was, like, the hardest option. So I did that for a few months and then realized that I had some gaps. And I went through the security and boot camp, and that really helped me solidify a lot of things. So, yeah, I think for me, it was about six months before I was confident and able to consistently find, like, mediums.
00:20:44.274 - 00:20:50.214, Speaker B: And should they, let's say today when you open, because that's how I feel. Okay. That's how I feel.
00:20:50.794 - 00:20:51.162, Speaker C: Okay.
00:20:51.178 - 00:21:19.174, Speaker B: I've been doing this for a while now. I know the basic vulnerabilities, but today when I open smart contract for the first time, I always seem blind. I always seem blind. And some quick questions come to my head when I see stupid code. Okay. Looking at the bigger picture still hard in the first hours, let's say first moments, you know, do you still feel that? Do you have a good grasp of this emotion? You can just dive into the code?
00:21:20.154 - 00:21:39.764, Speaker A: Yeah. And I'll talk that. Talk about that a little bit later. But I think one thing that really helped me is I have a process. So when I'm going to an audit, I'm usually like, I have a plan. Generally. That's like, one of the first things I do.
00:21:39.764 - 00:22:19.416, Speaker A: And I think being a dev has helped me. That barrier of like, oh, this is going to be really hard. And what do I do is a lot lower because just because I've done that so many times, like staring in a blank file or having to write code in a new repo, my approach is always like, understand what's happening first and then formulate my plan on how I'm going to try and find as many vulnerabilities as possible. I still feel it, but I wouldn't say it's as bad as basically have a plan.
00:22:19.480 - 00:22:23.724, Speaker B: This is actually. I actually don't have a plan. That's perfect. There's a perfect way of putting it.
00:22:24.564 - 00:23:08.824, Speaker A: Yeah, that helps a lot. Yeah. Cool. One other thing that I saw that seems to be emerging more is pair auditing. I think that's something that can help. That feeling that you mentioned is if people are able to audit with more senior people and see how they go through that process, that makes it a lot easier for them to develop their own process and also recognize, like, hey, even this person who's been doing this for a while seems a little bit nervous, but they have a process and they have trust in their process. And just seeing that can help give people confidence, I think.
00:23:08.824 - 00:24:16.684, Speaker A: Cool. So let's say you're like, yeah, cool. Mentors are good. I want to find a mentor. How do I do that? I think there's a few different ways, but before going to any of those, I think first it starts with a mindset of, I don't think it's a good approach to find a mentor where you're just learning the take. And I always in any relationship like to think of it from, how can I add value to this relationship with this person? I think approaching a mentorship from that perspective or finding a mentor will not necessarily make it easier, but when you're interacting with people, your interactions will feel more genuine versus just, hey, I want to get something out of this person. So I think the first step in finding a mentor is having an idea of what you're trying to accomplish.
00:24:16.684 - 00:24:48.474, Speaker A: So whether that be you want to become better, you want to become a developer and break into the space, an auditor, security researcher to break into the space, or you want to improve in some specific aspect or you want to try and find a job just having a clear understanding of what you're looking for out of a mentor and also trying to write down like what value you could bring to a mentor. I think those that goes a long way.
00:24:48.814 - 00:25:42.538, Speaker B: And we give a few tips here, you know, regarding, okay, so there's a process to find your mentor, but can we talk a little bit of how you give? Because let's be honest, in some cases we're going to be able to give a lot back. Maybe you help him with a website or maybe, you know, typing, fixing typos and shit. But what would be something like that you could show to a mentor that would make me accept you? I'm going to tell you what I feel. I mean, I would like to see passion. You know, I think this is basically like passion. And I would like to see like work, actual work, like if you come to me, say hi and show me a GitHub repo tells your story, whatever, and then the other day you come say hi again, show some pr you did. So I see that you are actually invested on that.
00:25:42.538 - 00:25:50.494, Speaker B: Yeah, some people come and they ask for mentorship, but they have no consistency, you know, so, yeah, you know, so can you, can we talk a little bit about that?
00:25:51.274 - 00:26:52.832, Speaker A: Yeah, sure. And I agree with what you mentioned, at least for me. One of the things I look for is passion. I would also say not necessarily passion, I would say motivation and drive. But I guess those are similar where as a mentor, I don't want to have to spend too much energy on motivating the person to do the work. It's a lot more, it's a lot better experience whenever the person's like super motivated and I just have to like point them in direction, like give them guide rails. Some of the ways that I've seen it for myself is I had someone reach out where they, I think they'd done a couple audits and they were asking is if they could participate in an audit with the group I was working with.
00:26:52.832 - 00:27:23.784, Speaker A: They'll be willing to try and write all the PlC's first cause they wanted to get better at it and they understood that that added value to an audit where if we were had some ideas of vulnerabilities, we could say, hey, we think this might be an issue. Could you try and write a proof of concept here that was like instant value add. That was a win win situation. Yeah, those, that's like an ideal situation.
00:27:24.604 - 00:27:53.454, Speaker B: And I have another question for you, which is when should I search remender? Because if I know zero coding is much more complicated. I mean, you should at least see a couple of videos on YouTube and know how to write, at least in my view, some basic JavaScript, some else, you know, know what a for loop is. So when or are you trying to have mentors for all levels, including completely zero?
00:27:55.114 - 00:28:39.584, Speaker A: Yeah, I think that mentorship can fall at any level, but I do think that the motivation and the drive to get better, you have to have that first before you like reach out. Like if someone hasn't even looked at a YouTube video and they're focusing mainly on finding mentor and they're not trying to teach themselves, I think that would be difficult. And generally mentors respond better if they see like, oh, this person is like really trying, they just don't have the knowledge, they just need the guidance versus this person isn't motivated, they need to be motivated to try and get better.
00:28:40.554 - 00:28:42.174, Speaker B: Yeah, really interesting.
00:28:44.394 - 00:29:07.674, Speaker A: I've seen it on the developer side where people may not have any experience but they're super motivated where like once they talk to a mentor, the mentor is like, hey, you haven't done anything yet. Like do these things and then come back to me, they just go through the checkbox and then come back and say, oh, okay, you're actually motivated so we can, you know, keep working together.
00:29:11.654 - 00:29:12.554, Speaker B: Awesome.
00:29:15.974 - 00:29:50.734, Speaker A: Cool. Yeah. So of course you can look on Twitter, discord YouTube, try and find communities to reach out to there. If you're in a more populated area, I would also recommend you try and find IRL events. I've actually found a mentor a few years ago through just like a random meetup group and that was good, staying engaged and trying to add value. I think that's also a really big piece to finding a mentor. And once you're inside of a community.
00:29:50.734 - 00:30:21.616, Speaker A: That's one way to stand out so that other people in that community will be more receptive to mentoring you. If they see you're engaged, they see you're trying to add value. And generally by adding value. In that sense, I think for newer people it's like education, where even if you've only been doing it for a week, you know, more than someone who hasn't been doing it at all. So if you can help those people, it would.
00:30:21.720 - 00:31:03.924, Speaker B: Can I add something here? You know, talking about, you know, stay engaged in trying to add value, and I may get some hate for this, but the amount of effort done by people in this industry is very low. Like very, very low, which means that if you have any sort of consistency, you make a Twitter post every day, some cool thing about solidarity, some small detail, or talk about blockchain every day. If you just do that, you're going to be above like 99% of everyone else, you know, because the amount of effort put by people in this industry is incredibly low. I believe that's because, you know, we are very young and everything, but, yeah, I don't know if you agree. How. What is your view on that?
00:31:05.464 - 00:31:28.044, Speaker A: Yeah, I would. I think it's new. Like, the industry is very new. And I think I kind of agree in some sense. Like, I think that's one of the reasons why it's less common to see mentorship in the web3 space than is a web two. Like, not just because there's less people, but because that expectation isn't there yet.
00:31:28.904 - 00:31:50.912, Speaker B: We are used to have. We are using to make, you are used to make too much money too young. Like, these people are making two hundred k, one hundred fifty k. And comes to a point where, you know, like, it's hard to have that passion and motivation because, well, yeah, yes, yeah, I.
00:31:50.928 - 00:32:24.044, Speaker A: Do think that makes sense. And you see that also a lot in web two companies. Like, once people get really high level jobs, there's the passion and the drive can die down because once you get to a certain point and you have the skills, there is some ability to coast. Yeah. I'm not sure how much of that happens in web3, though, because things change so fast for, like, if you coast, you just don't have the skill anymore.
00:32:26.704 - 00:32:27.724, Speaker B: Very true.
00:32:29.624 - 00:33:13.466, Speaker A: Cool. Oh, yeah. The last point I wanted to mention, if you don't have a community, you can't buy one and you don't have one in person, are unable to find one for some reason online, there is an option to create one as well. That was something that I did, which is helped me a lot. Well, the last thing talked a lot about community and mentorship, but I do want to touch on some ways I think you can get better as a dev and an auditor. So first I'll go just talk about as a dev just because I've been a dev longer. The first thing I always recommend is diving deep into one thing and then going wide.
00:33:13.466 - 00:34:27.014, Speaker A: So someone's new. I would not recommend like learning, like going the full stack route initially, trying to do everything all at once. I like the approach of getting decent at something first and then going wide, because once you learn how to get decent at one thing, it's easier to get better at other things versus learning a bunch of things at the same time and not getting good at any of them. I think the other piece is, if you've ever heard of tutorial hell, making sure you don't get into that space. So making sure you always have some portion of your time actively building. Because after all the courses and you know, assignments you can do, at the end of the day, the best way to get better as the dev is building, then building it public is another good way because other people can see, see it, give you feedback. You'd be surprised at how many people read random GitHub repositories.
00:34:27.014 - 00:35:13.064, Speaker A: Next thing is reading lots of code. So I'm not sure how common knowledge it is, but I think as you do more development work, you read a lot more code than you actually write, especially if you're working in a team. So learning how to read code, how to understand code, very important. Poor thing. As with most things, if you can teach other people to do it, that will force you to improve. So if you want to improve in being a web3 developer, then start making content or teaching other people and that will force you to get better. Next thing.
00:35:13.064 - 00:36:36.022, Speaker A: I think this also just goes with anything consistency that just leads to exponential improvement. Yeah, I've been a Dev for eight years and I think pretty much the whole time I've also done additional things outside of my full time job, whether it would be consulting, trying to build products, experiment with new technologies, and that just compounds over time and a lot of those skills translate. And last thing, just to help stay motivated if you're having issues with that, is finding a lot. Finding community of like minded people, people who are building, people who are trying to get better, who are genuinely curious in the technology. Yeah, because growing with people is a lot better than doing it alone. And on the same side, some recommendations I have for becoming a better auditor, there's some similarities and some slight differences. So, as a security researcher, I think the first most important thing is being comfortable with the fundamentals and some attack vectors in whatever ecosystem you're auditing.
00:36:36.022 - 00:37:24.802, Speaker A: So whether that be EVM based or rust based, having some fundamentals and then having an idea of some attack vectors. And I say some attack vectors because I don't think you should know all attack vectors before you start trying to audit. My approach was, I think with my first audit, I only knew, like, maybe five attack vectors, like, you know, access control and reentrancy. And I was like, you know what? I have these. I can look for these and then just keep iterating as I go. Second point there, similar to as it being a dev, I think you need to spend at least 50% of your time doing, like, auditing or doing ctfs.
00:37:24.938 - 00:37:25.594, Speaker B: You'll see.
00:37:25.674 - 00:38:23.922, Speaker A: Right, yeah. PLC's versus passive learning, because, you know, you need to do the passive learning to get to a certain point, but then you need to actually start auditing to get better at auditing. Third point there, we kind of talked about it before, is develop a process for approaching audits. So I have a process for before the audit starts, when the audit starts, and then once the audit is over, and each of those processes are serving different purposes. So, for example, whenever I'm done with an audit, especially with audit contest, whenever the report comes out, I will deep dive into that report. And if I missed anything, I have a process to try and make sure I don't miss it again. And I also have a process of setting goals before an audit, so I force myself to improve.
00:38:23.922 - 00:38:33.874, Speaker A: So, for example, like the past four audits I've done, one of my goals is, for every medium and high, I need to write a PoC for it.
00:38:35.614 - 00:38:39.794, Speaker B: Oh, that's really black belt stuff. Really nice, you know?
00:38:40.214 - 00:39:08.922, Speaker A: Yeah, it didn't start that way. It's something that incremented over time. Like, for that, it was. One common goal I have is, before I actually start auditing, I will write out, before I start looking for vulnerabilities, I will write out a threat model, like what I think the threat model, this protocol is, in words, before I allow myself to dive into vulnerabilities, just to make sure I understand things.
00:39:09.018 - 00:39:11.694, Speaker B: You usually use foundry for the pocs?
00:39:12.754 - 00:39:19.374, Speaker A: Yep, I use foundry if the protocol has hardhat test. I've used hard hat in the past.
00:39:19.454 - 00:39:43.674, Speaker B: But I'm with that, too. One question for you is, how often are you simulating the chain. So how often are you forking the chain, trying to simulate the attacks with pocs? Because, you know, I see that the best auditors, they have a lot of good automation. Not automation in the sense of analyzing the code, but in the sense of simulating the chain, running back transactions and everything.
00:39:44.684 - 00:40:22.604, Speaker A: And they have like the scripts ready beforehand. Yep, I've done a little bit of that. I think I've only done that a couple of times on audits because those are the only times they actually already had code up. Generally I do that for, if I'm looking for bug bounty so I can immunify live code, I'll do a local fork and play around with it there. I've only done it a couple times during an audit. Is that. Yeah, they had, they already had code up and deployed.
00:40:25.704 - 00:40:27.204, Speaker B: Amazing stuff, buddy.
00:40:28.344 - 00:41:12.436, Speaker A: Yeah, it's. I think the having a process like that. If there's any advice here, I think just having processes around your audits will help you get better faster. Highly recommend that. And the last piece, I don't know how unique my opinion is, but I think the ideal is to do both to some capacity. My reasoning is, as a dev, you write lots of tests, so writing proof of concepts is, there's very little barrier there. For example, I think in my job for the past four months, I've probably written 100 tests.
00:41:12.436 - 00:42:24.884, Speaker A: So whenever I open a new protocol to audit, especially if they already have tests written, like sometimes I don't even write plc's. I'll just like have tests to experiment and poke at the protocol to see how it works, because I'm just used to writing tests. And I'm also, as being a dev, more comfortable writing tests from scratch. Like if a protocol doesn't have tests, I'm comfortable starting from scratch and writing, setting up a POC at the second point. On the flip side, as an auditor, you get exposed to a lot of different protocols and coding patterns. And so you can learn as a developer, like what are some good practices, what are some bad practices, how are other protocols doing it, and how can I use this for the things I'm building? You also develop as an honor to an attacker mindset that I don't think most devs have. So when you're actually building things, you can have that attacker mindset on yourself to design more secure protocols and write more secure code.
00:42:24.884 - 00:43:06.714, Speaker A: And then the last two points there, as a dev, you read a lot of code, do a lot of code reviews, and I think there's a lot of similarity in auditing with code reviews, because all the code review is trying to understand some code being added, code being changed, how it affects the underlying system. So you really have to understand what's happening. And also as a dev, you work with off chain components. So if you're working with a protocol that has, like, go client rust clients, you'll be a lot more comfortable to look for attacks there as well that you wouldn't otherwise have.
00:43:07.294 - 00:43:08.234, Speaker B: Awesome.
00:43:09.654 - 00:43:10.046, Speaker A: I have.
00:43:10.070 - 00:43:27.454, Speaker B: So I have some questions here that are really related to this, guys. I was waiting to make the questions, but I'm gonna make them now. First question is from Alexrum. He's saying, can you tell which is better, the path for depth, developing Dapps or auditing? And it's possible to do both at once.
00:43:30.594 - 00:43:34.554, Speaker A: So the question was, which is better, developing depth or audit? Yes.
00:43:34.634 - 00:43:38.094, Speaker B: And if it's possible to do both at once.
00:43:38.754 - 00:44:20.454, Speaker A: Yeah, I think better depends on the person. Like, some people are more interested in building, and some people are more interested in securing and protecting protocols and not having to write the code. Yeah, I think they're both good. Like, better. It just depends on the person. But the second question on doing both, it's something that I don't recommend for beginners, but as you get more experienced, I do think it can add a lot of value.
00:44:21.514 - 00:44:22.290, Speaker B: Interesting.
00:44:22.402 - 00:44:40.556, Speaker A: And again, that's like, it depends on the beginner. But if someone's, like, never coded before, I would recommend they pick one first. Like, learn dev stuff first or learn auditing first, start to get some success there and then branch out. Yeah, awesome.
00:44:40.620 - 00:44:53.824, Speaker B: Second question, here's also from electrum. He's asking, how much time will it take to be good at auditing? What approach to follow? Like testing manual or how, I guess, how long should be good at auditing.
00:44:54.844 - 00:45:52.254, Speaker A: Yeah. So good, I think, is a relative. The way I kind of think about it is like, I would say for myself, I'm like a intermediate auditor. I'm definitely not one of the top tier auditors. But I would define good as getting to the point where you're pretty confident that if you go into an audit, you'll find at least some mediums and you're able to consistently do that. I think that's anywhere from six to 18 months. And it really depends on the circumstances of how much the person's auditing, if they're doing it alone, if they have a space to ask questions, are they taking courses? What is their actual day to day look like? And I think some of the things that can help accelerate that are.
00:45:54.454 - 00:45:54.790, Speaker B: Doing.
00:45:54.822 - 00:46:20.016, Speaker A: It in public is just doing it in public. Even if you're just posting on Twitter, like mentioned earlier, people will comment. And I'll straight up ask people on Twitter, in comments, questions about things that I have, and they'll answer and they help me get better. So, yeah, I would build in public and, yeah, be consistent with it. I think those are two of the.
00:46:20.040 - 00:47:15.414, Speaker B: Biggest something that I wanted to ask you and is a little bit polemic in says is that we see today every time, I mean, if you have a big bug on the protocol, on the smart contract, that will be labeled as a critical. Okay, but this big bug, not every time, is actually taking money out of the contract. Sometimes it's just some variable that gets set to zero or so it breaks the contract, but not in the way that money will be lost. But still, we label that as a critical because sometimes you see these auditors, okay, I found three criticals, and you see the critical you like, okay. I mean, this is a critical, okay. I mean, and when you're saying you gotta be able to find at least a few mediums, I wonder, what is a medium? A medium is what is a medium? You know?
00:47:15.874 - 00:47:39.774, Speaker A: Yeah. Yeah, that's a good question. Yeah. The rating of issues is always subjective. It's like you mentioned, like, you can have critical issues where money is not stolen, but you just break something really badly. But also, it's like, it's defined different on different platforms. So, for me, a medium is.
00:47:39.774 - 00:48:39.044, Speaker A: There's a few different categories. There's, like, a medium in the sense of, like, stolen funds are breaking protocol, where there's some damage, like, say you're looking at, like, some Dex that has a bunch of liquidity pools, and you're able to drain one of them, not all of them, that maybe that could be considered a medium. And then there's also, like, a lot of protocol design stuff and governance stuff, I think also could fall under that. Like, if that same protocol that has liquidity pools lets the people who operate that liquidity pool, like, configure it however they want with no delays whatsoever, so that they can, like, you know, front and run people who are making trades, like, those type of things. Yeah. I generally think of it as, like, things that can break a protocol.
00:48:39.904 - 00:48:44.616, Speaker B: That's a really hard question, bro. Don't feel you don't have truth answer perfectly, but nice answer.
00:48:44.640 - 00:49:09.324, Speaker A: Yeah, yeah. Keep on both. I think maybe necessarily being confident in, like, finding mediums, but I think once you get to the point where you can go into an audit where you're like, there's probably stuff here. And I'm offering my ability to five most of the things here. I think that's when I'll consider it like a good.
00:49:14.744 - 00:49:16.604, Speaker B: Awesome. Makes total sense.
00:49:18.824 - 00:49:22.816, Speaker A: Oh, so that was everything that I had.
00:49:22.920 - 00:49:24.764, Speaker B: Wow, bro, amazing talk.
00:49:25.984 - 00:49:38.158, Speaker A: Yeah. I can share the link to the course for anyone who's interested. We're about halfway through it. Completely virtual, 100% free.
00:49:38.286 - 00:49:39.114, Speaker B: Awesome.
00:49:41.734 - 00:49:51.926, Speaker A: It's going to be ending near December and then we're going to start final course project next January. We're going to do some audit contests. So I'm going to join.
00:49:52.070 - 00:49:59.764, Speaker B: I invited everybody to speak. Just feel free to open your mics and make any sort of questions you may want. I see LP is here. Hey, LP, how's it going, brother?
00:50:01.544 - 00:50:03.192, Speaker C: Hey, good, how are you? Good.
00:50:03.248 - 00:50:06.004, Speaker B: Better now, bro, that you're here. I mean, you have a question for us?
00:50:08.744 - 00:50:12.004, Speaker C: Not right now that I can think of.
00:50:12.704 - 00:50:13.336, Speaker A: No problem.
00:50:13.400 - 00:50:16.764, Speaker C: Maybe I can think some while others are asking.
00:50:17.384 - 00:50:19.564, Speaker B: Shogoki, you have a question for us?
00:50:22.244 - 00:50:25.044, Speaker A: Yeah, not really. Just thank you for your talk.
00:50:25.084 - 00:50:29.412, Speaker C: I think it was really good. Yeah, not really have a question open yet.
00:50:29.428 - 00:50:30.796, Speaker A: I think I had one question, but.
00:50:30.820 - 00:50:58.558, Speaker C: Then you answered your last slide. So about doing development besides auditing, so maybe I can add one up with that. And so you think, is it beneficial to do like web3 development at the same time? So, meaning while doing auditing or how do you approach it? Do you like have shifts where you say, now this week I'm only doing development and the other week you're doing audits?
00:50:58.606 - 00:52:05.034, Speaker A: Or how's your approach for that question? Yeah, that's something I didn't really talk about is the time management piece, because auditing, you do need that focus so you can actually like make sure you do a good job. So generally what I do is I will, my job is fortunately pretty flexible, so I will basically try and set it up so that when I'm in an audit, most of my dev work is not, not necessarily, it's not like a peak dev cycle or we're not trying to push out a lot of stuff just so I can have that time. So I do have to do, because I do auditing part time, I have to do some planning around making sure that I have two to three weeks to actually focus on it. But that is a, I think it's possible. It's just the time management skill that is really important. Okay, cool. Thank you.
00:52:05.494 - 00:52:26.898, Speaker C: So I might ask something. Are you using any, uh, chat GPT or something similar to assist you in the audit? And what do you think? Like maybe in, uh, I, we talked this with misanthropic like a while back. I told him like in five years there will be no auditor because like everything will be automatic.
00:52:26.986 - 00:52:27.522, Speaker B: I kind of.
00:52:27.578 - 00:52:30.654, Speaker C: But now I think it will be two years. Maybe.
00:52:31.234 - 00:52:35.130, Speaker B: Maybe one. Sorry, maybe one.
00:52:35.162 - 00:52:35.974, Speaker A: Oh, yeah.
00:52:37.754 - 00:53:36.484, Speaker C: So I was like experimenting with chat GPT with custom knowledge files, and it just blows my mind every time. So when you. I just uploaded all the codes for arena HTML files to chat shift before, and it kind of finds some vulnerabilities. Of course, it doesn't do fuzzing or like simulations or etcetera. So not everything, but much, much better than VPT core's default. So I think like, and I saw lots of projects in the hackathons that are like analyzing bytecodes as they are deployed and trying to find vulnerabilities, maybe for white hacking or black hacking. Like, I don't know, what, what do you think about like the ongoing automation and the AI thing and how it will affect auditing or security in general?
00:53:37.024 - 00:54:39.162, Speaker A: Yeah, so I think it's long term, like it's a net win because one of the spaces I'm really excited about are the bot races that are going on in code Farina and the bots that are coming out of that because they're starting to actually find like real vulnerabilities consistently. I do think over the next few years there's going to be a lot more automated AI tooling. I think that's a good thing because that will allow more protocols to safely launch and operate. But I do think there's going to have to be, with all other industries, even devs, going to be some adaptation where auditors will have to learn how to use those AI tools because they are going to get better, but never perfect, right?
00:54:39.218 - 00:54:44.334, Speaker B: They're never going to get perfect. They're never going to be able to solve security because we never did that in web two. Right.
00:54:44.994 - 00:54:48.522, Speaker A: Yeah, because, I mean, security at the end of the day is like, people.
00:54:48.658 - 00:54:53.174, Speaker B: What if the AI too has a problem? You know, what if I can fool the AI to itself?
00:54:53.714 - 00:54:56.866, Speaker A: Yeah, exactly. That's another, I mean, the biggest problem.
00:54:56.930 - 00:56:10.014, Speaker C: Right now is that AI can. But I saw some techniques like llms talking to what was the software called, MatLab and then getting output from Matlab and then continuing those things. So, I mean, yeah, as soon as they find the solution to like some sophisticated mat inside amms or like other things, I think, like it will make a very big leap that it's like integrating to GitHub, which polls and I mean, yeah, that's what I think right now you need. And of course, I'm not saying, like, people just install script to their CI CD pipeline and forget about security. It's like, all the planes have pilots, although they can fly by themselves. So there will be humans at the helm of the AI, but most of the things will be done.
00:56:10.354 - 00:56:10.938, Speaker A: Yes.
00:56:11.026 - 00:56:16.014, Speaker C: AI, not by AI, maybe. Or I would say with AI.
00:56:16.454 - 00:56:52.704, Speaker A: Yeah, that's how I see as well. I try to keep up and experiment with a lot of the latest AI tools, like AI agents and some of the AI tools for security. Like, when I was working at Openzeppelin at Forta, they were really integrating AI, like you mentioned. They had. They had bots that whenever a contract would be launched, like, deployed on a chain, it would automatically just start looking at their bytecode to try and see if they're malicious.
00:56:53.924 - 00:57:17.262, Speaker C: Yeah, I saw many projects in hackathons this year. The same narrative. Like, as soon as the contract deploys, we decompile the bytecode and blah, blah, blah. But it will go there. I mean, like, yeah, we have, like, what was it? Justin from subway that does some kind of.
00:57:17.438 - 00:57:18.350, Speaker A: Oh, yeah.
00:57:18.422 - 00:57:20.142, Speaker B: Jared. Jared from subway.
00:57:20.238 - 00:57:20.758, Speaker A: Yeah, Jared.
00:57:20.806 - 00:57:24.954, Speaker C: Sorry. Sorry. I mean, yeah.
00:57:28.654 - 00:57:39.854, Speaker B: Awesome. Buma, you have a question? No question. From Boomer Sabbath, you have a question?
00:57:41.754 - 00:57:42.690, Speaker A: Yes, I do.
00:57:42.762 - 00:57:50.934, Speaker B: Go on. What do you prefer? Do you prefer drink contests or hunting? On hunting.
00:57:51.314 - 00:57:52.690, Speaker A: Bulk bounty hunting.
00:57:52.762 - 00:57:56.010, Speaker B: Which one do you prefer then? Are you tell.
00:57:56.162 - 00:58:32.234, Speaker A: Why? Oh, that's a good question. I guess for me, it depends on the time of year, because I fluctuate back and forth between them. Yeah, I like audit contests. I like the bug bounties. And also, I think of private audits differently from all of those. Yeah. So I think usually I like audit contests because they're a little bit more predictable, where I'm pretty confident that I will find something.
00:58:32.234 - 00:58:53.232, Speaker A: Whereas with the bug bounties, like, I do love the idea. It's just, like, wild. It's out there. And, you know, with bug bounties, you get more of the on chain investigation. It's like a completely different approach. And I do like that as well. It's just.
00:58:53.232 - 00:59:34.924, Speaker A: It takes a lot more time, because you could be looking at some code for a month and not buying anything or multiple months. So, for me, it really just depends on how much time I had and what I'm doing. Like, if I had a few months of time right now, I'm gonna have a lot of time. I may go for try and find a bug bounty, but usually I don't have months of time, so I stick to contests. Um, and then when I have, like, two to four weeks, uh, of a lot of time, I made also try and do private audits, but yeah, I like them all, but for different reasons.
00:59:36.224 - 00:59:39.496, Speaker B: Amazing stuff. But the amazing, amazing. Leo, you have a question?
00:59:39.560 - 00:59:43.000, Speaker C: I do. I do. Another. I have another question.
00:59:43.112 - 00:59:43.400, Speaker B: Cool.
00:59:43.432 - 01:00:02.734, Speaker C: So, uh, in terms of companies, not auditor side, like, how many audits should the company make when launching a product, do you think? Like, with different providers? And how long should they, like.
01:00:05.154 - 01:00:05.490, Speaker A: How.
01:00:05.522 - 01:00:32.970, Speaker C: Do I say that? Should they repeat this? Like, in six months periods or two months periods? Like, when should do the next security audit? Like, just by updating their contracts or just maybe there is some new solidity version they upgrade. Like, what's the new audit timeline, do you think?
01:00:33.162 - 01:01:22.372, Speaker A: So? I have kind of, let's say, a loose framework for thinking about that. So, one, it depends on how much is changing and how fast. For me, I think the ideal would be to have an internal security person where on every. Every merge to the master branch, like, you have someone whose job it is to view the security of that change. I think that's the best, because if you have that internal person, they keep that context the whole time. And I think generally for. Yeah, for me, it depends on the size of the change.
01:01:22.372 - 01:01:39.124, Speaker A: So if it's like, hey, this is a brand new protocol we're about to launch, then I think having multiple audits initially, like, at least two, and then the more complex the protocol, the more audits you want. Yeah.
01:01:39.664 - 01:01:44.364, Speaker B: Cyber swipe vibes. You know, they had, like, how many audits on Kyber swipe?
01:01:45.344 - 01:01:46.920, Speaker A: They had, like, seven or eight.
01:01:46.992 - 01:01:48.844, Speaker B: Like, from the best people. Right?
01:01:50.984 - 01:02:17.116, Speaker C: Actually, that's why I asked this. Like, Khyber's five already got audited, and then they. I don't know the details, but they didn't do any update. Right? Like, they had this, all the audits, and they still got hacked. So, yeah, maybe they need to, like. Although they need. They did audits, like, they need to do, like, every three months.
01:02:17.116 - 01:02:21.804, Speaker C: Some audits, like, the dot is Ryan.
01:02:21.884 - 01:02:24.316, Speaker B: It isn't a bug bounty. Right? But, I mean.
01:02:24.380 - 01:02:57.534, Speaker C: Oh, yeah, that might be a bug bounty, but, you know, when you launch. Uh, I I'm not sure. Like, the bug bounty is very precious when it's just launched. Like, when you see a bug bounty, like, six months old, you don't get interested. So, uh, I. I think, like, maybe every three months or six months, repeating the same audits with different companies might be beneficial. I don't know.
01:02:58.094 - 01:03:01.734, Speaker A: I do think you have a period of having audits?
01:03:01.774 - 01:03:12.854, Speaker C: Yeah, yeah. Although nothing's got updated. I mean like just for checking with different people. Let's say just the out check.
01:03:13.014 - 01:03:35.642, Speaker A: That's still something. I think it's like that's still something the space has to figure out the development. Yeah, because like even with all the audits and because they're a very secure security conscious team, like sometimes like bugs will sit for years before they're exploited and.
01:03:35.738 - 01:03:36.370, Speaker C: Yeah, yeah.
01:03:36.482 - 01:03:51.618, Speaker A: I think one of the hardest challenges is black hat hackers have as much time as they need whereas security researchers are very time boxed alike. Yeah.
01:03:51.706 - 01:04:01.734, Speaker B: Black hat hackers also love to flex. Right. So they are not doing it for their money. Exactly. You know because most of the times they gonna be able to withdraw gonna be on tornado cash forever.
01:04:02.274 - 01:04:08.654, Speaker A: Yeah. So if someone can spend six or seven months is obsessing over a protocol.
01:04:09.034 - 01:04:15.174, Speaker B: Just to show off. Yeah, that's Leo, you have a question for us?
01:04:16.314 - 01:04:59.282, Speaker D: Yeah, I do. Hi, thank you for everything research. My guys been really really impactful. I have a question. So for someone who finds it hard to understand large code base in the company in context agnostic code for shedlock, like I need to understand code base will be hard for you to find a bug in it. So what do you suggest? What is such a person doing wrong? Because when it comes to a very small code base such as basically can get a grasp of what is going on like the flow of the code base and be able to find bugs. When it comes to large code base complex ones, understanding it is always difficult thinking of finding bugs out of it.
01:04:59.282 - 01:05:02.454, Speaker D: So what do you suggest is that something such a person is doing wrong?
01:05:03.314 - 01:06:33.558, Speaker A: Yeah, that's a good question. I think that two things I would suggest are. Well, one, I think there is a skill in learning how to build a mental model of a code base and I think the complexity of a code base grows non linearly with a number of lines. So and a lot of the times the complexities are not just from like the large code base but it could be like concepts like I remember the first time I had, I encountered a like I had to actually care about the utilization curve of a amm and I was just like I don't even know what this is like. And there's already all these lines of code. So I think there's understanding like the, maybe the complex bits of it but then there's also like how do you develop the skill to hold that mental model of what's happening so that you can start to prod at it. For me, what I did was I would do some smaller contests, but I would periodically do larger ones just to like push myself and get go through that exercise of, okay, this is a 3000 4000, my code base.
01:06:33.558 - 01:07:30.646, Speaker A: Like it's going to take longer, might not find as much, but doing that multiple times to just start getting used to it. And then once it was over I would look back to see like, okay, my approach here, I was just like reading the code, trying to read the documentation. Maybe that didn't work. So this time, next time I'm going to draw out pictures and actually write out all the user flows of what I think the person can do. For me that really helps because if I could write it out in words, I feel like I understand it. So I would recommend trying to start using diagrams or figuring out how you can capture your mental model of protocol that while you're thinking about attacks, you don't have to hold all that in your head. I think that's where the challenge comes in, is like these complex protocols.
01:07:30.646 - 01:07:52.078, Speaker A: There's so much going on, you're also trying to figure out how to break it. So if you can offload some of that mental space of here's how I think the protocol works. And for me that's usually words or images. And then that helps free up my creativity to be able to try and break it. It is definitely hard though.
01:07:52.206 - 01:07:59.264, Speaker D: Yeah, yeah, yeah, maybe I'll try that. Actually should show you what. Thank you.
01:07:59.884 - 01:08:00.540, Speaker C: Amazing.
01:08:00.612 - 01:08:08.196, Speaker B: Amazing answer, brother. Amazing question. You my brother with the flower profile picture, I cannot see your nickname. Do you have a question for us?
01:08:08.260 - 01:08:08.508, Speaker A: Wow.
01:08:08.556 - 01:08:10.744, Speaker B: Nicknamed us Odoan, isn't it?
01:08:13.444 - 01:08:15.588, Speaker A: Yeah. Thank you very much.
01:08:15.756 - 01:08:18.524, Speaker B: No problem. Broken.
01:08:18.594 - 01:08:22.968, Speaker A: Okay, no problem. My question is for web.
01:08:23.016 - 01:08:25.524, Speaker C: For web develop.
01:08:30.384 - 01:09:41.695, Speaker A: Without starting with foundry directory. Oh, that's a good question. I think if you're comfortable with developer tools already, I would recommend just hopping straight in the foundry because their documentation is good, I mean their tool is good. And if you've used like developer frameworks before, even in web two, then coming straight into foundry could be good. But if you haven't worked with developer tools or frameworks much before, that might be more challenging. Yeah, and I think it's still also depending your goal, right? Like if you're trying to be purely solidity dev and that's all you want to focus on, then foundry may be right. But I do still think there's some space for hard hat in some circumstances, especially if someone's already familiar with typescript or having to write super complex deployments.
01:09:41.695 - 01:09:48.023, Speaker A: So yeah. Oh, that was cool. Okay. Thank you very much.
01:09:48.143 - 01:09:49.963, Speaker C: I already remember.
01:09:52.503 - 01:09:59.031, Speaker A: Thank you for this thought and the content you provide. Nice, brother.
01:09:59.167 - 01:10:17.950, Speaker B: I think this is it. That was an amazing session. A lot of alpha, you know. Thank you so much for taking your time, taking our questions. I already dropped a link here for solidity ATL. I'm gonna give you the call on open sense. Okay? And thank you so much.
01:10:17.950 - 01:10:26.394, Speaker B: Whenever you want to come back, whenever you want to talk about something interesting, give us some tips. You know, it's always nice to have people like you here. Okay.
01:10:26.934 - 01:10:29.316, Speaker A: Yeah, for sure. Thanks for having me. It was good.
01:10:29.470 - 01:10:32.984, Speaker B: No problem, brother. Thanks, everyone, for participating, and see you guys later.
01:10:33.064 - 01:10:34.504, Speaker A: Bye. Bye. Either.
