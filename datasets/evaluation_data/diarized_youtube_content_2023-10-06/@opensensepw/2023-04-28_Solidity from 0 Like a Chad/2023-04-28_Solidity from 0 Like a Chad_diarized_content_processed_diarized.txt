00:00:00.120 - 00:00:00.740, Speaker A: Yay.
00:00:03.574 - 00:00:05.714, Speaker B: Okay, now I hope you see.
00:00:09.574 - 00:00:11.630, Speaker A: You see miss? I see it.
00:00:11.662 - 00:00:12.622, Speaker C: Yeah. Perfect, bro.
00:00:12.718 - 00:00:13.674, Speaker A: That's cool.
00:00:16.374 - 00:00:20.718, Speaker C: We were reading the docs. Did you got some understanding of what's happening?
00:00:20.846 - 00:00:23.154, Speaker A: Let's or not.
00:00:25.054 - 00:00:27.342, Speaker B: Actually, no, I didn't understand anything.
00:00:27.398 - 00:00:30.636, Speaker C: Perfect, perfect. There's no problem. So let's start with line 21.
00:00:30.710 - 00:00:32.728, Speaker A: Okay. Okay.
00:00:32.776 - 00:00:34.684, Speaker C: What are you seeing online? 21?
00:00:35.544 - 00:00:48.684, Speaker B: I see that, uh, the contract lottery inherited inherits from ilottery ticket lottery set up there. Different contacted this contract in here. It's from them.
00:00:50.544 - 00:00:56.404, Speaker C: Awesome. Uh, so I went, we can see that lottery has an interface.
00:00:56.714 - 00:00:59.986, Speaker A: It also inherits from TK headaches from.
00:01:00.010 - 00:01:20.614, Speaker C: A setup system and inherits the contract for the referral system. And rn source controller must stand for endomic number, probably random number source controller. There's also a contract doing that. Now if we look at line 22, what do you think it's happening in there?
00:01:29.634 - 00:01:31.802, Speaker B: Okay, need to.
00:01:31.818 - 00:01:33.186, Speaker C: Thank you much. I'm going to explain you.
00:01:33.210 - 00:01:36.978, Speaker A: Okay, so what we're doing in there.
00:01:37.026 - 00:01:57.392, Speaker C: Is saying that every implementation that uses the interface for ERC 20 will implement methods from save. ERC 20 means that you kind of composing the ERC 20 type. You understand? You adding functionality to that type.
00:01:57.568 - 00:01:58.808, Speaker A: So, okay.
00:01:58.856 - 00:02:04.232, Speaker C: It's not only the ERC 20 interface anymore, but it's also now where we.
00:02:04.248 - 00:02:08.456, Speaker B: Are adding to I ERC 20.
00:02:08.600 - 00:02:14.364, Speaker C: We're adding the safe ERC 20 specification to the ERC 20 interface. That's useful.
00:02:14.984 - 00:02:21.128, Speaker B: And where does this specification comes from? From this, uh, contracts.
00:02:21.176 - 00:02:23.632, Speaker C: From, from one of these contracts. I don't know which one.
00:02:23.648 - 00:02:24.640, Speaker B: From one of these contracts.
00:02:24.672 - 00:02:49.414, Speaker C: Yeah, because I don't know which one because we didn't import an out ten. But one of these contracts has this safer sea implementation. Okay. And also one of these contracts has the interface for the ERC 20. So what we're doing in there, we kept the code separated and we are kind of composing something, you understand, usually because safety RC 20 is not yours. You're just using that from some standard. Liberty.
00:02:49.414 - 00:02:51.334, Speaker C: Actually, look at line five.
00:02:55.194 - 00:03:03.714, Speaker A: Yeah, so, yeah, it comes from Openzeppelin, right? Open zeppelin.
00:03:03.874 - 00:03:15.454, Speaker C: So, yeah, so we know that this is a standard, so that's why we are composable. So we don't only want the ERC 20 interface, but we want the safe implementation of that, you know.
00:03:16.014 - 00:03:16.462, Speaker A: Yes.
00:03:16.518 - 00:03:20.154, Speaker C: With that information, you kind of understand what's happening. Line 23.
00:03:22.814 - 00:03:33.014, Speaker B: Okay. We are using this ticket utils, which is this from line eleven.
00:03:33.134 - 00:03:33.830, Speaker C: Yes.
00:03:33.982 - 00:03:38.126, Speaker B: Sic for UV 956.
00:03:38.190 - 00:03:53.934, Speaker C: Yeah, so, yeah, so we are implementing all the functionality that is integrity you choose which must be like buy ticket, some division or calculations. We're doing that so all the numbers will automatically have that functionality. Okay.
00:03:54.354 - 00:03:55.042, Speaker A: Yes.
00:03:55.178 - 00:04:24.744, Speaker C: Let's go to line 25 now and we can see a private id. I guess that every lottery, let's say every, every lottery match, let's call it match has an id. So the lottery from today is an id. The lottery for next week is the next id and so on. Then we have this 26 line front end. Do ticket sales, which is a mapping.
00:04:25.284 - 00:04:28.944, Speaker A: A mapping composed of address and a value.
00:04:31.724 - 00:04:36.620, Speaker C: Probably by the name I imagine is the amount of tickets that different and sell, sold.
00:04:36.692 - 00:04:37.464, Speaker A: Okay.
00:04:39.524 - 00:04:40.624, Speaker B: Okay. So.
00:04:43.284 - 00:04:44.604, Speaker A: I'm not very familiar with.
00:04:44.684 - 00:04:46.548, Speaker C: Let's talk about mappings very easy.
00:04:46.596 - 00:04:47.304, Speaker A: Okay.
00:04:48.564 - 00:04:51.224, Speaker C: It's just, you know, you know what an array is?
00:04:52.604 - 00:04:53.384, Speaker A: Yes.
00:04:55.364 - 00:05:02.904, Speaker C: So a mapping is a little bit like an array. So can you go online 25 and at the end of the line and do an enter?
00:05:06.614 - 00:05:06.926, Speaker A: What?
00:05:06.950 - 00:05:07.914, Speaker C: Enter in that.
00:05:12.094 - 00:05:15.478, Speaker A: Line where I know, just do an enter work.
00:05:15.646 - 00:05:32.714, Speaker C: Now I want you to copy what I'm sending here on the chat. So I'm going to send, this is a user. Imagine that the first one is an address and equal, let's say ten meter.
00:05:34.214 - 00:05:35.518, Speaker A: Let's copy that.
00:05:35.686 - 00:05:36.814, Speaker C: That ain't gonna work.
00:05:36.854 - 00:05:37.086, Speaker A: Okay.
00:05:37.110 - 00:05:49.910, Speaker C: That is not functioning solidity, but I'm gonna be able to explain you mappings from that. So a mapping is just a way to create a hash map indexed by some information you want.
00:05:50.022 - 00:05:50.806, Speaker A: Okay.
00:05:50.950 - 00:06:00.954, Speaker C: And what is, what's the index in this case that we're seeing online? 27. Index is the address. Okay?
00:06:01.934 - 00:06:02.646, Speaker A: Yes.
00:06:02.790 - 00:06:09.914, Speaker C: So you have address and you have that little symbol and you have, you win 256. Okay?
00:06:10.574 - 00:06:11.190, Speaker A: Yeah.
00:06:11.302 - 00:06:13.894, Speaker C: So look at line 26.
00:06:13.934 - 00:06:18.790, Speaker A: Now this is kinda how a balances.
00:06:18.942 - 00:06:51.644, Speaker C: Mapping would be represented. So when I have zero x one, I would have the user address. And whenever I get information from that address, I'm going to receive the amount of ether that that address has. You understand? So it's just a way to list information based on an index. Okay. So if we, if we're online 27, we are looking at mapping address to uint. 256 means that we're going to have the address of the person who bought the tickets.
00:06:51.644 - 00:06:59.224, Speaker C: Okay. And the 256 gonna be the amount of tickets that they bought. You understood?
00:07:00.284 - 00:07:01.024, Speaker A: Yes.
00:07:02.004 - 00:07:06.772, Speaker C: Feel free to, you know, if you don't understand, let's do something. Let's do something.
00:07:06.828 - 00:07:07.348, Speaker A: I'm gonna make.
00:07:07.396 - 00:07:12.124, Speaker B: Okay. Maybe I can try to code it.
00:07:12.204 - 00:07:18.734, Speaker C: Yeah, let's, let's create a new file. So just go over and create a new solidity file contract.
00:07:20.194 - 00:07:26.210, Speaker B: Okay. Okay.
00:07:26.322 - 00:07:29.414, Speaker C: Awesome. And let's create a contract called.
00:07:32.314 - 00:07:33.054, Speaker A: Contract.
00:07:33.594 - 00:07:41.698, Speaker C: Let's call it a z token. Perfect.
00:07:41.786 - 00:07:42.370, Speaker B: Like this.
00:07:42.442 - 00:07:48.434, Speaker C: Yes. Space, space, and open and close brackets.
00:07:49.814 - 00:07:50.334, Speaker A: Yes.
00:07:50.414 - 00:07:56.054, Speaker C: Put the pragma, pragma solidity 0.18. The pragma is outside the contract.
00:07:56.174 - 00:07:59.942, Speaker A: So before line one, okay?
00:08:00.038 - 00:08:00.750, Speaker B: Zero.
00:08:00.942 - 00:08:05.154, Speaker C: The pragma is outside the contract. So go line one in the beginning of the line.
00:08:05.494 - 00:08:06.554, Speaker A: Yeah, yeah.
00:08:08.654 - 00:08:13.474, Speaker C: Pragma solidity 0.180.8.
00:08:13.874 - 00:08:18.494, Speaker A: Start. Perfect. Okay?
00:08:19.194 - 00:08:21.854, Speaker C: Yes. You forgot the y on solidity.
00:08:24.554 - 00:08:25.154, Speaker A: Now.
00:08:25.274 - 00:08:35.174, Speaker C: Yeah, perfect, bro. Now we're going to, let's say that this is a token and we're going to create a mapping to represent the balance of each user, okay?
00:08:35.914 - 00:08:36.650, Speaker A: Yes.
00:08:36.802 - 00:08:50.600, Speaker C: So let's create a mapping called balance. So you can see mapping. Actually you can say mapping. Yeah, mapping address to you. Win 256. Because the address is going to be the index and the six might be the value.
00:08:50.712 - 00:08:51.416, Speaker A: We can call it.
00:08:51.480 - 00:08:52.248, Speaker B: What's the name?
00:08:52.336 - 00:08:53.124, Speaker A: Balances.
00:08:54.624 - 00:08:58.216, Speaker C: Yes, perfect. Make it public. So put public before balances.
00:08:58.280 - 00:09:10.308, Speaker A: Okay, it's before perfect, bro. Now let's create a.
00:09:10.396 - 00:09:21.664, Speaker C: Do an enter to two times. Again, let's create a constructor. So say constructor. Let's put parenthesis.
00:09:24.364 - 00:09:25.504, Speaker A: Over the.
00:09:26.804 - 00:09:46.564, Speaker C: I think, I think after lines. Oh no, perfect. I think this works too. Now what we're going to do is we're going to set a few balances, okay? For some people, let's say that. Let's say that balances. And then you can put the array thing, you know the array thing.
00:09:47.064 - 00:09:48.496, Speaker A: Yeah, perfect.
00:09:48.680 - 00:09:53.804, Speaker C: And inside the array thing you can. Inside the array thing. Yes. Say address.
00:09:55.704 - 00:10:00.120, Speaker A: Open in close parenthesis and say zero.
00:10:00.232 - 00:10:04.338, Speaker C: X zero or just zero. Perfect. Just zero is better.
00:10:04.466 - 00:10:07.258, Speaker A: Just zero. Oh, awesome.
00:10:07.386 - 00:10:13.450, Speaker C: Just say equal after yes, after yes, perfect.
00:10:13.602 - 00:10:19.746, Speaker A: Equal space ten ether.
00:10:19.850 - 00:10:20.854, Speaker C: Space ether.
00:10:22.594 - 00:10:24.654, Speaker A: Yes, perfect. Ten column.
00:10:26.594 - 00:10:36.650, Speaker C: So what we did in there, we just specified that address zero. Of course, this is not a realistic case because this will be like a board, but we're saying the address zero has that balance.
00:10:36.842 - 00:10:37.694, Speaker A: You understand?
00:10:38.034 - 00:10:51.654, Speaker C: Now let's create another balance to address one. So just copy that line, paste below and put 20 ether to address one. Imagine that we just use an ether because our token also has 18 decimals like ether.
00:10:52.634 - 00:10:55.802, Speaker B: Okay, so what are we now supposed to do?
00:10:55.898 - 00:11:14.546, Speaker C: Just put one instead of zero there because we're going to be converting. So just so you know, you know what we're doing with this line, right? Address zero. Right. And address one. We are converting zero to an ethereum address and converting one. So it's just going to give us some random address, but it's good to test, you know.
00:11:14.690 - 00:11:18.194, Speaker A: So now I want to introduce something.
00:11:18.274 - 00:11:22.174, Speaker C: Change on line eight to instead of ten meter, 20 ether.
00:11:26.154 - 00:11:27.626, Speaker B: What should I do?
00:11:27.730 - 00:11:30.174, Speaker C: Instead of ten ether? There, put 20.
00:11:33.324 - 00:11:33.852, Speaker A: Awesome.
00:11:33.908 - 00:11:43.264, Speaker C: Now we're going to create a function. So go after the constructor. Yes. And create a function called getbalance.
00:11:46.204 - 00:11:48.332, Speaker A: Perfect. Now we're going to pass.
00:11:48.388 - 00:12:00.912, Speaker C: You're going to pass a uint 256 number. Perfect. You don't need the prefix because this is not. Yeah, just say number.
00:12:01.048 - 00:12:01.744, Speaker A: Yes.
00:12:01.904 - 00:12:02.568, Speaker C: And then you can.
00:12:02.616 - 00:12:06.360, Speaker B: But when is mandatory to use the prefix?
00:12:06.472 - 00:12:12.112, Speaker C: When you have a variable with the same name, usually you're going to be using the prefix, you know, but it's a convention.
00:12:12.168 - 00:12:14.288, Speaker B: It's a convention in slavery.
00:12:14.456 - 00:12:14.760, Speaker A: Yeah.
00:12:14.792 - 00:12:24.420, Speaker C: In programming also you have this convention for private information. You usually do. So if balances were private, balances would have the underlying. The beginning of it.
00:12:24.452 - 00:12:26.292, Speaker A: Okay. Yes.
00:12:26.388 - 00:12:38.904, Speaker B: Because I was reading cryptos, I was doing the crypto zombies and they were saying that we use prefix when the contract is private.
00:12:39.564 - 00:12:46.092, Speaker C: Yeah, yeah. Not, yeah, yeah. For private stuff, usually you're gonna do the underlying front of it.
00:12:46.108 - 00:12:46.784, Speaker A: Okay.
00:12:47.164 - 00:12:48.820, Speaker B: So at this game, we don't need the privacy.
00:12:48.852 - 00:12:56.458, Speaker C: Yeah, we don't really need. So because this is a. Because you're just going to be reading from the blockchain.
00:12:56.546 - 00:13:00.138, Speaker A: This can be a view function.
00:13:00.186 - 00:13:04.334, Speaker C: So after. So you can do get balance and public view.
00:13:05.274 - 00:13:05.914, Speaker A: Okay.
00:13:05.994 - 00:13:07.538, Speaker B: Public, actually.
00:13:07.666 - 00:13:08.402, Speaker C: Sternal view.
00:13:08.458 - 00:13:11.466, Speaker A: Sorry, actually what?
00:13:11.570 - 00:13:12.818, Speaker C: Danoville.
00:13:12.986 - 00:13:13.894, Speaker A: Not public.
00:13:17.134 - 00:13:19.594, Speaker C: You're the difference between public and external.
00:13:21.654 - 00:13:26.354, Speaker B: So the external. External means that.
00:13:28.894 - 00:13:31.914, Speaker A: It can be used by contracts.
00:13:32.654 - 00:13:35.062, Speaker B: This contract can use by the other contract.
00:13:35.158 - 00:13:35.766, Speaker C: Yes.
00:13:35.910 - 00:13:43.142, Speaker B: And the public is public. Only you can view. You can, you can't use on your.
00:13:43.238 - 00:13:43.742, Speaker C: No, no.
00:13:43.798 - 00:13:44.416, Speaker B: Am I right?
00:13:44.510 - 00:13:57.172, Speaker C: No. So with public, you can read it from the contract and in other contracts. Okay. From a contract and from other contracts with Stern. Or you can only read it from another contracts. Okay.
00:13:57.228 - 00:14:00.716, Speaker A: So, okay, so the only way to.
00:14:00.740 - 00:14:04.308, Speaker C: Call would be to use the DS for public function, these, whatever.
00:14:04.356 - 00:14:06.156, Speaker A: And then it works because you put.
00:14:06.180 - 00:14:10.868, Speaker C: The context that way. Start no view. And we're going to return a U.
00:14:10.916 - 00:14:11.624, Speaker A: Winged.
00:14:13.814 - 00:14:16.594, Speaker C: 256, which is the balance, right?
00:14:17.614 - 00:14:18.158, Speaker B: Yes.
00:14:18.246 - 00:14:22.794, Speaker C: So closing brackets. And now what we're going to do is we're going to simply return.
00:14:25.934 - 00:14:29.674, Speaker A: Balances address.
00:14:30.894 - 00:14:36.714, Speaker C: Same thing you did. Yeah. I'll put the address. Now instead of putting a fixed number, we're going to put number.
00:14:39.194 - 00:14:40.058, Speaker A: And this is it.
00:14:40.106 - 00:14:44.934, Speaker C: Just, just put a semicolon. So let's take a look at this code and see if you can understand what it's doing.
00:14:49.874 - 00:14:54.538, Speaker A: Okay. This comes from this so we're going.
00:14:54.546 - 00:14:59.254, Speaker C: To pass zero and we're going to get ten and we're going to pass one and we're going to get 20, right?
00:15:00.114 - 00:15:02.170, Speaker A: Yes. Yeah. Awesome.
00:15:02.202 - 00:15:11.284, Speaker C: So let's test it. So let's try to compile it. Click on auto. Compile there.
00:15:13.824 - 00:15:14.224, Speaker A: Yes.
00:15:14.264 - 00:15:23.124, Speaker C: Click on that and let's see what is there. Or line six. This is because you need the parenthesis after constructor. Constructors open and close parenthesis.
00:15:24.344 - 00:15:24.896, Speaker A: Yes.
00:15:25.000 - 00:15:28.280, Speaker C: Right in there. Yes. Perfect. What is the other one?
00:15:28.312 - 00:15:31.364, Speaker B: Yes. This SPDX.
00:15:35.414 - 00:15:50.750, Speaker C: You cannot convert in address to a number. There's no problem. We're just gonna do, we're just gonna just remove the address thing from there. Just change from number to address.
00:15:50.862 - 00:15:51.838, Speaker A: So let's do this.
00:15:51.966 - 00:16:00.274, Speaker C: Change from number, line ten. Change from number to address. Not in there. Not in there.
00:16:00.644 - 00:16:05.476, Speaker A: Yeah. Actually the type. Okay. The type is address that if you.
00:16:05.500 - 00:16:07.664, Speaker C: Entered, you win 256.
00:16:08.524 - 00:16:09.476, Speaker A: Perfect.
00:16:09.660 - 00:16:24.796, Speaker C: And, and then you can remove online eleven, you can remove the conversion that you're doing because it's already an address. So there's no need to convert to address. When you're doing address number, you're converting a number to address. There's no need to do that. It's already an address.
00:16:24.860 - 00:16:26.968, Speaker A: Okay, awesome.
00:16:27.056 - 00:16:38.624, Speaker C: This should work. Let's, let's go over the deploy. Let's deploy it over the virtual machine. The last tab. Last tab.
00:16:38.784 - 00:16:41.008, Speaker A: Last one. No. Yes.
00:16:41.056 - 00:16:43.804, Speaker C: This one. Just click on deploy.
00:16:46.064 - 00:16:46.840, Speaker A: Perfect.
00:16:46.912 - 00:16:54.922, Speaker C: Go down. Okay, so we have a function now where we can read the balances from users.
00:16:55.058 - 00:16:55.546, Speaker A: Let's go.
00:16:55.570 - 00:17:03.194, Speaker C: I want you to open another tab. Not in there in the browser. In the browser itself.
00:17:03.354 - 00:17:04.814, Speaker B: In the browser, yes.
00:17:06.194 - 00:17:09.614, Speaker C: That was Google for web3 type converter.
00:17:16.274 - 00:17:17.186, Speaker A: Perfect. Okay.
00:17:17.250 - 00:17:18.494, Speaker C: Click on the first one.
00:17:21.134 - 00:17:21.910, Speaker A: Awesome.
00:17:22.062 - 00:17:32.314, Speaker C: Now put zero on the type that you want to convert the first thing and convert it to address you. When I had the conversions in there, I think you can put by sterling.
00:17:35.814 - 00:17:36.798, Speaker A: Apply padding.
00:17:36.886 - 00:17:38.274, Speaker C: Click on apply padding.
00:17:40.214 - 00:17:42.862, Speaker A: Now copy. It's not 40, right?
00:17:42.918 - 00:17:55.514, Speaker C: This is going to break because this is not an address. Can you go in search Ethereum, foreign address. So ethereal address. Just go on Google and search Ethereum address zero.
00:18:03.574 - 00:18:04.174, Speaker A: Copy that.
00:18:04.214 - 00:18:15.256, Speaker C: You see zero address on the first? Yeah, just copy this. Awesome. Okay, now let's go to remix and let's try to get the balance from zero and see what you get. The ten back.
00:18:15.360 - 00:18:18.080, Speaker A: Go down. Not in there.
00:18:18.112 - 00:18:19.364, Speaker C: No. Ctrl Z.
00:18:19.864 - 00:18:20.728, Speaker A: Go down.
00:18:20.856 - 00:18:21.496, Speaker C: And this.
00:18:21.600 - 00:18:24.884, Speaker A: Go on the, go to the left.
00:18:27.024 - 00:18:28.044, Speaker C: Go down.
00:18:28.384 - 00:18:28.760, Speaker A: Yes.
00:18:28.792 - 00:18:30.324, Speaker C: And to go on the get balance.
00:18:31.864 - 00:18:32.384, Speaker A: Yes.
00:18:32.464 - 00:18:38.364, Speaker C: No, don't click paste the number. Now now click on get balance.
00:18:40.184 - 00:18:43.284, Speaker A: You see, you, yes.
00:18:44.144 - 00:19:06.272, Speaker C: You were able to read the, how much, what was the balance of tokens from address zero. Now change from zero x zero to zero x one. Just change the, no. Ctrl Z. Yes, just the zero after the x becomes one.
00:19:06.408 - 00:19:09.040, Speaker A: Just that, yes, yes.
00:19:09.112 - 00:19:22.324, Speaker C: Now try that balance. I think this is not the one. I think this is not one that you see the return is zero there. Yeah, yeah, because this is not one actually, I think one is with the last zero being one.
00:19:22.944 - 00:19:24.152, Speaker B: Let me search for it.
00:19:24.208 - 00:19:24.884, Speaker C: Yeah.
00:19:27.864 - 00:19:28.264, Speaker A: Yeah.
00:19:28.304 - 00:19:29.764, Speaker C: The last one being zero.
00:19:37.964 - 00:19:43.184, Speaker B: Okay, I don't see the one. I don't see.
00:19:44.004 - 00:19:44.784, Speaker A: Oh.
00:19:46.724 - 00:19:49.744, Speaker B: So now I think it should work.
00:19:50.324 - 00:19:51.420, Speaker A: Yeah, we see.
00:19:51.492 - 00:19:53.784, Speaker B: Okay, so now try to get the balance.
00:19:55.764 - 00:19:57.516, Speaker A: Click on, you see 20.
00:19:57.620 - 00:20:16.880, Speaker C: So what about what a mapping does? It just stores information for you in a way that you can query it based on something. And in this case, you're basing yourself on addresses, you know, like you define online four. So imagine you have a function. Now let's create a function to set a balance. So go on line twelve, do an.
00:20:16.912 - 00:20:27.676, Speaker A: Enter, create function, set balance. Okay, now let's pass the address.
00:20:27.780 - 00:20:31.024, Speaker C: Right, because we need to pass the address. So let's say address.
00:20:31.884 - 00:20:39.884, Speaker A: Let's call it user, maybe user, maybe wallet.
00:20:39.924 - 00:20:41.664, Speaker C: Wallet is better. So let's say wallet.
00:20:43.684 - 00:20:45.332, Speaker A: Now, comma, what.
00:20:45.348 - 00:20:47.264, Speaker C: Is the second parameter we need to pass?
00:20:48.964 - 00:20:49.708, Speaker B: Number.
00:20:49.876 - 00:20:54.944, Speaker C: Yes, the amount of balance of the user. So we're going to assume in 256.
00:20:55.884 - 00:20:56.704, Speaker A: Amount.
00:21:01.244 - 00:21:11.204, Speaker C: Remove the number. Now remove the number. Remove this. Just, yes, just do, comma, you win. 56 and amount.
00:21:11.324 - 00:21:11.820, Speaker B: Number.
00:21:11.932 - 00:21:12.420, Speaker C: Amount.
00:21:12.492 - 00:21:12.948, Speaker A: Amount.
00:21:13.036 - 00:21:14.884, Speaker C: Yeah. What you're gonna see more.
00:21:14.924 - 00:21:16.860, Speaker B: Okay, so what we are doing now.
00:21:17.052 - 00:21:20.824, Speaker C: What we're gonna do is we're gonna set a value in the mapping, you understand?
00:21:21.664 - 00:21:26.568, Speaker A: So we're gonna take. Yeah, yeah, yeah, go for that.
00:21:26.616 - 00:21:32.752, Speaker C: Let's do, let's do it. So go after the, go after the function. Yes, the space.
00:21:32.808 - 00:21:34.604, Speaker A: Yes, external.
00:21:38.144 - 00:21:40.164, Speaker C: Put the functions as external.
00:21:41.704 - 00:21:42.484, Speaker A: Yes.
00:21:45.064 - 00:21:46.232, Speaker B: External.
00:21:46.408 - 00:22:10.318, Speaker C: And I want you to, we're gonna return or you're gonna return. Yeah, we're going to return a Boolean because if the value is already set, we're going to return false. So go online 14. And first thing we're going to do is we're going to check to see.
00:22:10.406 - 00:22:13.998, Speaker A: If there is already a balance in this address.
00:22:14.086 - 00:22:20.734, Speaker C: So if balances where in wallet.
00:22:22.994 - 00:22:24.134, Speaker B: It balances.
00:22:25.634 - 00:22:28.054, Speaker C: Now the array thing, remember?
00:22:29.594 - 00:22:30.374, Speaker A: Yeah.
00:22:31.234 - 00:22:38.970, Speaker C: What we're gonna, what we should put in there inside the array thing. If we try to read the balance for a specific wallet, what we should.
00:22:39.002 - 00:22:41.658, Speaker A: Put in there amount?
00:22:41.786 - 00:22:44.186, Speaker C: No, the wallet. Right. I mean, we're trying to search for.
00:22:44.210 - 00:22:45.394, Speaker B: What, by the other wallet?
00:22:45.474 - 00:22:51.094, Speaker C: Yes. So we're looking in the balance mapping to that wallet. So put wallet in there.
00:22:53.514 - 00:22:56.814, Speaker A: So if, if this wallet is different.
00:22:57.554 - 00:23:09.658, Speaker C: Than zero, so you can do different and you can do zero. I don't know if you can do zero like you should do zero like that, I think. Yes, like that works. So what that means is there's already a value in that wallet.
00:23:09.706 - 00:23:16.880, Speaker A: Okay, so we're gonna do the brackets of the if. Yes.
00:23:16.912 - 00:23:25.364, Speaker C: And we're going to return false in that case. And if not, go down on line 16.
00:23:27.744 - 00:23:32.984, Speaker A: Go on, enter. Okay. Else.
00:23:33.144 - 00:23:35.032, Speaker C: No, no, no else. No, else.
00:23:35.168 - 00:23:36.044, Speaker A: No, else.
00:23:36.984 - 00:23:39.084, Speaker C: Just do an enter after Dave.
00:23:41.024 - 00:23:41.764, Speaker A: Enter.
00:23:42.144 - 00:23:42.738, Speaker C: Enter?
00:23:42.856 - 00:23:43.942, Speaker A: Yes. Enter.
00:23:43.998 - 00:23:44.966, Speaker C: Press enter. Yes.
00:23:45.030 - 00:23:45.622, Speaker A: Perfect.
00:23:45.758 - 00:23:56.194, Speaker C: Now you're going to set the balance. How do you set the balance of the wallet? Take a look at line seven.
00:23:58.774 - 00:24:09.654, Speaker B: Okay, so in our condition, if the bonds is different than zero, return false else on those.
00:24:09.814 - 00:24:21.004, Speaker C: Now we just know. We just setting the, we need to set the value of wallet inside the mapping balance. How do we do that? Let's look at line seven.
00:24:21.744 - 00:24:25.044, Speaker A: Yes. So you do balances.
00:24:27.864 - 00:24:31.164, Speaker C: Okay, the array thing. What we're going to set.
00:24:33.624 - 00:24:34.296, Speaker B: Wallet.
00:24:34.400 - 00:24:35.088, Speaker C: Yes.
00:24:35.256 - 00:24:38.974, Speaker A: Wallet and Z cotton.
00:24:45.344 - 00:24:46.604, Speaker C: Look at line 13.
00:24:51.224 - 00:24:51.992, Speaker A: Amount.
00:24:52.128 - 00:24:56.872, Speaker C: Yes, bro. Right. You're setting the amount of the wallet. So that's first is amount.
00:24:57.048 - 00:25:02.896, Speaker A: Okay. So yes. Put the same column and right, right below it.
00:25:02.920 - 00:25:08.144, Speaker C: You're gonna do what? Return true, right?
00:25:09.404 - 00:25:13.460, Speaker B: Yes. If in this case, we need to.
00:25:13.532 - 00:25:21.744, Speaker C: Let's return true. Now, see, look at the function and see if you can understand it and how it's interacting with the mapping.
00:25:25.964 - 00:25:52.544, Speaker B: Okay, so we have a wallet, we have amount. We return Boolean. So we have condition which we take our balances from the wallet is equal to address. If it's different than zero, we need to return the return false because it's else, right?
00:25:53.124 - 00:25:58.864, Speaker C: Because it's, because it's already set. There is already a balance in there. In this case, we don't, we don't set.
00:26:01.124 - 00:26:01.904, Speaker A: Yes.
00:26:02.284 - 00:26:04.064, Speaker B: Uh, if there.
00:26:07.044 - 00:26:12.004, Speaker A: These balances is, there's any amount. No.
00:26:12.044 - 00:26:22.624, Speaker C: So if there is no balance, so if it didn't get into the leaf, there is no balance in that wallet. If, if balance is zero, then we set the balance to be equals the amount, right?
00:26:24.104 - 00:26:24.720, Speaker A: Yes.
00:26:24.832 - 00:26:26.576, Speaker C: Now, how do we make this function.
00:26:26.720 - 00:26:31.004, Speaker A: More safe or safer? More safe?
00:26:31.624 - 00:26:39.240, Speaker C: How do I, how do I make it? What are we not checking? What are we not checking?
00:26:39.312 - 00:26:41.924, Speaker A: Like, you know.
00:26:45.384 - 00:26:47.444, Speaker B: Let me think about it. So.
00:26:50.004 - 00:26:53.184, Speaker C: Like, should you be able to set a balance that is zero.
00:26:58.044 - 00:27:00.748, Speaker B: Should I be able to set a balance that is zero?
00:27:00.876 - 00:27:20.922, Speaker C: Yeah. Like, imagine that you're trying to set the user balance. What I'm trying. I mean, this is not a really realistic case, because you do want to set the user balance as zero, right. When he does some sort of withdrawal. But what I'm trying to say is you can make this function stronger by validating the amount. You making sure the amount is not zero or it's not some weird number.
00:27:20.922 - 00:27:21.774, Speaker C: You understand?
00:27:22.994 - 00:27:23.814, Speaker B: Yes.
00:27:24.114 - 00:27:26.454, Speaker C: So on line 14.
00:27:26.794 - 00:27:27.370, Speaker A: Okay.
00:27:27.442 - 00:27:27.954, Speaker C: Go online.
00:27:28.034 - 00:27:30.974, Speaker A: 14 after the zero.
00:27:33.634 - 00:27:47.584, Speaker C: Put a logical end in there. So two e signs. You know that company sign that e and sign. Yes. Two of those.
00:27:50.444 - 00:27:51.324, Speaker A: Okay.
00:27:51.484 - 00:27:52.036, Speaker C: Yes.
00:27:52.140 - 00:27:52.452, Speaker A: Space.
00:27:52.508 - 00:27:53.076, Speaker B: Okay.
00:27:53.180 - 00:27:54.224, Speaker C: And amount.
00:27:57.204 - 00:28:05.316, Speaker A: Different. Zero, actually, no, no.
00:28:05.380 - 00:28:06.484, Speaker C: If amount is equal.
00:28:06.524 - 00:28:06.772, Speaker A: Zero.
00:28:06.828 - 00:28:17.364, Speaker C: Sorry. Not different, but equal. So equal in solidity. Choose two equals, right? We're comparing, right?
00:28:18.384 - 00:28:19.024, Speaker B: Yeah.
00:28:19.144 - 00:28:28.720, Speaker C: So, yeah. So put two equal signs in there. Amount equals zero. Should be amount equal equals zero. Right?
00:28:28.872 - 00:28:31.920, Speaker A: You're comparing, not setting.
00:28:31.952 - 00:28:40.454, Speaker C: Okay, awesome. So let's take a look. Let's read this for this line. So if the balance is not zero in the wallet, or if the amount.
00:28:41.754 - 00:28:42.354, Speaker A: Actually.
00:28:42.474 - 00:28:45.574, Speaker C: Sorry. I say choose, and there should be war.
00:28:45.914 - 00:28:46.618, Speaker A: Should be or.
00:28:46.666 - 00:28:47.974, Speaker C: So it's two pipelines.
00:28:52.834 - 00:28:53.458, Speaker A: Actually.
00:28:53.586 - 00:28:57.674, Speaker C: Wait a second. If the amount is not zero, or.
00:28:57.714 - 00:29:00.466, Speaker A: The amount is equal zero, return.
00:29:00.530 - 00:29:00.970, Speaker C: False.
00:29:01.042 - 00:29:04.094, Speaker B: So this. We need to put pipelines.
00:29:04.704 - 00:29:05.128, Speaker A: Yeah.
00:29:05.176 - 00:29:10.564, Speaker C: So this is an r. Okay. The other one you had was ends and so.
00:29:19.464 - 00:29:19.968, Speaker A: Or.
00:29:20.056 - 00:29:23.544, Speaker C: Yes. I think we can also type that. That works. No, no.
00:29:23.584 - 00:29:25.864, Speaker A: Doesn't work. I don't think so.
00:29:25.904 - 00:29:29.044, Speaker B: I think it's the pipeline. The two pipelines.
00:29:29.424 - 00:29:36.064, Speaker C: So what we're checking is we're validating both the wallet for not being zero and the amount. If the amount is zero, I'll also return.
00:29:36.104 - 00:29:38.072, Speaker A: Turn. False. Okay.
00:29:38.248 - 00:29:51.084, Speaker C: This makes the function a little bit safer. You can also. Because now we're fiddling with address zero. We're not really validating that. But you could also validate, like, you know, let's. You can also not use address zero. You know.
00:29:52.024 - 00:29:54.604, Speaker A: You know, this is actually a.
00:29:55.464 - 00:30:24.204, Speaker C: So you're doing an audit, right? You're looking at code every time you see an address in a function. Usually is good that is validated against zero. Okay. So just to. Just to show you how that would look like in the code, go before the if online 14 and do an enter. Now, before the if online 14 before that, do an enter in there.
00:30:24.324 - 00:30:29.754, Speaker A: Go on the line above, and do a requirement.
00:30:33.444 - 00:30:34.784, Speaker C: Input address.
00:30:38.124 - 00:30:39.116, Speaker A: Sorry, wallet.
00:30:39.180 - 00:30:42.464, Speaker C: Sorry. Not address, but wallets. Fire wallet.
00:30:43.204 - 00:30:48.844, Speaker A: Different. Then just one in there.
00:30:48.884 - 00:30:49.464, Speaker C: Right.
00:30:50.124 - 00:30:53.264, Speaker B: Yeah. The one equals address.
00:30:55.554 - 00:30:56.294, Speaker A: Zero.
00:30:59.034 - 00:31:01.762, Speaker B: Address zero. Zero.
00:31:01.898 - 00:31:02.218, Speaker A: Yes.
00:31:02.266 - 00:31:41.524, Speaker C: Just put a semicolon in the end. And so this is a validation that you should do for most of the smart contracts, you know, because what we're doing is we validating that, you know, you cannot. Why would you set balances for address zero? You know, that works for burnable tokens, these things. But I'm just trying to explain you here, and I hope you kind of understand it, that this will be a stronger function because now we're validating against zero for the address, we're validating against zero for the amount, and we're making sure that the wallet has no balance before. Does that make sense? That clarified a little bit of the mapping things for you.
00:31:42.304 - 00:31:43.456, Speaker A: Yes, yes.
00:31:43.640 - 00:31:45.364, Speaker B: I'm starting to understand.
00:31:48.984 - 00:32:21.440, Speaker C: Let's go back to the CTF. So, and now that we have that situation, you kind of understand what's being stored on line 28. But look at line 29, we have a mapping of a mapping dude. So let's try to fiddle with that case, too. Go back to your contract and let's implement a mapping that is a mapping of a mapping. And let's call it a guild.
00:32:21.552 - 00:32:24.592, Speaker A: So it's going to be like, going.
00:32:24.608 - 00:32:27.720, Speaker C: To be like a. Or bare contract.
00:32:27.872 - 00:32:28.456, Speaker A: No, no, no.
00:32:28.480 - 00:32:30.804, Speaker C: This contract, let's go online, five.
00:32:35.104 - 00:32:35.416, Speaker A: I.
00:32:35.440 - 00:32:41.804, Speaker C: Want you to create a new mapping and let's put it in address.
00:32:45.004 - 00:32:45.364, Speaker A: And.
00:32:45.404 - 00:32:48.784, Speaker C: Let'S put it into another mapping. So you're going to say mapping again.
00:32:50.124 - 00:32:50.668, Speaker A: Yes.
00:32:50.756 - 00:33:01.464, Speaker C: And you're going to say address to you in 256. And let's call this mapping public governance.
00:33:05.004 - 00:33:07.704, Speaker B: The internal mapping or the.
00:33:08.564 - 00:33:09.364, Speaker C: This one.
00:33:09.484 - 00:33:22.318, Speaker A: Let's call it public governance. No, no, it's after. Yes, public governance. Perfect.
00:33:22.446 - 00:33:23.950, Speaker C: Put a semicolon there off.
00:33:24.022 - 00:33:24.566, Speaker A: Perfect.
00:33:24.670 - 00:33:32.566, Speaker C: So, bro, look, what I'm trying to do with this mapping is creating a sort of governance scheme. So think like this.
00:33:32.710 - 00:33:35.958, Speaker A: There's your address and all the people.
00:33:36.006 - 00:33:42.354, Speaker C: They are delegating their tokens to you. So by your address, I load the mapping that has the address of all.
00:33:42.394 - 00:33:45.226, Speaker A: The people and their amount of tokens.
00:33:45.250 - 00:34:00.338, Speaker C: You understand? Think governance, think delegation. Think governance, think governance. Think that I have these people that they can receive your voting power and vote for you.
00:34:00.466 - 00:34:00.834, Speaker A: Okay.
00:34:00.874 - 00:34:04.094, Speaker C: Have you seen these delegation schemes already? These in crypto?
00:34:05.414 - 00:34:06.134, Speaker B: No.
00:34:06.294 - 00:34:09.286, Speaker C: So in crypto there's something called delegation. Imagine there's a protocol.
00:34:09.390 - 00:34:10.154, Speaker A: Okay.
00:34:12.254 - 00:34:16.422, Speaker C: But I don't want to make every user vote because that's inefficient.
00:34:16.558 - 00:34:16.950, Speaker A: Okay.
00:34:16.982 - 00:35:18.424, Speaker C: It's better for me to have a certain users that concentrate the amount of vote of each user. And then I have a smaller surface of decision and maybe lead me to a better decision scheme in the ecosystem, you understand? So imagine any kind of committee, you know, where you have the main persons and everybody that voted those persons, so what they represent. So that was what we have with governance. We have your address and everybody that believes in you and how much tokens they are giving you as voting power. Okay, so now what we do is we're going to go online eight, we're going to do a new line below eight and we're going to create a pre delegation, like, we're going to create a delegation scheme for zero and one, like we did for the, like we did, you know, for the balances.
00:35:18.504 - 00:35:19.144, Speaker B: Okay.
00:35:19.264 - 00:35:25.124, Speaker C: Okay, so how governance address zero, right?
00:35:26.904 - 00:35:27.776, Speaker B: Yes.
00:35:27.960 - 00:35:35.364, Speaker C: So governors at address zero. We need to save another mapping. So we're going to put another array thing in there.
00:35:38.624 - 00:35:40.024, Speaker B: What? What should I put?
00:35:40.104 - 00:35:41.604, Speaker C: Another array thing.
00:35:42.624 - 00:35:43.552, Speaker A: Okay.
00:35:43.688 - 00:36:02.904, Speaker C: Yes. And in there we're going to put alligator this bot. So let's say that tree and four delegated their votes to address zero. So you can put address three, no tree. I mean the number. Right. The conversion.
00:36:02.904 - 00:36:15.904, Speaker C: Yes. Awesome. Equals not in there. Right after right? Yes. Equals, let's say three ether.
00:36:19.254 - 00:36:22.206, Speaker A: Three ether, yes.
00:36:22.270 - 00:36:36.086, Speaker C: Perfect semicolon. Let's look at this line. Let's try to understand it. So what we're saying is that address one, three, I want you to copy.
00:36:36.110 - 00:36:39.034, Speaker A: That line and put it in the line below.
00:36:39.814 - 00:36:47.494, Speaker C: Change from three to four and on both places. So address four, it will be four and address in four liter two.
00:36:51.114 - 00:36:54.138, Speaker B: So here I need to replace with four.
00:36:54.186 - 00:36:57.746, Speaker C: That's perfect. And just replace the ether to the amount of ether with five instead of.
00:36:57.770 - 00:37:00.010, Speaker A: Four because the numbers are not related.
00:37:00.082 - 00:37:01.490, Speaker C: So just. There's no relation.
00:37:01.642 - 00:37:02.010, Speaker A: Awesome.
00:37:02.042 - 00:37:24.364, Speaker C: So what we're seeing that is that user three and user four, they delegated around nine tokens. Eight tokens, sorry, eight tokens to the address zero. Okay, so when you see a mapping of a map is just a way of relating one index, one index with several index. You understand?
00:37:26.184 - 00:37:27.496, Speaker A: Yes or no?
00:37:27.520 - 00:37:29.404, Speaker C: You don't understand. Be honest, bro.
00:37:32.824 - 00:37:35.952, Speaker B: So tell me what you don't understand.
00:37:36.048 - 00:37:38.642, Speaker C: You can't even say everything. I don't understand nothing.
00:37:38.738 - 00:37:39.374, Speaker A: This.
00:37:39.754 - 00:37:45.614, Speaker B: Okay, can you repeat about this governance.
00:37:46.354 - 00:37:54.894, Speaker C: So I don't want you to think on token governance. Okay, I want you to think that. Let's change the word governance to borrow.
00:37:58.874 - 00:38:04.094, Speaker A: So go line five and replace governance with borrow.
00:38:07.444 - 00:38:27.436, Speaker C: Let's think that this is now a borrow amount. So a certain amount of money that someone borrowed to you. Okay, so go on line nine and ten and replace governance with borrow. So all the information that we have in there, line nine and ten, is.
00:38:27.460 - 00:38:30.534, Speaker A: That the rest, three and four, they.
00:38:30.574 - 00:38:33.198, Speaker C: Borrowed eight ethereum, treasure, zero.
00:38:33.326 - 00:38:39.518, Speaker B: You understand they're all three ethereum and the other four borrows five.
00:38:39.646 - 00:39:02.228, Speaker C: Yes, yes, and. Yeah, yeah. So I mean, this is just a way of storing information in a way that you can. It's not about borrowing, it's not about governance. But we're talking about the map itself. It's just a way of correlating information. So if you have a mapping of misantropic friends, and this mapping would be my address, they will be your address.
00:39:02.228 - 00:39:09.944, Speaker C: And true for a boolean, you know. So you understand how the mapping that makes it clear? No.
00:39:13.564 - 00:39:14.504, Speaker B: Not really.
00:39:15.724 - 00:39:30.524, Speaker C: Okay, let's try this. I want you to implement, I want you to erase line seven and eight.
00:39:32.144 - 00:39:33.004, Speaker A: Okay.
00:39:33.344 - 00:39:44.404, Speaker C: Also I want you to erase line four. I want you to erase the get and set balance functions.
00:39:49.804 - 00:39:58.304, Speaker A: Get in, set balance. You can remove this one. Remove this one. Perfect.
00:39:58.684 - 00:40:12.624, Speaker C: Let's change from, let's change from z token to me. Think. Let's call a Zalian. Okay, Azarian.
00:40:15.004 - 00:40:19.580, Speaker A: Azarian, yes. Okay.
00:40:19.652 - 00:40:43.036, Speaker C: Let's say that this is a contract that lets you know how many, how much money you have on each one of your you have related. Now let me think of something that is easier to see. Let's call this contract a zarian friendlist.
00:40:43.140 - 00:40:53.464, Speaker A: Okay. Put friends. Perfect. Awesome. Okay, now I want you to replace borrow with friends.
00:40:58.204 - 00:41:13.694, Speaker C: Don't forget line five. I want you to remove line. I want you to remove the constructor.
00:41:18.074 - 00:41:18.530, Speaker B: This.
00:41:18.602 - 00:41:19.654, Speaker C: Yeah, the whole thing.
00:41:24.114 - 00:41:27.894, Speaker A: Remove this. Friends equals to friends.
00:41:28.914 - 00:41:48.294, Speaker C: You can remove lines six and seven. Now let's create a function called add friend. And instead of a zarian friend, let's just call it friendlies.
00:41:50.914 - 00:41:51.602, Speaker B: Okay.
00:41:51.698 - 00:41:56.214, Speaker C: Online tree, you can change from azarian friendliest to just friendliest.
00:41:59.274 - 00:42:00.054, Speaker A: Perfect.
00:42:00.834 - 00:42:13.538, Speaker C: And this function, add friend. What kind of parameters you think? One more thing. Online five, change from, you reach 156 to boolean. So we know if they're friends or not. Go on.
00:42:13.586 - 00:42:17.778, Speaker A: Yes, perfect. Perfect.
00:42:17.906 - 00:42:22.334, Speaker C: So what parameters do you think we should put in the add friend function?
00:42:25.394 - 00:42:26.774, Speaker B: I think about it.
00:42:30.114 - 00:42:35.364, Speaker C: Okay, how does a friendship relation works?
00:42:36.064 - 00:42:37.764, Speaker A: We have two parties, right?
00:42:39.104 - 00:42:41.764, Speaker B: You have to met first.
00:42:42.224 - 00:42:47.964, Speaker C: You have two parties. Right? So if you have two parties, you're gonna be pretty much passing two addresses, right.
00:42:48.984 - 00:42:58.644, Speaker A: So let's go. Okay. Address.
00:42:59.424 - 00:43:01.312, Speaker B: Okay, you hint.
00:43:01.488 - 00:43:01.968, Speaker A: Address.
00:43:02.056 - 00:43:03.240, Speaker C: Address. Can you hear me?
00:43:03.272 - 00:43:04.136, Speaker A: Address. Yes.
00:43:04.240 - 00:43:04.884, Speaker B: Yes.
00:43:05.384 - 00:43:06.884, Speaker C: And then you can say space.
00:43:08.864 - 00:43:09.336, Speaker A: Yes.
00:43:09.400 - 00:43:12.524, Speaker C: Let's call it a.
00:43:15.904 - 00:43:16.640, Speaker A: I'm just thinking.
00:43:16.672 - 00:43:22.244, Speaker C: About, you know, because we're gonna have to do this in a way that is easy to understand. Let's call it.
00:43:24.704 - 00:43:25.688, Speaker A: My friends.
00:43:25.776 - 00:43:29.264, Speaker C: Okay, my friends. My friend.
00:43:34.444 - 00:43:35.304, Speaker A: Awesome.
00:43:36.004 - 00:43:47.244, Speaker C: We don't even need to pass the other address because I'm going to make this function in a way that only the message sender is already picked, you know, automatically. So we can already add you to the message sender.
00:43:47.284 - 00:43:47.984, Speaker A: Okay.
00:43:48.404 - 00:43:54.824, Speaker C: So declare it as public sternal and actually sternal. And it's going to return a.
00:43:56.524 - 00:43:57.076, Speaker A: Boolean.
00:43:57.140 - 00:43:58.988, Speaker C: Just like the other one. So we can do a little bit.
00:43:58.996 - 00:44:03.264, Speaker A: Of if thing there. Okay.
00:44:03.764 - 00:44:04.188, Speaker B: Yes.
00:44:04.236 - 00:44:04.540, Speaker A: Boolean.
00:44:04.572 - 00:44:14.744, Speaker C: Yeah, yeah. Just now open and close brackets and. Okay, so think to me what this function does, what it's going to do.
00:44:26.424 - 00:44:33.208, Speaker B: I'm struggling. This friction should add friend.
00:44:33.376 - 00:44:33.768, Speaker C: Yeah.
00:44:33.816 - 00:44:34.200, Speaker A: To you.
00:44:34.232 - 00:44:34.804, Speaker B: Right.
00:44:35.384 - 00:44:37.464, Speaker C: I should add a friend to my address.
00:44:37.544 - 00:44:38.744, Speaker B: To my friend list.
00:44:38.784 - 00:45:04.724, Speaker C: Yeah, yeah. To my address, you know, so method sender is in play here, you know, so this mapping could be different. This mapping could be address true address. I'm just trying to show you how mappings inside mappings work with a boolean, so it's easy for you to understand that too. Okay, so let's do a require first hiquire that we're going to do is we're going to make sure that you're not already friends with someone.
00:45:05.304 - 00:45:09.768, Speaker A: So how do we do that? First we look at friends.
00:45:09.896 - 00:45:10.564, Speaker C: Right?
00:45:12.424 - 00:45:15.944, Speaker B: Okay. We are looking at friends.
00:45:16.064 - 00:45:17.484, Speaker A: Yes, friends.
00:45:17.894 - 00:45:19.154, Speaker C: So type friends.
00:45:22.774 - 00:45:24.254, Speaker B: Is different, maybe.
00:45:24.334 - 00:45:28.438, Speaker C: No, it's an array thing. Right. Isn't a mapping, isn't friends. A mapping?
00:45:28.606 - 00:45:36.074, Speaker A: Is a mapping. There's, you know, so what are we looking at there? Inside the mapping thing?
00:45:39.454 - 00:45:50.314, Speaker C: If inside the rack, inside the racing, what are we looking at? Which position of friends are we looking at? Inside the ray thing. Go inside the ray thing?
00:45:52.934 - 00:45:53.630, Speaker A: Yes.
00:45:53.782 - 00:45:59.314, Speaker C: What are we looking at? What are we looking for? If I'm looking to the person that is sending a transaction, what I'm looking for.
00:46:01.534 - 00:46:05.074, Speaker A: Address method, sender. Right.
00:46:06.534 - 00:46:07.614, Speaker B: Message dot sender.
00:46:07.694 - 00:46:08.354, Speaker C: Yeah.
00:46:09.454 - 00:46:15.426, Speaker A: So that means type message dot sender.
00:46:15.530 - 00:46:19.618, Speaker C: You know, that means, you know that is no, right?
00:46:19.706 - 00:46:20.242, Speaker B: Barely.
00:46:20.338 - 00:46:21.106, Speaker A: No, no.
00:46:21.250 - 00:46:25.042, Speaker C: Yeah. Bro, I thought you knew solidity. You don't know solidly. But that's okay. I'm. We're gonna teach you.
00:46:25.058 - 00:46:25.330, Speaker A: Okay.
00:46:25.362 - 00:46:26.254, Speaker C: There's no problem.
00:46:27.114 - 00:46:27.658, Speaker B: Yes.
00:46:27.746 - 00:46:31.134, Speaker C: So message, message sender is the person that is sending the transaction.
00:46:31.914 - 00:46:32.774, Speaker A: Okay.
00:46:34.514 - 00:46:37.194, Speaker B: I didn't hear it again.
00:46:37.274 - 00:46:45.814, Speaker C: Message sender is the wallet sending the transaction. So if that's your okay, it's gonna be you. If that's my wallet. It's going to be me. You understand?
00:46:46.474 - 00:46:48.334, Speaker A: Yes. Awesome.
00:46:49.234 - 00:46:51.094, Speaker C: Let's do another array thing.
00:46:53.074 - 00:46:53.738, Speaker A: Okay.
00:46:53.826 - 00:47:25.436, Speaker C: And now we're going to put the my friend parameter. Maybe you can replace friends with friends just so he's singular and it's easy for us to understand. There is not only one in there. Not too. Okay, so what we're looking at is inside this mapping of me and this address. Is it true or false? If it's true, so just the require, the way it is, just put the semicolon there at the end. The way it is already works because it's a boolean.
00:47:25.436 - 00:47:27.724, Speaker C: It's going to return true and it's going to match the require.
00:47:27.804 - 00:47:33.300, Speaker A: Okay, but so sorry, sorry.
00:47:33.332 - 00:47:59.344, Speaker C: Azarian should be the contrary position. So now we actually want to make sure that this is false. There's two ways, right? We can do my friend equals false after the array thing, or we can add this clamation before the friends. So I think disclamation is better. So go to write the f in France. Yes. And put an exclamation in there, which is a negation.
00:47:59.344 - 00:48:05.916, Speaker C: Put exclamation, you know, the exclamation mark? No, it's clamation, exclamation mark.
00:48:05.980 - 00:48:08.244, Speaker A: Like this one here.
00:48:08.284 - 00:48:09.704, Speaker C: I'm gonna send you on the chat.
00:48:11.284 - 00:48:12.224, Speaker B: Okay.
00:48:13.164 - 00:48:14.988, Speaker C: Oh, sorry, I sent the wrong one.
00:48:15.076 - 00:48:15.904, Speaker A: This one.
00:48:17.684 - 00:48:19.104, Speaker C: Not this one, but this one.
00:48:21.484 - 00:48:23.764, Speaker A: Yeah. Awesome.
00:48:23.804 - 00:48:25.104, Speaker C: So you know what that means?
00:48:28.844 - 00:48:29.584, Speaker B: No.
00:48:29.934 - 00:48:39.910, Speaker C: Yeah, it's false. So if you remove the exclamation, you compare it to true. And if you leave the exclamation, you compare it to false. You know, so this requires.
00:48:39.942 - 00:48:40.222, Speaker A: Yeah.
00:48:40.278 - 00:48:42.438, Speaker B: Oh, yeah, yeah, yeah, yeah. I forgot.
00:48:42.526 - 00:48:43.014, Speaker C: Okay.
00:48:43.094 - 00:48:43.358, Speaker A: Yeah.
00:48:43.406 - 00:48:47.062, Speaker B: So it checks. It if it's. It checks if it's false.
00:48:47.158 - 00:48:52.422, Speaker A: Yes. So now, now you can go to.
00:48:52.438 - 00:48:53.354, Speaker C: The line below.
00:48:57.554 - 00:48:58.530, Speaker A: Because there's no sense.
00:48:58.562 - 00:49:00.274, Speaker C: In adding a friend they're already having there.
00:49:00.314 - 00:49:00.894, Speaker A: Right.
00:49:01.434 - 00:49:14.746, Speaker C: And we simply want to simply add the friend. Now, you could also do another require here to say, oh, look, required that, my friend, is not address zero. So let's do that. For to make the function stronger, to.
00:49:14.770 - 00:49:18.066, Speaker A: Require, you can start the same.
00:49:18.090 - 00:49:18.850, Speaker C: You can do the same thing.
00:49:18.882 - 00:49:27.628, Speaker A: Exclamation, my friend. Sorry, bro. You can. No, no, no, no.
00:49:27.716 - 00:49:41.504, Speaker C: You can. You can erase everything into the exclamation thing. And just say, my friend, remove the exclamation true. Remove disclamation in there too.
00:49:42.364 - 00:49:43.504, Speaker B: Okay.
00:49:44.364 - 00:49:45.384, Speaker A: My friend.
00:49:47.164 - 00:49:50.304, Speaker C: Is equal, is different. Sorry.
00:49:52.774 - 00:50:01.994, Speaker A: Pin address zero. Perfect for the same column in the end.
00:50:03.134 - 00:50:21.318, Speaker C: So look at what you're doing. You first require that there's no relationship before online. Eight. And on line nine, you require that the friend could not be zero. Why would I be friends with zero? You understand? Always validate address for zero. And there's an error. What is the error? That solidity is complaining on line seven.
00:50:21.318 - 00:50:22.686, Speaker C: Can you put the mouse over the.
00:50:22.710 - 00:50:24.394, Speaker A: Red thing.
00:50:30.414 - 00:50:33.030, Speaker C: Is returns, not return, right?
00:50:33.182 - 00:50:39.262, Speaker A: Yeah, returns perfect, bro.
00:50:39.398 - 00:50:50.794, Speaker C: Now what we're going to do is we're going to go add a new line below the require and we're going to set the value of this friendship to true. So how do we do that? We start with friends.
00:50:55.814 - 00:50:57.582, Speaker A: Own, open the.
00:50:57.598 - 00:51:06.918, Speaker C: Array thing, message dot sender, which is me, the person sending the transaction. My wallet.
00:51:07.006 - 00:51:09.718, Speaker A: Okay. Awesome. Okay.
00:51:09.806 - 00:51:11.834, Speaker C: And I'll put another array thing.
00:51:14.134 - 00:51:15.094, Speaker A: My friend.
00:51:15.254 - 00:51:20.478, Speaker C: Right. The address of my friend awesome is equal true.
00:51:20.606 - 00:51:25.622, Speaker B: My friend is k equal true in.
00:51:25.638 - 00:51:28.074, Speaker C: The end, not inside. Yes, equal true.
00:51:28.694 - 00:51:31.114, Speaker A: No, no, no, not in that. Not in that.
00:51:33.614 - 00:51:39.826, Speaker C: Yeah, yeah. Yes equals true. Okay, now read that line and tell me if it doesn't make sense for.
00:51:39.850 - 00:51:43.934, Speaker A: You and look at the mapping.
00:51:49.314 - 00:51:53.242, Speaker B: Okay, so here says that if I.
00:51:53.258 - 00:52:08.914, Speaker C: Have a question for you, which is why are you using a mapping of a mapping and not just like a mapping of an address to an address? Because I can have more than one friend, right? Not only one. Right?
00:52:11.054 - 00:52:11.834, Speaker A: Yes.
00:52:13.534 - 00:52:16.314, Speaker C: Now does the mapping makes a little bit more sense.
00:52:18.774 - 00:52:19.950, Speaker B: A little bit.
00:52:20.142 - 00:52:22.326, Speaker C: Let's deploy it and let's test it.
00:52:22.390 - 00:52:24.446, Speaker A: And let's see, you know, let's make.
00:52:24.470 - 00:52:30.914, Speaker C: A function to get friends. So just click on the trash bar. The trash thing in there.
00:52:31.994 - 00:52:32.394, Speaker B: Yes.
00:52:32.434 - 00:52:45.722, Speaker C: And create a new function in the code to get the friendship status. So go on line eleven when enter and create a new function called get friendship. Get friend. You're going to pass the address of.
00:52:45.738 - 00:52:49.658, Speaker A: The friend again and you're going to return a bool.
00:52:49.706 - 00:52:51.934, Speaker C: Same thing, external returns bool.
00:52:57.254 - 00:53:03.894, Speaker A: Perfect. Now all we're gonna do is return friends my wallet.
00:53:03.934 - 00:53:11.434, Speaker C: How do I say my wallet? Friends message sender.
00:53:13.614 - 00:53:15.382, Speaker A: No. Yes.
00:53:15.478 - 00:53:19.774, Speaker C: Mr. Sender in my friend too.
00:53:19.814 - 00:53:19.990, Speaker A: Right?
00:53:20.022 - 00:53:39.070, Speaker C: Because I need to see that specific relationship. So I need to check that position, right. So remove the same column. Another my friend. So now we're going to, we're going to see if the relationship is true or false. So let's put a semicolon in the.
00:53:39.102 - 00:53:48.606, Speaker A: End, let's deploy this contract. Go down. Click on the thing.
00:53:48.670 - 00:53:55.074, Speaker C: Go down. And now let's do this. Let me show you how to use remix. And what you're doing. Go up a little bit.
00:53:57.094 - 00:53:57.774, Speaker A: Awesome.
00:53:57.894 - 00:53:59.814, Speaker C: You see the account, the account thing.
00:53:59.854 - 00:54:00.754, Speaker A: Click on that.
00:54:01.854 - 00:54:13.646, Speaker C: So this is several accounts that the virtual machine gave you with ethereum. And you can see that this account that you're using has a little bit less ethereum because we're spending redeploying contracts already goes.
00:54:13.710 - 00:54:15.366, Speaker B: Yeah, we spent already.
00:54:15.470 - 00:54:24.314, Speaker C: Yeah. So let's do one thing. Let's, you see right below these, you have the copy symbol. Click on the copy symbol so you can copy their address.
00:54:24.654 - 00:54:27.634, Speaker A: And let's check. Click on the copy.
00:54:28.374 - 00:54:29.534, Speaker B: Yes, yes.
00:54:29.574 - 00:54:37.554, Speaker A: That go down and go on the get friend function. Okay.
00:54:38.214 - 00:54:40.942, Speaker C: And you're gonna pass that address in.
00:54:40.958 - 00:54:43.126, Speaker A: There and do a get frame.
00:54:43.150 - 00:54:52.262, Speaker C: Okay, sorry. This function should be a view. Can we deploy it again?
00:54:52.438 - 00:54:53.478, Speaker A: Just change it.
00:54:53.566 - 00:54:56.994, Speaker C: Change line twelve to external view.
00:54:59.214 - 00:55:00.022, Speaker A: Perfect.
00:55:00.118 - 00:55:02.274, Speaker C: Just click on the trash can.
00:55:03.574 - 00:55:08.566, Speaker A: Okay, but what about the line seven, this one.
00:55:08.590 - 00:55:23.308, Speaker C: Know why? Because let me explain. Good question. Line seven, we are adding a friend. We're not viewing enough. We're not getting no result. Right? I mean, actually you're right. We could, we could remove the return bowl from.
00:55:23.308 - 00:55:34.108, Speaker C: Let's go. Line seven. Let's remove the returns. Boolean. Let's just say sternal, like straight up, you know, so remove the return. There's no returns. It's a bad participant.
00:55:34.108 - 00:55:38.224, Speaker C: Okay, let's add a few warhorse to, you know, go on the require.
00:55:39.804 - 00:55:46.296, Speaker A: And right after the last array thing with my friend.
00:55:46.360 - 00:55:48.704, Speaker C: Yes. Put a comma and then put it.
00:55:48.744 - 00:55:57.244, Speaker A: Put double quotes, comma, comma, not semicolon. Yes, double quotes.
00:55:59.064 - 00:56:31.326, Speaker C: And say already friends. And for the one below, you can say can't be address zero. Just a little bit of information regarding doing this. The bigger the message is, the more expensive is the gas you're going to be spending to execute that. You can also use error types, but we're not getting to those at this point.
00:56:31.390 - 00:56:35.314, Speaker A: Just for you to understand the mapping thing.
00:56:36.294 - 00:56:38.714, Speaker C: Okay, so the address zero.
00:56:41.934 - 00:56:47.718, Speaker A: Yes. Okay, awesome.
00:56:47.766 - 00:56:57.074, Speaker C: So let's click on the trash can. Deploy that again. Click on the copy so we can copy that address.
00:56:57.694 - 00:56:58.918, Speaker A: Go down and see.
00:56:59.006 - 00:57:01.830, Speaker C: Go on the get friend now and paste that address.
00:57:01.942 - 00:57:07.802, Speaker A: Get friend, not friend. Yes. Click on get friend and you'll see.
00:57:07.858 - 00:57:21.530, Speaker C: The result is false because there's no relationship in there. We never, we never added a friend. Right. We never use the function to add, but let's add this friend and we're going to add this friend to your address. Just want you to stop a little bit and think about this.
00:57:21.642 - 00:57:23.242, Speaker A: Okay? Online.
00:57:23.418 - 00:57:29.174, Speaker C: Ten, we're using message sender. Go up where you are right now. Go up.
00:57:31.134 - 00:57:31.614, Speaker B: Okay.
00:57:31.654 - 00:57:44.754, Speaker C: Better yet, better yet, just paste the address that you copied in there. Because we're using the virtual machine, and that address is selected in there. These address will be massive sender. You understand?
00:57:48.814 - 00:57:49.702, Speaker A: Not really.
00:57:49.838 - 00:57:57.964, Speaker C: Okay, so let me try to explain what you're doing there is you're trying to simulate. You execute in a smart contract, right?
00:57:59.024 - 00:57:59.560, Speaker A: Yeah. Yeah.
00:57:59.592 - 00:58:02.624, Speaker C: You agree with me that every smart.
00:58:02.664 - 00:58:06.592, Speaker A: Contract is executed from a wallet or from a.
00:58:06.688 - 00:58:13.924, Speaker C: From a. From an address. Let's say every function, right? There's no magic, right? If I'm gonna do something, I need to click the button metamask, don't I?
00:58:15.864 - 00:58:16.152, Speaker A: Or.
00:58:16.168 - 00:58:17.684, Speaker C: You never used metamask before?
00:58:19.704 - 00:58:27.300, Speaker A: I used, but very little. No, be honest, bro.
00:58:27.452 - 00:58:29.204, Speaker C: There's no problem. There's no problem. Okay.
00:58:29.284 - 00:58:38.180, Speaker B: Yeah. I was using it on Patrick Collins course at the beginning. Yes. You can see here.
00:58:38.292 - 00:58:50.894, Speaker C: No, no problem. So let me just explain you something. Open uniswap. Open uniswap and open your metamask to put your password in there. Leave it. Ready?
00:58:51.674 - 00:58:52.494, Speaker A: Okay.
00:58:57.074 - 00:59:06.694, Speaker C: Awesome. Now click on launch app and click on connect wallet.
00:59:20.814 - 00:59:22.286, Speaker A: Awesome. Perfect.
00:59:22.310 - 00:59:33.594, Speaker C: That one should do nothing. Bro, what you did, what you just did in there was you connected your wallet to a web3 application, which is uniswap, right?
00:59:33.934 - 00:59:34.686, Speaker A: Let's say.
00:59:34.790 - 00:59:37.934, Speaker C: Let's say you had some money in there and you wanted to exchange.
00:59:37.974 - 00:59:43.768, Speaker A: So just put ten there in the Ethereum thing, okay? Yes.
00:59:43.856 - 00:59:51.296, Speaker C: And put sec token. Let's say you had ten ethereum you wanted to change for. You can put WBTC, whatever.
00:59:51.360 - 00:59:56.524, Speaker A: Okay, awesome. Now I want you to think on something.
00:59:56.824 - 01:00:04.696, Speaker C: What's gonna happen is metamask. Now, what's happen is. Let me explain what's happening right now.
01:00:04.760 - 01:00:06.712, Speaker A: Okay? Metamask.
01:00:06.768 - 01:00:11.914, Speaker C: Uniswap is talking to metamask that is connected to Ethereum server.
01:00:11.994 - 01:00:12.802, Speaker A: Okay?
01:00:12.978 - 01:00:43.944, Speaker C: And he's asking, what is the balance of our friend Azarian? And he's looking at your address and seeing that you don't have enough ethereum. But basically, when he's looking at your balance, he's just calling a function, you know, could be in a smart contract, or not in this case, because we're talking about Ethereum, there's a specific function for balance. But let's just change from ethereum to another. Another token. Let's change from ethereum to.
01:00:46.564 - 01:00:47.812, Speaker A: Die. Perfect.
01:00:47.868 - 01:00:51.384, Speaker C: Dies perfect. Okay. Awesome.
01:00:51.804 - 01:00:53.004, Speaker A: Bro, what's happening?
01:00:53.044 - 01:01:23.886, Speaker C: There it is. We try to buy $10 of bitcoin, and he's looking at your balance of Dai in your smart contract of Daisy. And he's looking at the mapping that has the address of Azaria. There's no dying there. So automatically he's returning to Uniswap that, you know, Azaria doesn't have any guy. And all we're doing in remix is we're simulating that interaction, we're simulating the execution of the functions. You know, the front end is doing some of that for you.
01:01:23.886 - 01:01:41.494, Speaker C: Can you open the. Can you go to remix again? Can you go up close to the account fake? Yes. When you see environment, merge, remix VM there?
01:01:42.234 - 01:01:42.850, Speaker A: Yes.
01:01:42.962 - 01:02:08.284, Speaker C: It's simulating a metamask environment for you. So it's like when you click on the bootleg instead of clicking in the front end, it's like you interacted with a metamask account. So if you click on injected provider Metamask, click on that, it will connect to Metamask. Yes, it's going to connect your metamask and then you can deploy these on the testnet and then you need to have testnet tokens and all these things.
01:02:08.324 - 01:02:10.820, Speaker A: You know, go back to VM, go.
01:02:10.852 - 01:02:11.984, Speaker C: Back to the VM.
01:02:13.844 - 01:02:18.504, Speaker A: Go back to the VM and go back to uniswap two.
01:02:19.484 - 01:02:26.176, Speaker C: So let's say that you had some money and you went through with this bot. We had to click first, approve.
01:02:26.280 - 01:02:28.444, Speaker A: So you will approve the.
01:02:29.104 - 01:02:39.484, Speaker C: And can you please open Google and click the years and search for Openzeppelin? ERC 20? You know what Openzeppelin is.
01:02:41.184 - 01:02:41.968, Speaker B: Actually? No.
01:02:42.056 - 01:02:58.872, Speaker C: Openzeppelin is the most trusted team in Defi. They do the standards for smart contracts. They fuck up, but it's really, really hard, rare to happen. So all the standards you see, like ERC 20. ERC 20, mintable, all you see.
01:02:59.008 - 01:03:01.008, Speaker A: Better yet, look at contracts here in.
01:03:01.016 - 01:03:14.952, Speaker C: The left, you have access control, you have governance. These are all contracts that they made and they're saved for you to use for different things. There's one for tokens, there's one for nfts, there's one for governance.
01:03:15.128 - 01:03:15.768, Speaker A: So is that.
01:03:15.816 - 01:03:20.576, Speaker B: Yes, I know. ERC seven to two, one is for nfts.
01:03:20.680 - 01:03:31.952, Speaker C: Yes. So they have standards for everything. But what I want you to do is you to go down this page that you are right now and try to find the reference for the contract on GitHub. Not this, not the menu, but the page.
01:03:32.008 - 01:03:35.856, Speaker A: Yes, go down the page, go down.
01:03:36.040 - 01:03:57.858, Speaker C: And see if you can find the link to GitHub. Let's click on this ERC 20 preset browser, you see, because that's going to lead us to GitHub and from direct and yeah, just click on that. And then I want you to click on the ERc 20 folder. Now go up, go up. Click on ERc 20. Yes. And now search for ERC 20.
01:03:57.858 - 01:03:58.574, Speaker C: Sol.
01:04:00.914 - 01:04:04.454, Speaker A: Open it, go down, go down.
01:04:05.154 - 01:04:20.480, Speaker C: What you're seeing there is pretty much the code for 99% of the tokens. This is a framework or a library you could call open zeppelin created quite safe to, to. So when you, when you click on.
01:04:20.512 - 01:04:22.712, Speaker A: Approve in the die.
01:04:22.808 - 01:04:39.284, Speaker C: So go back to uniswap now. Now imagine you had money and we went through with this transaction. So the, instead of insufficient die balance, what would you have in there would be approved? I. So you would click approve die. Now go back to the contract.
01:04:41.284 - 01:04:41.596, Speaker A: And.
01:04:41.620 - 01:04:47.384, Speaker C: Search the approve function. Control f.
01:04:49.124 - 01:04:50.024, Speaker A: Approve.
01:04:51.244 - 01:05:16.214, Speaker C: Go enter and search for the stop there. So when you click approve, what all you're doing is through metamask, you execute in this function, the smart contract, and look at line. You don't need to think why the message sender is written differently for now, but just look this also using the message sender, you see?
01:05:17.154 - 01:05:17.930, Speaker A: Yes.
01:05:18.082 - 01:05:22.170, Speaker C: So we're reading from the wallet. So what we're trying to do here.
01:05:22.202 - 01:05:30.370, Speaker A: Is, okay, this dude told me that this address here can spend this amount.
01:05:30.442 - 01:05:40.254, Speaker C: Of dai tokens, which means that the uniswap hauter will be able to move tokens from your wallet to the pool and give you the tokens back for that.
01:05:40.914 - 01:05:41.914, Speaker B: Now I get it.
01:05:41.954 - 01:05:43.734, Speaker A: Yeah, you got it now.
01:05:44.194 - 01:06:07.094, Speaker B: Yeah, yeah, yeah. So whenever, so this function proof function, it from, from this example from the uniswap, which is integrated with metamask, it sees that. So message sender is my c five. If I have enough amount, it will approve.
01:06:07.474 - 01:06:20.762, Speaker C: No, no, it doesn't even look at the amount. I mean, I don't know, actually. Can we go back, can we go online 138 and click on the approve function and get inside the approved function. Just go with the mouse over it and click on control.
01:06:20.938 - 01:06:24.362, Speaker A: And you should be able to function.
01:06:24.418 - 01:06:28.734, Speaker C: Name itself the approved word. If you can click on that. No.
01:06:29.264 - 01:06:34.152, Speaker A: Okay, so let's. No, no. Okay, so just go up and there's.
01:06:34.168 - 01:06:49.244, Speaker C: A function in that. Now that's perfect, bro. Okay, go back to the approved function. That's perfect because we're just talking about that. Look that online 138, the approved function that it's calling has a underscore in front of it.
01:06:50.064 - 01:06:54.096, Speaker A: Yeah, because I have the, let's, let's.
01:06:54.120 - 01:07:06.434, Speaker C: Say the interface, the approval interface, which is the function and the internal function that will be actually called. So let's search for control, f underscore, approve. We can actually see the code of approve.
01:07:16.614 - 01:07:17.046, Speaker A: Yes.
01:07:17.110 - 01:07:29.874, Speaker C: Stop there. And you see all the approval function is doing is all the stuff we've been doing so far with mappings. So always doing this. It has a mapping to a mapping of two addresses for a UE 256.
01:07:29.914 - 01:07:37.282, Speaker A: So we pass the owner, we pass the spender, and we pass the amount.
01:07:37.418 - 01:07:40.570, Speaker C: And I want you to pay attention to something very interesting in there.
01:07:40.722 - 01:07:41.534, Speaker A: Okay.
01:07:42.594 - 01:07:50.734, Speaker C: Online 214, you have the internal thing, you see which line? 1314.
01:07:52.234 - 01:07:52.802, Speaker A: Okay.
01:07:52.858 - 01:07:55.214, Speaker C: There's internal keyword, you see?
01:07:55.724 - 01:08:00.884, Speaker A: Yes. So why this function is internal and.
01:08:00.924 - 01:08:11.596, Speaker C: He has the underlying, has the underlying prefix to it and the other one is external, you know, I want to explain you why.
01:08:11.660 - 01:08:12.424, Speaker A: Okay.
01:08:12.964 - 01:08:16.172, Speaker C: From the other function, we always reading.
01:08:16.268 - 01:08:21.794, Speaker A: Message sender, which means that the wallet is.
01:08:24.294 - 01:09:04.524, Speaker C: Calling this function, but calling this function directly enables you to set the allowance of anybody because it's not using message sender, it's just using an address online 311. So I could say, okay, azarian's wallet approved me to spend everything and I just take other Daisy, your wallet, you know, and that's why the function is internal, because by being internal only can be called inside this contract. Therefore it's safe because we know that it's only going to be called in that context of message sender. You kind of understood.
01:09:07.024 - 01:09:10.164, Speaker B: So it is an internal.
01:09:11.944 - 01:09:27.894, Speaker C: And you see, you see how interesting, like with the Aquarius we talked about is acquiring online 215 16, the spender and they are not zero. Remember, we're talking about always verify against zero. Always verify against zero.
01:09:27.974 - 01:09:32.142, Speaker A: You know, so I understand that this.
01:09:32.158 - 01:09:47.654, Speaker C: Is a little bit harder to understand. So let's go back again to the approved function. Just so can you. Now you're gonna understand. Okay, so go back to the approved function, the one without the. Maybe just open another tab, copy the URL, and let's put it side by side.
01:10:00.594 - 01:10:04.734, Speaker A: Awesome. Now let's put it side by side.
01:10:11.294 - 01:10:17.958, Speaker C: Actually, you don't even need to put it side by side. Just look at this function. Now imagine, Alsarian, how long you'll be.
01:10:17.966 - 01:10:22.554, Speaker A: In coding for about a couple of months.
01:10:24.614 - 01:10:38.944, Speaker C: One of the most important lessons in development is making reusable code. It's making code that you can use in several contexts. And you may wait, you may ask yourself, why do I have two approved functions?
01:10:39.244 - 01:10:40.864, Speaker A: What is the why?
01:10:42.084 - 01:10:44.284, Speaker C: Imagine that I only had one approved.
01:10:44.324 - 01:10:46.476, Speaker A: Function, just this one.
01:10:46.540 - 01:11:10.244, Speaker C: And all that code that is inside the other function was inside here. But instead of passing the owner like we pass in line 138, we just send him as a center. Then no matter what is the context in the future, I cannot use that function separately. If you just search for approve. Just search for approve in there. In the contract.
01:11:12.384 - 01:11:13.408, Speaker A: You see there's five.
01:11:13.496 - 01:11:33.916, Speaker C: Instance, so there's five pieces of code that are using the same function. So the reason the function is split and internal is because we need to keep the code reusable. Smart. So look at this spend allowance every time, every time that you, that you spend all go back to the signature.
01:11:33.980 - 01:11:34.156, Speaker A: Right.
01:11:34.180 - 01:11:35.904, Speaker C: Now this spend allowance function.
01:11:42.484 - 01:11:44.300, Speaker A: Go back to spend allowance.
01:11:44.492 - 01:11:45.384, Speaker C: Allowance.
01:11:48.884 - 01:11:49.636, Speaker A: Allowance.
01:11:49.740 - 01:12:04.026, Speaker C: Yeah. Search for spend, spend, spend Sp a. Okay, go choose penaliles.
01:12:04.050 - 01:12:04.186, Speaker A: Yeah.
01:12:04.210 - 01:12:11.734, Speaker C: This one stopped by reading the name of the function. What effect the function does just by reading the name.
01:12:13.794 - 01:12:16.694, Speaker B: It spent spend money.
01:12:17.854 - 01:12:38.954, Speaker C: Spends the amount of tokens you approved, which means that if you approved 20 tokens and you spend ten, this function will be executed. And we want to remove ten tokens from your allowance. So you cannot spend 20 anymore. You can only spend ten. You understand?
01:12:39.894 - 01:12:40.270, Speaker A: Yes.
01:12:40.302 - 01:12:46.694, Speaker B: So if you have, for example, 20 token and you want to spend ten, it will remove ten and you will live by ten.
01:12:46.774 - 01:12:53.514, Speaker C: Yes. So we're going to be able to spend ten more with that approval. And look at line 339.
01:12:54.854 - 01:12:55.494, Speaker A: Yes.
01:12:55.614 - 01:13:11.194, Speaker C: So he's pretty much calling approve again, but now we're getting the current allowance. So now he could spend 20 and. But he spent ten. So now we're setting your allowance to ten, you understand?
01:13:12.414 - 01:13:14.766, Speaker B: Yes. Because we already spent.
01:13:14.830 - 01:13:28.318, Speaker C: Take a look at line 334. And this function is also internal, meaning that it is called inside the context of the contract. And that's why online 331, we're sending the owner and not using message sender.
01:13:28.406 - 01:13:29.014, Speaker A: Okay.
01:13:29.134 - 01:13:31.754, Speaker C: Because it's the internal function.
01:13:32.334 - 01:13:33.114, Speaker A: Yeah.
01:13:33.734 - 01:13:45.714, Speaker C: Now let's go back to remix. So does map mappings make more sense, more sense for you? And do you kind of understand what the message sender is doing online 13?
01:13:46.434 - 01:13:55.130, Speaker B: Yeah, a little bit. So I would try to understand more now. I'm going to move maybe next day.
01:13:55.162 - 01:14:13.562, Speaker C: So the most important view is if you don't use the protocols, if you don't use uniswap, get testnet tokens and use testnet stuff, you know, stake testnet, whatever. If you don't use the protocols, you ain't gonna learn because crypto is really complete to what's happening in the protocols.
01:14:13.618 - 01:14:14.058, Speaker A: Okay.
01:14:14.146 - 01:14:18.642, Speaker B: Yeah, I'm not so absolutely not familiar with the protocols.
01:14:18.818 - 01:14:19.522, Speaker A: You too, bro.
01:14:19.578 - 01:14:34.274, Speaker C: YouTube. YouTube will teach you everything. Yeah, 6 hours of YouTube, you're going to know how to use metamask, choose remix. But I think you have a really nice basis today. It's going to be much less scary and it's going to make much more sense for you to look at a contract. Okay.
01:14:34.394 - 01:14:43.166, Speaker B: Yeah. So the smart contract programmer Defi playlist has his. There are some videos without using the.
01:14:43.190 - 01:14:47.974, Speaker C: Protocols that gonna be really sound rig for you. You need to take a look on how the protocols work.
01:14:48.014 - 01:14:48.286, Speaker A: Okay.
01:14:48.310 - 01:14:55.914, Speaker C: So take a look at uniswap, take a look at using metamask. Some videos on YouTube will solve that for you. Okay?
01:14:56.414 - 01:14:57.278, Speaker B: Yes. Okay.
01:14:57.326 - 01:14:57.734, Speaker A: Okay.
01:14:57.814 - 01:15:00.230, Speaker C: Thank you so much. And this is it, bro.
01:15:00.302 - 01:15:02.446, Speaker B: Thank you so much too. Bye.
