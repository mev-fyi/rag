00:00:01.560 - 00:00:18.154, Speaker A: So thank you so much for coming here today, for taking the time, for being here with us. The one question that I have for you is, you used to work at Morales, right? At that time, did you used to work with Ivan?
00:00:21.934 - 00:00:55.724, Speaker B: I started working as a researcher, so I just started writing like articles. It was just mostly like a Internet internship, just like a side job for me because I was in high school still, like looking for whatever thing I can do to essentially learn more about the space and make some money on the side. And since I'm originally from the Czech Republic, like salaries there are not great. And there is this job opening it, something that was not called Morales back then. It was before Morales started. It was called the Avenue Tech Academy.
00:00:55.864 - 00:00:56.584, Speaker A: Nice.
00:00:57.404 - 00:01:11.676, Speaker B: Yeah, I was writing articles for essentially like a tech review thing where I was writing about different blockchains and how they work from a technical perspective. It was like good learning opportunity for the beginning, but yeah, that's about it.
00:01:11.740 - 00:01:24.854, Speaker A: And how did you got so excited about it? How did you make the first steps into development was by using Morales tools, trying to write some articles or you were trying to maybe fork a portrait protocol launch of projects.
00:01:26.714 - 00:02:21.716, Speaker B: Yeah. So for me, I got interested in crypto in like early 2018 when I was 16, almost 17, and I essentially was already like doing software development at the time. I got started with programming when I was 14, doing web development. So already by the time I got interested in crypto, I already did a bunch of front end developments using React, typeScript, JavaScript, a bunch of other frameworks. And I was also into AI ML. So I already had to play it a bunch with Python and frameworks like pandas, Tensorflow, keras, like the traditional Python data science frameworks, like numpy data, numpy Scipy, like all these. And so for me, like, when I got into crypto, it was mostly from like intellectual curiosity.
00:02:21.716 - 00:02:40.100, Speaker B: I didn't necessarily like want to build anything with it where I didn't think that it was, that it was something that I wanted to spend more time on. So I just essentially picked it up as more of a thing that I wanted to learn more about. Also an excuse to learn more about how money works in the beginning. Right.
00:02:40.132 - 00:02:43.382, Speaker A: So it's like when investing in everything.
00:02:43.558 - 00:03:12.518, Speaker B: Yeah, yeah, yeah. This is like, okay, like, what is yo, degachi, how you're doing? Yeah, so I was just learning like how the financial system works, right. How blockchains work, how bitcoin works, monetary policies, things like that. And eventually you start with the rabbit hole, right? Like Ethereum, evms, programmable smart contracts. Defi wasn't a thing then. I mean, when I joined, there was barely any Defi. It was mostly just like icos on Ethereum.
00:03:12.518 - 00:03:26.910, Speaker B: And eventually a few DeFi projects emerged. Ether Delta, which is like a primitive Dex Eastland, which eventually became Aave. Uniswap was like released. Yeah. So it was like part of all that.
00:03:27.022 - 00:03:28.314, Speaker A: So you saw everything?
00:03:29.974 - 00:03:30.494, Speaker B: Yeah.
00:03:30.574 - 00:03:32.154, Speaker A: You gotta be crazy, dude.
00:03:34.154 - 00:03:34.946, Speaker B: It was crazy.
00:03:35.010 - 00:03:57.014, Speaker A: You're right at the center of it. You know, like when we see something like Uniswap start to pick up and actually work, you know, to be seeing something before, even before that. And a big question that I have for you is how did you got, how did you avoid it burning yourself, you know, by releasing some project and everything for so long because you were involved with all the leads? Pretty much.
00:03:58.774 - 00:04:37.566, Speaker B: I mean, I was 17, 1819 during those, those days. So it's not like I wanted to start a project or anything. I was just mostly trying to learn stuff and seeing if I like it. I'm just like going down different curiosity rabbit holes. I started with Defi, where I was like interested in different protocols, how they work, what do they do, how they differ. But eventually, as I started discovering protocol design and some other applications you can build like scalability solutions, I got really interested into distributed systems and scalability solutions in general. I wrote this, like, guide to l two s.
00:04:37.566 - 00:04:43.110, Speaker B: I can actually. What is the link where I can, like, the chat for this, for this.
00:04:43.302 - 00:04:48.518, Speaker A: Small voice channel here, I'm gonna tag you, but it's a little bit hard to see. Discord needs to work on the.
00:04:48.606 - 00:04:58.350, Speaker B: Okay, I gotta see it. Show chat. Show chat. Okay, that's good. Okay, I see it. I see it. I'll just share like a article I wrote in early 2021.
00:04:58.462 - 00:05:01.054, Speaker A: Your website in there, so book and shut down.
00:05:04.074 - 00:05:35.878, Speaker B: Let me see if I can find it. Okay. I found that. Yeah, November 14, 2021. Yeah. So I wrote this article, like, I was doing research about Altus, and I published this, and this was like my first venture into like wider crypto circles. You see, like in the intro, I still say that I'm Admiralis, which is funny enough, and I was just curious about different scalability solutions.
00:05:35.878 - 00:06:18.304, Speaker B: And I got really pilled by this. And it was also one of my first exposures to cryptography because everyone was talking about zero knowledge roll ups, so zero knowledge. What is zero knowledge? What is this weird stuff? So I started learning more about different things that I was still interested in, like Mev Zk. There's all these topics defi I was mostly very open to everything. Instead of traveling to a bunch of events, like I went to ETH Lisbon in Portugal in 2021, I met a bunch of people there. Then ETH Denver in February of last year, 2022, met a bunch more people there. And I also met the alongside team in person.
00:06:18.304 - 00:07:18.608, Speaker B: Alongside that XYZ. Let me also share that link. I was working there as a research engineer. They're building a crypto product where they're making essentially a crypto index of different coins and aggregating them into a market index, like a crypto market index. And I was doing research on how to make it decentralized in the future through secure multi party computation, where you have a sort of. So multi party computation is this area of cryptography where you splitting private computations among several computers, or you can split like private keys across multiple computers and aggregate their signatures to certain actions within some protocol. And it would be nice, for example, for the use case of alongside, to just have a secure multi party computation network custody the private keys to these smart contract wallets or eoas on different networks.
00:07:18.608 - 00:08:09.712, Speaker B: And whenever you have to rebalance the portfolio of the index according to some rule set, then you could essentially just have a threshold signature across this multi party computation network and update it that way in a decentralized way, according to some rule sets where people stake and can become part like signatories in this network, stuff like that. But currently they work using a centralized custodian. I think it's Coinbase custody, if I'm not mistaken. So I was initially exposed to a bunch of cool research and cryptography. In the meantime, I was exploring. It was mostly part time. I also created Dev fill around that time, which is this learning guide for how to get started with blockchains, like blockchain development in general.
00:08:09.712 - 00:08:44.424, Speaker B: And for me, it was like I was just learning or trying to learn more about blockchain development, like solidity and whatnot. And I wanted to make something like a research for myself to learn. But if I was making something for myself, I told myself that I might as well make it public and just like if it helps somebody else, it's going to be good. So I made death bill, I created a gitcoin grant for it. I got a bunch of funding from a bunch of people, which was really nice. And yeah, I was just mostly exploring at the time.
00:08:45.084 - 00:09:01.544, Speaker A: Can you explain for us what a research engineer does in his job? Because it seems to me like you guys sit down to create some crazy solution, but it's mostly development. Are you actually writing white papers. So what is the job for a research engineer?
00:09:02.864 - 00:10:11.126, Speaker B: Yeah, research engineer, I think is just like a title in crypto that's used for someone that is building, but the thing that they're building has never been done before. Or it's like you need to invent a few things or design a new protocol for that thing to work. So it's essentially you have to design and iterate over new ideas and then implement those ideas. So the research part is when you're designing ideas and going through some protocol design, infrastructure design stuff and thinking about how you're going to implement those things, like defining, for example, which cryptographic primitives you want to use, how do you want to architect different players to interact within a system, defining roles and actions and stuff like that. And the implementation is the engineer part where you already have like some specification of what you want to do, or some idea at least, and you implement that specification or those ideas. So that's like the research engineer role, I guess. That's like how I see it.
00:10:11.190 - 00:10:45.254, Speaker A: That's really good. Something that also, a question that I have for you is regarding ZK as a whole, because we've seen this developed, we saw Cairo, we saw Zuckerberg, we're now seeing scroll and all different implementations happening. But that's something that's really confusing for me, is all the computation still happens off chain, right? So if I'm computing proofs off chain, how that can be considered decentralized, and I know I can use, you know, I know you ain't gonna be able to unhash the information and get whatever data is in there, but just by doing that off chain seems a little bit weird for me.
00:10:47.294 - 00:11:51.202, Speaker B: Yeah. So I think it's better to just start with what is ZK in the first place. So, zero knowledge cryptography essentially is a type of cryptography that allows you to prove that a computation happened correctly without revealing some private inputs, for example. And the way that it works is that you can convert some computation, let's say in the case of rollups, you have the EVM, for example, the theorem virtual machine, and you can create a proof that some computer ran the state transition of the evm correctly. And instead of you having to run it yourself to verify that it ran correctly, you can just verify this proof. So that's the simple idea. So the way it works, currently on a theorem mainnet, you have all these full nodes, and all these full nodes have to listen to the new block that was proposed by the person that gets the right to propose like the validator that gets the chance to propose a block.
00:11:51.202 - 00:12:42.908, Speaker B: Everybody sequences the same block and achieves a new state, and they update their state to the new states. There's some state a, and the proposer proposes a new block and changes the state from state a to state a plus one. And everybody needs to do the same state transition in order to verify that the computation happened correctly. In the case of rollups, you only need to do this computation once. You don't need to do this expensive and slow overhead of computation where everybody needs to recompute the same thing. It's a lot of redundancy, very redundant work. In the case of Zkrolops, all you need to do is have one computer run the state transition, create a proof that the state transition happened correctly, according to some rule set, and anybody can verify that proof.
00:12:42.908 - 00:12:49.024, Speaker B: And they don't have to compute it themselves. They can just verify mathematically that this computation happened correctly.
00:12:50.164 - 00:13:11.634, Speaker A: Amazing, buddy, amazing. I mean, it's just a little bit confusing because we see all this research, all this development, but we still not see a lot of practical cases. I guess. I guess we can talk a little bit about cache, you know, maybe one of the later implementations, only theorem itself, you know. Do you have any other good examples?
00:13:14.494 - 00:13:15.990, Speaker B: Examples of ZK, you mean?
00:13:16.022 - 00:13:17.714, Speaker A: Yeah, being implemented today.
00:13:20.094 - 00:13:25.790, Speaker B: I mean, I think roll ups are still the biggest use case so far. So like ZK sync scroll.
00:13:25.862 - 00:13:26.438, Speaker A: Yeah.
00:13:26.566 - 00:14:03.566, Speaker B: Polygon. Zkvm polygon maiden polygon. Hermes, or formerly Hermes, now ZKVM. Like essentially, like, if there's some computation that you want to bring on chain, you can just make a zero knowledge proof of it and put it on chain. The trust assumptions are the same. You're saying that it seems weird that some people are putting computation off chain and then putting it on chain via zero knowledge proof, but the assumption is literally the same. As long as the cryptography is not broken, you can verify that the computation happened correctly, as if you had run yourself.
00:14:03.566 - 00:14:07.834, Speaker B: The whole point is you don't have to run the computation yourself, you just verify a proof.
00:14:07.934 - 00:14:08.386, Speaker A: Nice.
00:14:08.490 - 00:14:18.834, Speaker B: And the proof gives you all that you need to know in order to know that whomever claims that this computation is what it is. You can be convinced mathematically that this is actually what happened.
00:14:18.954 - 00:14:47.610, Speaker A: That's pretty cool. And that's not only for privacy, but also for performance. Right? Because today I think most pre compiles on Ethereum are pre compiles because they are quite heavy to run on the chain itself. So yeah, it's interesting that we can put we can offload that compiler competition somewhere, you know. And, bro, another I have for you is that we have this common knowledge that creating cryptography is bad. You shouldn't be. You shouldn't be creating your own crypto algorithms.
00:14:47.610 - 00:15:00.894, Speaker A: Usually when people are working on ZK, they are actually working on. They are not working on building a new cryptography algorithm. Right. They're just adapting whatever exists. Should they. Should they change, right?
00:15:02.274 - 00:15:53.408, Speaker B: Yeah. Some of them are actually building some new cryptographical primitives, or at least implementations thereof. But those are like state of the art teams that then get auditors involved and try to standardize it and look at best security practices. The rule of thumb is you don't roll your own crypto if you're a user or just one developer. But anybody can try and improve the state of the art of cryptography. If you have a doctorate in cryptography or if you're like an insanely good applied cryptographer or something, what these teams are generally doing is they're taking some mathematical construction that is already, like, somehow mature enough or tested somehow, and then they do an implementation of their specific use case using that specific proof system. To get an example.
00:15:53.408 - 00:16:42.254, Speaker B: For example, the zcash team built this proof system called halo two. And the privacy skilling explorations group from the Ethereum foundation forked it and changed a bunch of things. And from that work, now there's a fork of this halo two proof system. But the original mathematics came from halo two, from the Zcash team. So the zcash team did the paper of Halo two, the first implementation of the paper, and like a bunch of audits of the implementation audits of the cryptography and all these sorts of things. And then the privacy expression groups just took their work and modified it slightly, audited their changes. And now anybody can use their fork to build their own circuits.
00:16:42.254 - 00:17:27.814, Speaker B: For example, the scroll team uses the privacy expirations group, Halo two fork, to build their ZKVM circuits with. Right. And all of this work is essentially like they didn't roll their own cryptography in the sense that they didn't invent that cryptographic primitive. But everything is heavily audited and done properly from the security standpoint. So you can roll your own cryptography if it's heavily audited from both the mathematical and implementation side of you. And also, the more mature something is, like, the more time has been out there, the more people have looked at it, the more people have used it in production or like in some testing form, the more assurances you get that the code base is secure.
00:17:28.154 - 00:18:03.744, Speaker A: Really cool, bro. And, you know, I want to dive off a little bit of development now. And, you know, bro, I've been in this market as an investor, and I've been in this market as a developer, too. And I got tired both times. It came to a point where I didn't want to hear the word crypto or blockchain anymore, you know, I think you want to look at prices, bro. Do people still ask how your day's going? Everybody that's talking to is some crypto person that knows you're famous and, you know, just doing their work. I mean, do you feel, like, overwhelmed sometimes?
00:18:05.364 - 00:19:22.050, Speaker B: I mean, I definitely felt, like, burned out at times, but I don't think that's necessarily the nature of our space. Like, it's weird to deal with the volatility, I guess. Like, if you have some financial stake in the things you're building or in the space and the ideas that are behind it, sometimes it can feel overwhelming when some parties are misbehaving in the space, like other centralized actors, getting a lot of risk involved and then getting liquidated and inviting essentially bad activities to happen in the space. That's always annoying, but I don't think that's necessarily something that builders that are in here for the right reasons necessarily care about. It sure affects them somewhat, but I don't think it's something that changes their point of view, or my point of view, for that matter, in terms of, like, if somebody asked me about my day or things like that. I have friends, so it's like my friendships are somehow separated from crypto, but most of my friends are also crypto friends. So it's not necessarily, like, bad in that sense, but on Twitter, I don't know.
00:19:22.050 - 00:19:42.524, Speaker B: Twitter is a very different beast. I think Twitter is mostly for engaging about ideas and talking about problems and solving problems. At least we're developers. We're just talking about new developments, things that are building, argue about some definitions or whatnot. But I don't necessarily see it as too much of a social place. Um, for.
00:19:42.604 - 00:19:44.332, Speaker A: I understand, unless you.
00:19:44.428 - 00:19:54.624, Speaker B: Yeah, unless you don't have. Because, like, people usually go to conferences and they, like, hang out with different friends from Twitter more in person, actually, like, form bonds and friendships and whatnot.
00:19:55.564 - 00:20:17.374, Speaker A: And, brother, um, recently I was looking at your pictures at Zuzalu, and I saw that you were hanging out with Vitalik. Can you please explain this? What is the experience of being the first time, you know, around the boss, you know, how does it feel and what kind of environment it is, you know.
00:20:18.634 - 00:20:23.274, Speaker B: Yeah, yeah. So actually wasn't my first. It wasn't my first time meeting Vitalik.
00:20:23.434 - 00:20:27.374, Speaker A: No, but I want to know about your first time. I mean, how was the experience, you know?
00:20:27.874 - 00:20:45.370, Speaker B: Oh, the first time. Okay. So the first time was in Denver of last year, East Denver, and we had this hacker house, actually. Now it's like a recurrent series of hacker houses. It's called Jesse's hacker House. It's an account on Twitter. And so I was part of the first few ones.
00:20:45.370 - 00:20:48.146, Speaker B: Let me get a link real quick if I can.
00:20:48.210 - 00:20:51.654, Speaker A: Yeah, I think Jessie, 30 year old VC, right?
00:20:52.194 - 00:21:18.284, Speaker B: Yeah. 13 year old VC. Yeah, yeah, that's her Twitter handle. Let me see if I can find that. Yes. There you go. So, yeah, so I was part of that hacker house and coincidentally enough, we booked an Airbnb that was above the optimism Airbnb.
00:21:18.284 - 00:21:52.722, Speaker B: So the optimism team was staying underneath us and Vitalik came to the optimism Airbnb to essentially hack on EIP 4844 pro dank charting. So he was there with Protolanda and a bunch of optimism folks and a bunch of people that were coming to a party that we had in our Airbnb that was organized by flashbots. About Mev told Vitaly to come up and he came up for 30 minutes. So that's how I met him. He just came to our Airbnb. But, yeah.
00:21:52.898 - 00:21:57.948, Speaker A: What does it feel like? I'm hanging out with the top dogs.
00:21:57.996 - 00:22:12.304, Speaker B: You know, it's not like, I don't know, like, for me, it's just talking to someone that has, like, really nice ideas and it's done a lot of good stuff for the space. It's not necessarily like, in the first time, I definitely, like, fangirled a little bit.
00:22:12.804 - 00:22:14.104, Speaker A: It's normal, right?
00:22:14.964 - 00:22:31.438, Speaker B: Yeah. In the end, it's just like a person, right? Everybody is just a person. Not just a person, but you know what I mean? Like, it's not like in real life, it's like, I guess, different. Like, you just talk about ideas or things and. Yeah, it was nice. Nice conversation.
00:22:31.486 - 00:22:39.794, Speaker A: By the way, you guys have a panel coming on, etc, right? No, it's not etc. What is the conference?
00:22:41.094 - 00:22:44.314, Speaker B: So I already had a panel with him at Zuzalu.
00:22:45.414 - 00:22:46.550, Speaker A: Okay. Okay. Okay. So.
00:22:46.582 - 00:23:00.482, Speaker B: But you have another. No, no, that was only that one. I mean, I have talks at different events coming, but not. Not the panel with Vitalik. The panel with Vitalik was at Zuzalu for ZKML.
00:23:00.658 - 00:23:01.354, Speaker A: Awesome, bro.
00:23:01.394 - 00:23:05.854, Speaker B: Also, let me share that. Let me share the link if you want to watch it.
00:23:06.314 - 00:23:27.066, Speaker A: And this one, bro. Now I want to talk a little bit about world Coin, the new project you working on. And, you know, I think that's also being run by Sun Outman. Right? So you've been around these really big names, and there has been a lot of. A lot of. A lot of controversy, I guess. Not a lot, but some controversy regarding word coin.
00:23:27.066 - 00:23:48.014, Speaker A: And I want to make you maybe a little bit of a polemic question, but why KYC? And is it, is even. Are we even talking about KYC when we talk about world Coin? You know, because that seems to be an idea that goes not so well with crypto. You understand what I mean, right?
00:23:48.714 - 00:24:17.916, Speaker B: Yeah, yeah, yeah. So, yeah, so, world coin, essentially, there's three things that we're building. One is the world app, which is just a phone wallet, like smart contract wallet app for your phone. The second one is the world coin token. And the third one is the world id protocol. The world id protocol is what you're referring to when you're saying KYC. It's not KyC, but I'll get into the details.
00:24:17.916 - 00:24:56.786, Speaker B: World ID is a privacy preserving proof of personhood protocol. The way that it works is that we have this hardware device that is called the orb. Let me just get some links ready so I can maybe go through it. Yeah, so essentially it's this hardware device that has a. It's essentially like an iris scanner. And the way that it works is that it has a camera with a bunch of sensors. And this orb, what it does is it determines that the person in front of it is a real human being.
00:24:56.786 - 00:25:33.538, Speaker B: And then it takes a high resolution image of the person's irises, and it creates a sort of uniqueness encoding. It creates a uniqueness representation of those specific recs. And this encoding is pseudonymous. There's no way to match or it doesn't match any person. There's no information that's gathered. There's no name or phone number or any other private information that's consumed or taken in the orb. The only thing that it takes in is the image of both irises.
00:25:33.538 - 00:26:19.274, Speaker B: And it creates this randomness encoding, or randomness string that represents the randomness of the IRCs. It compares the randomness against all the other previous registered users, and then it gives the user a private key that they can use to create zero knowledge, proofs that they're unique people, that they're unique real life human beings. I can go into the details of how these things work, but essentially the TLDR, to answer your question, is that it's not KyC. It doesn't collect personal identifiable information. Pii. And the only thing that the orb spits out is this thing called an iris code, which is just a pseudonymous string. It doesn't contain any personally identifiable information.
00:26:19.274 - 00:26:24.636, Speaker B: The original iris images are deleted in the memory of the orbit. So let me just.
00:26:24.660 - 00:26:45.704, Speaker A: It's crazy because people, they were gonna look for any kind of problematic thing they can find, which is nice, right? But what I see, that's really good that you. You're always working on Twitter, always debating these people. You know, I always see you coming up with links, explanations. So it's quite cool. Most of your job today is not development, right? It's mostly maybe relationships.
00:26:47.204 - 00:27:16.948, Speaker B: Most of my day is development still and will be. So I'm still a research engineer. I'm a research engineer at Worldcoin on the protocol team. So I've done a bunch of rust. I've done a bunch of solidity stuff, a bit of applied cryptography stuff. I'm currently working on a trusted setup ceremony for our zero noise circuits for doing batch insertions into the world id Merkle tree. It's like a lot of things to unravel.
00:27:16.948 - 00:27:25.028, Speaker B: I know, but I can talk more in detail about anything. But most of my job is still, or most of my work at world coin is engineering.
00:27:25.116 - 00:27:49.344, Speaker A: And you're 21 or something, right? So you're super young and really rocking, like, bro, what is your. I don't know how much you can disclose of this, but what is your pipeline of development today? Meaning the tools you use to code, let's say foundry. And whenever you make a comment, you have a pipeline on GitHub, there's running a few fuzzlers. I mean, what the process looks like.
00:27:51.244 - 00:28:17.924, Speaker B: I guess it depends what you're building for solidity. It's definitely just solidity and palm tree and maybe some static analysis tools. But yeah, it's mostly solid. And foundry for testing. That's the main work. Fine. In terms of GitHub setup or git setup, we have some continuous integration, continuous deployment stuff.
00:28:17.924 - 00:28:54.104, Speaker B: The continuous integration just essentially runs all the foundry scripts and a fuzzer. For every single commit that you do, it checks all the contracts, still compile that the test pass, and that the fuzzer didn't find any weird inputs for your functions. In terms of, like, rust, then this is like rust. And some libraries that you use. In terms of the therm ecosystem, the best ones are, well, ethers rs. But now there's a new version of ethers rs called Alloy it's a rewrite from scratch from the paradigm, folks.
00:28:55.284 - 00:28:55.980, Speaker A: Rust. Alloy.
00:28:56.012 - 00:28:59.940, Speaker B: Rust. Let me just. Yeah, rust. Rust. Rust.
00:29:00.012 - 00:29:00.284, Speaker A: Awesome.
00:29:00.324 - 00:29:01.744, Speaker B: Rust is a programming language.
00:29:02.974 - 00:29:19.754, Speaker A: And you see from working with all these developers, seeing all these people, there's any alpha you can share with us, like there's anything you heard once about the EVM or about coding on Ethereum that's stick to your mind and you know, and you remember to tell us.
00:29:22.294 - 00:29:57.046, Speaker B: And there's a lot of things going on. Let me think. I mean, like there's many different approaches or many different things that are happening right now. Some people are still sticking to the EVM and building better EVM tooling. So think of all those EVM rollups or the EVM, like EVM roll ups, whether ZK are optimistic, right? So optimism and arbitrum are EVM optimistic roll ups. Then you have ZK sync, which is ZkVM compatible. You have polygon, ZkVM, and you have scroll.
00:29:57.046 - 00:30:35.598, Speaker B: So there's like these projects that are going the EVM routes. And if you learn solidity and foundry in that tech stack, you're still going to be relevant or Viper or Huff or any other EDM language. Some people are taking a different approach and they're trying to build their own virtual machine, like Starknet. Starknet has their own virtual machine called Cairo and their own programming language, which is also called Cairo. Yeah. So the cool things, I think, in my opinion, is that many people are building lots of different primitives and lots of different pieces of infrastructure. And there's a lot of exploration, exploration work happening.
00:30:35.598 - 00:31:36.098, Speaker B: And there's different levels of the stack that you can contribute to as a developer, from the infrastructure itself or to cryptography. Cryptography in distributed systems is the bottom of the stack. The most fundamental pieces where you can contribute to some client implementations for Ethereum or for the roll ups themselves. Then you can go like one layer up and you can start building applications, let's say smart contracts. And within smart contracts you can build different use cases, whether it's a financial protocol, like DeFi, whatever, lending protocol, market maker or some exchange or something. And then the last level of abstraction you can contribute to is user experience, whether it's wallets, whether it's account abstraction stuff, whether it's front end user experience, generic design, user experience flows, those sorts of things. So there's different levels as a developer you can contribute to, and all of them are interesting.
00:31:36.098 - 00:31:41.314, Speaker B: There's lots and lots of use cases that are popping up around different primitives that are interesting.
00:31:41.434 - 00:31:48.334, Speaker A: Amazing, man. And what excites you the most about working with blockchain? What kind of work you like to do? A lot.
00:31:50.714 - 00:32:23.652, Speaker B: To me it's just the fact that you can scale applications really, really fast. You can just deploy an application and anybody can have access to it immediately in a permissionless way. I think that's the coolest part. And the people just have private keys they can use to essentially attest to some information, or they can essentially prove that they're themselves, that they don't have to reveal information they don't want to about themselves. It's just like building an application. Anybody can use it. Nobody can censor you from using it, nobody can prevent you from using it in any way.
00:32:23.652 - 00:32:28.464, Speaker B: And you can interact with all these people that have access to blockchains, which I think is really, really cool.
00:32:28.644 - 00:32:38.044, Speaker A: Awesome. I have one question here. The question is, what are the needed areas to matter if you're looking at protocol visionaring with Rust?
00:32:41.104 - 00:33:31.570, Speaker B: So what areas do you need to master? I mean, that depends what you mean by protocol engineering. Like if you want to become, let's say like a contributor to foundry or like any of the Ethereum infrastructure, like, there's like different things you can contribute to in rust. Rust is just a programming language. You can learn the programming language, so it's better like Rust, for example. It's something that doesn't have a linear learning curve at the beginning is very steep. It's very hard to get started with Rust and be productive from the beginning, but eventually it becomes gradually easier. So I recommend just like reading the rest book, building some like test project that implements the things you learn, trying to get familiar with the language, going through some resources.
00:33:31.570 - 00:34:38.203, Speaker B: If you want, I can share a bunch of those resources in the chat afterwards. And in terms of how to apply those skills, well, you first need to sort of know what you want to contribute to or what do you want to help with. There's different restaurants, projects within Ethereum or within rollups. So for example, if you want to contribute to foundry, which is a testing tool for solidity smart contracts, you can learn about the different libraries that it uses, the different features that are being implemented, and just trying to get familiarize yourself, trying to get yourself familiarized with the APIs of those libraries. For example, if you want to build a command that allows you to test the smart contract in some way, then you have to learn sort of how the blockchain works, how the EVM works. You always have a programming language. It's just a tool to solve some problem, some problem usually has some areas that it's tackling, and you have to sort of learn what things you're trying to solve, and then the tool to do that.
00:34:38.203 - 00:34:45.100, Speaker B: There's many different things. Master the language and master the context, I guess.
00:34:45.212 - 00:35:12.174, Speaker A: Makes sense. There's a second question, and I want to make a little bit, give it a little bit of a spin. So, seeing what you're seeing today, let's say I want to get a job that pays me a good salary, let's say over 200k. What would be an area to focus on? And I know there's things such as and everything, but can we do something maybe a little bit easier for the dude that doesn't know a lot of math in the smart contract area?
00:35:15.034 - 00:35:54.470, Speaker B: Yeah. No, like, for sure, like, if you're good at anything, you're definitely gonna get a lot of money, or it's just like, you're gonna get rewarded proportionally to your skill set. What's the best way to get job ready and attract companies to get job ready? I think it's just build stuff in the open, right? Contribute to open source code basis. Contribute to projects. Ideally, maybe even get an internship in one of these projects and built in the open for those projects. To give an example. For example, there is the Nethermind internship, which is pretty nice, or the Ethereum core protocol fellowship internship, which is pretty nice.
00:35:54.470 - 00:36:40.208, Speaker B: So you get some experience building stuff in the open and actually apply. You actually build something, essentially. And people can see that, hey, you've built something and you have some skills. It's good to also talk to a lot of people that you want to be like. If you want to be an applied cryptographer, then maybe talk to Kobe Gherkin from geometry and talk to Zach from Aztec, and talk to the best applied cryptographers in this space and mimic what they're doing. Build things that are interesting, build things that are cool, solve problems that are important, or at least help somehow. I guess contributing to open source projects is good to one for one, learn and to show your skillset in terms of smart contract engineering, I guess you can also start with auditing.
00:36:40.208 - 00:36:57.874, Speaker B: In a way, it's good to, like, learn how to learn, like, proper solidities by, like, starting to learn security, and, like, auditing a few smart contracts, building some of your own. There's a great guide by. By Patrick Collins to learn foundry and solidity.
00:36:57.994 - 00:36:58.650, Speaker A: Yes.
00:36:58.802 - 00:37:15.706, Speaker B: Let me find it real quick. Learn foundry. And it's three six hour videos, which are pretty huge, but it's worth it. Oh, it's actually more than 6 hours.
00:37:15.810 - 00:37:21.314, Speaker A: I don't know if you know this, but we did 32 hours of Patrick live here. Like, we follow the whole.
00:37:21.394 - 00:37:21.930, Speaker B: Awesome.
00:37:22.042 - 00:37:26.094, Speaker A: Yeah, we followed the whole video on YouTube. Was a crazy day.
00:37:27.434 - 00:37:30.434, Speaker B: Yeah, it's crazy. It's crazy stuff. Yeah, he's insane.
00:37:30.594 - 00:37:31.890, Speaker A: He's really good.
00:37:31.922 - 00:38:19.364, Speaker B: Pretty much like one of the best tutorials. I think this one is like the ultimate tutorial to get started with solidity and foundry and smart contracts and. Yeah, like, there's just so much, so many things you can do. Honestly, for me, I guess it's just have open curiosity and work on the problems that resonate with you. So, for example, for me, I got really interested in cryptography and now I'm learning cryptography from bottoms up. Like learning the math, learning how to use them, like, how to build cryptography stuff, whether it's tooling or how to just use their API. Like, if I want to hash something, then I need to figure out which library I need to use to use this hash function and how to take the input, how to put out the output and how to use that output somehow within the application that I'm building.
00:38:19.364 - 00:38:38.664, Speaker B: It's just have an open mind, be curious. Build stuff in the open. Talk to people. Talk to people about the things you're building. Share it. Contributes. Essentially, if you provide value to people, people will have no issue paying you money.
00:38:38.664 - 00:38:43.548, Speaker B: That's how it is. The more value you provide, the more you can charge for the value you're providing.
00:38:43.716 - 00:38:54.784, Speaker A: Yeah, it's very true, bro. We're coming to an end. I would like to know if you have any closing thoughts, any final message to give people here and people that will hear this in the future.
00:39:02.124 - 00:39:36.302, Speaker B: I'm not necessarily sure if there's something specific. For me, it's just like, stay curious and follow the curiosity rabbit holes. I think that's my favorite line. Just stay curious, be hungry, learn. If you have questions about lots of different things, chat GPT is great. Sometimes it hallucinates stuff, but overall, if I have some basic issue with different things, then I just ask chat GPT for answering things from bottoms up. Or at least it's a combination of Google and chat GPT.
00:39:36.302 - 00:39:47.230, Speaker B: Essentially, it's great for learning. Talk to people on Twitter, interact with them, the people that you want to be like. It's really good. And I don't know, just stay hungry, I guess.
00:39:47.342 - 00:39:59.222, Speaker A: Yeah, bro. I mean, that's great tip. Thank you so much for taking the time. Was really, really insightful. I'm excited for more things that come in from your end. Excited for the Wotcoin project. Thank you so much.
00:39:59.222 - 00:40:03.234, Speaker A: And just one final question. Is DC builder decentralized builder?
00:40:04.414 - 00:40:07.486, Speaker B: No, no, it's my real name. Initials, bro.
00:40:07.550 - 00:40:09.314, Speaker A: All my life is a lie now.
00:40:11.604 - 00:40:34.108, Speaker B: Yeah, many people think that. So the DC builder name, I just didn't know what to do and I saw this guy called DC investor and DC investor. The DC in his name stands for Washington DC because he's based out of DC and he's lived there for like ten years and utilized the city. For me it was just like my initials, my real name initials.
00:40:34.276 - 00:40:38.544, Speaker A: Awesome. Thank you so much DC and talk to you guys later, bye.
