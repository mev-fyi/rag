00:00:02.280 - 00:00:02.956, Speaker A: Hi, everyone.
00:00:03.454 - 00:00:14.874, Speaker B: My name is Max Doolin. I also go by strikeout. My buddy, Ginger. Nathan Kirkland is unable to be here today, but he did all this research with me, so just want to make sure his name's on there.
00:00:15.454 - 00:00:17.262, Speaker A: So, beginning this talk, we're going to.
00:00:17.278 - 00:00:19.206, Speaker B: Talk about the cause of SDK, how.
00:00:19.230 - 00:00:21.566, Speaker A: It works, why it's cool, and then.
00:00:21.590 - 00:00:37.798, Speaker B: We'Re going to talk about two bugs that my buddy and I found. The funny thing is, we actually weren't even looking for vulnerabilities at that point. We were just trying to understand it so we could look at Cosmos SDK blockchains and try to find vulnerabilities in them while we're trying to understand the code. We just happened to find issues, though.
00:00:37.886 - 00:00:39.594, Speaker C: So that was pretty funny.
00:00:41.094 - 00:00:49.518, Speaker B: First thing, though, is opensense is an amazing community. There are so many great events. I watch probably 75% of the events.
00:00:49.566 - 00:00:53.590, Speaker A: Afterwards on YouTube has a really great interactive community.
00:00:53.742 - 00:01:03.362, Speaker B: And we have a fearless leader, miss, who is constantly making new things happen, whether it's starting a. A company out of this for auditing.
00:01:03.418 - 00:01:04.694, Speaker D: Thank you so much, brother.
00:01:05.354 - 00:01:06.554, Speaker C: Yeah, yeah.
00:01:06.594 - 00:01:15.642, Speaker B: You know, really big round of applause for miss. The only reason I talk these sorts of things, because I really believe in his vision. I want to make sure that we can get this out there.
00:01:15.738 - 00:01:17.014, Speaker D: Thank you so much, brother.
00:01:17.434 - 00:01:18.694, Speaker C: Yeah, absolutely.
00:01:19.634 - 00:01:31.670, Speaker B: So, like I said, my name is Max. I'm currently trying to make the transition from web two to web3. I've been doing web two security for about four and a half years. Professionally, I've done everything from web to.
00:01:31.702 - 00:01:38.326, Speaker A: Binary to wireless security to a little bit of cryptography.
00:01:38.430 - 00:01:42.194, Speaker B: But most I put on the cryptography there for my buddy Nathan.
00:01:45.534 - 00:01:49.594, Speaker A: So, Cosmos SDK from afar.
00:01:50.454 - 00:02:02.540, Speaker B: Big thing that makes Cosmos SDK different is that it is an application specific blockchain, meaning that each blockchain is sovereign and should be able to have a.
00:02:02.572 - 00:02:07.544, Speaker A: Single application on it which is different than the EVM.
00:02:08.044 - 00:02:30.388, Speaker B: Things like Ethereum, which everything runs on top of Ethereum. When you write smart contracts for that, with this, you're kind of mixing the infrastructure and the smart contracts into one piece of functionality. But, of course, if you have lots of different blockchains, you need interoperability, which is the ability to move assets, and interoperability interact with other blockchains in the ecosystem.
00:02:30.516 - 00:02:32.204, Speaker A: And with cosmos, they have this built.
00:02:32.244 - 00:02:35.700, Speaker B: In with a mechanism called IBC, or inter blockchain communication.
00:02:35.852 - 00:02:37.984, Speaker A: For the most part, it's written in go.
00:02:39.684 - 00:02:55.292, Speaker B: Underneath the hood of Cosmos SDK is tendermint, which is the consensus and networking layer of Cosmos SDK. What this means, though, is I think this picture really demonstrates this well. Ethereum has the networking consensus and application.
00:02:55.388 - 00:02:57.840, Speaker A: All within the same stack, but the.
00:02:57.872 - 00:03:27.528, Speaker B: Cosmos SDK is a little bit different. The tendermint is the networking consensus layer, which handles all of the hard, complicated stuff. But the Cosmos decay is the application layer, and you communicate to tendermint using the ABCI. And tendermint isn't just specific to Cosmos. There are other blockchains that are using tendermint for their consensus engine, but the Cosmos SDK is the most popular application layer to interface with it.
00:03:27.656 - 00:03:30.924, Speaker D: So tendermint is the consensus layer.
00:03:31.944 - 00:03:38.912, Speaker B: Yeah, tendermint is the consensus and networking layer, while the application layer is Cosmos SDK.
00:03:39.008 - 00:03:47.764, Speaker D: So I can choose proof of stake, proof work, delegated proof of stake. I can also choose which is the sublayer of the networking system.
00:03:49.344 - 00:03:50.304, Speaker A: Yeah, yeah.
00:03:50.344 - 00:04:22.552, Speaker B: Essentially the important thing, though, is this ABCI or the application blockchain interface. This allows you to communicate between the two different layers. Theoretically, you could have something different than tendermint with a different consensus algorithm. And I think there are different implementations of tendermint that have some changes with it as well. But the important thing is, is to have a similar way of communication between all these. The ABCI is that streamlined form of communication.
00:04:22.608 - 00:04:26.626, Speaker A: This is a specification which says the.
00:04:26.650 - 00:04:29.494, Speaker B: Ordering of messages that need to be sent.
00:04:29.994 - 00:04:34.178, Speaker A: So I have some graphics to explain how the ABCI works.
00:04:34.346 - 00:04:41.814, Speaker B: So with the ABCI, we have tender on the left side and the application on the right side. In our case, give the cosmos SDK.
00:04:43.674 - 00:04:45.466, Speaker A: The flow of this is that first.
00:04:45.530 - 00:04:57.986, Speaker B: We have the begin block, and the begin block is code that executes at the very beginning of a block. This is really nice because it's always got to run. If you're doing something on the EVM, then you can only run per block.
00:04:58.050 - 00:05:01.962, Speaker A: Code if you have a transaction within that block.
00:05:02.018 - 00:05:06.054, Speaker B: Otherwise, you have to do some fancy math. The nice thing about this is it just runs.
00:05:07.074 - 00:05:08.802, Speaker A: That's the begin block, or after the.
00:05:08.818 - 00:05:29.054, Speaker B: Begin block, we have delivertx, which is actually sending the transactions that we're going to be using. So this could be things like swaps, transferring funds, or any other message you want to send the application layer. And there can be lots and lots of different transactions.
00:05:29.514 - 00:05:31.018, Speaker A: Once we've gone through all the different.
00:05:31.066 - 00:05:39.994, Speaker B: Transactions, we have the end block. The end block is similar to the begin block, where we can have code that runs at a specific time every single block.
00:05:40.114 - 00:05:45.688, Speaker A: In this case, it's the end of the block. After that, we have commitment.
00:05:45.726 - 00:05:51.260, Speaker B: And this is tendermint asking the application like, hey, I've done all this good stuff. Now I want to actually save the.
00:05:51.292 - 00:05:53.104, Speaker A: State of the blockchain.
00:05:53.404 - 00:06:05.744, Speaker B: And this is the commit message. So we give them all the way back out. And this is the lifecycle of a cosmos SDK or ABCi interaction.
00:06:08.284 - 00:06:10.564, Speaker A: So the Cosmos SDK is built a.
00:06:10.604 - 00:06:33.574, Speaker B: Very small little modules. Every module has its own purpose, and it's meant to be the ruby on rails of blockchain development. Ruby on raise Rails is a web framework which is very well known for being plug and play. You can take stuff, you can remove stuff, but it's all up to the developer. This is cool because it gives you so much freedom over how your blockchain is set up.
00:06:34.474 - 00:06:34.930, Speaker C: I still.
00:06:34.962 - 00:06:59.384, Speaker B: I'm going to steal a lot of pictures. This presentation, I made the last diagram, but I stole this because Cosmos has really good documentation. But here we have the auth module, and the auth module checks for the signatures being correct. We have the banking module, which handles transfers and holds your tokens. We have governance, which handles voting procedures and so on.
00:06:59.964 - 00:07:02.564, Speaker A: Of course, you can have custom modules.
00:07:02.684 - 00:07:05.904, Speaker B: For instance, Ethermint created an EVM.
00:07:07.864 - 00:07:08.656, Speaker C: Module.
00:07:08.760 - 00:07:10.844, Speaker B: So things like Kronos.
00:07:12.824 - 00:07:15.176, Speaker A: Ethermint, they have.
00:07:15.240 - 00:07:32.720, Speaker B: Ways for you to upload your own smart contracts to this, which is really cool. There's cosmwasm, which is a Cosmos implementation of the Wasm smart contractor interface, which is cool. And then, of course, we have IBC, which I mentioned. But I'll go into more in depth.
00:07:32.752 - 00:07:33.764, Speaker A: On that in a minute.
00:07:36.324 - 00:07:39.724, Speaker B: We have message. So the way that we actually do.
00:07:39.764 - 00:07:44.012, Speaker A: Things on the blockchain with Ethereum, we'll.
00:07:44.028 - 00:07:47.984, Speaker B: Have a state modifying transaction. And this is what a message is.
00:07:48.684 - 00:07:53.564, Speaker A: Within the cosmos ecosystem, a transaction can.
00:07:53.604 - 00:08:00.016, Speaker B: Actually be made up of many messages, but these are state changing actions, like transfer funds from one account to another.
00:08:00.180 - 00:08:05.392, Speaker A: Swap coins on a DAX, take a position, and all that good stuff would.
00:08:05.408 - 00:08:11.784, Speaker B: Be in a message. Of course, if we have messages, we need queries. This gives us the ability to retrieve.
00:08:11.824 - 00:08:14.124, Speaker A: The state and events of the chain.
00:08:14.544 - 00:08:17.164, Speaker B: This could be really important with IBC.
00:08:17.864 - 00:08:20.216, Speaker A: Use cases where we want to go.
00:08:20.240 - 00:08:21.724, Speaker B: From one chain to another.
00:08:23.744 - 00:08:26.576, Speaker A: So IBC, IBC is really what makes.
00:08:26.600 - 00:08:28.746, Speaker B: The cosmos ecosystem work, because if you.
00:08:28.770 - 00:08:31.466, Speaker A: Had these siloed applications and you couldn't.
00:08:31.490 - 00:08:34.174, Speaker B: Transfer funds between them, then it wouldn't be very useful.
00:08:34.674 - 00:08:37.090, Speaker A: So the solution to this is the.
00:08:37.202 - 00:08:58.094, Speaker B: Inter blockchain communication, or IBC, standard. This allows for lots of really cool functionality. ICS 20 defines token transfers. ICA is interchange accounts, there's nfts that can be sent cross chain. And there's also custom functionality you can implement between different chains as well.
00:08:58.914 - 00:09:02.970, Speaker A: So again, I stole a diagram because why wouldn't I?
00:09:03.002 - 00:09:06.534, Speaker B: These things are amazing. So thank you, the Cosmos SDK people, for this.
00:09:07.434 - 00:09:12.410, Speaker A: In this diagram, we have two blockchains. We have chain a, we have chain.
00:09:12.442 - 00:09:20.934, Speaker B: B, and importantly, in the middle, we have the relayer. And the relayer's job is to transfer, to send the state between the two different chains.
00:09:21.434 - 00:09:23.666, Speaker A: The way this works is there's an.
00:09:23.690 - 00:09:26.090, Speaker B: IBC message that happens on chain a.
00:09:26.162 - 00:09:28.820, Speaker A: This will emit an event which then.
00:09:28.852 - 00:09:40.196, Speaker B: A relayer picks up. Once a relayer picks up that IBC event, it will transfer it to chain b via another message. And then chain b's IBC light client.
00:09:40.340 - 00:09:47.628, Speaker A: Will verify all of the proofs that were sent over from chain a, and.
00:09:47.716 - 00:10:03.568, Speaker B: It confirms that this transaction actually did come from chain a. And that is legit. So there's a lot of fancy merkle trees and other things going on here. But what's cool is any blockchain could theoretically do this.
00:10:03.736 - 00:10:11.472, Speaker A: You could have chain a, or you could have a cosmos or tendermint IBC.
00:10:11.528 - 00:10:19.096, Speaker B: Call to something like polygon if the IBC interface was implemented correctly. The important thing is that you need.
00:10:19.160 - 00:10:23.890, Speaker A: Fast finality so that you can't revert.
00:10:24.042 - 00:10:28.810, Speaker B: A transaction that has occurred or change the state after the proof has happened.
00:10:28.922 - 00:10:29.466, Speaker C: One question.
00:10:29.530 - 00:10:34.614, Speaker D: Yes, all the relayers work, you know, if they are decentralized at this point.
00:10:36.314 - 00:10:37.626, Speaker A: Yeah, I don't think.
00:10:37.770 - 00:10:45.146, Speaker B: I don't think they are at this point. Because if I recall, there's not like very good monetary incentivization yet.
00:10:45.290 - 00:10:45.522, Speaker C: They.
00:10:45.538 - 00:10:48.162, Speaker B: For the most part, it's just like people doing out of the goodwill, their heart.
00:10:48.218 - 00:10:48.562, Speaker D: Awesome.
00:10:48.618 - 00:10:56.648, Speaker B: I don't consider it like a real setup until every. Everybody in the system is incentivized to do stuff. Right now, it's just, all right, we.
00:10:56.656 - 00:10:58.168, Speaker A: Want this to work, so we're going.
00:10:58.176 - 00:11:00.928, Speaker B: To send it over. But you only need a single relayer.
00:11:00.976 - 00:11:04.968, Speaker A: To send stuff between, or to send.
00:11:05.016 - 00:11:11.324, Speaker B: Communications between two different blockchains, though, which is different than a complete voting process to go between them.
00:11:12.904 - 00:11:13.312, Speaker C: Yeah.
00:11:13.368 - 00:11:17.280, Speaker B: So before I move on to the actual vulnerabilities, does anybody have any questions.
00:11:17.352 - 00:11:21.320, Speaker A: About cause USDK or anything you want.
00:11:21.352 - 00:11:34.952, Speaker D: To speak so you guys can feel free to open your mics if you feel like. And also if you have a question.
00:11:35.008 - 00:11:36.208, Speaker B: Yeah, I'll give it a sec.
00:11:36.296 - 00:11:37.604, Speaker C: We have any questions?
00:11:38.504 - 00:11:40.524, Speaker D: I think Rahman Raman has a question.
00:11:43.184 - 00:11:45.228, Speaker C: No, I'm good. Awesome.
00:11:45.276 - 00:11:53.332, Speaker D: Awesome. I mean, if you. If you guys have. I think I have something in the chat. Let me see. No, I mean, if you guys have questions, just dropped in the chat, max, I think we can keep on.
00:11:53.508 - 00:11:54.744, Speaker C: Okay, cool.
00:11:55.244 - 00:11:59.024, Speaker A: So, like I said, we found two vulnerabilities. I'm going to say the best one for last.
00:11:59.764 - 00:12:10.118, Speaker B: This first one we found was an access control issue with the underlying Cosmos SDK. The module we found on was called the circuit module.
00:12:10.236 - 00:12:12.866, Speaker A: The idea behind this is if there's.
00:12:12.890 - 00:12:19.134, Speaker B: A really bad vulnerability or something's not working, you want to be able to trip or disable that message.
00:12:19.954 - 00:12:24.906, Speaker A: This is like in a house where you have way too much current or.
00:12:24.930 - 00:12:46.856, Speaker B: Voltage running through your wires because you hooked up something incorrectly. So you want the ability to just, like, break the circuit. You want the circuit to stop working. And this is the circuit breaker per se. And this is better than, you know, blowing up everything in your house. But of course, we want to be able to turn back on the functionality. So in the Cosmos SDK circuit module.
00:12:46.920 - 00:12:55.776, Speaker A: This is done by the reset message, which is just re enabling it. Within the circuit module, there's three different roles.
00:12:55.840 - 00:13:02.968, Speaker B: There's the admin role, and the admin role can trip and reset circuit breakers, but you can also grant permissions to other users.
00:13:03.096 - 00:13:05.152, Speaker A: There's all messages, which gives you the.
00:13:05.168 - 00:13:08.124, Speaker B: Ability to trip and reset all circuit breakers.
00:13:08.574 - 00:13:18.954, Speaker A: And then there's some messages which give us a particular user the ability to trip and reset a subset of circuit breakers or some.
00:13:19.374 - 00:13:28.034, Speaker B: So the admin would grant permissions for a one or two or however many circuit breakers that they wanted for a particular message.
00:13:30.934 - 00:13:33.222, Speaker A: So I was literally just trying to.
00:13:33.238 - 00:13:34.760, Speaker B: Understand how this code worked.
00:13:34.902 - 00:13:35.476, Speaker C: That's it.
00:13:35.540 - 00:13:39.500, Speaker B: I really wasn't looking for vulnerabilities at this point. I was just reading through the code.
00:13:39.692 - 00:13:41.460, Speaker A: And I noticed that there are two.
00:13:41.492 - 00:13:54.224, Speaker B: If statements for trip circuit breaker, which makes sense because the super admin and all messages should be able to trip and reset all of them. But for the some messages, it's a totally different functionality.
00:13:55.364 - 00:13:58.468, Speaker A: Within the some messages user, the verification.
00:13:58.516 - 00:14:12.894, Speaker B: Was being done like this. It would loop over the list of messages that they were allowed to reset and then check to see if the one that we were currently accessing was one that we had access to.
00:14:13.194 - 00:14:15.378, Speaker A: If it didn't, then it would air.
00:14:15.426 - 00:14:18.294, Speaker B: Out and be like, hey, bro, you don't have access to this.
00:14:19.954 - 00:14:25.026, Speaker A: With case two, there was no loop over the top of it, though, because.
00:14:25.170 - 00:14:30.282, Speaker B: It'S super admin, and all messages they can reset or trip all circuit breakers.
00:14:30.378 - 00:14:44.816, Speaker A: There'S no reason to check. So I started looking through the reset code and something was really funky to me. It was one large if statement. The if statement was covering all three.
00:14:44.880 - 00:14:47.884, Speaker B: Roles, the super admin, all messages and some messages.
00:14:48.504 - 00:15:01.294, Speaker A: But the weird part was there was no check for, there was no for loop. There was no check to make sure that the some messages user was accessing.
00:15:01.334 - 00:15:03.314, Speaker B: A particular subset of URL's.
00:15:05.814 - 00:15:08.022, Speaker A: This is really weird, but there was.
00:15:08.038 - 00:15:09.270, Speaker B: A little, there was a small check.
00:15:09.302 - 00:15:24.694, Speaker A: Which is why I think this was missed. The check made sure that you had some permissions, so you had to have some permissions, but not all of them in order to do something malicious. So the consequence of this is that.
00:15:24.734 - 00:15:31.984, Speaker B: Any user can reset all circuit breakers, but you need access to a single message in the first place.
00:15:33.004 - 00:15:36.212, Speaker A: So picture this, an attacker has access.
00:15:36.308 - 00:15:42.356, Speaker B: To a message circuit breaker that we don't care about. They were granted this via governance proposal.
00:15:42.380 - 00:15:45.220, Speaker A: Or something like that. Down the line.
00:15:45.332 - 00:15:55.304, Speaker B: Somebody found a vulnerability in the banking module, which is a big deal. The cause was SDK. Maybe there was a way to bypass signature verification or something like really, really bad.
00:15:56.374 - 00:16:03.790, Speaker A: So somebody tripped the bank message circuit breaker and this is where the attack comes in.
00:16:03.862 - 00:16:06.334, Speaker B: The attacker, because they have access to.
00:16:06.374 - 00:16:12.950, Speaker A: A single cosmos SDK message, they are.
00:16:12.982 - 00:16:14.926, Speaker B: Able to reset all of them.
00:16:14.990 - 00:16:18.734, Speaker A: That's what the vulnerability is. So they would be able to reset.
00:16:18.774 - 00:16:25.554, Speaker B: The banking module, reactivating the functionality, and then the attacker could come in and exploit the vulnerability themselves.
00:16:29.054 - 00:16:30.910, Speaker A: So that's bug number one.
00:16:31.022 - 00:16:34.350, Speaker B: Does anybody have any questions on that or thoughts?
00:16:34.422 - 00:16:41.514, Speaker D: I do, I do. So can you go back to the previous slide? Okay, so this one, the one with the code.
00:16:42.214 - 00:16:44.358, Speaker A: Oh yes, this one, this one.
00:16:44.406 - 00:16:50.834, Speaker D: So you're telling me that the problem was that the user, there was a check to see the level of permission, right?
00:16:51.674 - 00:16:52.106, Speaker C: Yeah.
00:16:52.170 - 00:16:55.094, Speaker D: Which is a level of permission that maybe is default.
00:16:57.034 - 00:16:58.014, Speaker B: To a certain.
00:16:59.634 - 00:16:59.986, Speaker C: Yeah.
00:17:00.010 - 00:17:08.594, Speaker B: So this check I'm showing on screen right now, it is checking to make sure I have any permission. If I have no permissions whatsoever, then it exits.
00:17:08.714 - 00:17:13.402, Speaker A: But it doesn't consider the case that.
00:17:13.538 - 00:17:16.226, Speaker B: I may have access to some URL's.
00:17:16.290 - 00:17:17.555, Speaker A: But not all of them.
00:17:17.729 - 00:17:20.283, Speaker D: So if I have. Can you go back again?
00:17:21.223 - 00:17:21.535, Speaker C: Yeah.
00:17:21.559 - 00:17:22.723, Speaker B: Which, which one?
00:17:23.783 - 00:17:46.134, Speaker D: Okay, stop there. Let me see. Okay. Okay, so what I'm trying to understand is, okay, which level of permission do I need to have? Choice, acute exploit and how that is correlated to the websites not being blocked, like which. With every list being allowed.
00:17:47.034 - 00:17:49.882, Speaker A: Yeah. So ATT and Ck is you have.
00:17:49.938 - 00:17:52.778, Speaker B: Some permissions so you can reset or.
00:17:52.826 - 00:17:58.294, Speaker A: Trip a circuit breaker, but the issue.
00:17:58.674 - 00:18:00.570, Speaker B: Is if you have access to a.
00:18:00.602 - 00:18:04.414, Speaker A: Single circuit breaker, then you can reset all of them.
00:18:04.714 - 00:18:05.654, Speaker C: I see.
00:18:06.394 - 00:18:10.304, Speaker D: And by resetting you mean setting another value to the secret.
00:18:10.384 - 00:18:17.840, Speaker B: Like you can, you can turn it back on like you, like with, with Ethereum, how you have like a pause functionality with some contracts.
00:18:17.872 - 00:18:18.248, Speaker D: Yes.
00:18:18.336 - 00:18:25.552, Speaker B: Where you can, like, it's similar to that, but it's, it's adding like a function level granularity.
00:18:25.648 - 00:18:26.364, Speaker D: Awesome.
00:18:28.584 - 00:18:28.920, Speaker C: Yeah.
00:18:28.952 - 00:18:30.724, Speaker B: Anybody have any questions on this?
00:18:32.104 - 00:18:44.254, Speaker D: I have a question from our friend Bienke and he's asked, he's making a question, is remote code execution an attack that allows someone to remotely execute code on a computer?
00:18:45.594 - 00:18:48.498, Speaker A: Yeah, yeah, exactly. That's the next bug.
00:18:48.546 - 00:18:53.374, Speaker B: Awesome. So this is a different bug, but yeah, I guess we can move into that then. Yeah, that's cool.
00:18:53.914 - 00:18:54.410, Speaker C: Yeah.
00:18:54.482 - 00:18:57.786, Speaker A: So you don't really see remote code.
00:18:57.810 - 00:19:05.494, Speaker B: Execution bugs very much in the blockchain space. You see it in the web two space a lot. The idea is that you can somehow trick the program to give you code.
00:19:05.534 - 00:19:08.638, Speaker A: Execution remotely on their system.
00:19:08.766 - 00:19:10.182, Speaker B: And if you can do this, you.
00:19:10.198 - 00:19:16.434, Speaker A: Can steal their private keys and do much worse things. But we'll talk about that later.
00:19:16.894 - 00:19:19.294, Speaker B: So the vulnerability I found this in.
00:19:19.334 - 00:19:21.190, Speaker A: Was called the upgrade module.
00:19:21.222 - 00:19:34.846, Speaker B: And again, I was literally just trying to understand how the upgrade module worked. You'd make a proposal via the governance module that, hey, we want to upgrade the blockchain, we want to upgrade the running code that's executing.
00:19:34.990 - 00:19:39.838, Speaker A: So we're going to take a vote. We would take a vote on whether.
00:19:39.886 - 00:19:46.814, Speaker B: We liked a particular binary or not, whether it made sense, and then we would add the binary manually to the.
00:19:46.854 - 00:19:56.874, Speaker A: Server that was running our node at a specific block time, it would automatically switch to the new binary that we set up.
00:19:57.734 - 00:20:00.302, Speaker B: And this seems great, but there is.
00:20:00.318 - 00:20:02.332, Speaker A: A problem with this, it's really cumbersome.
00:20:02.428 - 00:20:11.652, Speaker B: You have to always be on your toes. What if a vote happens really quickly? You don't want to be slashed, so you want to make sure your stuff's being updated. But this is a lot of work to maintain this.
00:20:11.748 - 00:20:20.204, Speaker A: What if we just had this happen automatically? Which is why this tool has auto upgrades. The idea is instead of having to.
00:20:20.244 - 00:20:24.604, Speaker B: Manually place the binary on your server, that when it decides that it's time.
00:20:24.644 - 00:20:28.168, Speaker A: To upgrade, it will do it itself.
00:20:28.296 - 00:20:30.924, Speaker B: Let's have the binary be somewhere remote.
00:20:31.384 - 00:20:34.272, Speaker A: And this sounds really great for maintenance.
00:20:34.408 - 00:20:38.832, Speaker B: And it sounds good for security, for always having stuff up to date.
00:20:38.928 - 00:20:41.504, Speaker A: The problem though is if there's an.
00:20:41.544 - 00:20:44.884, Speaker B: Issue with this functionality, then the whole system is bored.
00:20:45.784 - 00:20:51.896, Speaker A: And another weird consequence is you can't sign these binaries. If, say you're on a windows system.
00:20:51.960 - 00:20:53.768, Speaker B: And you find a way to arbitrarily.
00:20:53.816 - 00:20:56.618, Speaker A: Replace DLL's, it doesn't matter very much.
00:20:56.666 - 00:21:03.466, Speaker B: Because they're going to be cryptographically signed and they won't load if they're not signed. But because of the decentralized nature of.
00:21:03.490 - 00:21:09.474, Speaker A: Blockchain, we can't sign the binary. It's a really weird thing to deal with.
00:21:09.554 - 00:21:14.654, Speaker B: These sorts of signatures require a de, require a centralized authority that owns the key.
00:21:15.314 - 00:21:16.054, Speaker C: So.
00:21:18.314 - 00:21:19.734, Speaker A: Go on the next part then.
00:21:21.054 - 00:21:23.718, Speaker B: Cosmovisor is the software that actually handles this.
00:21:23.766 - 00:21:26.874, Speaker A: It's like a wrapper for the notes.
00:21:27.974 - 00:21:34.302, Speaker B: It handles logs and various other things. When I was reading through the documentation, I came across this line of text verbatim.
00:21:34.358 - 00:21:37.022, Speaker A: It says the cosmovisor is a small.
00:21:37.078 - 00:21:40.438, Speaker B: Process manager for the Cosmos SDK application.
00:21:40.486 - 00:21:46.318, Speaker A: Binaries that monitors governance module via standard.
00:21:46.366 - 00:21:48.776, Speaker B: Out for incoming chain upgrade proposals.
00:21:48.950 - 00:21:51.180, Speaker A: It sees a proposal that gets approved.
00:21:51.292 - 00:21:54.164, Speaker B: Cosmovisor can automatically download the new binary.
00:21:54.324 - 00:21:57.452, Speaker A: Stop the current binary, which from the.
00:21:57.468 - 00:22:03.996, Speaker B: Old one to the new one, and reset the node. This is what the Cosmos SDK node.
00:22:04.020 - 00:22:05.348, Speaker A: Looks like, by the way.
00:22:05.436 - 00:22:14.460, Speaker D: Just one thing here, Max. I imagine that this is used to upgrade the blockchain itself, which is something we don't have on Ethereum today. We do hard forks.
00:22:14.532 - 00:22:15.038, Speaker A: Yes.
00:22:15.156 - 00:22:20.374, Speaker D: So basically they have a way of upgrading by downloading the code for somewhere.
00:22:21.074 - 00:22:23.010, Speaker A: Yeah, exactly.
00:22:23.202 - 00:22:24.454, Speaker B: Good clarification.
00:22:25.354 - 00:22:25.682, Speaker A: Yeah.
00:22:25.698 - 00:22:41.814, Speaker B: The Cosmo advisor will handle the upgrade itself once it's timed to trigger. But we have to vote for this via the governance and the upgrade module. If people are really into web two security, you're going to notice this in particular.
00:22:42.844 - 00:22:43.972, Speaker A: Standard out.
00:22:44.148 - 00:22:46.164, Speaker C: Wait, what?
00:22:46.324 - 00:22:55.148, Speaker B: Why is cosmovisor looking through standard out? If you guys have played in the terminal some, then what you see coming back to you is either going to.
00:22:55.156 - 00:23:07.132, Speaker A: Be standard out or standard air. So if a cosmovisor is looking through STD air and stdout or data coming, then what if we could trick it.
00:23:07.268 - 00:23:12.292, Speaker B: Into outputting out stuff for us? If we could trick the cosmovisor to.
00:23:12.428 - 00:23:15.500, Speaker A: Output our stuff, then we could force.
00:23:15.532 - 00:23:17.084, Speaker B: The upgrade process to happen.
00:23:17.204 - 00:23:25.396, Speaker A: At least that was my thought. But I have so many ideas. I told my buddy Nathan I have a rabbit hole.
00:23:25.540 - 00:23:27.364, Speaker C: I'm going to go check this out.
00:23:27.484 - 00:23:33.836, Speaker A: It's probably not going to work, but let's look at it anyway. And immediately we found this regex, and.
00:23:33.900 - 00:23:36.268, Speaker B: This regex specifically said that it was.
00:23:36.316 - 00:23:41.458, Speaker A: Checking through the output logs for this.
00:23:41.506 - 00:24:00.774, Speaker B: Particular string to match. And the string is just. It's mostly pretty obvious. We have upgrade. We have the name of the blockchain, which needs to be in double quotes, needed at height, and then a height number or, sorry, an actual number which represents the block. And then we have the upgrade JSON information.
00:24:02.394 - 00:24:04.332, Speaker A: An actual payload would look like this.
00:24:04.498 - 00:24:19.004, Speaker B: Where we have upgrade chain two needed at height 49. And then we'd have the JSON here. The JSon needs to be very compact. There can be no spaces in it, and the quotes need to be quote escaped, of course.
00:24:20.744 - 00:24:25.720, Speaker A: So after seeing this regex, we're like, oh my gosh, this real, like, can.
00:24:25.752 - 00:24:29.192, Speaker B: We just print out a string? This will give us code execution.
00:24:29.328 - 00:24:34.556, Speaker A: But we weren't sure. So I have lots of ideas.
00:24:34.660 - 00:24:45.504, Speaker B: Most of them don't work. I would say one in every 10,000 ideas I have actually worked. So I tend to be pretty lazy when it comes to testing ideas. And this concept is failing fast.
00:24:46.604 - 00:24:48.876, Speaker A: I try to find the minimum amount.
00:24:48.900 - 00:24:50.812, Speaker B: Of work I can do in order.
00:24:50.908 - 00:24:54.716, Speaker A: To demonstrate that this thing won't work.
00:24:54.820 - 00:25:08.192, Speaker B: So maybe I have like an ethereum space. I have a contract that I think might be vulnerable to reentrancy. Instead of completely setting everything up from scratch, I might modify the contract a.
00:25:08.208 - 00:25:09.968, Speaker A: Little bit, or a lot of it.
00:25:10.056 - 00:25:12.136, Speaker B: Throat and remix and make sure that.
00:25:12.160 - 00:25:15.920, Speaker A: It works, as I would hope. And then I progressively get further and.
00:25:15.952 - 00:25:19.176, Speaker B: Further down that chain of harder and.
00:25:19.200 - 00:25:26.124, Speaker A: Harder and more and more work. So in this case, I just modified the test of the cosmovisor software.
00:25:26.304 - 00:25:32.828, Speaker B: I updated one of the test files and magically it worked.
00:25:32.996 - 00:25:35.264, Speaker A: But I'm still lazy.
00:25:35.884 - 00:25:39.996, Speaker B: I got co execution in that test, but maybe there's something I'm missing that.
00:25:40.020 - 00:25:46.092, Speaker A: Went one step further. But we're also being lazy. Again, I have the Desmos blockchain setup.
00:25:46.148 - 00:25:47.884, Speaker B: Just locally from other things I was.
00:25:47.924 - 00:25:52.252, Speaker A: Testing in Cosmos SDK, and I set.
00:25:52.268 - 00:25:54.864, Speaker B: It up with the vulnerable version of the cosmovisor.
00:25:55.564 - 00:25:58.468, Speaker A: But again, I'm lazy.
00:25:58.556 - 00:26:13.724, Speaker B: So I said print the string manually. That's all I did. I did format, print, line and printed my payload. And unbelievably, this actually worked. It outputs, or, sorry, it gives us code execution from our remote link, just.
00:26:13.764 - 00:26:23.286, Speaker A: Like we were talking about. So this is where I thought, okay, now this is gonna be pretty easy. We can. We know where the bug exists at.
00:26:23.390 - 00:26:32.502, Speaker B: We know if we get strings to be in the console, we get code execution. But now we actually need to find a way to get the blockchain to.
00:26:32.518 - 00:26:42.354, Speaker A: Do that instead of just printing it ourselves. So at first I just started looking through all the code and the cosmos SDK blogger.
00:26:44.174 - 00:26:47.338, Speaker B: The code for it is on the left and the actual output is on the right.
00:26:47.486 - 00:26:49.906, Speaker A: We have the description, which you can.
00:26:49.930 - 00:26:55.786, Speaker B: See here, and we have the key in the value, and you can have arbitrary key value pairs that are being outputted here.
00:26:55.970 - 00:26:56.826, Speaker A: I thought this is going to be.
00:26:56.850 - 00:27:03.338, Speaker B: Super easy because there's a lot of different logging in the code. However, this actually ended up being the hardest part of the project was finding.
00:27:03.386 - 00:27:10.146, Speaker A: A way to print the console. This is because the quote is actually escaped.
00:27:10.250 - 00:27:14.880, Speaker B: The double quote turns into a slash double quote, and this breaks all of our parsing.
00:27:15.042 - 00:27:18.332, Speaker A: Now we can't create valid json, which.
00:27:18.428 - 00:27:21.104, Speaker B: Completely screws up our entire exploit.
00:27:21.924 - 00:27:26.604, Speaker A: So instead of having the key equals.
00:27:26.644 - 00:27:31.428, Speaker B: Value, if we put a double quote there, it would be key double quote, which really sucks.
00:27:31.596 - 00:27:36.044, Speaker A: So this means that the key in the value here can't be used.
00:27:36.204 - 00:27:40.824, Speaker B: It turns out that the description within the logger is not quote escaped.
00:27:41.124 - 00:27:43.612, Speaker A: So we need to find the very.
00:27:43.668 - 00:27:50.884, Speaker B: Beginning of the logger and see if we can find any print syncs in there. So we started looking for more print.
00:27:50.924 - 00:27:52.660, Speaker A: Sinks, and after a couple days of.
00:27:52.692 - 00:27:54.304, Speaker B: Looking, we didn't find anything.
00:27:54.844 - 00:27:56.868, Speaker A: We started looking at other code bases.
00:27:56.996 - 00:28:03.140, Speaker B: Maybe we can find a blockchain specific sink instead of something that's universal in the cosmos.
00:28:03.172 - 00:28:08.364, Speaker A: SDK. And while doing this, we still couldn't find anything.
00:28:08.404 - 00:28:09.704, Speaker B: But I did notice something.
00:28:10.164 - 00:28:12.876, Speaker A: People were using Sprintf to put data.
00:28:12.940 - 00:28:15.524, Speaker B: Directly into this, into the description, and.
00:28:15.604 - 00:28:17.900, Speaker A: That would have thrown me off because.
00:28:18.012 - 00:28:22.516, Speaker B: I would have saw the commas like, oh, it's not the first parameter, I'm.
00:28:22.540 - 00:28:27.284, Speaker A: Going to move on. And then finally, after a week or.
00:28:27.324 - 00:28:34.224, Speaker B: Week and a half of looking for print syncs, we finally found one. And this doesn't look like it's in the description, but.
00:28:36.364 - 00:28:38.100, Speaker A: The sprintf is actually.
00:28:38.172 - 00:28:39.460, Speaker B: What has the key value.
00:28:39.572 - 00:28:47.044, Speaker A: And this sprintf is the first thing that is in the dot info, though. That means that we have our print.
00:28:47.084 - 00:28:53.596, Speaker B: Sync in the description part of the logger, which means that we can output strings that aren't going to be quote escaped.
00:28:53.660 - 00:28:58.104, Speaker D: Max, can you please explain what is a print sync?
00:29:00.304 - 00:29:06.044, Speaker A: Yeah, so what I mean by print sync is so far we, I can go back.
00:29:10.704 - 00:29:12.644, Speaker C: I don't have any good slides for that. Sorry.
00:29:14.784 - 00:29:24.284, Speaker A: Right now we have, we know that if we can get something printed, we have code execution. Right? Right.
00:29:25.704 - 00:29:37.134, Speaker B: If we can print something, we can get code execution. So I'm just trying to find a way to get it printed. That's what I mean by print sync. So a sink is like the ending.
00:29:38.154 - 00:29:39.774, Speaker A: Portion that you want to find.
00:29:41.314 - 00:29:41.714, Speaker C: Yeah.
00:29:41.754 - 00:29:45.234, Speaker A: Good question, though. We found our print sync now, and.
00:29:45.274 - 00:29:47.562, Speaker B: This print sync is so much better.
00:29:47.738 - 00:30:12.258, Speaker A: Than anything we ever could imagine. There's no input validation on it. This functionality is within the parameter change proposal functionality, and the key values can be arbitrary things means we can put curly braces, double quotes, whatever you want. Second, it's the default logging output. There's info debug warning, and this one.
00:30:12.266 - 00:30:15.654, Speaker B: Is in the dot info, which is in the default visibility of the logger.
00:30:16.354 - 00:30:19.002, Speaker A: Finally, anybody can call this.
00:30:19.178 - 00:30:21.338, Speaker B: And it's in every single Cosmos SDK.
00:30:21.386 - 00:30:24.384, Speaker A: Blockchain, particularly in the Param module.
00:30:24.544 - 00:30:32.444, Speaker B: We have a universal way to trigger this bug on any blockchain if they're using the vulnerable Cosmo visor software, which is pretty cool.
00:30:33.184 - 00:30:37.224, Speaker A: So I've explained the details, now I'm going to how the bug works.
00:30:37.304 - 00:30:42.744, Speaker B: Now I'll show you guys the actual exploit. Right here we have it, the actual parameter change proposal.
00:30:42.784 - 00:30:45.872, Speaker A: It's just a JSON blob, and we.
00:30:45.888 - 00:30:53.988, Speaker B: Can inject our data into the key or the value of this proposal. The payload here is really messy.
00:30:54.116 - 00:30:56.460, Speaker A: That is where you'd actually put your exploit at.
00:30:56.652 - 00:30:58.836, Speaker B: I've just made it look nicer so.
00:30:58.860 - 00:31:01.412, Speaker A: It'S easier to read. But I'll show you guys what an.
00:31:01.428 - 00:31:02.900, Speaker B: Actual one looks like in a minute.
00:31:03.052 - 00:31:05.492, Speaker A: So here we have the chain name.
00:31:05.548 - 00:31:08.772, Speaker B: The height, which doesn't really matter. The important thing, though, is that we.
00:31:08.788 - 00:31:11.852, Speaker A: Can get it to download remotely from.
00:31:11.948 - 00:31:13.956, Speaker B: An attacker control location.
00:31:14.140 - 00:31:16.044, Speaker A: And this will literally swap out the.
00:31:16.084 - 00:31:26.136, Speaker B: Cosmos SDK application binary once it downloads. So I had my Cosmos SDK blockchain.
00:31:26.160 - 00:31:28.664, Speaker A: Of course, Desmo set up.
00:31:28.824 - 00:31:32.240, Speaker B: I submitted the call and poof, code.
00:31:32.272 - 00:31:36.604, Speaker A: Execution, but of course I have a demo. So on the left side here.
00:31:39.224 - 00:31:39.512, Speaker C: We.
00:31:39.528 - 00:32:00.964, Speaker B: Have the terminal, which is where we've run the exploit from. On the right side, we have the node that we're be doing this for. So first I'm looking at my exploit, and we're just showing that we're calling the gov parameter change for legacy proposal. And then I have my malicious Json in there. The JSon is actually the magic set.
00:32:01.264 - 00:32:03.184, Speaker A: And you can see my very ugly.
00:32:03.224 - 00:32:06.232, Speaker B: Looking proposal, where we have the upgrade.
00:32:06.288 - 00:32:07.360, Speaker A: Which is at the beginning of the.
00:32:07.392 - 00:32:08.872, Speaker B: String, and then after that we have.
00:32:08.888 - 00:32:12.236, Speaker A: Our jSon, and most importantly, within that.
00:32:12.260 - 00:32:14.044, Speaker B: Json is our link.
00:32:14.204 - 00:32:16.356, Speaker A: So the Cosmos ck, sorry.
00:32:16.380 - 00:32:18.748, Speaker B: The cosmovisor will see this upgrade in.
00:32:18.756 - 00:32:30.148, Speaker A: The logs, even though it actually wasn't sent. And this is the trick that we're employing here. So I submit my exploit and on.
00:32:30.156 - 00:32:34.492, Speaker B: The right side, all of a sudden the screen goes black and we have some other text on the screen.
00:32:34.668 - 00:32:41.228, Speaker A: This is because you can see my log entry that has triggered this upgrade.
00:32:41.356 - 00:32:46.052, Speaker B: And then I just outputted my own stuff via bash and told it to exit.
00:32:46.148 - 00:32:49.024, Speaker D: It's really cool, man. That's really, really cool, bro.
00:32:50.524 - 00:32:51.180, Speaker C: Thank you.
00:32:51.252 - 00:32:57.184, Speaker D: It seemed like, it seems like they fuck it up bad, right? With, with reading from standard out, right?
00:32:57.884 - 00:33:00.524, Speaker A: Yeah, yeah. So they did.
00:33:00.604 - 00:33:11.774, Speaker B: But I think it's. I've given credit where credits do. This was actually found before I could find it by a developer who just redesigned the whole thing.
00:33:11.854 - 00:33:12.254, Speaker D: I see.
00:33:12.294 - 00:33:17.158, Speaker B: I was accidentally looking at a older version of this. But if you guys have ever heard.
00:33:17.166 - 00:33:20.302, Speaker A: Of the Android problem where there's so many.
00:33:20.398 - 00:33:30.646, Speaker B: So the Android problem is that like Qualcomm and all these different companies will actually call is a bad example. I said that all these different companies.
00:33:30.710 - 00:33:34.034, Speaker A: Will fork the Android kernel and they keep forking.
00:33:34.074 - 00:33:38.554, Speaker B: They keep forking it. But what happens when there's a vulnerability in the base Android kernel?
00:33:38.674 - 00:33:40.586, Speaker A: You have to backport it, but that's.
00:33:40.650 - 00:33:41.978, Speaker B: Really difficult to do.
00:33:42.106 - 00:33:46.506, Speaker A: So there's a ton of different forks to the Cosmos SDK, and some of.
00:33:46.530 - 00:33:48.978, Speaker B: Them are going to be using the cosmovisor software.
00:33:49.106 - 00:33:51.050, Speaker A: And there was no security release when.
00:33:51.082 - 00:33:56.594, Speaker B: This change was made. There was just a, hey, I don't like this design, so I'm going to redesign it.
00:33:56.714 - 00:33:57.922, Speaker A: And no one ever written a proof.
00:33:57.938 - 00:34:17.194, Speaker B: Of concept for it before. So we individually rediscovered this bug and we actually did get paid out for it. We got paid out for both the bugs that I talked about, which I was a little surprised by for the second bug because we realized that it already been patched in the newest version. But the Cosmos SDK bug bounty people.
00:34:17.234 - 00:34:19.098, Speaker A: Are super nice, bro.
00:34:19.146 - 00:34:45.810, Speaker D: Congratulations. This shows a lot of experience from your park. I mean, especially a nice. And one, this really sounds like one of those darknet stories episodes. And it's really nice the way you. Something that called really my attention there was when you were saying that you were testing the print sinks for several days. So you guys actually sat through these, took a look around, see if there's any other system that could be compromised, and you found it in the end.
00:34:45.810 - 00:34:46.962, Speaker D: So this is really cool.
00:34:47.058 - 00:34:48.690, Speaker A: Yeah, yeah, yeah.
00:34:48.722 - 00:34:49.614, Speaker B: Absolutely.
00:34:51.194 - 00:34:51.546, Speaker C: Yeah.
00:34:51.570 - 00:34:53.290, Speaker A: So I got some takeaways from this.
00:34:53.482 - 00:34:55.629, Speaker B: First, failing fast is important.
00:34:55.821 - 00:34:57.893, Speaker A: If you don't want to spend hours.
00:34:57.933 - 00:35:18.993, Speaker B: Upon hours working on something. If you can disprove it really fast, you want to make sure you're using your time effectively. Don't be afraid to go for esoteric knowledge. The COS SDK stuff is borderline esoteric, but understanding the print sync in depth is really important to exploit this. But it is really weird and non standard knowledge.
00:35:19.674 - 00:35:20.934, Speaker A: Sometimes you need that.
00:35:21.714 - 00:35:23.490, Speaker B: I didn't really mention this, but good.
00:35:23.562 - 00:35:26.418, Speaker A: Reports and pocs pay off with this.
00:35:26.506 - 00:35:33.002, Speaker B: I wrote a test for the first bug. I wrote a very comprehensive test for the Cosmos SDK.
00:35:33.138 - 00:35:34.722, Speaker A: So they just like, they know the.
00:35:34.738 - 00:35:36.442, Speaker B: Bugs there and they just can't reject it.
00:35:36.538 - 00:35:37.970, Speaker A: And then for the second bug, we.
00:35:38.002 - 00:35:42.066, Speaker B: Had a dockerized container that had all.
00:35:42.090 - 00:35:44.322, Speaker A: Of the stuff just set up.
00:35:44.378 - 00:35:49.294, Speaker B: They just had to run a script and it started the chain and ran the exploit for them.
00:35:50.714 - 00:35:54.178, Speaker A: The final thing though is there's not just smart contracts.
00:35:54.266 - 00:36:01.754, Speaker B: We have to worry about the entire stack. Like, there are vulnerabilities within the infrastructure of the blockchains as well. And I feel like there needs to.
00:36:01.754 - 00:36:08.734, Speaker A: Be more people looking at that stuff. So that's my presentation. Thanks for hopping on.
00:36:09.634 - 00:36:19.450, Speaker B: I'm going to post a couple of links for the two bugs because I have a blog post about the RCE bug and then I have a hackerone report that's public for that as well.
00:36:19.522 - 00:36:38.414, Speaker D: For the second bug brother, thank you so much. This was really, really insightful. This will be, you know, I'm pretty sure people will love this video. I'm calling everybody now if you guys have questions or want to ask anything. Max is a really experienced researcher, so he could give you a few useful tips. Guys.
00:36:42.474 - 00:36:50.498, Speaker B: I'm not super experienced in the blockchain space. I found some bugs. I'm getting used to it. But I've been doing security stuff for a while. Some of the stuff transitions, luckily.
00:36:50.626 - 00:36:50.930, Speaker C: Yeah.
00:36:50.962 - 00:37:04.234, Speaker D: I mean, from my point of view, web3 security is much more complicated. So, guys, just, you know, for you guys, I think it's easier to dive into web3. I'm going to stop the recording right now.
