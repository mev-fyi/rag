# Use an official lightweight Python image.
FROM python:3.10

# Set the working directory in the container.
WORKDIR /app

# Copy the requirements file and install Python dependencies.
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application source code to the container.
COPY src ./src

# Create the datasets directory
RUN mkdir -p ./datasets/evaluation_data

# Copy the .storage directory to the container
COPY .storage ./.storage

# Install required packages to add Google Cloud SDK repository
RUN apt-get update -y && apt-get install -y --no-install-recommends \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release

# Add the Google Cloud SDK distribution URI as a package source
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

# Import the Google Cloud public key
RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

# Update the package list and install Google Cloud SDK
RUN apt-get update -y && apt-get install -y --no-install-recommends \
    google-cloud-sdk

# Set PYTHONPATH to include the directory where your app is located.
ENV PYTHONPATH "${PYTHONPATH}:/app"

# Environment variable to specify the Google Cloud project
ENV GOOGLE_CLOUD_PROJECT=mev-fyi
ENV ENVIRONMENT=LOCAL

# At runtime, your application script should be responsible for using ADC
# to authenticate and access Google Secrets Manager or other Google Cloud services.
CMD ["python", "/app/src/Llama_index_sandbox/twitter_bot_app.py", "2>&1", "|", "tee", "/app/app.log"]